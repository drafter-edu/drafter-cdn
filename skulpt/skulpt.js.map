{
  "version": 3,
  "sources": ["../src/util.js", "../node_modules/strftime/strftime.js", "../node_modules/jsbi/dist/jsbi-umd.js", "../support/polyfills/JSBI.js", "../support/polyfills/es6.js", "../node_modules/setimmediate/setImmediate.js", "../src/assert-dev.js", "../src/env.js", "../src/type.js", "../src/generic.js", "../src/check.js", "../src/abstract.js", "../src/object.js", "../src/slotdefs.js", "../src/descr.js", "../src/sk_method.js", "../src/nonetype.js", "../src/formatting.js", "../src/str.js", "../src/function.js", "../src/builtin.js", "../src/errors.js", "../src/method.js", "../src/misceval.js", "../src/simple_iterators.js", "../src/list.js", "../node_modules/fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js", "../src/bytes.js", "../src/tuple.js", "../src/dict.js", "../src/dictviews.js", "../src/mappingproxy.js", "../src/property_class_static.js", "../src/int.js", "../src/bool.js", "../src/float.js", "../src/complex.js", "../src/slice.js", "../src/set.js", "../src/print.js", "../src/module.js", "../src/structseq.js", "../src/generator.js", "../src/file.js", "../src/ffi.js", "../src/range.js", "../src/enumerate.js", "../src/filter.js", "../src/map.js", "../src/reversed.js", "../src/zip.js", "../src/token.js", "../support/polyfills/Unicode.js", "../src/tokenize.js", "../gen/parse_tables.js", "../src/parser.js", "../gen/astnodes.js", "../src/ast.js", "../src/symtable.js", "../src/compile.js", "../src/import.js", "../src/timsort.js", "../src/super.js", "../src/generic_alias.js", "../src/builtindict.js", "../src/constants.js", "../src/internalpython.js", "../src/main.js"],
  "sourcesContent": ["// Global Sk object\nvar Sk = {}; // jshint ignore:line\n\nSk.build = {\n    githash: GITHASH,\n    date: BUILDDATE,\n};\n\n/**\n * Global object no matter where we're running\n */\nSk.global =\n    typeof global !== \"undefined\"\n        ? global // jshint ignore:line\n        : typeof self !== \"undefined\"\n          ? self // jshint ignore:line\n          : typeof window !== \"undefined\"\n            ? window // jshint ignore:line\n            : {};\n\n/**\n * Export \"object\" to global namespace as \"name\".\n *\n * @param {string} name name to export the object to\n * @param {*} object object to export\n */\nSk.exportSymbol = function (name, object) {\n    var parts = name.split(\".\");\n    var curobj = Sk.global;\n    var part, idx;\n\n    for (idx = 0; idx < parts.length - 1; idx++) {\n        part = parts[idx];\n\n        if (curobj.hasOwnProperty(part)) {\n            curobj = curobj[part];\n        } else {\n            curobj = curobj[part] = {};\n        }\n    }\n\n    if (typeof object !== \"undefined\") {\n        part = parts[idx];\n        curobj[part] = object;\n    }\n};\n\nSk.isArrayLike = function (object) {\n    if (object instanceof Array || (object && object.length && typeof object.length == \"number\")) {\n        return true;\n    }\n    return false;\n};\n\nSk.js_beautify = function (x) {\n    return x;\n};\n\nSk.exportSymbol(\"Sk\", Sk);\nSk.exportSymbol(\"Sk.global\", Sk.global);\nSk.exportSymbol(\"Sk.build\", Sk.build);\nSk.exportSymbol(\"Sk.exportSymbol\", Sk.exportSymbol);\nSk.exportSymbol(\"Sk.isArrayLike\", Sk.isArrayLike);\nSk.exportSymbol(\"Sk.js_beautify\", Sk.js_beautify);\n", "//\n// strftime\n// github.com/samsonjs/strftime\n// @_sjs\n//\n// Copyright 2010 - 2016 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n    var Locales = {\n        de_DE: {\n            days: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],\n            shortDays: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\n            months: ['Januar', 'Februar', 'M\u00E4rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],\n            shortMonths: ['Jan', 'Feb', 'M\u00E4r', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d.%m.%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        en_CA: {\n            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ],\n            shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            ordinalSuffixes: [\n                'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'st'\n            ],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d/%m/%y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%r',\n                x: '%D'\n            }\n        },\n\n        en_US: {\n            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ],\n            shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            ordinalSuffixes: [\n                'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th',\n                'st'\n            ],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%m/%d/%y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%r',\n                x: '%D'\n            }\n        },\n\n        es_MX: {\n            days: ['domingo', 'lunes', 'martes', 'mi\u00E9rcoles', 'jueves', 'viernes', 's\u00E1bado'],\n            shortDays: ['dom', 'lun', 'mar', 'mi\u00E9', 'jue', 'vie', 's\u00E1b'],\n            months: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre',' diciembre'],\n            shortMonths: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d/%m/%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        fr_FR: {\n            days: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],\n            shortDays: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],\n            months: ['janvier', 'f\u00E9vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao\u00FBt', 'septembre', 'octobre', 'novembre', 'd\u00E9cembre'],\n            shortMonths: ['janv.', 'f\u00E9vr.', 'mars', 'avril', 'mai', 'juin', 'juil.', 'ao\u00FBt', 'sept.', 'oct.', 'nov.', 'd\u00E9c.'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d/%m/%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        it_IT: {\n            days: ['domenica', 'luned\u00EC', 'marted\u00EC', 'mercoled\u00EC', 'gioved\u00EC', 'venerd\u00EC', 'sabato'],\n            shortDays: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],\n            months: ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'],\n            shortMonths: ['pr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d/%m/%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        nl_NL: {\n            days: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'],\n            shortDays: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],\n            months: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december'],\n            shortMonths: ['jan', 'feb', 'mrt', 'apr', 'mei', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d-%m-%y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        pt_BR: {\n            days: ['domingo', 'segunda', 'ter\u00E7a', 'quarta', 'quinta', 'sexta', 's\u00E1bado'],\n            shortDays: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S\u00E1b'],\n            months: ['janeiro', 'fevereiro', 'mar\u00E7o', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'],\n            shortMonths: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d-%m-%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        ru_RU: {\n            days: ['\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435', '\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A', '\u0412\u0442\u043E\u0440\u043D\u0438\u043A', '\u0421\u0440\u0435\u0434\u0430', '\u0427\u0435\u0442\u0432\u0435\u0440\u0433', '\u041F\u044F\u0442\u043D\u0438\u0446\u0430', '\u0421\u0443\u0431\u0431\u043E\u0442\u0430'],\n            shortDays: ['\u0412\u0441', '\u041F\u043D', '\u0412\u0442', '\u0421\u0440', '\u0427\u0442', '\u041F\u0442', '\u0421\u0431'],\n            months: ['\u042F\u043D\u0432\u0430\u0440\u044C', '\u0424\u0435\u0432\u0440\u0430\u043B\u044C', '\u041C\u0430\u0440\u0442', '\u0410\u043F\u0440\u0435\u043B\u044C', '\u041C\u0430\u0439', '\u0418\u044E\u043D\u044C', '\u0418\u044E\u043B\u044C', '\u0410\u0432\u0433\u0443\u0441\u0442', '\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C', '\u041E\u043A\u0442\u044F\u0431\u0440\u044C', '\u041D\u043E\u044F\u0431\u0440\u044C', '\u0414\u0435\u043A\u0430\u0431\u0440\u044C'],\n            shortMonths: ['\u044F\u043D\u0432', '\u0444\u0435\u0432', '\u043C\u0430\u0440', '\u0430\u043F\u0440', '\u043C\u0430\u0439', '\u0438\u044E\u043D', '\u0438\u044E\u043B', '\u0430\u0432\u0433', '\u0441\u0435\u043D', '\u043E\u043A\u0442', '\u043D\u043E\u044F', '\u0434\u0435\u043A'],\n            AM: 'AM',\n            PM: 'PM',\n            am: 'am',\n            pm: 'pm',\n            formats: {\n                c: '%a %d %b %Y %X',\n                D: '%d.%m.%y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        tr_TR: {\n            days: ['Pazar', 'Pazartesi', 'Sal\u0131','\u00C7ar\u015Famba', 'Per\u015Fembe', 'Cuma', 'Cumartesi'],\n            shortDays: ['Paz', 'Pzt', 'Sal', '\u00C7r\u015F', 'Pr\u015F', 'Cum', 'Cts'],\n            months: ['Ocak', '\u015Eubat', 'Mart', 'Nisan', 'May\u0131s', 'Haziran', 'Temmuz', 'A\u011Fustos', 'Eyl\u00FCl', 'Ekim', 'Kas\u0131m', 'Aral\u0131k'],\n            shortMonths: ['Oca', '\u015Eub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'A\u011Fu', 'Eyl', 'Eki', 'Kas', 'Ara'],\n            AM: '\u00D6\u00D6',\n            PM: '\u00D6S',\n            am: '\u00D6\u00D6',\n            pm: '\u00D6S',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d-%m-%Y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%T',\n                x: '%D'\n            }\n        },\n\n        // By michaeljayt<michaeljayt@gmail.com>\n        // https://github.com/michaeljayt/strftime/commit/bcb4c12743811d51e568175aa7bff3fd2a77cef3\n        zh_CN: {\n            days: ['\u661F\u671F\u65E5', '\u661F\u671F\u4E00', '\u661F\u671F\u4E8C', '\u661F\u671F\u4E09', '\u661F\u671F\u56DB', '\u661F\u671F\u4E94', '\u661F\u671F\u516D'],\n            shortDays: ['\u65E5', '\u4E00', '\u4E8C', '\u4E09', '\u56DB', '\u4E94', '\u516D'],\n            months: ['\u4E00\u6708\u4EFD', '\u4E8C\u6708\u4EFD', '\u4E09\u6708\u4EFD', '\u56DB\u6708\u4EFD', '\u4E94\u6708\u4EFD', '\u516D\u6708\u4EFD', '\u4E03\u6708\u4EFD', '\u516B\u6708\u4EFD', '\u4E5D\u6708\u4EFD', '\u5341\u6708\u4EFD', '\u5341\u4E00\u6708\u4EFD', '\u5341\u4E8C\u6708\u4EFD'],\n            shortMonths: ['\u4E00\u6708', '\u4E8C\u6708', '\u4E09\u6708', '\u56DB\u6708', '\u4E94\u6708', '\u516D\u6708', '\u4E03\u6708', '\u516B\u6708', '\u4E5D\u6708', '\u5341\u6708', '\u5341\u4E00\u6708', '\u5341\u4E8C\u6708'],\n            AM: '\u4E0A\u5348',\n            PM: '\u4E0B\u5348',\n            am: '\u4E0A\u5348',\n            pm: '\u4E0B\u5348',\n            formats: {\n                c: '%a %d %b %Y %X %Z',\n                D: '%d/%m/%y',\n                F: '%Y-%m-%d',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                T: '%H:%M:%S',\n                v: '%e-%b-%Y',\n                X: '%r',\n                x: '%D'\n            }\n        }\n    };\n\n    var DefaultLocale = Locales['en_US'],\n        defaultStrftime = new Strftime(DefaultLocale, 0, false),\n        isCommonJS = typeof module !== 'undefined',\n        namespace;\n\n    // CommonJS / Node module\n    if (isCommonJS) {\n        namespace = module.exports = defaultStrftime;\n    }\n    // Browsers and other environments\n    else {\n        // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n        namespace = (function() { return this || (1,eval)('this'); }());\n        namespace.strftime = defaultStrftime;\n    }\n\n    // Polyfill Date.now for old browsers.\n    if (typeof Date.now !== 'function') {\n        Date.now = function() {\n          return +new Date();\n        };\n    }\n\n    function Strftime(locale, customTimezoneOffset, useUtcTimezone) {\n        var _locale = locale || DefaultLocale,\n            _customTimezoneOffset = customTimezoneOffset || 0,\n            _useUtcBasedDate = useUtcTimezone || false,\n\n            // we store unix timestamp value here to not create new Date() each iteration (each millisecond)\n            // Date.now() is 2 times faster than new Date()\n            // while millisecond precise is enough here\n            // this could be very helpful when strftime triggered a lot of times one by one\n            _cachedDateTimestamp = 0,\n            _cachedDate;\n\n        function _strftime(format, date) {\n            var timestamp;\n\n            if (!date) {\n                var currentTimestamp = Date.now();\n                if (currentTimestamp > _cachedDateTimestamp) {\n                    _cachedDateTimestamp = currentTimestamp;\n                    _cachedDate = new Date(_cachedDateTimestamp);\n\n                    timestamp = _cachedDateTimestamp;\n\n                    if (_useUtcBasedDate) {\n                        // how to avoid duplication of date instantiation for utc here?\n                        // we tied to getTimezoneOffset of the current date\n                        _cachedDate = new Date(_cachedDateTimestamp + getTimestampToUtcOffsetFor(_cachedDate) + _customTimezoneOffset);\n                    }\n                }\n                else {\n                  timestamp = _cachedDateTimestamp;\n                }\n                date = _cachedDate;\n            }\n            else {\n                timestamp = date.getTime();\n\n                if (_useUtcBasedDate) {\n                    var utcOffset = getTimestampToUtcOffsetFor(date);\n                    date = new Date(timestamp + utcOffset + _customTimezoneOffset);\n                    // If we've crossed a DST boundary with this calculation we need to\n                    // adjust the new date accordingly or it will be off by an hour in UTC.\n                    if (getTimestampToUtcOffsetFor(date) !== utcOffset) {\n                        var newUTCOffset = getTimestampToUtcOffsetFor(date);\n                        date = new Date(timestamp + newUTCOffset + _customTimezoneOffset);\n                    }\n                }\n            }\n\n            return _processFormat(format, date, _locale, timestamp);\n        }\n\n        function _processFormat(format, date, locale, timestamp) {\n            var resultString = '',\n                padding = null,\n                isInScope = false,\n                length = format.length,\n                extendedTZ = false;\n\n            for (var i = 0; i < length; i++) {\n\n                var currentCharCode = format.charCodeAt(i);\n\n                if (isInScope === true) {\n                    // '-'\n                    if (currentCharCode === 45) {\n                        padding = '';\n                        continue;\n                    }\n                    // '_'\n                    else if (currentCharCode === 95) {\n                        padding = ' ';\n                        continue;\n                    }\n                    // '0'\n                    else if (currentCharCode === 48) {\n                        padding = '0';\n                        continue;\n                    }\n                    // ':'\n                    else if (currentCharCode === 58) {\n                      if (extendedTZ) {\n                          warn(\"[WARNING] detected use of unsupported %:: or %::: modifiers to strftime\");\n                      }\n                      extendedTZ = true;\n                      continue;\n                    }\n\n                    switch (currentCharCode) {\n\n                        // Examples for new Date(0) in GMT\n\n                        // '%'\n                        // case '%':\n                        case 37:\n                            resultString += '%';\n                            break;\n\n                        // 'Thursday'\n                        // case 'A':\n                        case 65:\n                            resultString += locale.days[date.getDay()];\n                            break;\n\n                        // 'January'\n                        // case 'B':\n                        case 66:\n                            resultString += locale.months[date.getMonth()];\n                            break;\n\n                        // '19'\n                        // case 'C':\n                        case 67:\n                            resultString += padTill2(Math.floor(date.getFullYear() / 100), padding);\n                            break;\n\n                        // '01/01/70'\n                        // case 'D':\n                        case 68:\n                            resultString += _processFormat(locale.formats.D, date, locale, timestamp);\n                            break;\n\n                        // '1970-01-01'\n                        // case 'F':\n                        case 70:\n                            resultString += _processFormat(locale.formats.F, date, locale, timestamp);\n                            break;\n\n                        // '00'\n                        // case 'H':\n                        case 72:\n                            resultString += padTill2(date.getHours(), padding);\n                            break;\n\n                        // '12'\n                        // case 'I':\n                        case 73:\n                            resultString += padTill2(hours12(date.getHours()), padding);\n                            break;\n\n                        // '000'\n                        // case 'L':\n                        case 76:\n                            resultString += padTill3(Math.floor(timestamp % 1000));\n                            break;\n\n                        // '00'\n                        // case 'M':\n                        case 77:\n                            resultString += padTill2(date.getMinutes(), padding);\n                            break;\n\n                        // 'am'\n                        // case 'P':\n                        case 80:\n                            resultString += date.getHours() < 12 ? locale.am : locale.pm;\n                            break;\n\n                        // '00:00'\n                        // case 'R':\n                        case 82:\n                            resultString += _processFormat(locale.formats.R, date, locale, timestamp);\n                            break;\n\n                        // '00'\n                        // case 'S':\n                        case 83:\n                            resultString += padTill2(date.getSeconds(), padding);\n                            break;\n\n                        // '00:00:00'\n                        // case 'T':\n                        case 84:\n                            resultString += _processFormat(locale.formats.T, date, locale, timestamp);\n                            break;\n\n                        // '00'\n                        // case 'U':\n                        case 85:\n                            resultString += padTill2(weekNumber(date, 'sunday'), padding);\n                            break;\n\n                        // '00'\n                        // case 'W':\n                        case 87:\n                            resultString += padTill2(weekNumber(date, 'monday'), padding);\n                            break;\n\n                        // '16:00:00'\n                        // case 'X':\n                        case 88:\n                            resultString += _processFormat(locale.formats.X, date, locale, timestamp);\n                            break;\n\n                        // '1970'\n                        // case 'Y':\n                        case 89:\n                            resultString += date.getFullYear();\n                            break;\n\n                        // 'GMT'\n                        // case 'Z':\n                        case 90:\n                            if (_useUtcBasedDate && _customTimezoneOffset === 0) {\n                                resultString += \"GMT\";\n                            }\n                            else {\n                                // fixme optimize\n                                var tzString = date.toString().match(/\\(([\\w\\s]+)\\)/);\n                                resultString += tzString && tzString[1] || '';\n                            }\n                            break;\n\n                        // 'Thu'\n                        // case 'a':\n                        case 97:\n                            resultString += locale.shortDays[date.getDay()];\n                            break;\n\n                        // 'Jan'\n                        // case 'b':\n                        case 98:\n                            resultString += locale.shortMonths[date.getMonth()];\n                            break;\n\n                        // ''\n                        // case 'c':\n                        case 99:\n                            resultString += _processFormat(locale.formats.c, date, locale, timestamp);\n                            break;\n\n                        // '01'\n                        // case 'd':\n                        case 100:\n                            resultString += padTill2(date.getDate(), padding);\n                            break;\n\n                        // ' 1'\n                        // case 'e':\n                        case 101:\n                            resultString += padTill2(date.getDate(), padding == null ? ' ' : padding);\n                            break;\n\n                        // 'Jan'\n                        // case 'h':\n                        case 104:\n                            resultString += locale.shortMonths[date.getMonth()];\n                            break;\n\n                        // '000'\n                        // case 'j':\n                        case 106:\n                            var y = new Date(date.getFullYear(), 0, 1);\n                            var day = Math.ceil((date.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));\n                            resultString += padTill3(day);\n                            break;\n\n                        // ' 0'\n                        // case 'k':\n                        case 107:\n                            resultString += padTill2(date.getHours(), padding == null ? ' ' : padding);\n                            break;\n\n                        // '12'\n                        // case 'l':\n                        case 108:\n                            resultString += padTill2(hours12(date.getHours()), padding == null ? ' ' : padding);\n                            break;\n\n                        // '01'\n                        // case 'm':\n                        case 109:\n                            resultString += padTill2(date.getMonth() + 1, padding);\n                            break;\n\n                        // '\\n'\n                        // case 'n':\n                        case 110:\n                            resultString += '\\n';\n                            break;\n\n                        // '1st'\n                        // case 'o':\n                        case 111:\n                            // Try to use an ordinal suffix from the locale, but fall back to using the old\n                            // function for compatibility with old locales that lack them.\n                            var day = date.getDate();\n                            if (locale.ordinalSuffixes) {\n                                resultString += String(day) + (locale.ordinalSuffixes[day - 1] || ordinal(day));\n                            }\n                            else {\n                                resultString += String(day) + ordinal(day);\n                            }\n                            break;\n\n                        // 'AM'\n                        // case 'p':\n                        case 112:\n                            resultString += date.getHours() < 12 ? locale.AM : locale.PM;\n                            break;\n\n                        // '12:00:00 AM'\n                        // case 'r':\n                        case 114:\n                            resultString += _processFormat(locale.formats.r, date, locale, timestamp);\n                            break;\n\n                        // '0'\n                        // case 's':\n                        case 115:\n                            resultString += Math.floor(timestamp / 1000);\n                            break;\n\n                        // '\\t'\n                        // case 't':\n                        case 116:\n                            resultString += '\\t';\n                            break;\n\n                        // '4'\n                        // case 'u':\n                        case 117:\n                            var day = date.getDay();\n                            resultString += day === 0 ? 7 : day;\n                            break; // 1 - 7, Monday is first day of the week\n\n                        // ' 1-Jan-1970'\n                        // case 'v':\n                        case 118:\n                            resultString += _processFormat(locale.formats.v, date, locale, timestamp);\n                            break;\n\n                        // '4'\n                        // case 'w':\n                        case 119:\n                            resultString += date.getDay();\n                            break; // 0 - 6, Sunday is first day of the week\n\n                        // '12/31/69'\n                        // case 'x':\n                        case 120:\n                            resultString += _processFormat(locale.formats.x, date, locale, timestamp);\n                            break;\n\n                        // '70'\n                        // case 'y':\n                        case 121:\n                            resultString += ('' + date.getFullYear()).slice(2);\n                            break;\n\n                        // '+0000'\n                        // case 'z':\n                        case 122:\n                            if (_useUtcBasedDate && _customTimezoneOffset === 0) {\n                                resultString += extendedTZ ? \"+00:00\" : \"+0000\";\n                            }\n                            else {\n                                var off;\n                                if (_customTimezoneOffset !== 0) {\n                                    off = _customTimezoneOffset / (60 * 1000);\n                                }\n                                else {\n                                    off = -date.getTimezoneOffset();\n                                }\n                                var sign = off < 0 ? '-' : '+';\n                                var sep = extendedTZ ? ':' : '';\n                                var hours = Math.floor(Math.abs(off / 60));\n                                var mins = Math.abs(off % 60);\n                                resultString += sign + padTill2(hours) + sep + padTill2(mins);\n                            }\n                            break;\n\n                        default:\n                            if (isInScope) {\n                                resultString += '%';\n                            }\n                            resultString += format[i];\n                            break;\n                    }\n\n                    padding = null;\n                    isInScope = false;\n                    continue;\n                }\n\n                // '%'\n                if (currentCharCode === 37) {\n                    isInScope = true;\n                    continue;\n                }\n\n                resultString += format[i];\n            }\n\n            return resultString;\n        }\n\n        var strftime = _strftime;\n\n        strftime.localize = function(locale) {\n            return new Strftime(locale || _locale, _customTimezoneOffset, _useUtcBasedDate);\n        };\n\n        strftime.localizeByIdentifier = function(localeIdentifier) {\n            var locale = Locales[localeIdentifier];\n            if (!locale) {\n                warn('[WARNING] No locale found with identifier \"' + localeIdentifier + '\".');\n                return strftime;\n            }\n            return strftime.localize(locale);\n        };\n\n        strftime.timezone = function(timezone) {\n            var customTimezoneOffset = _customTimezoneOffset;\n            var useUtcBasedDate = _useUtcBasedDate;\n\n            var timezoneType = typeof timezone;\n            if (timezoneType === 'number' || timezoneType === 'string') {\n                useUtcBasedDate = true;\n\n                // ISO 8601 format timezone string, [-+]HHMM\n                if (timezoneType === 'string') {\n                    var sign = timezone[0] === '-' ? -1 : 1,\n                        hours = parseInt(timezone.slice(1, 3), 10),\n                        minutes = parseInt(timezone.slice(3, 5), 10);\n\n                    customTimezoneOffset = sign * ((60 * hours) + minutes) * 60 * 1000;\n                    // in minutes: 420\n                }\n                else if (timezoneType === 'number') {\n                    customTimezoneOffset = timezone * 60 * 1000;\n                }\n            }\n\n            return new Strftime(_locale, customTimezoneOffset, useUtcBasedDate);\n        };\n\n        strftime.utc = function() {\n            return new Strftime(_locale, _customTimezoneOffset, true);\n        };\n\n        return strftime;\n    }\n\n    function padTill2(numberToPad, paddingChar) {\n        if (paddingChar === '' || numberToPad > 9) {\n            return numberToPad;\n        }\n        if (paddingChar == null) {\n            paddingChar = '0';\n        }\n        return paddingChar + numberToPad;\n    }\n\n    function padTill3(numberToPad) {\n        if (numberToPad > 99) {\n            return numberToPad;\n        }\n        if (numberToPad > 9) {\n            return '0' + numberToPad;\n        }\n        return '00' + numberToPad;\n    }\n\n    function hours12(hour) {\n        if (hour === 0) {\n            return 12;\n        }\n        else if (hour > 12) {\n            return hour - 12;\n        }\n        return hour;\n    }\n\n    // firstWeekday: 'sunday' or 'monday', default is 'sunday'\n    //\n    // Pilfered & ported from Ruby's strftime implementation.\n    function weekNumber(date, firstWeekday) {\n        firstWeekday = firstWeekday || 'sunday';\n\n        // This works by shifting the weekday back by one day if we\n        // are treating Monday as the first day of the week.\n        var weekday = date.getDay();\n        if (firstWeekday === 'monday') {\n            if (weekday === 0) // Sunday\n                weekday = 6;\n            else\n                weekday--;\n        }\n\n        var firstDayOfYearUtc = Date.UTC(date.getFullYear(), 0, 1),\n            dateUtc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()),\n            yday = Math.floor((dateUtc - firstDayOfYearUtc) / 86400000),\n            weekNum = (yday + 7 - weekday) / 7;\n\n        return Math.floor(weekNum);\n    }\n\n    // Get the ordinal suffix for a number: st, nd, rd, or th\n    function ordinal(number) {\n        var i = number % 10;\n        var ii = number % 100;\n\n        if ((ii >= 11 && ii <= 13) || i === 0 || i >= 4) {\n            return 'th';\n        }\n        switch (i) {\n            case 1: return 'st';\n            case 2: return 'nd';\n            case 3: return 'rd';\n        }\n    }\n\n    function getTimestampToUtcOffsetFor(date) {\n        return (date.getTimezoneOffset() || 0) * 60000;\n    }\n\n    function warn(message) {\n        if (typeof console !== 'undefined' && typeof console.warn == 'function') {\n            console.warn(message)\n        }\n    }\n\n}());\n", "(function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=e||self,e.JSBI=t())})(this,function(){'use strict';function e(t){\"@babel/helpers - typeof\";return e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},e(t)}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function i(e,t){for(var _,n=0;n<t.length;n++)_=t[n],_.enumerable=_.enumerable||!1,_.configurable=!0,\"value\"in _&&(_.writable=!0),Object.defineProperty(e,_.key,_)}function _(e,t,_){return t&&i(e.prototype,t),_&&i(e,_),e}function n(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function a(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}function s(){return s=a()?Reflect.construct:function(e,t,i){var _=[null];_.push.apply(_,t);var n=Function.bind.apply(e,_),g=new n;return i&&l(g,i.prototype),g},s.apply(null,arguments)}function u(e){return-1!==Function.toString.call(e).indexOf(\"[native code]\")}function r(e){var t=\"function\"==typeof Map?new Map:void 0;return r=function(e){function i(){return s(e,arguments,g(this).constructor)}if(null===e||!u(e))return e;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(\"undefined\"!=typeof t){if(t.has(e))return t.get(e);t.set(e,i)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),l(i,e)},r(e)}function d(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function h(e,t){return t&&(\"object\"==typeof t||\"function\"==typeof t)?t:d(e)}function b(e){var t=a();return function(){var i,_=g(e);if(t){var n=g(this).constructor;i=Reflect.construct(_,arguments,n)}else i=_.apply(this,arguments);return h(this,i)}}function m(e,t){if(e){if(\"string\"==typeof e)return c(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===i&&e.constructor&&(i=e.constructor.name),\"Map\"===i||\"Set\"===i?Array.from(e):\"Arguments\"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?c(e,t):void 0}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var _=0,n=Array(t);_<t;_++)n[_]=e[_];return n}function v(e,t){var _;if(\"undefined\"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(_=m(e))||t&&e&&\"number\"==typeof e.length){_&&(e=_);var n=0,g=function(){};return{s:g,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(t){throw t},f:g}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var l,a=!0,s=!1;return{s:function(){_=e[Symbol.iterator]()},n:function(){var e=_.next();return a=e.done,e},e:function(t){s=!0,l=t},f:function(){try{a||null==_.return||_.return()}finally{if(s)throw l}}}}var f=function(i){var o=Math.abs,l=Math.max,a=Math.imul,s=Math.clz32;function g(e,i){var _;if(t(this,g),e>g.__kMaxLength)throw new RangeError(\"Maximum BigInt size exceeded\");return _=u.call(this,e),_.sign=i,_}n(g,i);var u=b(g);return _(g,[{key:\"toDebugString\",value:function(){var e,t=[\"BigInt[\"],i=v(this);try{for(i.s();!(e=i.n()).done;){var _=e.value;t.push((_?(_>>>0).toString(16):_)+\", \")}}catch(e){i.e(e)}finally{i.f()}return t.push(\"]\"),t.join(\"\")}},{key:\"toString\",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10;if(2>e||36<e)throw new RangeError(\"toString() radix argument must be between 2 and 36\");return 0===this.length?\"0\":0==(e&e-1)?g.__toStringBasePowerOfTwo(this,e):g.__toStringGeneric(this,e,!1)}},{key:\"__copy\",value:function(){for(var e=new g(this.length,this.sign),t=0;t<this.length;t++)e[t]=this[t];return e}},{key:\"__trim\",value:function(){for(var e=this.length,t=this[e-1];0===t;)e--,t=this[e-1],this.pop();return 0===e&&(this.sign=!1),this}},{key:\"__initializeDigits\",value:function(){for(var e=0;e<this.length;e++)this[e]=0}},{key:\"__clzmsd\",value:function(){return s(this[this.length-1])}},{key:\"__inplaceMultiplyAdd\",value:function(e,t,_){_>this.length&&(_=this.length);for(var n=65535&e,g=e>>>16,o=0,l=65535&t,s=t>>>16,u=0;u<_;u++){var r=this.__digit(u),d=65535&r,h=r>>>16,b=a(d,n),m=a(d,g),c=a(h,n),v=a(h,g),f=l+(65535&b),y=s+o+(f>>>16)+(b>>>16)+(65535&m)+(65535&c);l=(m>>>16)+(c>>>16)+(65535&v)+(y>>>16),o=l>>>16,l&=65535,s=v>>>16;this.__setDigit(u,65535&f|y<<16)}if(0!==o||0!==l||0!==s)throw new Error(\"implementation bug\")}},{key:\"__inplaceAdd\",value:function(e,t,_){for(var n,g=0,o=0;o<_;o++)n=this.__halfDigit(t+o)+e.__halfDigit(o)+g,g=n>>>16,this.__setHalfDigit(t+o,n);return g}},{key:\"__inplaceSub\",value:function(e,t,_){var n=0;if(1&t){t>>=1;for(var g=this.__digit(t),o=65535&g,l=0;l<_-1>>>1;l++){var a=e.__digit(l),s=(g>>>16)-(65535&a)-n;n=1&s>>>16,this.__setDigit(t+l,s<<16|65535&o),g=this.__digit(t+l+1),o=(65535&g)-(a>>>16)-n,n=1&o>>>16}var u=e.__digit(l),r=(g>>>16)-(65535&u)-n;n=1&r>>>16,this.__setDigit(t+l,r<<16|65535&o);if(t+l+1>=this.length)throw new RangeError(\"out of bounds\");0==(1&_)&&(g=this.__digit(t+l+1),o=(65535&g)-(u>>>16)-n,n=1&o>>>16,this.__setDigit(t+e.length,4294901760&g|65535&o))}else{t>>=1;for(var d=0;d<e.length-1;d++){var h=this.__digit(t+d),b=e.__digit(d),m=(65535&h)-(65535&b)-n;n=1&m>>>16;var c=(h>>>16)-(b>>>16)-n;n=1&c>>>16,this.__setDigit(t+d,c<<16|65535&m)}var v=this.__digit(t+d),f=e.__digit(d),y=(65535&v)-(65535&f)-n;n=1&y>>>16;var k=0;0==(1&_)&&(k=(v>>>16)-(f>>>16)-n,n=1&k>>>16),this.__setDigit(t+d,k<<16|65535&y)}return n}},{key:\"__inplaceRightShift\",value:function(e){if(0!==e){for(var t,_=this.__digit(0)>>>e,n=this.length-1,g=0;g<n;g++)t=this.__digit(g+1),this.__setDigit(g,t<<32-e|_),_=t>>>e;this.__setDigit(n,_)}}},{key:\"__digit\",value:function(e){return this[e]}},{key:\"__unsignedDigit\",value:function(e){return this[e]>>>0}},{key:\"__setDigit\",value:function(e,t){this[e]=0|t}},{key:\"__setDigitGrow\",value:function(e,t){this[e]=0|t}},{key:\"__halfDigitLength\",value:function(){var e=this.length;return 65535>=this.__unsignedDigit(e-1)?2*e-1:2*e}},{key:\"__halfDigit\",value:function(e){return 65535&this[e>>>1]>>>((1&e)<<4)}},{key:\"__setHalfDigit\",value:function(e,t){var i=e>>>1,_=this.__digit(i),n=1&e?65535&_|t<<16:4294901760&_|65535&t;this.__setDigit(i,n)}}],[{key:\"BigInt\",value:function(t){var i=Math.floor,_=Number.isFinite;if(\"number\"==typeof t){if(0===t)return g.__zero();if((0|t)===t)return 0>t?g.__oneDigit(-t,!0):g.__oneDigit(t,!1);if(!_(t)||i(t)!==t)throw new RangeError(\"The number \"+t+\" cannot be converted to BigInt because it is not an integer\");return g.__fromDouble(t)}if(\"string\"==typeof t){var n=g.__fromString(t);if(null===n)throw new SyntaxError(\"Cannot convert \"+t+\" to a BigInt\");return n}if(\"boolean\"==typeof t)return!0===t?g.__oneDigit(1,!1):g.__zero();if(\"object\"===e(t)){if(t.constructor===g)return t;var o=g.__toPrimitive(t);return g.BigInt(o)}throw new TypeError(\"Cannot convert \"+t+\" to a BigInt\")}},{key:\"toNumber\",value:function(e){var t=e.length;if(0===t)return 0;if(1===t){var i=e.__unsignedDigit(0);return e.sign?-i:i}var _=e.__digit(t-1),n=s(_),o=32*t-n;if(1024<o)return e.sign?-Infinity:1/0;var l=o-1,a=_,u=t-1,r=n+1,d=32===r?0:a<<r;d>>>=12;var h=r-12,b=12<=r?0:a<<20+r,m=20+r;0<h&&0<u&&(u--,a=e.__digit(u),d|=a>>>32-h,b=a<<h,m=h),0<m&&0<u&&(u--,a=e.__digit(u),b|=a>>>32-m,m-=32);var c=g.__decideRounding(e,m,u,a);if((1===c||0===c&&1==(1&b))&&(b=b+1>>>0,0===b&&(d++,0!=d>>>20&&(d=0,l++,1023<l))))return e.sign?-Infinity:1/0;var v=e.sign?-2147483648:0;return l=l+1023<<20,g.__kBitConversionInts[1]=v|l|d,g.__kBitConversionInts[0]=b,g.__kBitConversionDouble[0]}},{key:\"unaryMinus\",value:function(e){if(0===e.length)return e;var t=e.__copy();return t.sign=!e.sign,t}},{key:\"bitwiseNot\",value:function(e){return e.sign?g.__absoluteSubOne(e).__trim():g.__absoluteAddOne(e,!0)}},{key:\"exponentiate\",value:function(e,t){if(t.sign)throw new RangeError(\"Exponent must be positive\");if(0===t.length)return g.__oneDigit(1,!1);if(0===e.length)return e;if(1===e.length&&1===e.__digit(0))return e.sign&&0==(1&t.__digit(0))?g.unaryMinus(e):e;if(1<t.length)throw new RangeError(\"BigInt too big\");var i=t.__unsignedDigit(0);if(1===i)return e;if(i>=g.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");if(1===e.length&&2===e.__digit(0)){var _=1+(i>>>5),n=e.sign&&0!=(1&i),o=new g(_,n);o.__initializeDigits();var l=1<<(31&i);return o.__setDigit(_-1,l),o}var a=null,s=e;for(0!=(1&i)&&(a=e),i>>=1;0!==i;i>>=1)s=g.multiply(s,s),0!=(1&i)&&(null===a?a=s:a=g.multiply(a,s));return a}},{key:\"multiply\",value:function(e,t){if(0===e.length)return e;if(0===t.length)return t;var _=e.length+t.length;32<=e.__clzmsd()+t.__clzmsd()&&_--;var n=new g(_,e.sign!==t.sign);n.__initializeDigits();for(var o=0;o<e.length;o++)g.__multiplyAccumulate(t,e.__digit(o),n,o);return n.__trim()}},{key:\"divide\",value:function(e,t){if(0===t.length)throw new RangeError(\"Division by zero\");if(0>g.__absoluteCompare(e,t))return g.__zero();var i,_=e.sign!==t.sign,n=t.__unsignedDigit(0);if(1===t.length&&65535>=n){if(1===n)return _===e.sign?e:g.unaryMinus(e);i=g.__absoluteDivSmall(e,n,null)}else i=g.__absoluteDivLarge(e,t,!0,!1);return i.sign=_,i.__trim()}},{key:\"remainder\",value:function e(t,i){if(0===i.length)throw new RangeError(\"Division by zero\");if(0>g.__absoluteCompare(t,i))return t;var _=i.__unsignedDigit(0);if(1===i.length&&65535>=_){if(1===_)return g.__zero();var n=g.__absoluteModSmall(t,_);return 0===n?g.__zero():g.__oneDigit(n,t.sign)}var e=g.__absoluteDivLarge(t,i,!1,!0);return e.sign=t.sign,e.__trim()}},{key:\"add\",value:function(e,t){var i=e.sign;return i===t.sign?g.__absoluteAdd(e,t,i):0<=g.__absoluteCompare(e,t)?g.__absoluteSub(e,t,i):g.__absoluteSub(t,e,!i)}},{key:\"subtract\",value:function(e,t){var i=e.sign;return i===t.sign?0<=g.__absoluteCompare(e,t)?g.__absoluteSub(e,t,i):g.__absoluteSub(t,e,!i):g.__absoluteAdd(e,t,i)}},{key:\"leftShift\",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?g.__rightShiftByAbsolute(e,t):g.__leftShiftByAbsolute(e,t)}},{key:\"signedRightShift\",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?g.__leftShiftByAbsolute(e,t):g.__rightShiftByAbsolute(e,t)}},{key:\"unsignedRightShift\",value:function(){throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\")}},{key:\"lessThan\",value:function(e,t){return 0>g.__compareToBigInt(e,t)}},{key:\"lessThanOrEqual\",value:function(e,t){return 0>=g.__compareToBigInt(e,t)}},{key:\"greaterThan\",value:function(e,t){return 0<g.__compareToBigInt(e,t)}},{key:\"greaterThanOrEqual\",value:function(e,t){return 0<=g.__compareToBigInt(e,t)}},{key:\"equal\",value:function(e,t){if(e.sign!==t.sign)return!1;if(e.length!==t.length)return!1;for(var _=0;_<e.length;_++)if(e.__digit(_)!==t.__digit(_))return!1;return!0}},{key:\"notEqual\",value:function(e,t){return!g.equal(e,t)}},{key:\"bitwiseAnd\",value:function(e,t){if(!e.sign&&!t.sign)return g.__absoluteAnd(e,t).__trim();if(e.sign&&t.sign){var i=l(e.length,t.length)+1,_=g.__absoluteSubOne(e,i),n=g.__absoluteSubOne(t);return _=g.__absoluteOr(_,n,_),g.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var o=[t,e];e=o[0],t=o[1]}return g.__absoluteAndNot(e,g.__absoluteSubOne(t)).__trim()}},{key:\"bitwiseXor\",value:function(e,t){if(!e.sign&&!t.sign)return g.__absoluteXor(e,t).__trim();if(e.sign&&t.sign){var i=l(e.length,t.length),_=g.__absoluteSubOne(e,i),n=g.__absoluteSubOne(t);return g.__absoluteXor(_,n,_).__trim()}var o=l(e.length,t.length)+1;if(e.sign){var a=[t,e];e=a[0],t=a[1]}var s=g.__absoluteSubOne(t,o);return s=g.__absoluteXor(s,e,s),g.__absoluteAddOne(s,!0,s).__trim()}},{key:\"bitwiseOr\",value:function(e,t){var i=l(e.length,t.length);if(!e.sign&&!t.sign)return g.__absoluteOr(e,t).__trim();if(e.sign&&t.sign){var _=g.__absoluteSubOne(e,i),n=g.__absoluteSubOne(t);return _=g.__absoluteAnd(_,n,_),g.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var o=[t,e];e=o[0],t=o[1]}var a=g.__absoluteSubOne(t,i);return a=g.__absoluteAndNot(a,e,a),g.__absoluteAddOne(a,!0,a).__trim()}},{key:\"asIntN\",value:function(e,t){if(0===t.length)return t;if(0===e)return g.__zero();if(e>=g.__kMaxLengthBits)return t;var _=e+31>>>5;if(t.length<_)return t;var n=t.__unsignedDigit(_-1),o=1<<(31&e-1);if(t.length===_&&n<o)return t;if(!((n&o)===o))return g.__truncateToNBits(e,t);if(!t.sign)return g.__truncateAndSubFromPowerOfTwo(e,t,!0);if(0==(n&o-1)){for(var l=_-2;0<=l;l--)if(0!==t.__digit(l))return g.__truncateAndSubFromPowerOfTwo(e,t,!1);return t.length===_&&n===o?t:g.__truncateToNBits(e,t)}return g.__truncateAndSubFromPowerOfTwo(e,t,!1)}},{key:\"asUintN\",value:function(e,t){if(0===t.length)return t;if(0===e)return g.__zero();if(t.sign){if(e>g.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");return g.__truncateAndSubFromPowerOfTwo(e,t,!1)}if(e>=g.__kMaxLengthBits)return t;var i=e+31>>>5;if(t.length<i)return t;var _=31&e;if(t.length==i){if(0===_)return t;var n=t.__digit(i-1);if(0==n>>>_)return t}return g.__truncateToNBits(e,t)}},{key:\"ADD\",value:function(e,t){if(e=g.__toPrimitive(e),t=g.__toPrimitive(t),\"string\"==typeof e)return\"string\"!=typeof t&&(t=t.toString()),e+t;if(\"string\"==typeof t)return e.toString()+t;if(e=g.__toNumeric(e),t=g.__toNumeric(t),g.__isBigInt(e)&&g.__isBigInt(t))return g.add(e,t);if(\"number\"==typeof e&&\"number\"==typeof t)return e+t;throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\")}},{key:\"LT\",value:function(e,t){return g.__compare(e,t,0)}},{key:\"LE\",value:function(e,t){return g.__compare(e,t,1)}},{key:\"GT\",value:function(e,t){return g.__compare(e,t,2)}},{key:\"GE\",value:function(e,t){return g.__compare(e,t,3)}},{key:\"EQ\",value:function(t,i){for(;;){if(g.__isBigInt(t))return g.__isBigInt(i)?g.equal(t,i):g.EQ(i,t);if(\"number\"==typeof t){if(g.__isBigInt(i))return g.__equalToNumber(i,t);if(\"object\"!==e(i))return t==i;i=g.__toPrimitive(i)}else if(\"string\"==typeof t){if(g.__isBigInt(i))return t=g.__fromString(t),null!==t&&g.equal(t,i);if(\"object\"!==e(i))return t==i;i=g.__toPrimitive(i)}else if(\"boolean\"==typeof t){if(g.__isBigInt(i))return g.__equalToNumber(i,+t);if(\"object\"!==e(i))return t==i;i=g.__toPrimitive(i)}else if(\"symbol\"===e(t)){if(g.__isBigInt(i))return!1;if(\"object\"!==e(i))return t==i;i=g.__toPrimitive(i)}else if(\"object\"===e(t)){if(\"object\"===e(i)&&i.constructor!==g)return t==i;t=g.__toPrimitive(t)}else return t==i}}},{key:\"NE\",value:function(e,t){return!g.EQ(e,t)}},{key:\"__zero\",value:function(){return new g(0,!1)}},{key:\"__oneDigit\",value:function(e,t){var i=new g(1,t);return i.__setDigit(0,e),i}},{key:\"__decideRounding\",value:function(e,t,i,_){if(0<t)return-1;var n;if(0>t)n=-t-1;else{if(0===i)return-1;i--,_=e.__digit(i),n=31}var g=1<<n;if(0==(_&g))return-1;if(g-=1,0!=(_&g))return 1;for(;0<i;)if(i--,0!==e.__digit(i))return 1;return 0}},{key:\"__fromDouble\",value:function(e){g.__kBitConversionDouble[0]=e;var t,i=2047&g.__kBitConversionInts[1]>>>20,_=i-1023,n=(_>>>5)+1,o=new g(n,0>e),l=1048575&g.__kBitConversionInts[1]|1048576,a=g.__kBitConversionInts[0],s=20,u=31&_,r=0;if(u<s){var d=s-u;r=d+32,t=l>>>d,l=l<<32-d|a>>>d,a<<=32-d}else if(u===s)r=32,t=l,l=a;else{var h=u-s;r=32-h,t=l<<h|a>>>32-h,l=a<<h}o.__setDigit(n-1,t);for(var b=n-2;0<=b;b--)0<r?(r-=32,t=l,l=a):t=0,o.__setDigit(b,t);return o.__trim()}},{key:\"__isWhitespace\",value:function(e){return!!(13>=e&&9<=e)||(159>=e?32==e:131071>=e?160==e||5760==e:196607>=e?(e&=131071,10>=e||40==e||41==e||47==e||95==e||4096==e):65279==e)}},{key:\"__fromString\",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,i=0,_=e.length,n=0;if(n===_)return g.__zero();for(var o=e.charCodeAt(n);g.__isWhitespace(o);){if(++n===_)return g.__zero();o=e.charCodeAt(n)}if(43===o){if(++n===_)return null;o=e.charCodeAt(n),i=1}else if(45===o){if(++n===_)return null;o=e.charCodeAt(n),i=-1}if(0===t){if(t=10,48===o){if(++n===_)return g.__zero();if(o=e.charCodeAt(n),88===o||120===o){if(t=16,++n===_)return null;o=e.charCodeAt(n)}else if(79===o||111===o){if(t=8,++n===_)return null;o=e.charCodeAt(n)}else if(66===o||98===o){if(t=2,++n===_)return null;o=e.charCodeAt(n)}}}else if(16===t&&48===o){if(++n===_)return g.__zero();if(o=e.charCodeAt(n),88===o||120===o){if(++n===_)return null;o=e.charCodeAt(n)}}for(;48===o;){if(++n===_)return g.__zero();o=e.charCodeAt(n)}var l=_-n,a=g.__kMaxBitsPerChar[t],s=g.__kBitsPerCharTableMultiplier-1;if(l>1073741824/a)return null;var u=a*l+s>>>g.__kBitsPerCharTableShift,r=new g(u+31>>>5,!1),h=10>t?t:10,b=10<t?t-10:0;if(0==(t&t-1)){a>>=g.__kBitsPerCharTableShift;var c=[],v=[],f=!1;do{for(var y,k=0,D=0;;){if(y=void 0,o-48>>>0<h)y=o-48;else if((32|o)-97>>>0<b)y=(32|o)-87;else{f=!0;break}if(D+=a,k=k<<a|y,++n===_){f=!0;break}if(o=e.charCodeAt(n),32<D+a)break}c.push(k),v.push(D)}while(!f);g.__fillFromParts(r,c,v)}else{r.__initializeDigits();var p=!1,B=0;do{for(var S,C=0,A=1;;){if(S=void 0,o-48>>>0<h)S=o-48;else if((32|o)-97>>>0<b)S=(32|o)-87;else{p=!0;break}var T=A*t;if(4294967295<T)break;if(A=T,C=C*t+S,B++,++n===_){p=!0;break}o=e.charCodeAt(n)}s=32*g.__kBitsPerCharTableMultiplier-1;var m=a*B+s>>>g.__kBitsPerCharTableShift+5;r.__inplaceMultiplyAdd(A,C,m)}while(!p)}if(n!==_){if(!g.__isWhitespace(o))return null;for(n++;n<_;n++)if(o=e.charCodeAt(n),!g.__isWhitespace(o))return null}return 0!==i&&10!==t?null:(r.sign=-1===i,r.__trim())}},{key:\"__fillFromParts\",value:function(e,t,_){for(var n=0,g=0,o=0,l=t.length-1;0<=l;l--){var a=t[l],s=_[l];g|=a<<o,o+=s,32===o?(e.__setDigit(n++,g),o=0,g=0):32<o&&(e.__setDigit(n++,g),o-=32,g=a>>>s-o)}if(0!==g){if(n>=e.length)throw new Error(\"implementation bug\");e.__setDigit(n++,g)}for(;n<e.length;n++)e.__setDigit(n,0)}},{key:\"__toStringBasePowerOfTwo\",value:function(e,t){var _=e.length,n=t-1;n=(85&n>>>1)+(85&n),n=(51&n>>>2)+(51&n),n=(15&n>>>4)+(15&n);var o=n,l=t-1,a=e.__digit(_-1),u=s(a),r=0|(32*_-u+o-1)/o;if(e.sign&&r++,268435456<r)throw new Error(\"string too long\");for(var d=Array(r),h=r-1,b=0,m=0,c=0;c<_-1;c++){var v=e.__digit(c),f=(b|v<<m)&l;d[h--]=g.__kConversionChars[f];var y=o-m;for(b=v>>>y,m=32-y;m>=o;)d[h--]=g.__kConversionChars[b&l],b>>>=o,m-=o}var k=(b|a<<m)&l;for(d[h--]=g.__kConversionChars[k],b=a>>>o-m;0!==b;)d[h--]=g.__kConversionChars[b&l],b>>>=o;if(e.sign&&(d[h--]=\"-\"),-1!==h)throw new Error(\"implementation bug\");return d.join(\"\")}},{key:\"__toStringGeneric\",value:function(e,t,_){var n=e.length;if(0===n)return\"\";if(1===n){var o=e.__unsignedDigit(0).toString(t);return!1===_&&e.sign&&(o=\"-\"+o),o}var l=32*n-s(e.__digit(n-1)),a=g.__kMaxBitsPerChar[t],u=a-1,r=l*g.__kBitsPerCharTableMultiplier;r+=u-1,r=0|r/u;var d,h,b=r+1>>1,m=g.exponentiate(g.__oneDigit(t,!1),g.__oneDigit(b,!1)),c=m.__unsignedDigit(0);if(1===m.length&&65535>=c){d=new g(e.length,!1),d.__initializeDigits();for(var v,f=0,y=2*e.length-1;0<=y;y--)v=f<<16|e.__halfDigit(y),d.__setHalfDigit(y,0|v/c),f=0|v%c;h=f.toString(t)}else{var k=g.__absoluteDivLarge(e,m,!0,!0);d=k.quotient;var D=k.remainder.__trim();h=g.__toStringGeneric(D,t,!0)}d.__trim();for(var p=g.__toStringGeneric(d,t,!0);h.length<b;)h=\"0\"+h;return!1===_&&e.sign&&(p=\"-\"+p),p+h}},{key:\"__unequalSign\",value:function(e){return e?-1:1}},{key:\"__absoluteGreater\",value:function(e){return e?-1:1}},{key:\"__absoluteLess\",value:function(e){return e?1:-1}},{key:\"__compareToBigInt\",value:function(e,t){var i=e.sign;if(i!==t.sign)return g.__unequalSign(i);var _=g.__absoluteCompare(e,t);return 0<_?g.__absoluteGreater(i):0>_?g.__absoluteLess(i):0}},{key:\"__compareToNumber\",value:function(e,t){if(!0|t){var i=e.sign,_=0>t;if(i!==_)return g.__unequalSign(i);if(0===e.length){if(_)throw new Error(\"implementation bug\");return 0===t?0:-1}if(1<e.length)return g.__absoluteGreater(i);var n=o(t),l=e.__unsignedDigit(0);return l>n?g.__absoluteGreater(i):l<n?g.__absoluteLess(i):0}return g.__compareToDouble(e,t)}},{key:\"__compareToDouble\",value:function(e,t){if(t!==t)return t;if(t===1/0)return-1;if(t===-Infinity)return 1;var i=e.sign;if(i!==0>t)return g.__unequalSign(i);if(0===t)throw new Error(\"implementation bug: should be handled elsewhere\");if(0===e.length)return-1;g.__kBitConversionDouble[0]=t;var _=2047&g.__kBitConversionInts[1]>>>20;if(2047==_)throw new Error(\"implementation bug: handled elsewhere\");var n=_-1023;if(0>n)return g.__absoluteGreater(i);var o=e.length,l=e.__digit(o-1),a=s(l),u=32*o-a,r=n+1;if(u<r)return g.__absoluteLess(i);if(u>r)return g.__absoluteGreater(i);var d=1048576|1048575&g.__kBitConversionInts[1],h=g.__kBitConversionInts[0],b=20,m=31-a;if(m!==(u-1)%31)throw new Error(\"implementation bug\");var c,v=0;if(m<b){var f=b-m;v=f+32,c=d>>>f,d=d<<32-f|h>>>f,h<<=32-f}else if(m===b)v=32,c=d,d=h;else{var y=m-b;v=32-y,c=d<<y|h>>>32-y,d=h<<y}if(l>>>=0,c>>>=0,l>c)return g.__absoluteGreater(i);if(l<c)return g.__absoluteLess(i);for(var k=o-2;0<=k;k--){0<v?(v-=32,c=d>>>0,d=h,h=0):c=0;var D=e.__unsignedDigit(k);if(D>c)return g.__absoluteGreater(i);if(D<c)return g.__absoluteLess(i)}if(0!==d||0!==h){if(0===v)throw new Error(\"implementation bug\");return g.__absoluteLess(i)}return 0}},{key:\"__equalToNumber\",value:function(e,t){return t|0===t?0===t?0===e.length:1===e.length&&e.sign===0>t&&e.__unsignedDigit(0)===o(t):0===g.__compareToDouble(e,t)}},{key:\"__comparisonResultToBool\",value:function(e,t){switch(t){case 0:return 0>e;case 1:return 0>=e;case 2:return 0<e;case 3:return 0<=e;}throw new Error(\"unreachable\")}},{key:\"__compare\",value:function(e,t,i){if(e=g.__toPrimitive(e),t=g.__toPrimitive(t),\"string\"==typeof e&&\"string\"==typeof t)switch(i){case 0:return e<t;case 1:return e<=t;case 2:return e>t;case 3:return e>=t;}if(g.__isBigInt(e)&&\"string\"==typeof t)return t=g.__fromString(t),null!==t&&g.__comparisonResultToBool(g.__compareToBigInt(e,t),i);if(\"string\"==typeof e&&g.__isBigInt(t))return e=g.__fromString(e),null!==e&&g.__comparisonResultToBool(g.__compareToBigInt(e,t),i);if(e=g.__toNumeric(e),t=g.__toNumeric(t),g.__isBigInt(e)){if(g.__isBigInt(t))return g.__comparisonResultToBool(g.__compareToBigInt(e,t),i);if(\"number\"!=typeof t)throw new Error(\"implementation bug\");return g.__comparisonResultToBool(g.__compareToNumber(e,t),i)}if(\"number\"!=typeof e)throw new Error(\"implementation bug\");if(g.__isBigInt(t))return g.__comparisonResultToBool(g.__compareToNumber(t,e),2^i);if(\"number\"!=typeof t)throw new Error(\"implementation bug\");return 0===i?e<t:1===i?e<=t:2===i?e>t:3===i?e>=t:void 0}},{key:\"__absoluteAdd\",value:function(e,t,_){if(e.length<t.length)return g.__absoluteAdd(t,e,_);if(0===e.length)return e;if(0===t.length)return e.sign===_?e:g.unaryMinus(e);var n=e.length;(0===e.__clzmsd()||t.length===e.length&&0===t.__clzmsd())&&n++;for(var o=new g(n,_),l=0,a=0;a<t.length;a++){var s=t.__digit(a),u=e.__digit(a),r=(65535&u)+(65535&s)+l,d=(u>>>16)+(s>>>16)+(r>>>16);l=d>>>16,o.__setDigit(a,65535&r|d<<16)}for(;a<e.length;a++){var h=e.__digit(a),b=(65535&h)+l,m=(h>>>16)+(b>>>16);l=m>>>16,o.__setDigit(a,65535&b|m<<16)}return a<o.length&&o.__setDigit(a,l),o.__trim()}},{key:\"__absoluteSub\",value:function(e,t,_){if(0===e.length)return e;if(0===t.length)return e.sign===_?e:g.unaryMinus(e);for(var n=new g(e.length,_),o=0,l=0;l<t.length;l++){var a=e.__digit(l),s=t.__digit(l),u=(65535&a)-(65535&s)-o;o=1&u>>>16;var r=(a>>>16)-(s>>>16)-o;o=1&r>>>16,n.__setDigit(l,65535&u|r<<16)}for(;l<e.length;l++){var d=e.__digit(l),h=(65535&d)-o;o=1&h>>>16;var b=(d>>>16)-o;o=1&b>>>16,n.__setDigit(l,65535&h|b<<16)}return n.__trim()}},{key:\"__absoluteAddOne\",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length;null===_?_=new g(n,t):_.sign=t;for(var o,l=!0,a=0;a<n;a++){if(o=e.__digit(a),l){var s=-1===o;o=0|o+1,l=s}_.__setDigit(a,o)}return l&&_.__setDigitGrow(n,1),_}},{key:\"__absoluteSubOne\",value:function(e,t){var _=e.length;t=t||_;for(var n,o=new g(t,!1),l=!0,a=0;a<_;a++){if(n=e.__digit(a),l){var s=0===n;n=0|n-1,l=s}o.__setDigit(a,n)}if(l)throw new Error(\"implementation bug\");for(var u=_;u<t;u++)o.__setDigit(u,0);return o}},{key:\"__absoluteAnd\",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,o=t.length,l=o;if(n<o){l=n;var a=e,s=n;e=t,n=o,t=a,o=s}var u=l;null===_?_=new g(u,!1):u=_.length;for(var r=0;r<l;r++)_.__setDigit(r,e.__digit(r)&t.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:\"__absoluteAndNot\",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,o=t.length,l=o;n<o&&(l=n);var a=n;null===_?_=new g(a,!1):a=_.length;for(var s=0;s<l;s++)_.__setDigit(s,e.__digit(s)&~t.__digit(s));for(;s<n;s++)_.__setDigit(s,e.__digit(s));for(;s<a;s++)_.__setDigit(s,0);return _}},{key:\"__absoluteOr\",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,o=t.length,l=o;if(n<o){l=n;var a=e,s=n;e=t,n=o,t=a,o=s}var u=n;null===_?_=new g(u,!1):u=_.length;for(var r=0;r<l;r++)_.__setDigit(r,e.__digit(r)|t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:\"__absoluteXor\",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,o=t.length,l=o;if(n<o){l=n;var a=e,s=n;e=t,n=o,t=a,o=s}var u=n;null===_?_=new g(u,!1):u=_.length;for(var r=0;r<l;r++)_.__setDigit(r,e.__digit(r)^t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:\"__absoluteCompare\",value:function(e,t){var _=e.length-t.length;if(0!=_)return _;for(var n=e.length-1;0<=n&&e.__digit(n)===t.__digit(n);)n--;return 0>n?0:e.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}},{key:\"__multiplyAccumulate\",value:function(e,t,_,n){if(0!==t){for(var g=65535&t,o=t>>>16,l=0,s=0,u=0,r=0;r<e.length;r++,n++){var d=_.__digit(n),h=65535&d,b=d>>>16,m=e.__digit(r),c=65535&m,v=m>>>16,f=a(c,g),y=a(c,o),k=a(v,g),D=a(v,o);h+=s+(65535&f),b+=u+l+(h>>>16)+(f>>>16)+(65535&y)+(65535&k),l=b>>>16,s=(y>>>16)+(k>>>16)+(65535&D)+l,l=s>>>16,s&=65535,u=D>>>16,d=65535&h|b<<16,_.__setDigit(n,d)}for(;0!==l||0!==s||0!==u;n++){var p=_.__digit(n),B=(65535&p)+s,S=(p>>>16)+(B>>>16)+u+l;s=0,u=0,l=S>>>16,p=65535&B|S<<16,_.__setDigit(n,p)}}}},{key:\"__internalMultiplyAdd\",value:function(e,t,_,g,o){for(var l=_,s=0,u=0;u<g;u++){var r=e.__digit(u),d=a(65535&r,t),h=(65535&d)+s+l;l=h>>>16;var b=a(r>>>16,t),m=(65535&b)+(d>>>16)+l;l=m>>>16,s=b>>>16,o.__setDigit(u,m<<16|65535&h)}if(o.length>g)for(o.__setDigit(g++,l+s);g<o.length;)o.__setDigit(g++,0);else if(0!==l+s)throw new Error(\"implementation bug\")}},{key:\"__absoluteDivSmall\",value:function(e,t,_){null===_&&(_=new g(e.length,!1));for(var n=0,o=2*e.length-1;0<=o;o-=2){var l=(n<<16|e.__halfDigit(o))>>>0,a=0|l/t;n=0|l%t,l=(n<<16|e.__halfDigit(o-1))>>>0;var s=0|l/t;n=0|l%t,_.__setDigit(o>>>1,a<<16|s)}return _}},{key:\"__absoluteModSmall\",value:function(e,t){for(var _,n=0,g=2*e.length-1;0<=g;g--)_=(n<<16|e.__halfDigit(g))>>>0,n=0|_%t;return n}},{key:\"__absoluteDivLarge\",value:function(e,t,i,_){var o=t.__halfDigitLength(),n=t.length,l=e.__halfDigitLength()-o,s=null;i&&(s=new g(l+2>>>1,!1),s.__initializeDigits());var r=new g(o+2>>>1,!1);r.__initializeDigits();var d=g.__clz16(t.__halfDigit(o-1));0<d&&(t=g.__specialLeftShift(t,d,0));for(var h=g.__specialLeftShift(e,d,1),u=t.__halfDigit(o-1),b=0,m=l;0<=m;m--){var v=65535,f=h.__halfDigit(m+o);if(f!==u){var y=(f<<16|h.__halfDigit(m+o-1))>>>0;v=0|y/u;for(var k=0|y%u,D=t.__halfDigit(o-2),p=h.__halfDigit(m+o-2);a(v,D)>>>0>(k<<16|p)>>>0&&(v--,k+=u,!(65535<k)););}g.__internalMultiplyAdd(t,v,0,n,r);var B=h.__inplaceSub(r,m,o+1);0!==B&&(B=h.__inplaceAdd(t,m,o),h.__setHalfDigit(m+o,h.__halfDigit(m+o)+B),v--),i&&(1&m?b=v<<16:s.__setDigit(m>>>1,b|v))}return _?(h.__inplaceRightShift(d),i?{quotient:s,remainder:h}:h):i?s:void 0}},{key:\"__clz16\",value:function(e){return s(e)-16}},{key:\"__specialLeftShift\",value:function(e,t,_){var o=e.length,n=new g(o+_,!1);if(0===t){for(var l=0;l<o;l++)n.__setDigit(l,e.__digit(l));return 0<_&&n.__setDigit(o,0),n}for(var a,s=0,u=0;u<o;u++)a=e.__digit(u),n.__setDigit(u,a<<t|s),s=a>>>32-t;return 0<_&&n.__setDigit(o,s),n}},{key:\"__leftShiftByAbsolute\",value:function(e,t){var _=g.__toShiftAmount(t);if(0>_)throw new RangeError(\"BigInt too big\");var n=_>>>5,o=31&_,l=e.length,a=0!==o&&0!=e.__digit(l-1)>>>32-o,s=l+n+(a?1:0),u=new g(s,e.sign);if(0===o){for(var r=0;r<n;r++)u.__setDigit(r,0);for(;r<s;r++)u.__setDigit(r,e.__digit(r-n))}else{for(var h=0,b=0;b<n;b++)u.__setDigit(b,0);for(var m,c=0;c<l;c++)m=e.__digit(c),u.__setDigit(c+n,m<<o|h),h=m>>>32-o;if(a)u.__setDigit(l+n,h);else if(0!==h)throw new Error(\"implementation bug\")}return u.__trim()}},{key:\"__rightShiftByAbsolute\",value:function(e,t){var _=e.length,n=e.sign,o=g.__toShiftAmount(t);if(0>o)return g.__rightShiftByMaximum(n);var l=o>>>5,a=31&o,s=_-l;if(0>=s)return g.__rightShiftByMaximum(n);var u=!1;if(n){if(0!=(e.__digit(l)&(1<<a)-1))u=!0;else for(var r=0;r<l;r++)if(0!==e.__digit(r)){u=!0;break}}if(u&&0===a){var h=e.__digit(_-1);0==~h&&s++}var b=new g(s,n);if(0===a)for(var m=l;m<_;m++)b.__setDigit(m-l,e.__digit(m));else{for(var c,v=e.__digit(l)>>>a,f=_-l-1,y=0;y<f;y++)c=e.__digit(y+l+1),b.__setDigit(y,c<<32-a|v),v=c>>>a;b.__setDigit(f,v)}return u&&(b=g.__absoluteAddOne(b,!0,b)),b.__trim()}},{key:\"__rightShiftByMaximum\",value:function(e){return e?g.__oneDigit(1,!0):g.__zero()}},{key:\"__toShiftAmount\",value:function(e){if(1<e.length)return-1;var t=e.__unsignedDigit(0);return t>g.__kMaxLengthBits?-1:t}},{key:\"__toPrimitive\",value:function(t){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:\"default\";if(\"object\"!==e(t))return t;if(t.constructor===g)return t;var _=t[Symbol.toPrimitive];if(_){var n=_(i);if(\"object\"!==e(n))return n;throw new TypeError(\"Cannot convert object to primitive value\")}var o=t.valueOf;if(o){var l=o.call(t);if(\"object\"!==e(l))return l}var a=t.toString;if(a){var s=a.call(t);if(\"object\"!==e(s))return s}throw new TypeError(\"Cannot convert object to primitive value\")}},{key:\"__toNumeric\",value:function(e){return g.__isBigInt(e)?e:+e}},{key:\"__isBigInt\",value:function(t){return\"object\"===e(t)&&t.constructor===g}},{key:\"__truncateToNBits\",value:function(e,t){for(var _=e+31>>>5,n=new g(_,t.sign),o=_-1,l=0;l<o;l++)n.__setDigit(l,t.__digit(l));var a=t.__digit(o);if(0!=(31&e)){var s=32-(31&e);a=a<<s>>>s}return n.__setDigit(o,a),n.__trim()}},{key:\"__truncateAndSubFromPowerOfTwo\",value:function(e,t,_){for(var n=Math.min,o=e+31>>>5,l=new g(o,_),a=0,s=o-1,u=0,r=n(s,t.length);a<r;a++){var d=t.__digit(a),h=0-(65535&d)-u;u=1&h>>>16;var b=0-(d>>>16)-u;u=1&b>>>16,l.__setDigit(a,65535&h|b<<16)}for(;a<s;a++)l.__setDigit(a,0|-u);var m,c=s<t.length?t.__digit(s):0,v=31&e;if(0===v){var f=0-(65535&c)-u;u=1&f>>>16;var y=0-(c>>>16)-u;m=65535&f|y<<16}else{var k=32-v;c=c<<k>>>k;var D=1<<32-k,p=(65535&D)-(65535&c)-u;u=1&p>>>16;var B=(D>>>16)-(c>>>16)-u;m=65535&p|B<<16,m&=D-1}return l.__setDigit(s,m),l.__trim()}},{key:\"__digitPow\",value:function(e,t){for(var i=1;0<t;)1&t&&(i*=e),t>>>=1,e*=e;return i}}]),g}(r(Array));return f.__kMaxLength=33554432,f.__kMaxLengthBits=f.__kMaxLength<<5,f.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],f.__kBitsPerCharTableShift=5,f.__kBitsPerCharTableMultiplier=1<<f.__kBitsPerCharTableShift,f.__kConversionChars=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"],f.__kBitConversionBuffer=new ArrayBuffer(8),f.__kBitConversionDouble=new Float64Array(f.__kBitConversionBuffer),f.__kBitConversionInts=new Int32Array(f.__kBitConversionBuffer),f});\n", "/**\n * functional approach to BigInt\n *\n * We use the JSBI library if BigInt is not available\n * https://github.com/GoogleChromeLabs/jsbi/\n *\n * If BigInt is available then we use the same functions as defined in the JSBI library\n * but use BigInt as the primitive type\n *\n */\nconst __JSBI = require(\"jsbi\");\n// use jsbi which is es5 compliant - change to ES6 in the compilation version\n\nconst JSBI = (Sk.global.JSBI = Sk.global.BigInt !== undefined ? {} : __JSBI);\n\nif (Sk.global.BigInt === undefined) {\n    // __isBigInt is not part of the public api so include it if this is ever removed\n    JSBI.__isBigInt || (JSBI.__isBigInt = (x) => x instanceof JSBI);\n    JSBI.powermod = (x, y, z) => {\n        const One = JSBI.BigInt(1);\n        let number = One;\n        y = JSBI.greaterThan(y, JSBI.__ZERO) ? y : JSBI.unaryMinus(y);\n        while (JSBI.greaterThan(y, JSBI.__ZERO)) {\n            if (JSBI.bitwiseAnd(y, One)) {\n                number = JSBI.remainder(JSBI.multiply(number, x), z);\n            }\n            y = JSBI.signedRightShift(y, One);\n            x = JSBI.remainder(JSBI.multiply(x, x), z);\n        }\n        return number;\n    };\n} else {\n    Object.assign(JSBI, {\n        BigInt: Sk.global.BigInt,\n        toNumber: (x) => Number(x),\n        toString: (x) => x.toString(),\n        __isBigInt: (x) => typeof x === \"bigint\",\n        unaryMinus: (x) => -x,\n        bitwiseNot: (x) => ~x,\n        bitwiseAnd: (x, y) => x & y,\n        bitwiseOr: (x, y) => x | y,\n        bitwiseXor: (x, y) => x ^ y,\n        /**\n         * x**y would be better but closure compilere changes that to Math.pow\n         * https://github.com/google/closure-compiler/issues/3684 */\n        exponentiate: (x, y) => {\n            // can only exponentiate a postive y - enforced by int.js\n            const One = JSBI.BigInt(1);\n            let number = One;\n            y = y > JSBI.__ZERO ? y : -y;\n            while (y > JSBI.__ZERO) {\n                if (y & One) {\n                    number = number * x;\n                }\n                y = y >> One;\n                x = x * x;\n            }\n            return number;\n        },\n        powermod: (x, y, z) => {\n            const One = JSBI.BigInt(1);\n            let number = One;\n            y = y > JSBI.__ZERO ? y : -y;\n            while (y > JSBI.__ZERO) {\n                if (y & One) {\n                    number = (number * x) % z;\n                }\n                y = y >> One;\n                x = (x * x) % z;\n            }\n            return number;\n        },\n        multiply: (x, y) => x * y,\n        divide: (x, y) => x / y,\n        remainder: (x, y) => x % y,\n        add: (x, y) => x + y,\n        subtract: (x, y) => x - y,\n        leftShift: (x, y) => x << y,\n        signedRightShift: (x, y) => x >> y,\n        unsignedRightShift: (x, y) => x >>> y, // will raise TypeError\n        lessThan: (x, y) => x < y,\n        lessThanOrEqual: (x, y) => x <= y,\n        greaterThan: (x, y) => x > y,\n        greaterThanOrEqual: (x, y) => x >= y,\n        equal: (x, y) => x === y,\n        notEqual: (x, y) => x !== y,\n    });\n}\nJSBI.__ZERO = JSBI.BigInt(0);\nJSBI.__MAX_SAFE = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nJSBI.__MIN_SAFE = JSBI.BigInt(-Number.MAX_SAFE_INTEGER);\nJSBI.numberIfSafe = (val) =>\n    JSBI.lessThan(val, JSBI.__MAX_SAFE) && JSBI.greaterThan(val, JSBI.__MIN_SAFE)\n        ? JSBI.toNumber(val)\n        : val;\n", "// stdlib es6 polyfills\n// make sure closure compiler knows about these functions so that it can polyfill them\n\n[...\"abc\"].flat();\n", "(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6\u20138\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n", "Sk.asserts = { ENABLE_ASSERTS: true };\n\n/**\n * Cause assertion failure when condition is false.\n *\n * @param {*} condition condition to check\n * @param {string=} message error message\n */\nSk.asserts.assert = function (condition, message) {\n    if (Sk.asserts.ENABLE_ASSERTS && !condition) {\n        var msg = \"Assertion failure\";\n        if (message) {\n            msg = msg + \": \" + message;\n        }\n        throw new Error(msg);\n    }\n    return condition;\n};\nSk.exportSymbol(\"Sk.asserts.assert\", Sk.asserts.assert);\n\n/**\n * Cause assertion failure.\n *\n * @param {string=} message error message\n */\nSk.asserts.fail = function (message) {\n    if (Sk.asserts.ENABLE_ASSERTS) {\n        var msg = \"Assertion failure\";\n        if (message) {\n            msg = msg + \": \" + message;\n        }\n        throw new Error(msg);\n    }\n};\nSk.exportSymbol(\"Sk.asserts.fail\", Sk.asserts.fail);\n", "/**\n * Base namespace for Skulpt. This is the only symbol that Skulpt adds to the\n * global namespace. Other user accessible symbols are noted and described\n * below.\n */\n\n/**\n *\n * Set various customizable parts of Skulpt.\n *\n * output: Replacable output redirection (called from print, etc.).\n * read: Replacable function to load modules with (called via import, etc.)\n * sysargv: Setable to emulate arguments to the script. Should be an array of JS\n * strings.\n * syspath: Setable to emulate PYTHONPATH environment variable (for finding\n * modules). Should be an array of JS strings.\n * nonreadopen: Boolean - set to true to allow non-read file operations\n * fileopen: Optional function to call any time a file is opened\n * filewrite: Optional function to call when writing to a file\n *\n * Any variables that aren't set will be left alone.\n */\n\nSk.bool_check = function (variable, name) {\n    if (variable === undefined || variable === null || typeof variable !== \"boolean\") {\n        throw new Error(\"must specify \" + name + \" and it must be a boolean\");\n    }\n};\n\n/**\n * Please use python3 flag to control new behavior that is different\n * between Python 2/3, rather than adding new flags.\n */\n\nSk.python2 = {\n    print_function: false,\n    division: false,\n    absolute_import: null,\n    unicode_literals: false,\n    // skulpt specific\n    python3: false,\n    class_repr: false,\n    inherit_from_object: false,\n    super_args: false,\n    octal_number_literal: false,\n    bankers_rounding: false,\n    python_version: false,\n    dunder_next: false,\n    dunder_round: false,\n    exceptions: false,\n    no_long_type: false,\n    ceil_floor_int: false,\n    silent_octal_literal: true,\n};\n\nSk.python3 = {\n    print_function: true,\n    division: true,\n    absolute_import: null,\n    unicode_literals: true,\n    // skulpt specific\n    python3: true,\n    class_repr: true,\n    inherit_from_object: true,\n    super_args: true,\n    octal_number_literal: true,\n    bankers_rounding: true,\n    python_version: true,\n    dunder_next: true,\n    dunder_round: true,\n    exceptions: true,\n    no_long_type: true,\n    ceil_floor_int: true,\n    silent_octal_literal: false,\n};\n\nSk.configure = function (options) {\n    \"use strict\";\n    Sk.output = options[\"output\"] || Sk.output;\n    Sk.asserts.assert(typeof Sk.output === \"function\");\n\n    Sk.debugout = options[\"debugout\"] || Sk.debugout;\n    Sk.asserts.assert(typeof Sk.debugout === \"function\");\n\n    Sk.uncaughtException = options[\"uncaughtException\"] || Sk.uncaughtException;\n    Sk.asserts.assert(typeof Sk.uncaughtException === \"function\");\n\n    Sk.read = options[\"read\"] || Sk.read;\n    Sk.asserts.assert(typeof Sk.read === \"function\");\n\n    Sk.nonreadopen = options[\"nonreadopen\"] || false;\n    Sk.asserts.assert(typeof Sk.nonreadopen === \"boolean\");\n\n    Sk.fileopen = options[\"fileopen\"] || undefined;\n    Sk.asserts.assert(typeof Sk.fileopen === \"function\" || typeof Sk.fileopen === \"undefined\");\n\n    Sk.filewrite = options[\"filewrite\"] || undefined;\n    Sk.asserts.assert(typeof Sk.filewrite === \"function\" || typeof Sk.filewrite === \"undefined\");\n\n    Sk.timeoutMsg = options[\"timeoutMsg\"] || Sk.timeoutMsg;\n    Sk.asserts.assert(typeof Sk.timeoutMsg === \"function\");\n    Sk.exportSymbol(\"Sk.timeoutMsg\", Sk.timeoutMsg);\n\n    Sk.sysargv = options[\"sysargv\"] || Sk.sysargv;\n    Sk.asserts.assert(Sk.isArrayLike(Sk.sysargv));\n\n    Sk.__future__ = options[\"__future__\"] || Sk.python3;\n\n    Sk.bool_check(Sk.__future__.print_function, \"Sk.__future__.print_function\");\n    Sk.bool_check(Sk.__future__.division, \"Sk.__future__.division\");\n    Sk.bool_check(Sk.__future__.unicode_literals, \"Sk.__future__.unicode_literals\");\n    Sk.bool_check(Sk.__future__.class_repr, \"Sk.__future__.class_repr\");\n    Sk.bool_check(Sk.__future__.inherit_from_object, \"Sk.__future__.inherit_from_object\");\n    Sk.bool_check(Sk.__future__.super_args, \"Sk.__future__.super_args\");\n    Sk.bool_check(Sk.__future__.octal_number_literal, \"Sk.__future__.octal_number_literal\");\n    Sk.bool_check(Sk.__future__.bankers_rounding, \"Sk.__future__.bankers_rounding\");\n    Sk.bool_check(Sk.__future__.python_version, \"Sk.__future__.python_version\");\n    Sk.bool_check(Sk.__future__.dunder_next, \"Sk.__future__.dunder_next\");\n    Sk.bool_check(Sk.__future__.dunder_round, \"Sk.__future__.dunder_round\");\n    Sk.bool_check(Sk.__future__.exceptions, \"Sk.__future__.exceptions\");\n    Sk.bool_check(Sk.__future__.no_long_type, \"Sk.__future__.no_long_type\");\n    Sk.bool_check(Sk.__future__.ceil_floor_int, \"Sk.__future__.ceil_floor_int\");\n    Sk.bool_check(Sk.__future__.silent_octal_literal, \"Sk.__future__.silent_octal_literal\");\n\n    // in __future__ add checks for absolute_import\n\n    Sk.imageProxy = options[\"imageProxy\"] || \"http://localhost:8080/320x\";\n    Sk.asserts.assert(typeof Sk.imageProxy === \"string\" || typeof Sk.imageProxy === \"function\");\n\n    Sk.BottleSiteTarget = options[\"BottleSiteTarget\"] || \"#website\";\n    Sk.asserts.assert(\n        typeof Sk.BottleSiteTarget === \"string\" || typeof Sk.BottleSiteTarget === \"function\"\n    );\n\n    Sk.inputfun = options[\"inputfun\"] || Sk.inputfun;\n    Sk.asserts.assert(typeof Sk.inputfun === \"function\");\n\n    Sk.inputfunTakesPrompt = options[\"inputfunTakesPrompt\"] || false;\n    Sk.asserts.assert(typeof Sk.inputfunTakesPrompt === \"boolean\");\n\n    Sk.retainGlobals = options[\"retainglobals\"] || options[\"retainGlobals\"] || false;\n    Sk.asserts.assert(typeof Sk.retainGlobals === \"boolean\");\n\n    Sk.debugging = options[\"debugging\"] || false;\n    Sk.asserts.assert(typeof Sk.debugging === \"boolean\");\n\n    Sk.killableWhile = options[\"killableWhile\"] || false;\n    Sk.asserts.assert(typeof Sk.killableWhile === \"boolean\");\n\n    Sk.killableFor = options[\"killableFor\"] || false;\n    Sk.asserts.assert(typeof Sk.killableFor === \"boolean\");\n\n    Sk.signals = typeof options[\"signals\"] !== \"undefined\" ? options[\"signals\"] : null;\n    if (Sk.signals === true) {\n        Sk.signals = {\n            listeners: [],\n            addEventListener(handler) {\n                Sk.signals.listeners.push(handler);\n            },\n            removeEventListener(handler) {\n                var index = Sk.signals.listeners.indexOf(handler);\n                if (index >= 0) {\n                    Sk.signals.listeners.splice(index, 1); // Remove items\n                }\n            },\n            signal(signal, data) {\n                for (var i = 0; i < Sk.signals.listeners.length; i++) {\n                    Sk.signals.listeners[i].call(null, signal, data);\n                }\n            },\n        };\n    } else {\n        Sk.signals = null;\n    }\n    Sk.asserts.assert(typeof Sk.signals === \"object\");\n\n    Sk.breakpoints =\n        options[\"breakpoints\"] ||\n        function () {\n            return true;\n        };\n    Sk.asserts.assert(typeof Sk.breakpoints === \"function\");\n\n    Sk.setTimeout = options[\"setTimeout\"];\n    if (Sk.setTimeout === undefined) {\n        if (typeof setTimeout === \"function\") {\n            Sk.setTimeout = function (func, delay) {\n                setTimeout(func, delay);\n            };\n        } else {\n            Sk.setTimeout = function (func, delay) {\n                func();\n            };\n        }\n    }\n    Sk.asserts.assert(typeof Sk.setTimeout === \"function\");\n\n    if (\"execLimit\" in options) {\n        Sk.execLimit = options[\"execLimit\"];\n    }\n\n    if (\"yieldLimit\" in options) {\n        Sk.yieldLimit = options[\"yieldLimit\"];\n    }\n\n    if (options[\"syspath\"]) {\n        Sk.syspath = options[\"syspath\"];\n        Sk.asserts.assert(Sk.isArrayLike(Sk.syspath));\n        // assume that if we're changing syspath we want to force reimports.\n        // not sure how valid this is, perhaps a separate api for that.\n        Sk.realsyspath = undefined;\n        Sk.sysmodules = new Sk.builtin.dict([]);\n    }\n\n    Sk.misceval.softspace_ = false;\n\n    Sk.switch_version(Sk.__future__.python3);\n\n    Sk.builtin.str.$next = Sk.__future__.python3\n        ? new Sk.builtin.str(\"__next__\")\n        : new Sk.builtin.str(\"next\");\n\n    Sk.setupOperators(Sk.__future__.python3);\n    Sk.setupDunderMethods(Sk.__future__.python3);\n\n    Sk.setupObjects(Sk.__future__.python3);\n};\n\nSk.exportSymbol(\"Sk.configure\", Sk.configure);\n\n/*\n * Replaceable handler for uncaught exceptions\n */\nSk.uncaughtException = function (err) {\n    throw err;\n};\n\n/*\n * Replaceable handler for uncaught exceptions\n */\nSk.uncaughtException = function (err) {\n    throw err;\n};\nSk.exportSymbol(\"Sk.uncaughtException\", Sk.uncaughtException);\n\n/*\n *      Replaceable message for message timeouts\n */\nSk.timeoutMsg = function () {\n    return \"Program exceeded run time limit.\";\n};\nSk.exportSymbol(\"Sk.timeoutMsg\", Sk.timeoutMsg);\n\n/**\n * If the timer needs to be paused, store it here.\n * @type {number}\n */\nSk.execPaused = 0;\nSk.execPausedAmount = 0;\n\n/*\n *  Hard execution timeout, throws an error. Set to null to disable\n */\nSk.execLimit = Number.POSITIVE_INFINITY;\n\n/*\n *  Soft execution timeout, returns a Suspension. Set to null to disable\n */\nSk.yieldLimit = Number.POSITIVE_INFINITY;\n\n/*\n * Keep track of stack somehow?\n */\nSk.execStack = [];\n\n/*\n * Replacable output redirection (called from print, etc).\n */\nSk.output = function (x) {};\n\n/*\n * Replacable function to load modules with (called via import, etc.)\n * todo; this should be an async api\n */\nSk.read = function (x) {\n    if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined) {\n        throw \"File not found: '\" + x + \"'\";\n    }\n\n    return Sk.builtinFiles[\"files\"][x];\n};\n\n/*\n * Setable to emulate arguments to the script. Should be array of JS strings.\n */\nSk.sysargv = [];\n\n// lame function for sys module\nSk.getSysArgv = function () {\n    return Sk.sysargv;\n};\nSk.exportSymbol(\"Sk.getSysArgv\", Sk.getSysArgv);\n\n/**\n * Setable to emulate PYTHONPATH environment variable (for finding modules).\n * Should be an array of JS strings.\n */\nSk.syspath = [];\n\nSk.inBrowser = Sk.global[\"document\"] !== undefined;\n\nSk.afterSingleExecution = function (args) {};\nSk.exportSymbol(\"Sk.afterSingleExecution\", Sk.afterSingleExecution);\n\n/**\n * Internal function used for debug output.\n * @param {...} args\n */\nSk.debugout = function (args) {};\n\n(function () {\n    // set up some sane defaults based on availability\n    if (Sk.global[\"write\"] !== undefined) {\n        Sk.output = Sk.global[\"write\"];\n    } else if (Sk.global[\"console\"] !== undefined && Sk.global[\"console\"][\"log\"] !== undefined) {\n        Sk.output = function (x) {\n            Sk.global[\"console\"][\"log\"](x);\n        };\n    } else if (Sk.global[\"print\"] !== undefined) {\n        Sk.output = Sk.global[\"print\"];\n    }\n    if (Sk.global[\"console\"] !== undefined && Sk.global[\"console\"][\"log\"] !== undefined) {\n        Sk.debugout = function (x) {\n            Sk.global[\"console\"][\"log\"](x);\n        };\n    } else if (Sk.global[\"print\"] !== undefined) {\n        Sk.debugout = Sk.global[\"print\"];\n    }\n})();\n\nSk.inputfun = function (args) {\n    return window.prompt(args);\n};\n\n/**\n * currently can't seem to remove these functions without a serious slow down of 2x\n */\nSk.setup_method_mappings = function () {};\nSk.setupDictIterators = function (python3) {};\n\nSk.switch_version = function (py3) {\n    const methods_to_map = {\n        float_: {\n            method_names: [\"__round__\"],\n            2: [false],\n            3: [true],\n        },\n        int_: {\n            method_names: [\"__round__\"],\n            2: [false],\n            3: [true],\n        },\n        list: {\n            method_names: [\"clear\", \"copy\", \"sort\"],\n            2: [false, false, true],\n            3: [true, true, true],\n        },\n        dict: {\n            method_names: [\"has_key\", \"keys\", \"items\", \"values\"],\n            2: [true, true, true, true],\n            3: [false, true, true, true],\n        },\n    };\n\n    for (let klass_name in methods_to_map) {\n        const klass = Sk.builtin[klass_name];\n        const method_names = methods_to_map[klass_name].method_names;\n        const in_py3 = methods_to_map[klass_name][3];\n\n        // if we're not changing to py2 and we have no py3$methods then don't continue since these methods exist by default\n        if (py3 && klass.py3$methods === undefined) {\n            return;\n        } else if (klass.py3$methods === undefined) {\n            // Set up py3$methods if we haven't done so already\n            klass.py3$methods = {};\n            for (let i = 0; i < method_names.length; i++) {\n                const method_name = method_names[i];\n                if (!in_py3[i]) {\n                    continue;\n                }\n                klass.py3$methods[method_name] = klass.prototype[method_name].d$def;\n            }\n        }\n        let in_version, new_methods;\n        if (py3) {\n            in_version = in_py3;\n            new_methods = klass.py3$methods;\n        } else {\n            in_version = methods_to_map[klass_name][2];\n            new_methods = klass.py2$methods;\n        }\n        for (let i = 0; i < method_names.length; i++) {\n            const method_name = method_names[i];\n            delete klass.prototype[method_name];\n            if (in_version[i]) {\n                klass.prototype[method_name] = new Sk.builtin.method_descriptor(\n                    klass,\n                    new_methods[method_name]\n                );\n            }\n        }\n    }\n};\n\nSk.exportSymbol(\"Sk.__future__\", Sk.__future__);\nSk.exportSymbol(\"Sk.inputfun\", Sk.inputfun);\n", "/**\n * @namespace Sk.builtin\n *\n * @description\n * All the builtin types as well as useful functions\n */\nif (Sk.builtin === undefined) {\n    Sk.builtin = {};\n}\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @description\n * this should never be called as a constructor\n * instead use {@link Sk.abstr.buildNativeClass} or\n * {@link Sk.misceval.buildClass}\n *\n */\nSk.builtin.type = function type(obj) {\n    if (this instanceof Sk.builtin.type) {\n        Sk.asserts.fail(\"calling new Sk.builtin.type is not safe\");\n    }\n    return obj.ob$type; // allow this use of calling type\n};\n\nObject.defineProperties(\n    Sk.builtin.type.prototype,\n    /**@lends {Sk.builtin.type.prototype}*/ {\n        call: { value: Function.prototype.call },\n        apply: { value: Function.prototype.apply },\n        tp$slots: {\n            value: {\n                tp$doc: \"type(object_or_name, bases, dict)\\ntype(object) -> the object's type\\ntype(name, bases, dict) -> a new type\",\n                tp$call,\n                tp$new,\n                tp$getattr,\n                tp$setattr,\n                $r,\n            },\n            writable: true,\n        },\n        tp$methods: { value: null, writable: true }, // define these later\n        tp$getsets: { value: null, writable: true },\n        sk$type: { value: true },\n        $isSubType: { value: $isSubType },\n        $allocateSlot: { value: $allocateSlot },\n        $allocateSlots: { value: $allocateSlots },\n        $allocateGetterSlot: { value: $allocateGetterSlot },\n        $typeLookup: { value: $typeLookup, writable: true },\n        $mroMerge: { value: $mroMerge },\n        $buildMRO: { value: $buildMRO },\n        sk$attrError: {\n            value() {\n                return \"type object '\" + this.prototype.tp$name + \"'\";\n            },\n            writable: true,\n        },\n    }\n);\n\n/**\n * @this {typeObject | Sk.builtin.type}\n */\nfunction tp$call(args, kwargs) {\n    if (this === Sk.builtin.type) {\n        // check the args are 1 - only interested in the 1 argument form if\n        // if the nargs and nkeywords != 1 or 3 and zero raise an error\n        if (args.length === 1 && (kwargs === undefined || !kwargs.length)) {\n            return args[0].ob$type;\n        } else if (args.length !== 3) {\n            throw new Sk.builtin.TypeError(\"type() takes 1 or 3 arguments\");\n        }\n    }\n    let obj = this.prototype.tp$new(args, kwargs);\n\n    if (obj.$isSuspension) {\n        return Sk.misceval.chain(\n            obj,\n            (o) => {\n                obj = o;\n                if (!obj.ob$type.$isSubType(this)) {\n                    // don't initialize an obj if it's type is not a subtype of this!\n                    // typically obj$obtype === self so this check is fast\n                    return;\n                }\n                return obj.tp$init(args, kwargs);\n            },\n            () => obj\n        );\n    } else if (!obj.ob$type.$isSubType(this)) {\n        return obj;\n    } else {\n        const res = obj.tp$init(args, kwargs);\n        if (res !== undefined && res.$isSuspension) {\n            return Sk.misceval.chain(res, () => obj);\n        }\n        return obj;\n    }\n}\n\nfunction tp$new(args, kwargs) {\n    // currently skulpt does not support metatypes...\n    // metatype.prototype = this\n    if (args.length !== 3) {\n        if (args.length === 1 && (kwargs === undefined || !kwargs.length)) {\n            return args[0].ob$type;\n        }\n        throw new Sk.builtin.TypeError(\"type() takes 1 or 3 arguments\");\n    }\n\n    let $name, bases, dict;\n    $name = args[0];\n    bases = args[1];\n    dict = args[2];\n    // first check that we only have 3 args and they're of the correct type\n    // argument dict must be of type dict\n    if (dict.tp$name !== \"dict\") {\n        throw new Sk.builtin.TypeError(\n            \"type() argument 3 must be dict, not \" + Sk.abstr.typeName(dict)\n        );\n    }\n    // checks if name must be string\n    if (!Sk.builtin.checkString($name)) {\n        throw new Sk.builtin.TypeError(\n            \"type() argument 1 must be str, not \" + Sk.abstr.typeName($name)\n        );\n    }\n    $name = $name.$jsstr();\n    // argument bases must be of type tuple\n    if (bases.tp$name !== \"tuple\") {\n        throw new Sk.builtin.TypeError(\n            \"type() argument 2 must be tuple, not \" + Sk.abstr.typeName(bases)\n        );\n    }\n    bases = bases.sk$asarray();\n\n    /**\n     * @type {!typeObject}\n     */\n    const klass = function () {\n        // klass is essentially a function that gives its instances a dict\n        // if we support slots then we might need to have two versions of this\n        this.$d = new Sk.builtin.dict();\n    };\n    setUpKlass($name, klass, bases, this.constructor);\n\n    // set some defaults which can be overridden by the dict object\n    if (Sk.globals) {\n        klass.prototype.__module__ = Sk.globals[\"__name__\"];\n    }\n    klass.prototype.__doc__ = Sk.builtin.none.none$;\n\n    // set __dict__ if not already on the prototype\n    /**@todo __slots__ */\n    if (klass.$typeLookup(Sk.builtin.str.$dict) === undefined) {\n        klass.prototype.__dict__ = new Sk.builtin.getset_descriptor(\n            klass,\n            subtype_dict_getset_description\n        );\n    }\n\n    // copy properties from dict into klass.prototype\n    dict.$items().forEach(([key, val]) => {\n        klass.prototype[key.$mangled] = val;\n    });\n    /* Set ht_qualname to dict['__qualname__'] if available, else to\n    __name__.  The __qualname__ accessor will look for ht_qualname.\n    */\n    if (klass.prototype.hasOwnProperty(\"__qualname__\")) {\n        const qualname = klass.prototype.__qualname__;\n        if (!Sk.builtin.checkString(qualname)) {\n            throw new Sk.builtin.TypeError(\n                \"type __qualname__ must be a str, not '\" + Sk.abstr.typeName(qualname) + \"'\"\n            );\n        }\n        klass.prototype.ht$qualname = qualname;\n    }\n\n    const proto = klass.prototype;\n    // make __new__ a static method\n    overrideImplied(proto, \"__new__\", \"staticmethod\");\n    // make __classgetitem__ a class method\n    overrideImplied(proto, \"__class_getitem__\", \"classmethod\");\n    klass.$allocateSlots();\n\n    return klass;\n}\n\nfunction overrideImplied(proto, dunder, implied) {\n    if (proto.hasOwnProperty(dunder)) {\n        const fn = proto[dunder];\n        if (fn instanceof Sk.builtin.func) {\n            proto[dunder] = new Sk.builtin[implied](fn);\n        }\n    }\n}\n\n/**\n * @param {Array} args\n * @param {Array=} kwargs\n */\nfunction tp$init(args, kwargs) {\n    if (args && args.length == 1 && kwargs && kwargs.length) {\n        throw new Sk.builtin.TypeError(\"type.__init__() takes no keyword arguments\");\n    } else if (args.length != 3 && args.length != 1) {\n        throw new Sk.builtin.TypeError(\"type.__init__() takes 1 or 3 arguments\");\n    }\n    // according to Cpython we just call the object init method here\n    return Sk.builtin.object.prototype.tp$init.call(this, []);\n}\n\nfunction $r() {\n    let mod = this.prototype.__module__;\n    let cname = \"\";\n    let ctype = \"class\";\n    if (mod && Sk.builtin.checkString(mod)) {\n        cname = mod.v + \".\";\n    } else {\n        mod = null;\n    }\n    if (!mod && !this.sk$klass && !Sk.__future__.class_repr) {\n        ctype = \"type\";\n    }\n    return new Sk.builtin.str(\"<\" + ctype + \" '\" + cname + this.prototype.tp$name + \"'>\");\n}\n\nfunction tp$getattr(pyName, canSuspend) {\n    // first check that the pyName is indeed a string\n    let res;\n    const metatype = this.ob$type;\n    // now check whether there is a descriptor on the metatype\n    const meta_attribute = metatype.$typeLookup(pyName);\n\n    let meta_get;\n    if (meta_attribute !== undefined) {\n        meta_get = meta_attribute.tp$descr_get;\n        if (meta_get !== undefined && meta_attribute.tp$descr_set !== undefined) {\n            // then we're a data descriptor\n            res = meta_get.call(meta_attribute, this, metatype, canSuspend);\n            return res;\n        }\n    }\n    const attribute = this.$typeLookup(pyName);\n\n    if (attribute !== undefined) {\n        const local_get = attribute.tp$descr_get;\n        if (local_get !== undefined) {\n            // null indicates that the descriptor was on the target object itself or a buss\n            res = local_get.call(attribute, null, this, canSuspend);\n            return res;\n        }\n        return attribute;\n    }\n    // attribute was not found so use the meta_get if any\n    if (meta_get !== undefined) {\n        res = meta_get.call(meta_attribute, this, metatype, canSuspend);\n        return res;\n    }\n\n    if (meta_attribute !== undefined) {\n        return meta_attribute;\n    }\n    return;\n}\n\nfunction tp$setattr(pyName, value, canSuspend) {\n    if (!this.sk$klass) {\n        if (value !== undefined) {\n            throw new Sk.builtin.TypeError(\n                \"can't set attributes of built-in/extension type '\" + this.prototype.tp$name + \"'\"\n            );\n        } else {\n            throw new Sk.builtin.TypeError(\n                \"can't delete attributes on type object '\" + this.prototype.tp$name + \"'\"\n            );\n        }\n    }\n    // meta types must follow single inheritance - we could change this and do\n    const descr = this.ob$type.$typeLookup(pyName);\n\n    // if it's a data descriptor then call it\n    if (descr !== undefined) {\n        const f = descr.tp$descr_set;\n        if (f) {\n            return f.call(descr, this, value, canSuspend);\n        }\n    }\n    // for delattr\n    const jsName = pyName.$mangled;\n\n    if (value === undefined) {\n        const proto = this.prototype;\n        if (!proto.hasOwnProperty(jsName)) {\n            throw new Sk.builtin.AttributeError(\n                \"type object '\" +\n                    this.prototype.tp$name +\n                    \"' has no attribute '\" +\n                    pyName.$jsstr() +\n                    \"'\"\n            );\n        } else {\n            delete proto[jsName];\n            // delete the slot_func\n            // TODO what about slot funcs that are dual slots...\n            const slot_name = Sk.dunderToSkulpt[jsName];\n            if (slot_name !== undefined) {\n                delete this.prototype[slot_name];\n                if (!proto.sk$prototypical) {\n                    this.$allocateGetterSlot(jsName);\n                    // if this was a slot func and we are not prototypical\n                    // allocate a getter slot in it's place\n                }\n            }\n        }\n    } else {\n        this.prototype[jsName] = value;\n        if (jsName in Sk.dunderToSkulpt) {\n            this.$allocateSlot(jsName, value);\n        }\n    }\n}\n\nfunction fastLookup(pyName) {\n    var jsName = pyName.$mangled;\n    return this.prototype[jsName];\n}\n\nfunction slowLookup(pyName) {\n    var jsName = pyName.$mangled;\n    const mro = this.prototype.tp$mro;\n    for (let i = 0; i < mro.length; ++i) {\n        const base_proto = mro[i].prototype;\n        if (base_proto.hasOwnProperty(jsName)) {\n            return base_proto[jsName];\n        }\n    }\n    return undefined;\n}\n\nfunction $typeLookup(pyName) {\n    // all type objects override this function depending on they're prototypical inheritance\n    // we use the logic here as a fall back\n    if (this.prototype.sk$prototypical) {\n        return fastLookup.call(this, pyName);\n    }\n    return slowLookup.call(this, pyName);\n}\n\nfunction $isSubType(other) {\n    return (\n        this === other ||\n        this.prototype instanceof other ||\n        (!this.prototype.sk$prototypical && this.prototype.tp$mro.includes(other))\n    );\n}\n\nfunction setUpKlass($name, klass, bases, meta) {\n    // this function tries to match Cpython - the best base is not always bases[0]\n    // we require a best bases for checks in __new__ as well as future support for slots\n    const best_base = best_base_(bases);\n    const klass_proto = klass.prototype;\n\n    Sk.abstr.setUpInheritance($name, klass, best_base, meta);\n\n    const pyName = new Sk.builtin.str($name);\n    Object.defineProperties(klass_proto, {\n        sk$prototypical: { value: true, writable: true },\n        tp$bases: { value: bases, writable: true },\n        tp$mro: { value: null, writable: true },\n        ht$type: { value: true, writable: true },\n        ht$name: { value: pyName, writable: true },\n        ht$qualname: { value: pyName, writable: true },\n    });\n    klass_proto.tp$mro = klass.$buildMRO();\n\n    Object.defineProperties(klass, {\n        $typeLookup: {\n            value: klass_proto.sk$prototypical ? fastLookup : slowLookup,\n            writable: true,\n        },\n        sk$klass: { value: true, writable: true },\n    });\n}\n\n// this function is used to determine the class constructor inheritance.\nfunction best_base_(bases) {\n    if (bases.length === 0) {\n        bases.push(Sk.builtin.object);\n    }\n    function solid_base(type) {\n        // if we support slots we would need to change this function - for now it just checks for the builtin.\n        if (type.sk$solidBase) {\n            return type;\n        }\n        return solid_base(type.prototype.tp$base);\n    }\n\n    let base, winner, candidate, base_i;\n    for (let i = 0; i < bases.length; i++) {\n        base_i = bases[i];\n        if (!Sk.builtin.checkClass(base_i)) {\n            throw new Sk.builtin.TypeError(\"bases must be 'type' objects\");\n        } else if (base_i.sk$unacceptableBase) {\n            throw new Sk.builtin.TypeError(\n                \"type '\" + base_i.prototype.tp$name + \"' is not an acceptable base type\"\n            );\n        }\n        candidate = solid_base(base_i); // basically the builtin I think\n        if (winner === undefined) {\n            winner = candidate;\n            base = base_i;\n        } else if (winner.$isSubType(candidate)) {\n            // carry on\n        } else if (candidate.$isSubType(winner)) {\n            winner = candidate;\n            base = base_i;\n        } else {\n            throw new Sk.builtin.TypeError(\"multiple bases have instance layout conflicts\");\n        }\n    }\n    return base;\n}\n\nfunction $mroMerge(seqs) {\n    this.prototype.sk$prototypical = true; // assume true to start with\n    let seq, i, j;\n    const res = [];\n    for (;;) {\n        for (i = 0; i < seqs.length; ++i) {\n            seq = seqs[i];\n            if (seq.length !== 0) {\n                break;\n            }\n        }\n        if (i === seqs.length) {\n            // all empty\n            return res;\n        }\n        const cands = [];\n        for (i = 0; i < seqs.length; ++i) {\n            seq = seqs[i];\n            //print(\"XXX\", Sk.builtin.repr(new Sk.builtin.list(seq)).v);\n            if (seq.length !== 0) {\n                const cand = seq[0];\n                //print(\"CAND\", Sk.builtin.repr(cand).v);\n\n                 \n                OUTER: for (j = 0; j < seqs.length; ++j) {\n                    const sseq = seqs[j];\n                    for (let k = 1; k < sseq.length; ++k) {\n                        if (sseq[k] === cand) {\n                            break OUTER;\n                        }\n                    }\n                }\n                 \n\n                // cand is not in any sequences' tail -> constraint-free\n                if (j === seqs.length) {\n                    cands.push(cand);\n                }\n            }\n        }\n\n        if (cands.length === 0) {\n            throw new Sk.builtin.TypeError(\"Inconsistent precedences in type hierarchy\");\n        }\n\n        const next = cands[0];\n\n        // check prototypical mro\n        if (res.length && this.prototype.sk$prototypical) {\n            let prevs_prototype = Object.getPrototypeOf(res[res.length - 1].prototype);\n            if (prevs_prototype !== next.prototype) {\n                this.prototype.sk$prototypical = false;\n            }\n        }\n\n        // append next to result and remove from sequences\n        res.push(next);\n\n        for (i = 0; i < seqs.length; ++i) {\n            seq = seqs[i];\n            if (seq.length > 0 && seq[0] === next) {\n                seq.splice(0, 1);\n            }\n        }\n    }\n}\n\n/*\n * C3 MRO (aka CPL) linearization. Figures out which order to search through\n * base classes to determine what should override what. C3 does the \"right\n * thing\", and it's what Python has used since 2.3.\n *\n * Kind of complicated to explain, but not really that complicated in\n * implementation. Explanations:\n *\n * http://people.csail.mit.edu/jrb/goo/manual.43/goomanual_55.html\n * http://www.python.org/download/releases/2.3/mro/\n * http://192.220.96.201/dylan/linearization-oopsla96.html\n *\n * This implementation is based on a post by Samuele Pedroni on python-dev\n * (http://mail.python.org/pipermail/python-dev/2002-October/029176.html) when\n * discussing its addition to Python.\n */\nfunction $buildMRO() {\n    // MERGE(klass + mro(bases) + bases)\n    const all = [[this]];\n    const kbases = this.prototype.tp$bases;\n\n    for (let i = 0; i < kbases.length; ++i) {\n        all.push([...kbases[i].prototype.tp$mro]);\n    }\n\n    const bases = [];\n    for (let i = 0; i < kbases.length; ++i) {\n        bases.push(kbases[i]);\n    }\n    all.push(bases);\n\n    return this.$mroMerge(all);\n}\n\nfunction $allocateSlots() {\n    // only allocate certain slots\n    const proto = this.prototype;\n    if (this.prototype.sk$prototypical) {\n        Object.keys(proto).forEach((dunder) => {\n            if (dunder in Sk.slots) {\n                this.$allocateSlot(dunder, proto[dunder]);\n            }\n        });\n    } else {\n        Object.keys(Sk.slots).forEach((dunder) => {\n            if (proto.hasOwnProperty(dunder)) {\n                this.$allocateSlot(dunder, proto[dunder]);\n            } else {\n                this.$allocateGetterSlot(dunder);\n            }\n        });\n    }\n}\n\nfunction $allocateSlot(dunder, dunderFunc) {\n    const slot_def = Sk.slots[dunder];\n    const slot_name = slot_def.$slot_name;\n    const proto = this.prototype;\n    if (proto.hasOwnProperty(slot_name)) {\n        delete proto[slot_name]; // required in order to override the multiple inheritance getter slots\n    }\n    proto[slot_name] = slot_def.$slot_func(dunderFunc);\n}\n\nfunction $allocateGetterSlot(dunder) {\n    const slot_name = Sk.slots[dunder].$slot_name;\n    const proto = this.prototype;\n    if (proto.hasOwnProperty(slot_name)) {\n        return; // double slots can be problematic\n    }\n    Object.defineProperty(proto, slot_name, {\n        configurable: true,\n        get() {\n            const mro = proto.tp$mro;\n            for (let i = 1; i < mro.length; i++) {\n                const base_proto = mro[i].prototype;\n                const property = Object.getOwnPropertyDescriptor(base_proto, slot_name);\n                if (property !== undefined && property.value) {\n                    return property.value;\n                }\n            }\n        },\n    });\n}\n\nSk.builtin.type.prototype.tp$getsets = {\n    __base__: {\n        $get() {\n            return this.prototype.tp$base || Sk.builtin.none.none$;\n        },\n    },\n    __bases__: {\n        $get() {\n            if (this.sk$tuple_bases === undefined) {\n                this.sk$tuple_bases = new Sk.builtin.tuple(this.prototype.tp$bases);\n                // make sure we always return the same tuple\n            }\n            return this.sk$tuple_bases;\n        },\n    },\n    __mro__: {\n        $get() {\n            if (this.sk$tuple_mro === undefined) {\n                this.sk$tuple_mro = new Sk.builtin.tuple(this.prototype.tp$mro);\n                // make sure we always return the same tuple\n            }\n            return this.sk$tuple_mro;\n        },\n    },\n    __dict__: {\n        $get() {\n            return new Sk.builtin.mappingproxy(this.prototype);\n        },\n    },\n    __doc__: {\n        $get() {\n            const doc = this.$typeLookup(Sk.builtin.str.$doc);\n            if (doc) {\n                if (doc.tp$descr_get !== undefined) {\n                    if (this === Sk.builtin.type) {\n                        return new Sk.builtin.str(this.prototype.tp$doc);\n                    }\n                    return doc.tp$descr_get(null, this);\n                }\n                return this.prototype.__doc__;\n            }\n            return Sk.builtin.none.none$;\n        },\n        $set(value) {\n            check_special_type_attr(this, value, Sk.builtin.str.$doc);\n            this.prototype.__doc__ = value;\n        },\n    },\n    __name__: {\n        $get() {\n            let name = this.prototype.ht$name;\n            if (name !== undefined) {\n                return new Sk.builtin.str(name);\n            }\n            name = this.prototype.tp$name;\n            if (name.includes(\".\")) {\n                name = name.slice(name.lastIndexOf(\".\") + 1);\n            }\n            return new Sk.builtin.str(name);\n        },\n        $set(value) {\n            check_special_type_attr(this, value, Sk.builtin.str.$name);\n            if (!Sk.builtin.checkString(value)) {\n                throw new Sk.builtin.TypeError(\n                    \"can only assign string to \" +\n                        this.prototype.tp$name +\n                        \".__name__, not '\" +\n                        Sk.abstr.typeName(value) +\n                        \"'\"\n                );\n            }\n            this.prototype.ht$name = value;\n            this.prototype.tp$name = value.$jsstr();\n        },\n    },\n    __qualname__: {\n        $get() {\n            // todo\n            return this.prototype.ht$qualname || Sk.abstr.lookupSpecial(this, Sk.builtin.str.$name);\n        },\n        $set(value) {\n            check_special_type_attr(this, value, Sk.builtin.str.$name);\n            if (!Sk.builtin.checkString(value)) {\n                throw new Sk.builtin.TypeError(\n                    \"can only assign string to \" +\n                        this.prototype.tp$name +\n                        \".__qualname__, not '\" +\n                        Sk.abstr.typeName(value) +\n                        \"'\"\n                );\n            }\n            this.prototype.ht$qualname = value;\n        },\n    },\n    __module__: {\n        $get() {\n            const typeproto = this.prototype;\n            const mod = typeproto.__module__;\n            if (mod && !(mod.ob$type === Sk.builtin.getset_descriptor)) {\n                return mod;\n            }\n            if (typeproto.tp$name.includes(\".\")) {\n                return new Sk.builtin.str(\n                    typeproto.tp$name.slice(0, typeproto.tp$name.lastIndexOf(\".\"))\n                );\n            }\n            return new Sk.builtin.str(\"builtins\");\n        },\n        $set(value) {\n            // they can set the module to whatever they like\n            check_special_type_attr(this, value, Sk.builtin.str.$module);\n            this.prototype.__module__ = value;\n        },\n    },\n};\n\nSk.builtin.type.prototype.tp$methods = /**@lends {Sk.builtin.type.prototype}*/ {\n    mro: {\n        $meth() {\n            return new Sk.builtin.list(this.$buildMRO());\n        },\n        $flags: { NoArgs: true },\n    },\n    __dir__: {\n        $meth: function __dir__() {\n            const seen = new Set();\n            const dir = [];\n            function push_or_continue(attr) {\n                if (attr in Sk.reservedWords_) {\n                    return;\n                }\n                attr = Sk.unfixReserved(attr);\n                if (attr.indexOf(\"$\") !== -1) {\n                    return;\n                }\n                if (!seen.has(attr)) {\n                    seen.add(attr);\n                    dir.push(new Sk.builtin.str(attr));\n                }\n            }\n            if (this.prototype.sk$prototypical) {\n                for (let attr in this.prototype) {\n                    push_or_continue(attr);\n                }\n            } else {\n                const mro = this.prototype.tp$mro;\n                for (let i = 0; i < mro.length; i++) {\n                    const attrs = Object.getOwnPropertyNames(mro[i].prototype);\n                    for (let j = 0; j < attrs.length; j++) {\n                        push_or_continue(attrs[j]);\n                    }\n                }\n            }\n            return new Sk.builtin.list(dir);\n        },\n        $flags: { NoArgs: true },\n        $doc: \"Specialized __dir__ implementation for types.\",\n    },\n};\n\n// similar to generic.getSetDict but have to check if there is a builtin __dict__ descriptor that we should use first!\nconst subtype_dict_getset_description = {\n    $get() {\n        const dict_descr = get_dict_descr_of_builtn_base(this.ob$type);\n        if (dict_descr !== undefined) {\n            return dict_descr.tp$descr_get(this, this.ob$type);\n        }\n        return Sk.generic.getSetDict.$get.call(this);\n    },\n    $set(value) {\n        const dict_descr = get_dict_descr_of_builtn_base(this.ob$type);\n        if (dict_descr !== undefined) {\n            return dict_descr.tp$descr_set(this, value);\n        }\n        if (value === undefined) {\n            this.$d = new Sk.builtin.dict([]);\n        } else {\n            return Sk.generic.getSetDict.$set.call(this, value);\n        }\n    },\n    $doc: \"dictionary for instance variables (if defined)\",\n    $name: \"__dict__\",\n};\n\nfunction get_dict_descr_of_builtn_base(type) {\n    while (type.prototype.tp$base !== null) {\n        if (type.sk$klass === undefined) {\n            if (type.prototype.hasOwnProperty(\"__dict__\")) {\n                const descr = type.prototype.__dict__;\n                return Sk.builtin.checkDataDescr(descr) ? descr : undefined;\n            }\n        }\n        type = type.prototype.tp$base;\n    }\n}\n\nfunction check_special_type_attr(type, value, pyName) {\n    if (type.sk$klass === undefined) {\n        throw new Sk.builtin.TypeError(\n            \"can't set \" + type.prototype.tp$name + \".\" + pyName.$jsstr()\n        );\n    }\n    if (value === undefined) {\n        throw new Sk.builtin.TypeError(\n            \"can't delete \" + type.prototype.tp$name + \".\" + pyName.$jsstr()\n        );\n    }\n}\n", "/**\n * @namespace Sk.generic\n *\n * @description\n * Some useful default methods for native classes\n *\n */\nSk.generic = {};\n\n/** @typedef {Sk.builtin.object} */ var pyObject;\n/** @typedef {Sk.builtin.type|Function} */ var typeObject;\n\n/**\n * @method\n *\n * @param {Sk.builtin.str} pyName Python string name of the attribute\n * @param {boolean=} canSuspend Can we return a suspension?\n *\n * @description\n * The default implementation of __getattribute__. This is used by most instances and will be inherited from object.\n *\n * If undefined is returned by this method then the object has no attribute\n * It is the responsibility of the user to throw the error.\n * Currently this is thrown in Sk.abstr.gattr or directly in compile code\n *\n * @return {Sk.builtin.object|undefined}\n */\nSk.generic.getAttr = function __getattribute__(pyName, canSuspend) {\n    let f;\n    const type = this.ob$type;\n    const descr = type.$typeLookup(pyName);\n    // look in the type for a descriptor\n    if (descr !== undefined) {\n        f = descr.tp$descr_get;\n        if (f !== undefined && descr.tp$descr_set !== undefined) {\n            // then we're a data descriptor\n            return f.call(descr, this, type, canSuspend);\n        }\n    }\n\n    const dict = this.$d;\n\n    if (dict !== undefined) {\n        const res = dict.quick$lookup(pyName);\n        if (res !== undefined) {\n            return res;\n        }\n    }\n    if (f !== undefined) {\n        return f.call(descr, this, type, canSuspend);\n    }\n    if (descr !== undefined) {\n        return descr;\n    }\n    return;\n};\nSk.exportSymbol(\"Sk.generic.getAttr\", Sk.generic.getAttr);\n\n/**\n * @method\n *\n * @description\n * The default implementation of __setattr__/__delattr__ used by most instance objects\n * There is no return value for this function\n * An error will be thrown if no attribute exists\n *\n * A value=undefined signifies that the attribute is to be deleted\n *\n * @param {Sk.builtin.str} pyName\n * @param {Sk.builtin.object|undefined} value\n * @param {boolean=} canSuspend ? can this function suspend\n * @return {undefined}\n */\nSk.generic.setAttr = function __setattr__(pyName, value, canSuspend) {\n    const descr = this.ob$type.$typeLookup(pyName);\n    // otherwise, look in the type for a descr\n    if (descr !== undefined && descr !== null) {\n        const f = descr.tp$descr_set;\n        // todo; is this the right lookup priority for data descriptors?\n        if (f) {\n            return f.call(descr, this, value, canSuspend);\n        }\n    }\n\n    const dict = this.$d;\n    if (dict !== undefined) {\n        if (dict.mp$ass_subscript) {\n            if (value !== undefined) {\n                return dict.mp$ass_subscript(pyName, value);\n            } else {\n                try {\n                    return dict.mp$ass_subscript(pyName);\n                } catch (e) {\n                    if (e instanceof Sk.builtin.KeyError) {\n                        throw new Sk.builtin.AttributeError(\n                            \"'\" +\n                                Sk.abstr.typeName(this) +\n                                \"' object has no attribute '\" +\n                                pyName.$jsstr() +\n                                \"'\"\n                        );\n                    }\n                    throw e;\n                }\n            }\n        } else if (typeof dict === \"object\") {\n            const jsMangled = pyName.$mangled;\n            if (value !== undefined) {\n                dict[jsMangled] = value;\n                return;\n            } else if (dict[jsMangled] !== undefined) {\n                delete dict[jsMangled];\n                return;\n            }\n        }\n    }\n    throw new Sk.builtin.AttributeError(\n        this.sk$attrError() + \" has no attribute '\" + pyName.$jsstr() + \"'\"\n    );\n};\nSk.exportSymbol(\"Sk.generic.setAttr\", Sk.generic.setAttr);\n\n/**\n * @method\n *\n * @description\n * The default implementation of tp$new for builtin type objects that are mutable\n * args and kwargs are ignored\n * either a new instance of the builtin is returned or an instance of a subtype\n *\n * @see {Sk.builtin.type.prototype.tp$new}\n *\n * @param {typeObject} builtin\n */\nSk.generic.new = function (builtin) {\n    const genericNew = function __new__(args, kwargs) {\n        // this = prototype of an sk$type object.\n        if (this.constructor === builtin) {\n            return new this.constructor();\n        } else {\n            const instance = new this.constructor();\n            // now we want to apply instance to the builtin\n            builtin.call(instance);\n            return instance;\n        }\n    };\n    return genericNew;\n};\n\n/**\n * @method\n *\n * @description\n * method definitaion for __new__ that wraps tp$new\n * typically called by subtypes using super().__new__(args, kwargs)\n *\n * the algorithm follows Cpython\n *\n * @see {Sk.slots.__new__}\n *\n */\nSk.generic.newMethodDef = {\n    $meth(args, kwargs) {\n        // this = a type object\n        let this_name, subs_name;\n        const native_type_proto = this.prototype;\n\n        if (args.length < 1) {\n            this_name = native_type_proto.tp$name;\n            throw new Sk.builtin.TypeError(this_name + \".__new__(): not enough arguments\");\n        }\n\n        const subtype = args.shift();\n\n        if (subtype.sk$type === undefined) {\n            this_name = native_type_proto.tp$name;\n            throw new Sk.builtin.TypeError(\n                this_name +\n                    \"__new__(X): X is not a type object (\" +\n                    Sk.abstr.typeName(subtype) +\n                    \")\"\n            );\n        }\n\n        if (!subtype.$isSubType(this)) {\n            this_name = native_type_proto.tp$name;\n            subs_name = subtype.prototype.tp$name;\n            throw new Sk.builtin.TypeError(\n                this_name +\n                    \".__new__(\" +\n                    subs_name +\n                    \"): \" +\n                    subs_name +\n                    \" is not a subtype of \" +\n                    this_name\n            );\n        }\n        /* from CPython: Check that the use doesn't do something silly and unsafe like\n       object.__new__(dict).  To do this, we check that the\n       most derived base that's not a heap type is this type. */\n\n        /**@todo is  prototypical inheritance fine here - i think it is because of the best base algorithm*/\n        const static_proto = subtype.prototype.sk$staticNew.prototype;\n\n        if (static_proto.tp$new !== native_type_proto.tp$new) {\n            this_name = native_type_proto.tp$name;\n            subs_name = subtype.prototype.tp$name;\n            const suitable = static_proto.tp$name;\n            throw new Sk.builtin.TypeError(\n                this_name +\n                    \".__new__(\" +\n                    subs_name +\n                    \") is not safe, use \" +\n                    suitable +\n                    \".__new__()\"\n            );\n        }\n        return native_type_proto.tp$new.call(subtype.prototype, args, kwargs);\n    },\n    $flags: { FastCall: true },\n    $textsig: \"($type, *args, **kwargs)\",\n    $name: \"__new__\",\n};\n\n/**\n * @description\n * used by most iterators that return self\n *\n * @function\n */\nSk.generic.selfIter = function __iter__() {\n    return this;\n};\n\n/**\n * @method\n *\n * @description\n * the $seq of the iterator must be an array\n * $orig must be provided and must have a get$size private method\n * note we do not use sq$length since this can be override by subclasses\n *\n * typically used by mutable iterators like dict_iter_ and set_iter_\n */\nSk.generic.iterNextWithArrayCheckSize = function __next__() {\n    if (this.$seq.length !== this.$orig.get$size()) {\n        const error_name = this.tp$name.split(\"_\")[0];\n        throw new Sk.builtin.RuntimeError(error_name + \" changed size during iteration\");\n    } else if (this.$index >= this.$seq.length) {\n        return undefined;\n    }\n    return this.$seq[this.$index++];\n};\n\n/**\n * @method\n *\n * @description\n * the $seq of the iterator must be an array\n */\nSk.generic.iterNextWithArray = function __next__() {\n    const next = this.$seq[this.$index++];\n    if (next === undefined) {\n        this.tp$iternext = () => undefined; // consumed iterator\n    }\n    return next;\n};\n\n/**\n * @method\n *\n * @description\n * compares the $seq.length to the $index\n */\nSk.generic.iterLengthHintWithArrayMethodDef = {\n    $meth: function __length_hint__() {\n        return new Sk.builtin.int_(this.$seq.length - this.$index);\n    },\n    $flags: { NoArgs: true },\n};\n\n/**\n * @method\n *\n * @description\n * returns the current index\n */\nSk.generic.iterReverseLengthHintMethodDef = {\n    $meth: function __length_hint__() {\n        return new Sk.builtin.int_(this.$index);\n    },\n    $flags: { NoArgs: true },\n};\n\n/**\n * @description\n * typical implementation of `__dict__` for type objects that support it\n */\nSk.generic.getSetDict = {\n    $get() {\n        return this.$d;\n    },\n    $set(value) {\n        if (value === undefined) {\n            throw new Sk.builtin.TypeError(\"cannot delete __dict__\");\n        } else if (value instanceof Sk.builtin.dict) {\n            this.$d = value;\n        } else {\n            throw new Sk.builtin.TypeError(\n                \"__dict__ must be set to a dictionary, not a '\" + Sk.abstr.typeName(value) + \"'\"\n            );\n        }\n    },\n    $doc: \"dictionary for instance variables (if defined)\",\n    $name: \"__dict__\",\n};\n\n/**\n * Logic used by seq and tuple to do rich comparisons\n */\nSk.generic.seqCompare = function (other, op) {\n    if (this === other && Sk.misceval.opAllowsEquality(op)) {\n        return true;\n    }\n    // w not a tuple\n    if (!(other instanceof this.sk$builtinBase)) {\n        return Sk.builtin.NotImplemented.NotImplemented$;\n    }\n    const v = this.v;\n    const w = other.v;\n    let i;\n    if (v.length !== w.length && (op === \"Eq\" || op === \"NotEq\")) {\n        /* Shortcut: if the lengths differ, the tuples differ */\n        return op === \"Eq\" ? false : true;\n    }\n    for (i = 0; i < v.length && i < w.length; ++i) {\n        if (!(v[i] === w[i] || Sk.misceval.richCompareBool(v[i], w[i], \"Eq\"))) {\n            break;\n        }\n    }\n    const vl = v.length; // it's possible for list lengths to have changed during iteration!\n    const wl = w.length;\n    if (i >= vl || i >= wl) {\n        // no more items to compare, compare sizes\n        switch (op) {\n            case \"Lt\":\n                return vl < wl;\n            case \"LtE\":\n                return vl <= wl;\n            case \"Eq\":\n                return vl === wl;\n            case \"NotEq\":\n                return vl !== wl;\n            case \"Gt\":\n                return vl > wl;\n            case \"GtE\":\n                return vl >= wl;\n            default:\n                Sk.asserts.fail();\n        }\n    }\n\n    // we have an item that's different\n    // shortcuts for eq/not\n    if (op === \"Eq\") {\n        return false;\n    }\n    if (op === \"NotEq\") {\n        return true;\n    }\n\n    // or, compare the differing element using the proper operator\n    return Sk.misceval.richCompareBool(v[i], w[i], op);\n};\n\nSk.generic.classGetItem = {\n    __class_getitem__: {\n        $meth(args) {\n            return new Sk.builtin.GenericAlias(this, args);\n        },\n        $flags: { OneArg: true },\n    },\n};\n", "/**\n * Check arguments to Python functions to ensure the correct number of\n * arguments are passed.\n *\n * @param {string} name the name of the function\n * @param {Object} args the args passed to the function\n * @param {number} minargs the minimum number of allowable arguments\n * @param {number=} maxargs optional maximum number of allowable\n * arguments (default: Infinity)\n * @param {boolean=} kwargs optional true if kwargs, false otherwise\n * (default: false)\n * @param {boolean=} free optional true if free vars, false otherwise\n * (default: false)\n */\nSk.builtin.pyCheckArgs = function (name, args, minargs, maxargs, kwargs, free) {\n    var nargs = args.length;\n    var msg = \"\";\n\n    if (maxargs === undefined) {\n        maxargs = Infinity;\n    }\n    if (kwargs) {\n        nargs -= 1;\n    }\n    if (free) {\n        nargs -= 1;\n    }\n    if (nargs < minargs || nargs > maxargs) {\n        if (minargs === maxargs) {\n            msg = name + \"() takes exactly \" + minargs + \" arguments\";\n        } else if (nargs < minargs) {\n            msg = name + \"() takes at least \" + minargs + \" arguments\";\n        } else if (minargs > 0) {\n            msg = name + \"() takes at most \" + maxargs + \" arguments\";\n        } else {\n            msg = name + \"() takes no arguments\";\n        }\n        msg += \" (\" + nargs + \" given)\";\n        throw new Sk.builtin.TypeError(msg);\n    }\n};\nSk.exportSymbol(\"Sk.builtin.pyCheckArgs\", Sk.builtin.pyCheckArgs);\n\n/**\n * Check arguments to Python functions to ensure the correct number of\n * arguments are passed.\n *\n * @param {string} name the name of the function\n * @param {number} nargs the args passed to the function\n * @param {number} minargs the minimum number of allowable arguments\n * @param {number=} maxargs optional maximum number of allowable\n * arguments (default: Infinity)\n * @param {boolean=} kwargs optional true if kwargs, false otherwise\n * (default: false)\n * @param {boolean=} free optional true if free vars, false otherwise\n * (default: false)\n */\nSk.builtin.pyCheckArgsLen = function (name, nargs, minargs, maxargs, kwargs, free) {\n    var msg = \"\";\n\n    if (maxargs === undefined) {\n        maxargs = Infinity;\n    }\n    if (kwargs) {\n        nargs -= 1;\n    }\n    if (free) {\n        nargs -= 1;\n    }\n    if (nargs < minargs || nargs > maxargs) {\n        if (minargs === maxargs) {\n            msg = name + \"() takes exactly \" + minargs + \" arguments\";\n        } else if (nargs < minargs) {\n            msg = name + \"() takes at least \" + minargs + \" arguments\";\n        } else {\n            msg = name + \"() takes at most \" + maxargs + \" arguments\";\n        }\n        msg += \" (\" + nargs + \" given)\";\n        throw new Sk.builtin.TypeError(msg);\n    }\n};\n\n/**\n * Check type of argument to Python functions.\n *\n * @param {string} name the name of the argument\n * @param {string} exptype string of the expected type name\n * @param {boolean} check truthy if type check passes, falsy otherwise\n */\nSk.builtin.pyCheckType = function (name, exptype, check) {\n    if (!check) {\n        throw new Sk.builtin.TypeError(name + \" must be a \" + exptype);\n    }\n};\nSk.exportSymbol(\"Sk.builtin.pyCheckType\", Sk.builtin.pyCheckType);\n\n/**\n * @function\n * @param {*} arg\n *\n * @description\n * Does the arg have a valid `__getitem__` method?\n */\nSk.builtin.checkSequence = function (arg) {\n    return arg != null && arg.mp$subscript !== undefined;\n};\nSk.exportSymbol(\"Sk.builtin.checkSequence\", Sk.builtin.checkSequence);\n\n/**\n * @description\n * Use this to test whether or not a Python object is iterable.  You should **not** rely\n * on the presence of tp$iter on the object as a good test, as it could be a user defined\n * class with `__iter__` defined or ``__getitem__``  This tests for all of those cases\n *\n * Note in most cases it will be more pragmatic to simply call {@link Sk.abstr.iter} which will\n * throw the appropriate error if the pyObject is not iterable.\n *\n * @param arg {Object}   A Python object\n * @returns {boolean} true if the object is iterable\n */\nSk.builtin.checkIterable = function (arg) {\n    if (arg === undefined) {\n        return false;\n    }\n    if (arg.tp$iter) {\n        const iter = arg.tp$iter();\n        return iter.tp$iternext !== undefined;\n    }\n    return arg.mp$subscript !== undefined;\n};\nSk.exportSymbol(\"Sk.builtin.checkIterable\", Sk.builtin.checkIterable);\n\n/**\n * @function\n * @param {*} obj\n */\nSk.builtin.checkCallable = function (obj) {\n    // takes care of builtin functions and methods, builtins\n    return obj != null && obj.tp$call !== undefined;\n};\n\n/**\n * @function\n * @description\n * Is the object an instance of {@link Sk.builtin.int_} or {@link Sk.builtin.float_}\n *\n * @param {*} arg\n */\nSk.builtin.checkNumber = function (arg) {\n    return (\n        typeof arg === \"number\" ||\n        arg instanceof Sk.builtin.int_ ||\n        arg instanceof Sk.builtin.float_ ||\n        arg instanceof Sk.builtin.lng\n    );\n};\nSk.exportSymbol(\"Sk.builtin.checkNumber\", Sk.builtin.checkNumber);\n\n/**\n * @description\n * Is the arg an instance of {@link Sk.builtin.complex}\n */\nSk.builtin.checkComplex = function (arg) {\n    return arg instanceof Sk.builtin.complex;\n};\nSk.exportSymbol(\"Sk.builtin.checkComplex\", Sk.builtin.checkComplex);\n\n/**\n * @description\n * Supports both JS Number and pyObject\n * @param {*} arg\n */\nSk.builtin.checkInt = function (arg) {\n    return arg instanceof Sk.builtin.int_ || (typeof arg === \"number\" && Number.isInteger(arg));\n};\nSk.exportSymbol(\"Sk.builtin.checkInt\", Sk.builtin.checkInt);\n\n/**\n * @description\n * Is the arg an instance of {@link Sk.builtin.float_}\n * @param {*} arg\n */\nSk.builtin.checkFloat = function (arg) {\n    return arg instanceof Sk.builtin.float_;\n};\nSk.exportSymbol(\"Sk.builtin.checkFloat\", Sk.builtin.checkFloat);\n\n/**\n * @description\n * Is the arg an instance of {@link Sk.builtin.str}\n * @param {*} arg\n */\nSk.builtin.checkString = function (arg) {\n    return arg instanceof Sk.builtin.str;\n};\nSk.exportSymbol(\"Sk.builtin.checkString\", Sk.builtin.checkString);\n\n/**\n * @description\n * Is the arg an instance of {@link Sk.builtin.bytes}\n * @param {*} arg\n */\nSk.builtin.checkBytes = function (arg) {\n    return arg instanceof Sk.builtin.bytes;\n};\n\n/**\n * Is the arg an instance of {@link Sk.builtin.type}\n * @param {*} arg\n */\nSk.builtin.checkClass = function (arg) {\n    return arg instanceof Sk.builtin.type;\n};\nSk.exportSymbol(\"Sk.builtin.checkClass\", Sk.builtin.checkClass);\n\n/**\n * @description\n * Is the arg an instance of {@link Sk.builtin.bool}\n * @param {*} arg\n */\nSk.builtin.checkBool = function (arg) {\n    return arg instanceof Sk.builtin.bool;\n};\nSk.exportSymbol(\"Sk.builtin.checkBool\", Sk.builtin.checkBool);\n\nSk.builtin.checkNone = function (arg) {\n    return arg === Sk.builtin.none.none$;\n};\nSk.exportSymbol(\"Sk.builtin.checkNone\", Sk.builtin.checkNone);\n\n/**\n * @description\n * Is the arg callable?\n * @param {*} arg\n */\nSk.builtin.checkFunction = function (arg) {\n    return arg != null && arg.tp$call !== undefined;\n};\nSk.exportSymbol(\"Sk.builtin.checkFunction\", Sk.builtin.checkFunction);\n\nSk.builtin.checkDataDescr = function (arg) {\n    return arg && arg.tp$descr_set !== undefined;\n};\nSk.exportSymbol(\"Sk.builtin.checkDataDescr\", Sk.builtin.checkDataDescr);\n\n/**\n * @description\n * Is the arg ain instance of {@link Sk.builtin.set} or {@link Sk.builtin.frozenset}\n * @param {*} arg\n */\nSk.builtin.checkAnySet = function (arg) {\n    return arg instanceof Sk.builtin.set || arg instanceof Sk.builtin.frozenset;\n};\n\nSk.builtin.checkMapping = function (arg) {\n    return (\n        arg instanceof Sk.builtin.dict ||\n        arg instanceof Sk.builtin.mappingproxy ||\n        (arg != null &&\n            arg.mp$subscript !== undefined &&\n            Sk.abstr.lookupSpecial(arg, Sk.builtin.str.$keys) !== undefined)\n    );\n};\n", "/**\n * @namespace Sk.abstr\n *\n * @description\n * A collection of functions that can be used to interact with Skulpt Python Objects\n */\nSk.abstr = {};\n\n/**@typedef {Sk.builtin.object}*/ var pyObject;\n/** @typedef {Sk.builtin.type|FunctionConstructor}*/ var typeObject;\n\n/**\n * @function\n * @description\n * Typically used withing error messages\n *\n * @example\n * throw new Sk.builtin.TypeError(\"expected an 'int' (got '\" + Sk.abstr.typeName(i) + \"'\");\n *\n * @param {*} obj\n * @returns {string} - returns the typeName of any pyObject or `<invaid type>` if a JS object was passed\n */\nSk.abstr.typeName = function (obj) {\n    if (obj != null && obj.tp$name !== undefined) {\n        let name = obj.ht$name;\n        if (name !== undefined) {\n            return name.toString();\n        }\n        name = obj.tp$name;\n        if (name.includes(\".\")) {\n            name = name.slice(name.lastIndexOf(\".\") + 1);\n        }\n        return name;\n    } else {\n        Sk.asserts.fail(obj + \" passed to typeName\");\n        return \"<invalid type>\";\n    }\n};\n\nconst binop_name_to_symbol = {\n    Add: \"+\",\n    Sub: \"-\",\n    Mult: \"*\",\n    MatMult: \"@\",\n    Div: \"/\",\n    FloorDiv: \"//\",\n    Mod: \"%\",\n    DivMod: \"divmod()\",\n    Pow: \"** or pow()\",\n    LShift: \"<<\",\n    RShift: \">>\",\n    BitAnd: \"&\",\n    BitXor: \"^\",\n    BitOr: \"|\",\n};\n\nfunction binop_type_error(v, w, name) {\n    const vtypename = Sk.abstr.typeName(v);\n    const wtypename = Sk.abstr.typeName(w);\n    throw new Sk.builtin.TypeError(\n        \"unsupported operand type(s) for \" +\n            binop_name_to_symbol[name] +\n            \": '\" +\n            vtypename +\n            \"' and '\" +\n            wtypename +\n            \"'\"\n    );\n}\n\nfunction biniop_type_error(v, w, name) {\n    const vtypename = Sk.abstr.typeName(v);\n    const wtypename = Sk.abstr.typeName(w);\n    throw new Sk.builtin.TypeError(\n        \"unsupported operand type(s) for \" +\n            binop_name_to_symbol[name] +\n            \"=: '\" +\n            vtypename +\n            \"' and '\" +\n            wtypename +\n            \"'\"\n    );\n}\n\nconst uop_name_to_symbol = {\n    UAdd: \"+\",\n    USub: \"-\",\n    Invert: \"~\",\n};\nfunction unop_type_error(v, name) {\n    var vtypename = Sk.abstr.typeName(v);\n    throw new Sk.builtin.TypeError(\n        \"bad operand type for unary \" + uop_name_to_symbol[name] + \": '\" + vtypename + \"'\"\n    );\n}\n\n/**\n * lookup and return the LHS object slot function method.  This could be either a builtin slot function or a dunder method defined by the user.\n *\n * @param obj\n * @param name\n *\n * @returns {Function|undefined}\n *\n * @private\n */\nfunction boNameToSlotFuncLhs_(obj, name) {\n    switch (name) {\n        case \"Add\":\n            return obj.nb$add;\n        case \"Sub\":\n            return obj.nb$subtract;\n        case \"Mult\":\n            return obj.nb$multiply;\n        case \"MatMult\":\n            if (Sk.__future__.python3) {\n                return obj.nb$matrix_multiply;\n            }\n        case \"Div\":\n            return obj.nb$divide;\n        case \"FloorDiv\":\n            return obj.nb$floor_divide;\n        case \"Mod\":\n            return obj.nb$remainder;\n        case \"DivMod\":\n            return obj.nb$divmod;\n        case \"Pow\":\n            return obj.nb$power;\n        case \"LShift\":\n            return obj.nb$lshift;\n        case \"RShift\":\n            return obj.nb$rshift;\n        case \"BitAnd\":\n            return obj.nb$and;\n        case \"BitXor\":\n            return obj.nb$xor;\n        case \"BitOr\":\n            return obj.nb$or;\n    }\n}\n\nfunction boNameToSlotFuncRhs_(obj, name) {\n    switch (name) {\n        case \"Add\":\n            return obj.nb$reflected_add;\n        case \"Sub\":\n            return obj.nb$reflected_subtract;\n        case \"Mult\":\n            return obj.nb$reflected_multiply;\n        case \"MatMult\":\n            if (Sk.__future__.python3) {\n                return obj.nb$reflected_matrix_multiply;\n            }\n        case \"Div\":\n            return obj.nb$reflected_divide;\n        case \"FloorDiv\":\n            return obj.nb$reflected_floor_divide;\n        case \"Mod\":\n            return obj.nb$reflected_remainder;\n        case \"DivMod\":\n            return obj.nb$reflected_divmod;\n        case \"Pow\":\n            return obj.nb$reflected_power;\n        case \"LShift\":\n            return obj.nb$reflected_lshift;\n        case \"RShift\":\n            return obj.nb$reflected_rshift;\n        case \"BitAnd\":\n            return obj.nb$reflected_and;\n        case \"BitXor\":\n            return obj.nb$reflected_xor;\n        case \"BitOr\":\n            return obj.nb$reflected_or;\n    }\n}\n\nfunction iboNameToSlotFunc_(obj, name) {\n    switch (name) {\n        case \"Add\":\n            return obj.nb$inplace_add;\n        case \"Sub\":\n            return obj.nb$inplace_subtract;\n        case \"Mult\":\n            return obj.nb$inplace_multiply;\n        case \"MatMult\":\n            if (Sk.__future__.python3) {\n                return obj.nb$inplace_matrix_multiply;\n            }\n        case \"Div\":\n            return obj.nb$inplace_divide;\n        case \"FloorDiv\":\n            return obj.nb$inplace_floor_divide;\n        case \"Mod\":\n            return obj.nb$inplace_remainder;\n        case \"Pow\":\n            return obj.nb$inplace_power;\n        case \"LShift\":\n            return obj.nb$inplace_lshift;\n        case \"RShift\":\n            return obj.nb$inplace_rshift;\n        case \"BitAnd\":\n            return obj.nb$inplace_and;\n        case \"BitOr\":\n            return obj.nb$inplace_or;\n        case \"BitXor\":\n            return obj.nb$inplace_xor;\n    }\n}\n\nfunction uoNameToSlotFunc_(obj, name) {\n    switch (name) {\n        case \"USub\":\n            return obj.nb$negative;\n        case \"UAdd\":\n            return obj.nb$positive;\n        case \"Invert\":\n            return obj.nb$invert;\n    }\n}\n\nfunction binary_op_(v, w, opname) {\n    // All Python inheritance is now enforced with Javascript inheritance\n    // (see Sk.abstr.setUpInheritance). This checks if w's type is a strict\n    // subclass of v's type\n    const w_type = w.constructor;\n    const v_type = v.constructor;\n    const w_is_subclass =\n        w_type !== v_type && w_type.sk$baseClass === undefined && w instanceof v_type;\n\n    // From the Python 2.7 docs:\n    //\n    // \"If the right operand\u2019s type is a subclass of the left operand\u2019s type and\n    // that subclass provides the reflected method for the operation, this\n    // method will be called before the left operand\u2019s non-reflected method.\n    // This behavior allows subclasses to override their ancestors\u2019 operations.\"\n    //\n    // -- https://docs.python.org/2/reference/datamodel.html#index-92\n\n    let wop;\n    let ret;\n    let tried_reflected = false;\n    if (w_is_subclass) {\n        wop = boNameToSlotFuncRhs_(w, opname);\n        if (wop === undefined) {\n            tried_reflected = true;\n        } else if (wop !== boNameToSlotFuncRhs_(v, opname)) {\n            tried_reflected = true;\n            ret = wop.call(w, v);\n            if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n                return ret;\n            }\n        }\n    }\n\n    const vop = boNameToSlotFuncLhs_(v, opname);\n    if (vop !== undefined) {\n        ret = vop.call(v, w);\n        if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n            return ret;\n        }\n    }\n    // try the RHS if we haven't tried it yet and we're not the same type see test_magicmethods.py\n    if (!tried_reflected && w_type !== v_type) {\n        wop || (wop = boNameToSlotFuncRhs_(w, opname));\n        if (wop !== undefined) {\n            ret = wop.call(w, v);\n            if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n                return ret;\n            }\n        }\n    }\n}\n\nfunction binary_iop_(v, w, opname) {\n    const vop = iboNameToSlotFunc_(v, opname);\n    if (vop !== undefined) {\n        const ret = vop.call(v, w);\n        if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n            return ret;\n        }\n    }\n    // If there wasn't an in-place operation, fall back to the binop\n    return binary_op_(v, w, opname);\n}\n\nfunction unary_op_(v, opname) {\n    const vop = uoNameToSlotFunc_(v, opname);\n    if (vop !== undefined) {\n        return vop.call(v);\n    }\n}\n\n/**\n * @function\n * @description\n * Perform a binary operation with any pyObjects that support the operation\n * @param {pyObject} v\n * @param {pyObject} w\n * @param {string} op - `Add`, `Sub`, `Mult`, `Divide`, ...\n *\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.numberBinOp = function (v, w, op) {\n    return binary_op_(v, w, op) || binop_type_error(v, w, op);\n};\nSk.exportSymbol(\"Sk.abstr.numberBinOp\", Sk.abstr.numberBinOp);\n\n/**\n * @function\n * @description\n * Perform an inplace operation with any pyObjects that support the operation\n * @param {pyObject} v\n * @param {pyObject} w\n * @param {string} op - `Add`, `Sub`, `Mult`, `Divide`, ...\n *\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.numberInplaceBinOp = function (v, w, op) {\n    return binary_iop_(v, w, op) || biniop_type_error(v, w, op);\n};\nSk.exportSymbol(\"Sk.abstr.numberInplaceBinOp\", Sk.abstr.numberInplaceBinOp);\n\n/**\n * @function\n * @description\n * Perform a unary operation with any pyObjects that support the operation\n * @param {pyObject} v\n * @param {string} op - `UAdd`, `USub`\n *\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.numberUnaryOp = function (v, op) {\n    if (op === \"Not\") {\n        return Sk.misceval.isTrue(v) ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$;\n    }\n    return unary_op_(v, op) || unop_type_error(v, op);\n};\nSk.exportSymbol(\"Sk.abstr.numberUnaryOp\", Sk.abstr.numberUnaryOp);\n\n/**\n * @deprecated\n */\nSk.abstr.fixSeqIndex_ = function (seq, i) {\n    i = Sk.builtin.asnum$(i);\n    if (i < 0 && seq.sq$length) {\n        i += seq.sq$length();\n    }\n    return i;\n};\n\n/**\n * @param {pyObject} seq\n * @param {pyObject} ob\n * @param {boolean=} canSuspend\n *\n */\nSk.abstr.sequenceContains = function (seq, ob, canSuspend) {\n    if (seq.sq$contains) {\n        return seq.sq$contains(ob, canSuspend);\n    }\n    const r = Sk.misceval.iterFor(\n        Sk.abstr.iter(seq),\n        function (i) {\n            if (i === ob || Sk.misceval.richCompareBool(i, ob, \"Eq\")) {\n                return new Sk.misceval.Break(true);\n            } else {\n                return false;\n            }\n        },\n        false\n    );\n    return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);\n};\n\nSk.abstr.sequenceConcat = function (s, o) {\n    if (s.sq$concat) {\n        return s.sq$concat(o);\n    }\n    // user defined classes don't have a sq$concat only nb$add\n    if (Sk.builtin.checkSequence(s) && Sk.builtin.checkSequence(o)) {\n        const res = binary_op_(s, o, \"Add\");\n        if (res !== undefined) {\n            return res;\n        }\n    }\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(s) + \"' object can't be concatenated\");\n};\n\nSk.abstr.sequenceInPlaceConcat = function (s, o) {\n    if (s.sq$inplace_concat) {\n        return s.sq$inplace_concat(o);\n    } else if (s.sq$concat) {\n        return s.sq$concat(o);\n    }\n    // user defined classes don't have a sq$concat only nb$add\n    if (Sk.builtin.checkSequence(s) && Sk.builtin.checkSequence(o)) {\n        const res = binary_iop_(s, o, \"Add\");\n        if (res !== undefined) {\n            return res;\n        }\n    }\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(s) + \"' object can't be concatenated\");\n};\n\n/**\n * @param {pyObject} seq\n * @param {pyObject} ob\n */\nSk.abstr.sequenceGetIndexOf = function (seq, ob) {\n    if (seq.index) {\n        return Sk.misceval.callsimArray(seq.index, [seq, ob]);\n    }\n    let index = 0;\n    for (let it = Sk.abstr.iter(seq), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {\n        if (Sk.misceval.richCompareBool(ob, i, \"Eq\")) {\n            return new Sk.builtin.int_(index);\n        }\n        index += 1;\n    }\n    throw new Sk.builtin.ValueError(\"sequence.index(x): x not in sequence\");\n};\n\n/**\n * @param {pyObject} seq\n * @param {pyObject} ob\n */\nSk.abstr.sequenceGetCountOf = function (seq, ob) {\n    if (seq.count) {\n        return Sk.misceval.callsimArray(seq.count, [seq, ob]);\n    }\n    let count = 0;\n    for (let it = Sk.abstr.iter(seq), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {\n        if (Sk.misceval.richCompareBool(ob, i, \"Eq\")) {\n            count += 1;\n        }\n    }\n    return new Sk.builtin.int_(count);\n};\n\nSk.abstr.sequenceGetItem = function (seq, i, canSuspend) {\n    if (typeof i === \"number\") {\n        i = new Sk.builtin.int_(i);\n    }\n    return Sk.abstr.objectGetItem(seq, i, canSuspend);\n};\n\nSk.abstr.sequenceSetItem = function (seq, i, x, canSuspend) {\n    if (typeof i === \"number\") {\n        i = new Sk.builtin.int_(i);\n    }\n    return Sk.abstr.objectSetItem(seq, i, x, canSuspend);\n};\n\nSk.abstr.sequenceDelItem = function (seq, i, canSuspend) {\n    return Sk.abstr.objectDelItem(seq, i, canSuspend);\n};\n\nSk.abstr.sequenceGetSlice = function (seq, i1, i2) {\n    return Sk.abstr.objectGetItem(seq, new Sk.builtin.slice(i1, i2));\n};\n\nSk.abstr.sequenceDelSlice = function (seq, i1, i2) {\n    return Sk.abstr.objectDelItem(seq, new Sk.builtin.slice(i1, i2));\n};\n\nSk.abstr.sequenceSetSlice = function (seq, i1, i2, x) {\n    return Sk.abstr.objectSetItem(seq, new Sk.builtin.slice(i1, i2));\n};\n\n/**\n *\n * @param {*} seq the iterable to unpack\n * @param {*} breakIdx either the starred index or the number of elements to unpack if no star\n * @param {*} numvals the total number of un-starred indices\n * @param {*} hasStar is there a starred index\n *\n * this function is used in compile code to unpack a sequence to an assignment statement\n * e.g.\n * a, b, c = 1, 2, 3 # seq is the tuple 1,2,3\n * // Sk.abstr.sequenceUncpack(seq, 3, 3, false)\n * // return [int_(1), int_(2), int_(3)]\n *\n *\n * a, *b, c = 1,2,3,4\n * // Sk.abstr.sequenceUncpack(seq, 1, 2, true)\n * // return [int_(1), list(int_(2), int_(3)), int_(4)]\n *\n */\nSk.abstr.sequenceUnpack = function (seq, breakIdx, numvals, hasStar) {\n    if (!Sk.builtin.checkIterable(seq)) {\n        throw new Sk.builtin.TypeError(\n            \"cannot unpack non-iterable \" + Sk.abstr.typeName(seq) + \" object\"\n        );\n    }\n    const it = Sk.abstr.iter(seq);\n    const res = [];\n    let i = 0;\n    let upToStar;\n    if (breakIdx > 0) {\n        // iterator up to but not including the breakIdx\n        upToStar = Sk.misceval.iterFor(it, (nxt) => {\n            res.push(nxt);\n            if (++i === breakIdx) {\n                return new Sk.misceval.Break();\n            }\n        });\n    }\n\n    return Sk.misceval.chain(upToStar, () => {\n        if (res.length < breakIdx) {\n            throw new Sk.builtin.ValueError(\n                \"not enough values to unpack (expected at least \" +\n                    numvals +\n                    \", got \" +\n                    res.length +\n                    \")\"\n            );\n        }\n        if (!hasStar) {\n            // check we've consumed the iterator\n            return Sk.misceval.chain(it.tp$iternext(true), (nxt) => {\n                if (nxt !== undefined) {\n                    throw new Sk.builtin.ValueError(\n                        \"too many values to unpack (expected \" + breakIdx + \")\"\n                    );\n                }\n                return res;\n            });\n        }\n        const starred = [];\n        return Sk.misceval.chain(\n            Sk.misceval.iterFor(it, (nxt) => {\n                starred.push(nxt);\n            }),\n            () => {\n                const starred_end = starred.length + breakIdx - numvals;\n                if (starred_end < 0) {\n                    throw new Sk.builtin.ValueError(\n                        \"not enough values to unpack (expected at least \" +\n                            numvals +\n                            \", got \" +\n                            (numvals + starred_end) +\n                            \")\"\n                    );\n                }\n                res.push(new Sk.builtin.list(starred.slice(0, starred_end)));\n                res.push(...starred.slice(starred_end));\n                // Return Javascript array of items\n                return res;\n            }\n        );\n    });\n};\n\n// Unpack mapping into a JS array of alternating keys/values, possibly suspending\n// Skulpt uses a slightly grungy format for keyword args\n// into misceval.apply() and friends (alternating JS strings and Python values).\n// We should probably migrate that interface to using Python strings\n// at some point, but in the meantime we have this function to\n// unpack keyword dictionaries into our special format\nSk.abstr.mappingUnpackIntoKeywordArray = function (jsArray, pyMapping, pyCodeObject) {\n    if (pyMapping instanceof Sk.builtin.dict) {\n        pyMapping.$items().forEach(([key, val]) => {\n            if (!Sk.builtin.checkString(key)) {\n                throw new Sk.builtin.TypeError(\n                    (pyCodeObject.$qualname ? pyCodeObject.$qualname + \"() \" : \"\") +\n                        \"keywords must be strings\"\n                );\n            }\n            jsArray.push(key.v);\n            jsArray.push(val);\n        });\n        return;\n    }\n\n    const keyf = Sk.abstr.lookupSpecial(pyMapping, Sk.builtin.str.$keys);\n    if (keyf === undefined) {\n        throw new Sk.builtin.TypeError(\"Object is not a mapping\");\n    }\n    return Sk.misceval.chain(Sk.misceval.callsimOrSuspendArray(keyf), (keys) =>\n        Sk.misceval.iterFor(Sk.abstr.iter(keys), (key) => {\n            if (!Sk.builtin.checkString(key)) {\n                throw new Sk.builtin.TypeError(\n                    (pyCodeObject.$qualname ? pyCodeObject.$qualname + \"() \" : \"\") +\n                        \"keywords must be strings\"\n                );\n            }\n            return Sk.misceval.chain(pyMapping.mp$subscript(key, true), (val) => {\n                jsArray.push(key.v);\n                jsArray.push(val);\n            });\n        })\n    );\n};\n\nSk.abstr.keywordArrayFromPyDict = function (dict) {\n    const kwarray = [];\n    dict.$items().forEach(([key, val]) => {\n        if (!Sk.builtin.checkString(key)) {\n            throw new Sk.builtin.TypeError(\"keywords must be strings\");\n        }\n        kwarray.push(key.toString());\n        kwarray.push(val);\n    });\n    return kwarray;\n};\n\nSk.abstr.keywordArrayToPyDict = function (kwarray) {\n    const dict = new Sk.builtin.dict();\n    for (let i = 0; i < kwarray.length; i += 2) {\n        dict.mp$ass_subscript(new Sk.builtin.str(kwarray[i]), kwarray[i + 1]);\n    }\n    return dict;\n};\n\n/**\n *\n * @function\n * @description\n * A helper function used by native js functions whose call method is FastCall i.e. the args and kwargs are provided as Array objects.\n *\n * @param {string} func_name - used for error messages\n * @param {Array<null|string>} varnames - Argument names to map to. For position only arguments use null\n * @param {Array} args - typically provided by the `tp$call` method\n * @param {Array|undefined} kwargs - typically provided the `tp$call` method\n * @param {Array=} defaults\n * @throws {Sk.builtin.TypeError}\n *\n * @example\n * // base is a possible keyword argument for int_ and x is a position only argument\n * Sk.builtin.int_.prototype.tp$new = function(args, kwargs) {\n *     args = Sk.abstr.copyKeywordsToNamedArgs(\"int\", [null, \"base\"], args, kwargs, [\n *         new Sk.builtin.int_(0),\n *         Sk.builtin.none.none$\n *     ]);\n * }\n */\nSk.abstr.copyKeywordsToNamedArgs = function (func_name, varnames, args, kwargs, defaults) {\n    // args is an array, kwargs is an array or undefined\n    kwargs = kwargs || [];\n\n    const nargs = args.length + kwargs.length / 2;\n    if (nargs > varnames.length) {\n        throw new Sk.builtin.TypeError(\n            func_name +\n                \"() expected at most \" +\n                varnames.length +\n                \" arguments (\" +\n                nargs +\n                \" given)\"\n        );\n    }\n    if (!kwargs.length && defaults === undefined) {\n        // no defaults supplied\n        return args;\n    } else if (nargs === varnames.length && !kwargs.length) {\n        // position only arguments match\n        return args;\n    } else if (nargs === 0 && varnames.length === (defaults && defaults.length)) {\n        // a fast case - no args so just return the defaults\n        return defaults;\n    }\n    args = args.slice(0); // make a copy of args\n\n    for (let i = 0; i < kwargs.length; i += 2) {\n        const name = kwargs[i]; // JS string\n        if (name === null) {\n            continue;\n        }\n        const value = kwargs[i + 1]; // Python value\n        const idx = varnames.indexOf(name);\n\n        if (idx >= 0) {\n            if (args[idx] !== undefined) {\n                throw new Sk.builtin.TypeError(\n                    func_name + \"() got multiple values for argument '\" + name + \"'\"\n                );\n            }\n            args[idx] = value;\n        } else {\n            throw new Sk.builtin.TypeError(\n                func_name + \"() got an unexpected keyword argument '\" + name + \"'\"\n            );\n        }\n    }\n    if (defaults) {\n        const nargs = varnames.length;\n        for (let i = nargs - 1; i >= 0; i--) {\n            if (args[i] === undefined) {\n                args[i] = defaults[defaults.length - 1 - (nargs - 1 - i)];\n            }\n        }\n        const missing = varnames.filter((x, i) => args[i] === undefined);\n        if (missing.length) {\n            throw new Sk.builtin.TypeError(\n                func_name +\n                    \"() missing \" +\n                    missing.length +\n                    \" required positional arguments: \" +\n                    missing.join(\", \")\n            );\n        }\n    }\n\n    return args;\n};\nSk.exportSymbol(\"Sk.abstr.copyKeywordsToNamedArgs\", Sk.abstr.copyKeywordsToNamedArgs);\n\n/**\n * @function\n * @param {string} func_name\n * @param {Array|undefined} kwargs\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.checkNoKwargs = function (func_name, kwargs) {\n    if (kwargs && kwargs.length) {\n        throw new Sk.builtin.TypeError(func_name + \"() takes no keyword arguments\");\n    }\n};\nSk.exportSymbol(\"Sk.abstr.checkNoKwargs\", Sk.abstr.checkNoKwargs);\n\n/**\n * @function\n * @param {string} func_name\n * @param {Array} args\n * @param {Array|undefined=} kwargs\n *\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.checkNoArgs = function (func_name, args, kwargs) {\n    const nargs = args.length + (kwargs ? kwargs.length : 0);\n    if (nargs) {\n        throw new Sk.builtin.TypeError(func_name + \"() takes no arguments (\" + nargs + \" given)\");\n    }\n};\nSk.exportSymbol(\"Sk.abstr.checkNoArgs\", Sk.abstr.checkNoArgs);\n\n/**\n * @function\n * @param {string} func_name\n * @param {Array} args\n * @param {Array|undefined=} kwargs\n * @throws {Sk.builtin.TypeError}\n */\nSk.abstr.checkOneArg = function (func_name, args, kwargs) {\n    Sk.abstr.checkNoKwargs(func_name, kwargs);\n    if (args.length !== 1) {\n        throw new Sk.builtin.TypeError(\n            func_name + \"() takes exactly one argument (\" + args.length + \" given)\"\n        );\n    }\n};\nSk.exportSymbol(\"Sk.abstr.checkOneArg\", Sk.abstr.checkOneArg);\n\n/**\n * @function\n * @param {string} func_name\n * @param {Array} args\n * @param {number} minargs\n * @param {number=} [maxargs=Infinity]\n * @throws {Sk.builtin.TypeError}\n *\n */\nSk.abstr.checkArgsLen = function (func_name, args, minargs, maxargs) {\n    const nargs = args.length;\n    let msg;\n    if (maxargs === undefined) {\n        maxargs = Infinity;\n    }\n    if (nargs < minargs || nargs > maxargs) {\n        if (minargs === maxargs) {\n            msg = func_name + \"() takes exactly \" + minargs + \" arguments\";\n        } else if (nargs < minargs) {\n            msg = func_name + \"() takes at least \" + minargs + \" arguments\";\n        } else {\n            msg = func_name + \"() takes at most \" + maxargs + \" arguments\";\n        }\n        msg += \" (\" + nargs + \" given)\";\n        throw new Sk.builtin.TypeError(msg);\n    }\n};\nSk.exportSymbol(\"Sk.abstr.checkArgsLen\", Sk.abstr.checkArgsLen);\n\nSk.abstr.objectFormat = function (obj, format_spec) {\n    if (format_spec === undefined) {\n        format_spec = Sk.builtin.str.$emptystr;\n    } else if (!Sk.builtin.checkString(format_spec)) {\n        throw new Sk.builtin.TypeError(\n            \"Format specifier must be a string, not \" + Sk.abstr.typeName(format_spec)\n        );\n    }\n    const meth = Sk.abstr.lookupSpecial(obj, Sk.builtin.str.$format); // inherited from object so guaranteed to exist\n    const result = Sk.misceval.callsimArray(meth, [format_spec]);\n    if (!Sk.builtin.checkString(result)) {\n        throw new Sk.builtin.TypeError(\n            \"__format__ must return a str, not \" + Sk.abstr.typeName(result)\n        );\n    }\n    return result;\n};\n\n/**\n *\n * @param {pyObject} obj\n *\n * @returns {Number} the hash value a number less than Number.MAX_SAFE_INTEGER\n * @throws {Sk.buitin.TypeError} if the object is unhashable\n */\nSk.abstr.objectHash = function (obj) {\n    const hash_func = obj.tp$hash;\n    if (hash_func !== undefined) {\n        if (Sk.builtin.checkNone(hash_func)) {\n            throw new Sk.builtin.TypeError(\"unhashable type: '\" + Sk.abstr.typeName(obj) + \"'\");\n        }\n        return obj.tp$hash();\n    }\n    throw new Sk.builtin.TypeError(\"unsupported Javascript type\");\n};\n\nSk.abstr.objectAdd = function (a, b) {\n    if (a.nb$add) {\n        return a.nb$add(b);\n    }\n    const atypename = Sk.abstr.typeName(a);\n    const btypename = Sk.abstr.typeName(b);\n    throw new Sk.builtin.TypeError(\n        \"unsupported operand type(s) for +: '\" + atypename + \"' and '\" + btypename + \"'\"\n    );\n};\n\n// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)\nSk.abstr.objectNegative = function (obj) {\n    if (obj.nb$negative) {\n        return obj.nb$negative();\n    }\n    throw new Sk.builtin.TypeError(\n        \"bad operand type for unary -: '\" + Sk.abstr.typeName(obj) + \"'\"\n    );\n};\n\nSk.abstr.objectPositive = function (obj) {\n    if (obj.nb$positive) {\n        return obj.nb$positive();\n    }\n    throw new Sk.builtin.TypeError(\n        \"bad operand type for unary +: '\" + Sk.abstr.typeName(obj) + \"'\"\n    );\n};\n\nSk.abstr.objectDelItem = function (o, key, canSuspend) {\n    if (o.mp$ass_subscript) {\n        return o.mp$ass_subscript(key, undefined, canSuspend);\n    }\n    throw new Sk.builtin.TypeError(\n        \"'\" + Sk.abstr.typeName(o) + \"' object does not support item deletion\"\n    );\n};\nSk.exportSymbol(\"Sk.abstr.objectDelItem\", Sk.abstr.objectDelItem);\n\n/**\n *\n * @param {pyObject} o\n * @param {pyObject} key\n * @param {boolean=} canSuspend\n */\nSk.abstr.objectGetItem = function (o, key, canSuspend) {\n    if (o.mp$subscript) {\n        return o.mp$subscript(key, canSuspend);\n    }\n    if (Sk.builtin.checkClass(o)) {\n        if (o === Sk.builtin.type) {\n            return new Sk.builtin.GenericAlias(o, key);\n        }\n        const meth = Sk.abstr.typeLookup(o, Sk.builtin.str.$class_getitem);\n        if (meth !== undefined) {\n            const res = Sk.misceval.callsimOrSuspendArray(meth, [key]);\n            return canSuspend ? res : Sk.misceval.retryOptionalSuspensionOrThrow(res);\n        }\n    }\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(o) + \"' does not support indexing\");\n};\nSk.exportSymbol(\"Sk.abstr.objectGetItem\", Sk.abstr.objectGetItem);\n\n/**\n *\n * @param {pyObject} o\n * @param {pyObject} key\n * @param {pyObject=} v\n * @param {boolean=} canSuspend\n */\nSk.abstr.objectSetItem = function (o, key, v, canSuspend) {\n    if (o.mp$ass_subscript) {\n        return o.mp$ass_subscript(key, v, canSuspend);\n    }\n    throw new Sk.builtin.TypeError(\n        \"'\" + Sk.abstr.typeName(o) + \"' does not support item assignment\"\n    );\n};\nSk.exportSymbol(\"Sk.abstr.objectSetItem\", Sk.abstr.objectSetItem);\n\n/**\n *\n * @param {pyObject} obj\n * @param {Sk.builtin.str} pyName\n * @param {boolean=} canSuspend\n */\nSk.abstr.gattr = function (obj, pyName, canSuspend) {\n    // let the getattr and setattr's deal with reserved words - we don't want to pass a mangled pyName to tp$getattr!!\n    const ret = obj.tp$getattr(pyName, canSuspend);\n    if (ret === undefined) {\n        throw new Sk.builtin.AttributeError(\n            obj.sk$attrError() + \" has no attribute '\" + pyName.$jsstr() + \"'\"\n        );\n    } else if (ret.$isSuspension) {\n        return Sk.misceval.chain(ret, function (r) {\n            if (r === undefined) {\n                throw new Sk.builtin.AttributeError(\n                    obj.sk$attrError() + \" has no attribute '\" + pyName.$jsstr() + \"'\"\n                );\n            }\n            return r;\n        });\n    } else {\n        return ret;\n    }\n};\nSk.exportSymbol(\"Sk.abstr.gattr\", Sk.abstr.gattr);\n\nSk.abstr.sattr = function (obj, pyName, data, canSuspend) {\n    return obj.tp$setattr(pyName, data, canSuspend);\n};\nSk.exportSymbol(\"Sk.abstr.sattr\", Sk.abstr.sattr);\n\nSk.abstr.iternext = function (it, canSuspend) {\n    return it.tp$iternext(canSuspend);\n};\nSk.exportSymbol(\"Sk.abstr.iternext\", Sk.abstr.iternext);\n\n/**\n * @function\n *\n * @description\n * Get the iterator for a Python object  This iterator could be one of the following.\n * This is the preferred mechanism for consistently getting the correct iterator.  You should\n * not just use tp$iter because that could lead to incorrect behavior of a user created class.\n *\n * - `tp$iter`\n * - A user defined `__iter__` method\n * - A user defined `__getitem__` method\n *\n * @param {pyObject} obj\n *\n * @throws {Sk.builtin.TypeError} If the object passed is not iterable\n * @returns {pyObject}\n */\nSk.abstr.iter = function (obj) {\n    if (obj.tp$iter) {\n        const iter = obj.tp$iter();\n        if (iter.tp$iternext) {\n            // only a valid iterator if there is a tp$iternext\n            return iter;\n        }\n        throw new Sk.builtin.TypeError(\n            \"iter() returned non-iterator of type '\" + Sk.abstr.typeName(iter) + \"'\"\n        );\n    }\n    if (obj.mp$subscript) {\n        return new Sk.builtin.seq_iter_(obj);\n    }\n\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(obj) + \"' object is not iterable\");\n};\nSk.exportSymbol(\"Sk.abstr.iter\", Sk.abstr.iter);\n\n/**\n * @description\n * Special method look up.\n * Checks whether the attribute is defined on object type's prototype\n *\n * @returns {undefined | Object} Return undefined if not found or the function\n *\n * @param {pyObject} obj\n * @param {Sk.builtin.str} pyName\n */\nSk.abstr.lookupSpecial = function (obj, pyName) {\n    var obtype = obj.ob$type;\n    if (obtype === undefined) {\n        Sk.asserts.fail(\"javascript object sent to lookupSpecial\");\n        return;\n    }\n    var func = obtype.$typeLookup(pyName);\n    if (func === undefined) {\n        return;\n    } else if (func.tp$descr_get !== undefined) {\n        func = func.tp$descr_get(obj, obtype);\n    }\n    return func;\n};\nSk.exportSymbol(\"Sk.abstr.lookupSpecial\", Sk.abstr.lookupSpecial);\n\nSk.abstr.typeLookup = function (type_obj, pyName) {\n    const res = type_obj.$typeLookup(pyName);\n    if (res !== undefined && res.tp$descr_get) {\n        return res.tp$descr_get(null, type_obj);\n    }\n    return res;\n};\n\n/**\n * Mark a class as unhashable and prevent its `__hash__` function from being called.\n * @param  {*} thisClass The class to mark as unhashable.\n * @return {undefined}\n */\nSk.abstr.markUnhashable = function (thisClass) {\n    const proto = thisClass.prototype;\n    proto.__hash__ = Sk.builtin.none.none$;\n    proto.tp$hash = Sk.builtin.none.none$;\n};\n\n/**\n * @description\n * Set up inheritance between two Python classes. This allows only for single\n * inheritance -- multiple inheritance is not supported by Javascript.\n * multiple inheritance is dealt with by tp$getattr implementations\n *\n * Javascript's inheritance is prototypal. This means that properties must\n * be defined on the superclass' prototype in order for subclasses to inherit\n * them.\n *\n * ```\n * Sk.superclass.myProperty                 # will NOT be inherited\n * Sk.superclass.prototype.myProperty       # will be inherited\n * ```\n *\n * In order for a class to be subclassable, it must (directly or indirectly)\n * inherit from Sk.builtin.object so that it will be properly initialized in\n * {@link Sk.doOneTimeInitialization} (in src/import.js). Further, all Python\n * builtins should inherit from Sk.builtin.object.\n *\n * @param {string} childName The Python name of the child (subclass).\n * @param {FunctionConstructor} child     The subclass.\n * @param {FunctionConstructor=} [parent=Sk.builtin.object]    The base of child.\n * @param {FunctionConstructor=} [metaclass=Sk.builtin.type]\n *\n * @returns {FunctionConstructor}\n *\n */\nSk.abstr.setUpInheritance = function (childName, child, parent, metaclass) {\n    metaclass = metaclass || Sk.builtin.type;\n    parent = parent === undefined ? Sk.builtin.object : parent;\n    const parentproto = parent !== null ? parent.prototype : null;\n    Object.setPrototypeOf(child, metaclass.prototype);\n    Object.setPrototypeOf(child.prototype, parentproto);\n    Object.defineProperties(child.prototype, {\n        sk$object: { value: child, writable: true },\n        ob$type: { value: child, writable: true },\n        tp$name: { value: childName, writable: true },\n        tp$base: { value: parent, writable: true },\n    });\n};\n\n/**\n * This function is called in {@link Sk.doOneTimeInitialization}\n * and {@link Sk.abstr.buildNativeClass}\n *\n * @param  {FunctionConstructor} child\n *\n */\nSk.abstr.setUpBuiltinMro = function (child) {\n    let base = child.prototype.tp$base;\n    const bases = base === null ? [] : [base];\n    if (base === Sk.builtin.object || base === null) {\n        Object.defineProperty(child, \"sk$baseClass\", { value: true, writable: true });\n        Object.defineProperty(child.prototype, \"sk$builtinBase\", { value: child, writable: true });\n    }\n    // assume solid base - this can be overridden later in flags\n    Object.defineProperty(child, \"sk$solidBase\", { value: true, writable: true });\n    const mro = [child];\n    while (base !== null) {\n        mro.push(base);\n        base = base.prototype.tp$base;\n    }\n\n    // internally we keep the mro and bases as array objects\n    // the wrapper descripor returns the tuple of the array\n    Object.defineProperties(child.prototype, {\n        sk$prototypical: { value: true, writable: true },\n        tp$bases: { value: bases, writable: true },\n        tp$mro: { value: mro, writable: true },\n    });\n    Object.defineProperty(child, \"$typeLookup\", {\n        value: function (pyName) {\n            var jsName = pyName.$mangled;\n            return this.prototype[jsName];\n        },\n        writable: true,\n    });\n};\n/**\n * @param {FunctionConstructor} klass\n * @param {Object=} getsets\n */\nSk.abstr.setUpGetSets = function (klass, getsets) {\n    if (Sk.builtin.getset_descriptor === undefined) {\n        return;\n    }\n    const klass_proto = klass.prototype;\n    getsets = getsets || klass_proto.tp$getsets || {};\n    Object.entries(getsets).forEach(([getset_name, getset_def]) => {\n        getset_def.$name = getset_name;\n        klass_proto[getset_name] = new Sk.builtin.getset_descriptor(klass, getset_def);\n    });\n    Object.defineProperty(klass_proto, \"tp$getsets\", { value: null, writable: true });\n};\n\n/**\n *\n * @param {FunctionConstructor} klass\n * @param {Object=} methods\n */\nSk.abstr.setUpMethods = function (klass, methods) {\n    if (Sk.builtin.method_descriptor === undefined) {\n        return;\n    }\n    const klass_proto = klass.prototype;\n    methods = methods || klass_proto.tp$methods || {};\n    Object.entries(methods).forEach(([method_name, method_def]) => {\n        method_def.$name = method_name;\n        klass_proto[method_name] = new Sk.builtin.method_descriptor(klass, method_def);\n    });\n    Object.defineProperty(klass_proto, \"tp$methods\", { value: null, writable: true });\n};\n\n/**\n *\n * @param {FunctionConstructor} klass\n * @param {Object=} methods\n */\nSk.abstr.setUpClassMethods = function (klass, methods) {\n    if (Sk.builtin.classmethod_descriptor === undefined) {\n        return;\n    }\n    const klass_proto = klass.prototype;\n    methods = methods || klass_proto.tp$classmethods || {};\n    Object.entries(methods).forEach(([method_name, method_def]) => {\n        method_def.$name = method_name;\n        klass_proto[method_name] = new Sk.builtin.classmethod_descriptor(klass, method_def);\n    });\n    Object.defineProperty(klass_proto, \"tp$classmethods\", { value: null, writable: true });\n};\n\nconst op2shortcut = Object.entries({\n    Eq: \"ob$eq\",\n    NotEq: \"ob$ne\",\n    Gt: \"ob$gt\",\n    GtE: \"ob$ge\",\n    Lt: \"ob$lt\",\n    LtE: \"ob$le\",\n});\n\nfunction _set_up_richcompare_wrappers(slots) {\n    op2shortcut.forEach(([op, shortcut]) => {\n        slots[shortcut] = function (other) {\n            return this.tp$richcompare(other, op);\n        };\n    });\n}\n\nfunction _set_up_reflected_number_slots(slots) {\n    // do the reflected slots\n    const reflected_slots = Sk.reflectedNumberSlots;\n    Object.keys(reflected_slots).forEach((slot_name) => {\n        if (slots[slot_name] !== undefined) {\n            const reflected_slot_def = reflected_slots[slot_name];\n            const reflect_name = reflected_slot_def.reflected;\n            const reflected_slot = slots[reflect_name];\n            if (reflected_slot !== undefined) {\n                // the reflected slot was already defined so don't recreate it\n                if (reflected_slot === null) {\n                    delete slots[reflect_name]; // e.g. Counter doesn't want reflected slots\n                }\n            } else {\n                // either the reflected slot is a function or it's undefined\n                // if it's undefined then the reflected slot is the same as non reflected slot - like nb$add\n                slots[reflect_name] = reflected_slot_def.slot || slots[slot_name];\n            }\n        }\n    });\n}\n\nfunction _set_up_sequence_to_number_slots(slots) {\n    const sequenceToNumber = Sk.sequenceAndMappingSlots;\n    Object.keys(sequenceToNumber).forEach((slot_name) => {\n        if (slots[slot_name] !== undefined) {\n            const equiv_slots = sequenceToNumber[slot_name];\n            equiv_slots.forEach((equv_slot_name) => {\n                slots[equv_slot_name] = slots[slot_name];\n            });\n        }\n    });\n}\n\n/**\n *\n * @param {FunctionConstructor} klass\n * @param {Object=} slots\n */\nSk.abstr.setUpSlots = function (klass, slots) {\n    if (Sk.builtin.wrapper_descriptor === undefined) {\n        return;\n    }\n    const proto = klass.prototype;\n    slots = slots || proto.tp$slots || {};\n\n    // set up the raw slots on the proto\n\n    // start with tp$new - we couldn't call genericnew before the klass was defined so call it now\n    if (slots.tp$new === Sk.generic.new) {\n        slots.tp$new = Sk.generic.new(klass);\n    }\n\n    // wrap ob$eq slots into tp$richcompare\n    if (slots.tp$richcompare) {\n        // Either a klass defines a tp$richcompare slot or ob$eq slots\n        // if tp$richcompare is defined then create all the ob$eq slots\n        _set_up_richcompare_wrappers(slots);\n    }\n\n    // setup some reflected slots\n    if (slots.tp$as_number) {\n        _set_up_reflected_number_slots(slots);\n    }\n\n    // turn sequence slots into number slots\n    if (slots.tp$as_sequence_or_mapping) {\n        _set_up_sequence_to_number_slots(slots);\n    }\n\n    // make all slots non-enumerable - makes the dir implementation easier\n    Object.entries(slots).forEach(([slot_name, value]) => {\n        Object.defineProperty(proto, slot_name, {\n            value: value,\n            writable: true,\n        });\n    });\n\n    if (slots.tp$new) {\n        proto.__new__ = new Sk.builtin.sk_method(Sk.generic.newMethodDef, klass);\n        // this property is used in the implementation of calling __new__\n        Object.defineProperty(proto, \"sk$staticNew\", { value: klass, writable: true });\n    }\n\n    function wrap_func(dunder_name, wrapped_func) {\n        const slot_def = Sk.slots[dunder_name];\n        // we do this here because in the generic.wrapperCall methods the wrapped_func\n        // the wrapped func should have a $name property and a $flags property (for minArgs)\n        proto[dunder_name] = new Sk.builtin.wrapper_descriptor(klass, slot_def, wrapped_func);\n    }\n\n    function set_up_slot(dunder_name, wrapped_func) {\n        // some slots get multpile dunders\n        if (typeof dunder_name === \"string\") {\n            wrap_func(dunder_name, wrapped_func);\n        } else {\n            dunder_name.forEach((related_dunder_name) => {\n                wrap_func(related_dunder_name, wrapped_func);\n            });\n        }\n    }\n\n    // main slots\n    Sk.subSlots.main_slots.forEach(([slot_name, dunder_name]) => {\n        const wrapped_func = slots[slot_name];\n        if (wrapped_func !== undefined) {\n            set_up_slot(dunder_name, wrapped_func);\n        }\n    });\n\n    // __hash__\n    const hash = slots.tp$hash;\n    if (hash !== undefined) {\n        if (typeof hash === \"function\") {\n            wrap_func(\"__hash__\", hash);\n        } else if (hash === Sk.builtin.none.none$) {\n            proto.__hash__ = hash;\n        } else {\n            Sk.asserts.fail(\"invalid tp$hash\");\n        }\n    }\n\n    // number_slots\n    if (slots.tp$as_number) {\n        Sk.subSlots.number_slots.forEach(([slot_name, dunder_name]) => {\n            const wrapped_func = slots[slot_name];\n            if (wrapped_func !== undefined) {\n                set_up_slot(dunder_name, wrapped_func);\n            }\n        });\n    }\n\n    // as_sequence_or_mapping slots\n    if (slots.tp$as_sequence_or_mapping) {\n        Sk.subSlots.sequence_and_mapping_slots.forEach(([slot_name, dunder_name]) => {\n            const wrapped_func = slots[slot_name];\n            if (wrapped_func !== undefined) {\n                set_up_slot(dunder_name, wrapped_func);\n            }\n        });\n    }\n\n    Object.defineProperty(proto, \"tp$slots\", { value: null, writable: true });\n};\n\n/**\n * @function\n * @param {string} typename\n * @param {Object} options An object literal that provides the functionality of the typobject\n * @returns {FunctionConstructor}\n *\n * @description\n * this can be called to create a native typeobj\n * options include\n * ```\n * - base: default to {@link Sk.builtin.object}\n * - meta: default to {@link Sk.builtin.type}\n *\n * - slots: skulpt slot functions that will be allocated slot wrappers\n * - methods: method objects `{$meth: Function, $flags: callmethod, $doc: string, $textsic: string|null}`,\n * - getsets: getset objects `{$get: Function, $set: Function, $doc: string}`,\n * - classmethods: classmethod objects `{$meth: Function, $flags: callmethod, $doc: string, $textsic: string|null}`,\n *\n * - flags: Object allocated directly onto class like `klass.sk$unacceptableBase`\n * - proto: Object allocated onto the prototype useful for private methods\n * ```\n * See most builtin type objects for examples\n *\n */\nSk.abstr.buildNativeClass = function (typename, options) {\n    options = options || {};\n    Sk.asserts.assert(\n        options.hasOwnProperty(\"constructor\"),\n        \"A constructor is required to build a native class\"\n    );\n\n    /**@type {FunctionConstructor} */\n    let typeobject = options.constructor;\n\n    // set the prototypical chains for inheritance\n    Sk.abstr.setUpInheritance(typename, typeobject, options.base, options.meta);\n\n    // Native classes can only be single inheritance objects\n    Sk.abstr.setUpBuiltinMro(typeobject);\n\n    const type_proto = typeobject.prototype;\n\n    Object.defineProperties(type_proto, {\n        // memoise these and make them null later\n        tp$slots: { value: options.slots, writable: true },\n        tp$getsets: { value: options.getsets, writable: true },\n        tp$methods: { value: options.methods, writable: true },\n        tp$classmethods: { value: options.classmethods, writable: true },\n    });\n\n    Sk.abstr.setUpSlots(typeobject, /**@lends {typeobject.prototype} */ options.slots || {});\n    Sk.abstr.setUpMethods(typeobject, options.methods);\n    Sk.abstr.setUpGetSets(typeobject, options.getsets);\n    Sk.abstr.setUpClassMethods(typeobject, options.classmethods);\n\n    const proto = options.proto || {};\n    Object.entries(proto).forEach(([p, val]) => {\n        Object.defineProperty(type_proto, p, {\n            value: val,\n            writable: true,\n            enumerable: !(p.includes(\"$\") || p in Object.prototype),\n            // only make these private in these cases otherwise they're public methods\n        });\n    });\n\n    const flags = options.flags || {};\n    Object.entries(flags).forEach(([flag, val]) => {\n        Object.defineProperty(typeobject, flag, {\n            value: val,\n            writable: true,\n        });\n    });\n\n    // str might not have been created yet\n    if (\n        Sk.builtin.str !== undefined &&\n        type_proto.hasOwnProperty(\"tp$doc\") &&\n        !type_proto.hasOwnProperty(\"__doc__\")\n    ) {\n        const docstr = type_proto.tp$doc || null;\n        if (typeof docstr === \"string\") {\n            type_proto.__doc__ = new Sk.builtin.str(docstr);\n        } else {\n            type_proto.__doc__ = Sk.builtin.none.none$;\n        }\n    }\n    return typeobject;\n};\n\n/**\n * @function\n *\n * @param {string} typename e.g. \"itertools.chain\"\n * @param {Object} iterator minimum options `{constructor: function, iternext: function}`\n *\n * @description\n * effectively a wrapper for easily defining an iterator\n * `tp$iter` slot is added and returns self\n *\n * define a constructor in the usual way\n *\n * define `tp$iternext` using iternext in the object literal\n * mostly as a convenience\n * you can also define `tp$iternext` in the slots which will take priority\n *\n * the main benefit of this helper function is to reduce some repetitive code for defining an iterator class\n *\n * If you want a generic iterator see {@link Sk.miscival.iterator}\n *\n *\n * @example\n * Sk.builtin.tuple_iter_ = Sk.abstr.buildIteratorClass(\"tuple_iterator\", {\n    constructor: function tuple_iter_(tuple) {\n        this.$index = 0;\n        this.$seq = tuple.sk$asarray();\n    },\n    iternext: function () {\n        if (this.$index >= this.$seq.length) {\n            return undefined;\n        }\n        return this.$seq[this.$index++];\n    }\n});\n * @returns {FunctionConstructor}\n *\n */\n\nSk.abstr.buildIteratorClass = function (typename, iterator) {\n    Sk.asserts.assert(iterator.hasOwnProperty(\"constructor\"), \"must provide a constructor\");\n    iterator.slots = iterator.slots || {};\n    iterator.slots.tp$iter = Sk.generic.selfIter;\n    iterator.slots.tp$iternext = iterator.slots.tp$iternext || iterator.iternext;\n    iterator.slots.tp$getattr = iterator.slots.tp$getattr || Sk.generic.getAttr;\n    let ret = Sk.abstr.buildNativeClass(typename, iterator);\n    Sk.abstr.built$iterators.push(ret);\n    return ret;\n};\n\nSk.abstr.built$iterators = [];\n\nSk.abstr.setUpModuleMethods = function (module_name, module, method_defs) {\n    Object.entries(method_defs).forEach(([method_name, method_def]) => {\n        method_def.$name = method_def.$name || method_name; // operator e.g. some methods share method_defs\n        module[method_name] = new Sk.builtin.sk_method(method_def, null, module_name);\n    });\n};\n\n/**\n * Call the super constructor of the provided class, with the object `self` as\n * the `this` value of that constructor. Any arguments passed to this function\n * after `self` will be passed as-is to the constructor.\n *\n * @param  {*} thisClass The subclass.\n * @param  {Object} self      The instance of the subclas.\n * @param  {...?} args Arguments to pass to the constructor.\n * @return {undefined}\n * @deprecated\n */\nSk.abstr.superConstructor = function (thisClass, self, args) {\n    var argumentsForConstructor = Array.prototype.slice.call(arguments, 2);\n    thisClass.prototype.tp$base.apply(self, argumentsForConstructor);\n};\n", "const hashMap = new Map();\n/**\n *\n * @constructor\n *\n * @description\n * Constructor for Python object. All Python classes (builtin and user-defined)\n * should inherit from this class.\n *\n */\nSk.builtin.object = Sk.abstr.buildNativeClass(\"object\", {\n    constructor: function object() {\n        Sk.asserts.assert(this instanceof Sk.builtin.object, \"bad call to object, use 'new'\");\n    },\n    base: null,\n    slots: {\n        tp$new(args, kwargs) {\n            // see cypthon object_new for algorithm details we do two versions one for prototypical and one for not\n            if (args.length || (kwargs && kwargs.length)) {\n                if (this.tp$new !== Sk.builtin.object.prototype.tp$new) {\n                    throw new Sk.builtin.TypeError(\n                        \"object.__new__() takes exactly one argument (the type to instantiate)\"\n                    );\n                }\n                if (this.tp$init === Sk.builtin.object.prototype.tp$init) {\n                    throw new Sk.builtin.TypeError(\n                        Sk.abstr.typeName(this) + \"() takes no arguments\"\n                    );\n                }\n            }\n            return new this.constructor();\n        },\n        tp$init(args, kwargs) {\n            // see cypthon object_init for algorithm details\n            if (args.length || (kwargs && kwargs.length)) {\n                if (this.tp$init !== Sk.builtin.object.prototype.tp$init) {\n                    throw new Sk.builtin.TypeError(\n                        \"object.__init__() takes exactly one argument (the instance to initialize)\"\n                    );\n                }\n                if (this.tp$new === Sk.builtin.object.prototype.tp$new) {\n                    throw new Sk.builtin.TypeError(\n                        Sk.abstr.typeName(this) +\n                            \".__init__() takes exactly one argument (the instance to initialize)\"\n                    );\n                }\n            }\n        },\n        tp$getattr: Sk.generic.getAttr,\n        tp$setattr: Sk.generic.setAttr,\n        $r() {\n            const mod = Sk.abstr.lookupSpecial(this, Sk.builtin.str.$module);\n            let cname = \"\";\n            if (mod && Sk.builtin.checkString(mod)) {\n                cname = mod.v + \".\";\n            }\n            return new Sk.builtin.str(\"<\" + cname + Sk.abstr.typeName(this) + \" object>\");\n        },\n        tp$str() {\n            // if we're calling this function then the object has no __str__ or tp$str defined\n            return this.$r();\n        },\n        tp$hash() {\n            let hash = hashMap.get(this);\n            if (hash !== undefined) {\n                return hash;\n            }\n            hash = Math.floor(\n                Math.random() * Number.MAX_SAFE_INTEGER - Number.MAX_SAFE_INTEGER / 2\n            );\n            hashMap.set(this, hash);\n            return hash;\n        },\n        tp$richcompare(other, op) {\n            let res;\n            switch (op) {\n                case \"Eq\":\n                    res = this === other || Sk.builtin.NotImplemented.NotImplemented$;\n                    break;\n                case \"NotEq\":\n                    res = this.ob$eq(other, \"Eq\");\n                    if (res !== Sk.builtin.NotImplemented.NotImplemented$) {\n                        res = !Sk.misceval.isTrue(res);\n                    }\n                    break;\n                default:\n                    res = Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            return res;\n        },\n        tp$doc: \"The most base type\",\n    },\n    getsets: {\n        __class__: {\n            $get() {\n                return this.ob$type;\n            },\n            $set(value) {\n                if (value === undefined) {\n                    throw new Sk.builtin.TypeError(\"can't delete __class__ attribute\");\n                } else if (!Sk.builtin.checkClass(value)) {\n                    throw new Sk.builtin.TypeError(\n                        \"__class__ must be set to a class, not '\" +\n                            Sk.abstr.typeName(value) +\n                            \"' object\"\n                    );\n                }\n                const oldto = this.ob$type;\n                const newto = value;\n\n                if (\n                    !(oldto.$isSubType(Sk.builtin.module) && newto.$isSubType(Sk.builtin.module)) &&\n                    (oldto.sk$klass === undefined || newto.sk$klass === undefined)\n                ) {\n                    throw new Sk.builtin.TypeError(\n                        \" __class__ assignment only supported for heap types or ModuleType subclasses\"\n                    );\n                } else if (value.prototype.sk$builtinBase !== this.sk$builtinBase) {\n                    throw new Sk.builtin.TypeError(\n                        \"__class__ assignment: '\" +\n                            Sk.abstr.typeName(this) +\n                            \"' object layout differs from '\" +\n                            value.prototype.tp$name +\n                            \"'\"\n                    );\n                }\n                Object.setPrototypeOf(this, value.prototype);\n                return;\n            },\n            $doc: \"the object's class\",\n        },\n    },\n    methods: {\n        __dir__: {\n            $meth: function __dir__() {\n                let dir = [];\n                if (this.$d) {\n                    if (this.$d instanceof Sk.builtin.dict) {\n                        dir = this.$d.sk$asarray();\n                    } else {\n                        for (let key in this.$d) {\n                            dir.push(new Sk.builtin.str(key));\n                        }\n                    }\n                }\n                // here we use the type.__dir__ implementation\n                const type_dir = Sk.misceval.callsimArray(Sk.builtin.type.prototype.__dir__, [\n                    this.ob$type,\n                ]);\n                // put the dict keys before the prototype keys\n                dir.push(...type_dir.v);\n                type_dir.v = dir;\n                return type_dir;\n            },\n            $flags: { NoArgs: true },\n            $doc: \"Default dir() implementation.\",\n        },\n        __format__: {\n            $meth(format_spec) {\n                if (!Sk.builtin.checkString(format_spec)) {\n                    throw new Sk.builtin.TypeError(\n                        \"__format__() argument must be str, not \" + Sk.abstr.typeName(format_spec)\n                    );\n                } else if (format_spec !== Sk.builtin.str.$empty) {\n                    throw new Sk.builtin.TypeError(\n                        `unsupported format string passed to ${Sk.abstr.typeName(this)}.__format__`\n                    );\n                }\n                return this.tp$str();\n            },\n            $flags: { OneArg: true },\n            $doc: \"Default object formatter.\",\n        },\n    },\n    proto: /**@lends {Sk.builtin.object.prototype}*/ {\n        valueOf: Object.prototype.valueOf,\n        toString: function () {\n            //console.log(\"Calling toString on\", this);\n            //debugger;\n            return this.tp$str().v;\n        },\n        hasOwnProperty: Object.prototype.hasOwnProperty,\n        ht$type: undefined,\n        // private method used for error messages\n        sk$attrError() {\n            return \"'\" + this.tp$name + \"' object\";\n        },\n    },\n});\n\n/**\n * @description\n * We aim to match python and javascript inheritance like\n * type   instanceof object => true\n * object instanceof type   => true\n * type   instanceof type   => true\n * object instanceof object => true\n *\n * type   subclassof object => type.prototype   instanceof object => true\n * object subclassof type   => object.prototype instanceof type   => false\n *\n * this algorithm achieves the equivalent with the following prototypical chains\n * using `Object.setPrototypeOf`\n *\n * ```\n * type.__proto__             = type.prototype   (type   instanceof type  )\n * type.__proto__.__proto__   = object.prototype (type   instanceof object)\n * type.prototype.__proto__   = object.prototype (type   subclassof object)\n * object.__proto__           = type.prototype   (object instanceof type  )\n * object.__proto__.__proto__ = object.prototype (object instanceof object)\n * ```\n *\n * while `Object.setPrototypeOf` is not considered [good practice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n * this is a particularly unique use case and creates a lot of prototypical benefits\n * all single inheritance classes (i.e. all builtins) now follow prototypical inheritance\n * similarly it makes metclasses that much easier to implement\n * Object.setPrototypeOf is also a feature built into the javascript language\n *\n * @ignore\n */\n(function setUpBaseInheritance() {\n    Sk.abstr.setUpInheritance(\"type\", Sk.builtin.type, Sk.builtin.object);\n    Sk.abstr.setUpBuiltinMro(Sk.builtin.type);\n})();\n", "/** @typedef {Sk.builtin.object} */ var pyObject;\n/** @typedef {Sk.builtin.type|Function} */ var typeObject;\n\n/**\n * @description\n * Wrappers and slot functions\n *\n * A wrapper function wrapper a slot defined on the prototype of a builtin type object\n * typically a a slot wrapper will be called with a self argument and args and kwargs\n *\n * self becomes this in when the slot wrapper is called\n * the slot wrapper_descriptor object takes care of checking that self is an instance of the type object\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperCallNoArgs(self, args, kwargs) {\n    // this = the wrapped function\n    Sk.abstr.checkNoArgs(this.$name, args, kwargs);\n    const res = this.call(self);\n    if (res === undefined) {\n        return Sk.builtin.none.none$;\n    }\n    return res;\n}\n/**\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperFastCall(self, args, kwargs) {\n    // this = the wrapped function\n    const res = this.call(self, args, kwargs);\n    if (res === undefined) {\n        return Sk.builtin.none.none$;\n    }\n    return res;\n}\n\n/**\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperCallOneArg(self, args, kwargs) {\n    // this = the wrapped function\n    Sk.abstr.checkOneArg(this.$name, args, kwargs);\n    const res = this.call(self, args[0]);\n    if (res === undefined) {\n        return Sk.builtin.none.none$;\n    }\n    return res;\n}\n\n/**\n * @param {*} self\n * @param {!Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperCallTernary(self, args, kwargs) {\n    // this = the wrapped function\n    // only used for __pow__\n    Sk.abstr.checkNoKwargs(this.$name, kwargs);\n    Sk.abstr.checkArgsLen(this.$name, args, 1, 2);\n    const res = this.call(self, ...args);\n    if (res === undefined) {\n        return Sk.builtin.none.none$;\n    }\n    return res;\n}\n/**\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperSet(self, args, kwargs) {\n    Sk.abstr.checkNoKwargs(this.$name, kwargs);\n    Sk.abstr.checkArgsLen(this.$name, args, 2, 2);\n    this.call(self, args[0], args[1]);\n    return Sk.builtin.none.none$;\n}\n\n/**\n *\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @returns {T|*|{$isSuspension}}\n */\nfunction wrapperDel(self, args, kwargs) {\n    // this = the wrapped function\n    Sk.abstr.checkOneArg(this.$name, args, kwargs);\n    const res = this.call(self, args[0], undefined, true);\n    return Sk.misceval.chain(res, (res) => {\n        if (res === undefined) {\n            return Sk.builtin.none.none$;\n        }\n        return res;\n    });\n}\n\n/**\n * @param {*} self\n * @param {Array} args\n * @param {Array=} kwargs\n * @ignore\n */\nfunction wrapperRichCompare(self, args, kwargs) {\n    const res = wrapperCallOneArg.call(this, self, args, kwargs);\n    if (res === Sk.builtin.NotImplemented.NotImplemented$) {\n        return res;\n    }\n    return new Sk.builtin.bool(res);\n}\n\nfunction wrapperCallBack(wrapper, callback) {\n    return function (self, args, kwargs) {\n        const res = wrapper.call(this, self, args, kwargs);\n        return callback(res);\n    };\n}\n\n/**\n * @description\n * Slot functions are wrappers around an Sk.builtin.func\n * if skulpt calls tp$init on a type object the slotFunc will call the Sk.builtin.func\n *\n * with most slots we take the approach that we know which dunderFunc will be called\n * However some slots currently double up\n * e.g. mp$ass_subscript is called by both __setitem__ and __delitem__\n * for these dual slots we need to do a typelookup\n *\n * __getattr__ is another complicated case and the algorithm largely follows Cpython's algorithm\n * @ignore\n */\nfunction slotFuncNoArgs(dunderFunc) {\n    return function () {\n        const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n        return Sk.misceval.callsimArray(func, []);\n    };\n}\n\n/**\n * @param {string} dunderName\n * @param {Function} checkFunc\n * @param {string} checkMsg\n * @param {Function=} f\n * @ignore\n */\nfunction slotFuncNoArgsWithCheck(dunderName, checkFunc, checkMsg, f) {\n    return function (dunderFunc) {\n        return function () {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            let res = Sk.misceval.callsimArray(func, []);\n            if (!checkFunc(res)) {\n                throw new Sk.builtin.TypeError(\n                    dunderName +\n                        \" should return \" +\n                        checkMsg +\n                        \" (returned \" +\n                        Sk.abstr.typeName(res) +\n                        \")\"\n                );\n            }\n            // f is might be a function that changes the result to a js object like for nb$bool which returns a Boolean\n            if (f !== undefined) {\n                return f(res);\n            }\n            return res;\n        };\n    };\n}\n\nfunction slotFuncOneArg(dunderFunc) {\n    return function (value) {\n        const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n        return Sk.misceval.callsimArray(func, [value]);\n    };\n}\n\nfunction slotFuncGetAttribute(pyName, canSuspend) {\n    let getattributeFn = this.ob$type.$typeLookup(Sk.builtin.str.$getattribute);\n    if (getattributeFn instanceof Sk.builtin.wrapper_descriptor) {\n        // we're assuming here that internal tp$getattr won't raise an exception\n        return getattributeFn.d$wrapped.call(this, pyName, canSuspend);\n    }\n    if (getattributeFn.tp$descr_get) {\n        getattributeFn = getattributeFn.tp$descr_get(this);\n    }\n    const ret = Sk.misceval.tryCatch(\n        () => Sk.misceval.callsimOrSuspendArray(getattributeFn, [pyName]),\n        (e) => {\n            if (e instanceof Sk.builtin.AttributeError) {\n                return undefined;\n            } else {\n                throw e;\n            }\n        }\n    );\n    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n}\n\nfunction slotFuncFastCall(dunderFunc) {\n    return function (args, kwargs) {\n        const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n        return Sk.misceval.callsimOrSuspendArray(func, args, kwargs);\n    };\n}\n\n/**\n * this is currently a bit of a hack\n * in attempting to maintain dual slots like mp$ass_subscript for assigning and deleting\n * this function has to do a type lookup... since it doesn't know in advance if it is being asked to set or delete\n * @ignore\n */\nfunction slotFuncSetDelete(set_name, del_name, error_msg) {\n    return function (dunderFunc) {\n        return function (pyObject, value, canSuspend) {\n            let res, dunderName;\n            if (value === undefined) {\n                dunderName = del_name;\n                error_msg = null;\n            } else {\n                dunderName = set_name;\n            }\n            // do a type lookup and a wrapped function directly\n            let func = this.ob$type.$typeLookup(new Sk.builtin.str(dunderName));\n            if (func instanceof Sk.builtin.wrapper_descriptor) {\n                return func.d$wrapped.call(this, pyObject, value);\n            }\n            if (func.tp$descr_get) {\n                func = func.tp$descr_get(this);\n            }\n\n            if (func !== undefined) {\n                const args = value === undefined ? [pyObject] : [pyObject, value];\n                res = Sk.misceval.callsimOrSuspendArray(func, args);\n            } else if (error_msg) {\n                throw new Sk.builtin.TypeError(\n                    \"'\" + Sk.abstr.typeName(this) + \"' object \" + error_msg\n                );\n            } else {\n                throw new Sk.builtin.AttributeError(dunderName);\n            }\n            return canSuspend ? res : Sk.misceval.retryOptionalSuspensionOrThrow(res);\n        };\n    };\n}\n\n/**\n * @namespace\n *\n * @description\n * If you want to build a skulpt native class you need to understand slots\n * Each dunder method in python is matched to a slot in skulpt {@link Sk.dunderToSkulpt} which is closely aligned to a Cpython slot\n *\n * Plenty examples exist in {@link  Sk.builtin}\n *\n * If a user builds a `nativeClass` using {@link Sk.abstr.buildNativeClass } they define slots as javascript function\n * Dunder Methods will be created as `slot_wrappers`\n *\n * If a user defines a class in Python or using {@link Sk.misceval.buildClass}\n * Dunder Functions should be defined and slot funcs will be added\n *\n * Below is information about each slot function, should you decide to build a native class\n *\n * For mappings of slots to dunders see source code for {@link Sk.dunderToSkulpt} or [Sk.subSlots]{@link Sk.slots.subSlots}\n *\n */\nSk.slots = Object.create(null);\nconst slots = Sk.slots;\n\n/**\n *\n * @memberof Sk.slots\n * @member tp$doc\n * @implements __doc__\n * @suppress {checkTypes}\n * @type {string}\n */\n\n/**\n * @memberof Sk.slots\n * @method tp$init\n * @implements __init__\n * @suppress {checkTypes}\n * @param {Array} args\n * @param {Array=} kwargs\n * @returns {Sk.builtin.none}\n */\nSk.slots.__init__ = {\n    $name: \"__init__\",\n    $slot_name: \"tp$init\",\n    $slot_func: function (dunderFunc) {\n        return function tp$init(args, kwargs) {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            let ret = Sk.misceval.callsimOrSuspendArray(func, args, kwargs);\n            return Sk.misceval.chain(ret, (r) => {\n                if (!Sk.builtin.checkNone(r) && r !== undefined) {\n                    throw new Sk.builtin.TypeError(\n                        \"__init__() should return None, not \" + Sk.abstr.typeName(r)\n                    );\n                }\n                return;\n            });\n        };\n    },\n    $wrapper: function (self, args, kwargs) {\n        // this = the wrapped function\n        this.call(self, args, kwargs);\n        return Sk.builtin.none.none$;\n    },\n    $textsig: \"($self, /, *args, **kwargs)\",\n    $flags: { FastCall: true },\n    $doc: \"Initialize self.  See help(type(self)) for accurate signature.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$new\n * @implements __new__\n * @suppress {checkTypes}\n * @returns {pyObject}\n * @param {Array} args\n * @param {Array=} kwargs\n * @description\n * {@link Sk.generic.new} {@link Sk.generic.newMethodDef} are related implementations of `tp$mew` and `__new__`\n * unusually `this = typeobject.prototype` since it is typically called like `typeobj.prototype.tp$new` and must\n * be taken into when writing an implementation of `tp$new`\n */\nslots.__new__ = {\n    $name: \"__new__\",\n    $slot_name: \"tp$new\",\n    $slot_func: function (dunderFunc) {\n        const tp$new = function (args, kwargs) {\n            let func = dunderFunc;\n            if (dunderFunc.tp$descr_get) {\n                func = dunderFunc.tp$descr_get(null, this.constructor);\n            } // weird behaviour ignore staticmethods bascically\n            return Sk.misceval.callsimOrSuspendArray(func, [this.constructor, ...args], kwargs);\n        };\n        tp$new.sk$static_new = false; // this is a flag used in the __new__ algorithm\n        return tp$new;\n    },\n    $wrapper: null, // handled separately since it's not a slot wrapper but an sk_method\n    $textsig: \"($self, /, *args, **kwargs)\",\n    $flags: { FastCall: true },\n    $doc: \"Create and return a new object.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$call\n * @implements __call__\n * @suppress {checkTypes}\n * @param {Array} args\n * @param {Array=} kwargs\n *\n */\nslots.__call__ = {\n    $name: \"__call__\",\n    $slot_name: \"tp$call\",\n    $slot_func: slotFuncFastCall,\n    $wrapper: function __call__(self, args, kwargs) {\n        // function fast call objects override the prototype.tp$call\n        // so use self.tp$call instead of this.call(self)\n        const res = self.tp$call(args, kwargs);\n        if (res === undefined) {\n            return Sk.builtin.none.none$;\n        }\n        return res;\n    },\n    $textsig: \"($self, /, *args, **kwargs)\",\n    $flags: { FastCall: true },\n    $doc: \"Call self as a function.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method $r\n * @implements __repr__\n * @suppress {checkTypes}\n * @returns {Sk.builtin.str}\n */\nslots.__repr__ = {\n    $name: \"__repr__\",\n    $slot_name: \"$r\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__repr__\", Sk.builtin.checkString, \"str\"),\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Return repr(self).\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$str\n * @implements `__str__`\n * @suppress {checkTypes}\n * @returns {Sk.builtin.str}\n */\nslots.__str__ = {\n    $name: \"__str__\",\n    $slot_name: \"tp$str\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__str__\", Sk.builtin.checkString, \"str\"),\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Return str(self).\",\n};\n\nvar hash_slot = slotFuncNoArgsWithCheck(\"__hash__\", Sk.builtin.checkInt, \"int\", (res) =>\n    typeof res.v === \"number\" ? res.v : res.tp$hash()\n);\n/**\n * @memberof Sk.slots\n * @method tp$hash\n * @implements __hash__\n * @suppress {checkTypes}\n * @returns {Sk.builtin.int_}\n * @description\n * To be unhashable set this slot to {@link Sk.builtin.none.none$} or call {@link Sk.abstr.markUnhashable}\n */\nslots.__hash__ = {\n    $name: \"__hash__\",\n    $slot_name: \"tp$hash\",\n    $slot_func: function (dunder_func) {\n        if (dunder_func === Sk.builtin.none.none$) {\n            return Sk.builtin.none.none$;\n        }\n        return hash_slot(dunder_func);\n    },\n    $wrapper: wrapperCallBack(wrapperCallNoArgs, (res) => new Sk.builtin.int_(res)),\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Return hash(self).\",\n};\n\n// getters/setters/deletters\n\n/**\n * @memberof Sk.slots\n * @method tp$getattr\n * @implements __getattribute__\n * @suppress {checkTypes}\n *\n * @param {Sk.builtin.str} pyName\n * @param {boolean=} canSuspend\n *\n * @returns {pyObject|undefined}\n * @description\n * This slot will also be given to a pyObject which defines `__getattr__`\n */\nslots.__getattribute__ = {\n    $name: \"__getattribute__\",\n    $slot_name: \"tp$getattr\",\n    $slot_func: function (dunderFunc) {\n        return function tp$getattr(pyName, canSuspend) {\n            let getattrFn = this.ob$type.$typeLookup(Sk.builtin.str.$getattr);\n            if (getattrFn === undefined) {\n                return slotFuncGetAttribute.call(this, pyName, canSuspend);\n            }\n            const ret = Sk.misceval.chain(\n                slotFuncGetAttribute.call(this, pyName, canSuspend),\n                (val) =>\n                    Sk.misceval.tryCatch(\n                        () => {\n                            if (val !== undefined) {\n                                return val;\n                            }\n                            if (getattrFn.tp$descr_get) {\n                                getattrFn = getattrFn.tp$descr_get(this);\n                            }\n                            return Sk.misceval.callsimOrSuspendArray(getattrFn, [pyName]);\n                        },\n                        function (e) {\n                            if (e instanceof Sk.builtin.AttributeError) {\n                                return undefined;\n                            } else {\n                                throw e;\n                            }\n                        }\n                    )\n            );\n            return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n        };\n    },\n    $wrapper: function (self, args, kwargs) {\n        // this = the wrapped function\n        Sk.abstr.checkOneArg(this.$name, args, kwargs);\n        const pyName = args[0];\n        if (!Sk.builtin.checkString(pyName)) {\n            throw new Sk.builtin.TypeError(\n                \"attribute name must be string, not '\" + Sk.abstr.typeName(pyName) + \"'\"\n            );\n        }\n        const res = this.call(self, pyName);\n        if (res === undefined) {\n            throw new Sk.builtin.AttributeError(\n                Sk.abstr.typeName(self) + \" has no attribute \" + pyName.$jsstr()\n            );\n        }\n        return res;\n    },\n    $textsig: \"($self, name, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return getattr(self, name).\",\n};\n\nslots.__getattr__ = {\n    $name: \"__getattr__\",\n    $slot_name: \"tp$getattr\",\n    $slot_func: slots.__getattribute__.$slot_func,\n    $wrapper: null,\n    $textsig: \"($self, name, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return getattr(self, name).\",\n};\n\n/* Helper to check for object.__setattr__ or __delattr__ applied to a type.\n   This is called the Carlo Verre hack after its discoverer. */\nfunction hackcheck(obj, func) {\n    let type = obj.ob$type;\n    while (type && type.sk$klass !== undefined) {\n        type = type.prototype.tp$base;\n    }\n    if (type && type.prototype.tp$setattr !== func) {\n        throw new Sk.builtin.TypeError(\n            \"can't apply this \" + func.$name + \" to \" + Sk.abstr.typeName(obj) + \" object\"\n        );\n    }\n}\n\n/**\n * @suppress {checkTypes}\n * @memberof Sk.slots\n * @method tp$setattr\n * @implements __setattr__\n * @param {Sk.builtin.str} pyName\n * @param {pyObject|undefined} value undefined indicates the attribute is to be deleted\n * @param {boolean=} canSuspend\n * @description\n * `tp$setattr` is responsible for throwing its own exceptions. It also implements __delattr__\n */\nslots.__setattr__ = {\n    $name: \"__setattr__\",\n    $slot_name: \"tp$setattr\",\n    $slot_func: slotFuncSetDelete(\"__setattr__\", \"__delattr__\"),\n    // not need for an error message setattr is always defined on object\n    $wrapper: function (self, args, kwargs) {\n        Sk.abstr.checkNoKwargs(this.$name, kwargs);\n        Sk.abstr.checkArgsLen(this.$name, args, 2, 2);\n        hackcheck(self, this);\n        this.call(self, args[0], args[1]);\n        return Sk.builtin.none.none$;\n    },\n    $textsig: \"($self, name, value, /)\",\n    $flags: { MinArgs: 2, MaxArgs: 2 },\n    $doc: \"Implement setattr(self, name, value).\",\n};\n\nslots.__delattr__ = {\n    $name: \"__delattr__\",\n    $slot_name: \"tp$setattr\",\n    $slot_func: slots.__setattr__.$slot_func,\n    $wrapper: function (self, args, kwargs) {\n        Sk.abstr.checkOneArg(this.$name, args, kwargs);\n        hackcheck(self, this);\n        this.call(self, args[0]);\n        return Sk.builtin.none.none$;\n    },\n    $textsig: \"($self, name, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement delattr(self, name).\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$descr_get\n * @implements __get__\n * @suppress {checkTypes}\n * @param {pyObject} obj\n * @param {typeObject=} obtype\n * @param {boolean=} canSuspend\n */\nslots.__get__ = {\n    $name: \"__get__\",\n    $slot_name: \"tp$descr_get\",\n    $slot_func: function (dunderFunc) {\n        return function tp$descr_get(obj, obtype, canSuspend) {\n            if (obj === null) {\n                obj = Sk.builtin.none.none$;\n            }\n            if (obtype == null) {\n                obtype = Sk.builtin.none.none$;\n            }\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            const ret = Sk.misceval.callsimOrSuspendArray(func, [obj, obtype]);\n            return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n        };\n    },\n    $wrapper: function (self, args, kwargs) {\n        Sk.abstr.checkNoKwargs(this.$name, kwargs);\n        Sk.abstr.checkArgsLen(this.$name, args, 1, 2);\n        let obj = args[0];\n        let obtype = args[1];\n        if (obj === Sk.builtin.none.none$) {\n            obj = null;\n        }\n        if (obtype === Sk.builtin.none.none$) {\n            obtype = null;\n        }\n        if (obtype === null && obj === null) {\n            throw new Sk.builtin.TypeError(\"__get__(None, None) is invalid\");\n        }\n        return this.call(self, obj, obtype);\n    },\n    $textsig: \"($self, instance, owner, /)\",\n    $flags: { MinArgs: 2, MaxArgs: 2 },\n    $doc: \"Return an attribute of instance, which is of type owner.\",\n};\n/**\n * @memberof Sk.slots\n * @method tp$descr_set\n * @implements __set__\n * @suppress {checkTypes}\n * @param {pyObject} obj\n * @param {pyObject|undefined} value undefined will signals __delete__\n * @param {boolean=} canSuspend\n * @description\n * Also implements __delete__\n */\nslots.__set__ = {\n    $name: \"__set__\",\n    $slot_name: \"tp$descr_set\",\n    $slot_func: slotFuncSetDelete(\"__set__\", \"__delete__\"),\n    $wrapper: wrapperSet,\n    $textsig: \"($self, instance, value, /)\",\n    $flags: { MinArgs: 2, MaxArgs: 2 },\n    $doc: \"Set an attribute of instance to value.\",\n};\n\nslots.__delete__ = {\n    $name: \"__delete__\",\n    $slot_name: \"tp$descr_set\",\n    $slot_func: slots.__set__.$slot_func,\n    $wrapper: wrapperDel,\n    $textsig: \"($self, instance, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Delete an attribute of instance.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$richcompare\n * @implements __eq__\n * @suppress {checkTypes}\n * @param {pyObject} other\n * @param {string} opname \"Eq\", \"NotEq\", \"Lt\", \"LtE\", \"Gt\", \"GtE\"\n * @returns {boolean}\n * @description\n * __eq__/__ne__/__lt__/__le__/__gt__/__ge__\n * Either define tp$richcompare or any of the `ob$*` slots\n * If `tp$richcompare` is defined then the `nativeClass` will get wrapper functions into each `ob$*` slot\n */\n\n/**\n * @memberof Sk.slots\n * @method ob$eq\n * @implements __eq__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__eq__ = {\n    $name: \"__eq__\",\n    $slot_name: \"ob$eq\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self==value.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method ob$ge\n * @implements __ge__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__ge__ = {\n    $name: \"__ge__\",\n    $slot_name: \"ob$ge\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self>=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method ob$gt\n * @implements __gt__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__gt__ = {\n    $name: \"__gt__\",\n    $slot_name: \"ob$gt\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self>value.\",\n};\n/**\n * @memberof Sk.slots\n * @method ob$le\n * @implements __le__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__le__ = {\n    $name: \"__le__\",\n    $slot_name: \"ob$le\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self<=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method ob$lt\n * @implements __lt__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__lt__ = {\n    $name: \"__lt__\",\n    $slot_name: \"ob$lt\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self<value.\",\n};\n/**\n * @memberof Sk.slots\n * @method ob$ne\n * @implements __ne__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__ne__ = {\n    $name: \"__ne__\",\n    $slot_name: \"ob$ne\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperRichCompare,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self!=value.\",\n};\n\n// iters\n\n/**\n * @memberof Sk.slots\n * @method tp$iter\n * @implements __iter__\n * @suppress {checkTypes}\n * @returns {pyObject} must have a valid `tp$iternext` slot\n * See {@link Sk.abstr.buildIteratorClass} and {@link Sk.misceval.iterator}\n */\nslots.__iter__ = {\n    $name: \"__iter__\",\n    $slot_name: \"tp$iter\",\n    $slot_func: slotFuncNoArgs,\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Implement iter(self).\",\n};\n\n/**\n * @memberof Sk.slots\n * @method tp$iternext\n * @param {boolean=} canSuspend\n * @implements __next__\n * @suppress {checkTypes}\n * @returns {pyObject|undefined} Do not raise a StopIteration error instead return undefined\n */\nslots.__next__ = {\n    $name: \"__next__\",\n    $slot_name: \"tp$iternext\",\n    $slot_func: function (dunderFunc) {\n        return function tp$iternext(canSuspend) {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            const ret = Sk.misceval.tryCatch(\n                () => Sk.misceval.callsimOrSuspendArray(func, []),\n                (e) => {\n                    if (e instanceof Sk.builtin.StopIteration) {\n                        this.gi$ret = e.$value;\n                        return undefined;\n                    } else {\n                        throw e;\n                    }\n                }\n            );\n            return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n        };\n    },\n    /**\n     *\n     * @param {*} self\n     * @param {Array} args\n     * @param {Array|undefined=} kwargs\n     */\n    $wrapper: function (self, args, kwargs) {\n        // this = the wrapped function\n        Sk.abstr.checkNoArgs(this.$name, args, kwargs);\n        // the first tp$iternext is sometimes different from the prototype.tp$iternext\n        // so instead of this.call(self) use self.tp$iternext\n        return Sk.misceval.chain(self.tp$iternext(true), (res) => {\n            if (res === undefined) {\n                throw new Sk.builtin.StopIteration();\n            }\n            return res;\n        });\n    },\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Implement next(self).\",\n};\n\n// sequence and mapping\n/**\n * @memberof Sk.slots\n * @member tp$as_sequence_or_mapping\n * @type {boolean}\n * @description\n * set `tp$as_sequence_or_mapping` to `true` in order for for {@link Sk.abstr.buildNativeClass}\n * to acquire appropriate `slot_wrappers` for the slots\n * - [sq$length]{@link Sk.slots.sq$length}\n * - [sq$concat]{@link Sk.slots.sq$concat}\n * - [sq$contains]{@link Sk.slots.sq$contains}\n * - [sq$repeat]{@link Sk.slots.sq$repeat}\n * - [mp$subscript]{@link Sk.slots.mp$subscript}\n * - [mp$ass_subscript]{@link Sk.slots.mp$ass_subscript}\n */\n\n/**\n * @memberof Sk.slots\n * @method sq$concat\n * @implements __add__\n * @suppress {checkTypes}\n * @description defining `sq$concat` along with {@link Sk.slots.tp$as_sequence_or_mapping} will gain the slot\n * `__add__`.\n * note that this slot will be equivalent to the [nb$add]{@link Sk.slots.nb$add} slot\n */\n\n/**\n * @memberof Sk.slots\n * @method sq$repeat\n * @implements __mul__/__rmul__\n * @suppress {checkTypes}\n * @description defining `sq$repeat` along with {@link Sk.slots.tp$as_sequence_or_mapping} will gain the slots\n * `__mul__` and `__rmul__`\n * note that this slot will be equivalent to the [nb$multiply]{@link Sk.slots.nb$multiply} slot\n */\n\n/**\n * @memberof Sk.slots\n * @method sq$length\n * @param {boolean=} canSuspend\n * @implements __len__\n * @suppress {checkTypes}\n * @returns {number}\n */\nslots.__len__ = {\n    $name: \"__len__\",\n    $slot_name: \"sq$length\",\n    $slot_func: function (dunderFunc) {\n        return function sq$length(canSuspend) {\n            let res;\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            if (canSuspend) {\n                res = Sk.misceval.callsimOrSuspendArray(func, []);\n                return Sk.misceval.chain(res, (r) => {\n                    return Sk.misceval.asIndexOrThrow(r);\n                });\n            } else {\n                res = Sk.misceval.callsimArray(func, []);\n                return Sk.misceval.asIndexOrThrow(res);\n            }\n        };\n    },\n    $wrapper: wrapperCallBack(wrapperCallNoArgs, (res) => new Sk.builtin.int_(res)),\n    $flags: { NoArgs: true },\n    $textsig: \"($self, /)\",\n    $doc: \"Return len(self).\",\n};\n\n/**\n * @suppress {checkTypes}\n * @memberof Sk.slots\n * @method sq$contains\n *\n * @param {pyObject} key\n * @param {boolean=} canSuspend\n *\n * @implements __contains__\n * @returns {boolean}\n */\nslots.__contains__ = {\n    $name: \"__contains__\",\n    $slot_name: \"sq$contains\",\n    $slot_func: function (dunderFunc) {\n        return function sq$contains(key, canSuspend) {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            let res = Sk.misceval.callsimOrSuspendArray(func, [key]);\n            res = Sk.misceval.chain(res, (r) => Sk.misceval.isTrue(r));\n            if (res.$isSuspension) {\n                return canSuspend ? res : Sk.misceval.retryOptionalSuspensionOrThrow(res);\n            }\n            return res;\n        };\n    },\n    // todo - allow for suspensions - but no internal functions suspend here\n    $wrapper: wrapperCallBack(wrapperCallOneArg, (res) => new Sk.builtin.bool(res)),\n    $textsig: \"($self, key, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return key in self.\",\n};\n\n/**\n * @memberof Sk.slots\n * @method mp$subscript\n * @param {pyObject} key - might be a pyStr, pyInt or pySlice\n * @param {boolean=} canSuspend\n * @implements __getitem__\n * @suppress {checkTypes}\n * @returns {pyObject}\n * @throws {Sk.builtin.TypeError}\n */\nslots.__getitem__ = {\n    $name: \"__getitem__\",\n    $slot_name: \"mp$subscript\",\n    $slot_func: function (dunderFunc) {\n        return function mp$subscript(key, canSuspend) {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            const ret = Sk.misceval.callsimOrSuspendArray(func, [key]);\n            return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n        };\n    },\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, key, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self[key].\",\n};\n\n/**\n * @memberof Sk.slots\n * @method mp$ass_subscript\n * @param {pyObject} item - might be a pyStr, pyInt or pySlice\n * @param {pyObject|undefined} value - undefined indicates the item should be deleted\n * @param {boolean=} canSuspend\n * @implements __setitem__\n * @suppress {checkTypes}\n * @returns {pyObject}\n * @throws {Sk.builtin.TypeError}\n * @description\n * Also implements __delitem__\n */\nslots.__setitem__ = {\n    $name: \"__setitem__\",\n    $slot_name: \"mp$ass_subscript\",\n    $slot_func: slotFuncSetDelete(\"__setitem__\", \"__delitem__\", \"does not support item assignment\"),\n    $wrapper: wrapperSet,\n    $textsig: \"($self, key, value, /)\",\n    $flags: { MinArgs: 2, MaxArgs: 2 },\n    $doc: \"Set self[key] to value.\",\n};\n\nslots.__delitem__ = {\n    $name: \"__delitem__\",\n    $slot_name: \"mp$ass_subscript\",\n    $slot_func: slots.__setitem__.$slot_func,\n    $wrapper: wrapperDel,\n    $textsig: \"($self, key, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Delete self[key].\",\n};\n\n// number slots\n/**\n * @memberof Sk.slots\n * @member tp$as_number\n * @type {boolean}\n * @description\n * set `tp$as_number` to `true` in order for for {@link Sk.abstr.buildNativeClass}\n * to acquire appropriate `slot_wrappers` for number slots\n * You can find an exhaustive list in the source code {@link Sk.slots}\n *\n * Examples:\n * - [nb$add]{@link Sk.slots.nb$add}\n * - [nb$int]{@link Sk.slots.nb$int}\n * - [nb$divide]{@link Sk.slots.nb$divide} - note we do not use `nb$true_divide`\n * - [nb$bool]{@link Sk.slots.nb$bool} - should return a js boolean\n *\n * You need not define `nb$reflected_*` slots unless your implementation is different from the default implementation\n * Similarly `nb$inplace_` need not be defined unless the implementation is different from the usual slot.\n *\n */\n\n/**\n * @memberof Sk.slots\n * @method nb$add\n * @implements __add__\n * @suppress {checkTypes}\n * @description\n * the reflected slot will be defined if not set\n *\n */\nslots.__add__ = {\n    $name: \"__add__\",\n    $slot_name: \"nb$add\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self+value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$relfceted_add\n * @implements __radd__\n * @suppress {checkTypes}\n * @description\n * the reflected slot will be defined if not set\n *\n */\nslots.__radd__ = {\n    $name: \"__radd__\",\n    $slot_name: \"nb$reflected_add\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value+self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_add\n * @implements __iadd__\n * @suppress {checkTypes}\n * @description\n * Only define this if your implementation is different from `nb$add`\n *\n */\nslots.__iadd__ = {\n    $name: \"__iadd__\",\n    $slot_name: \"nb$inplace_add\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self+=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$subtract\n * @implements __sub__\n * @suppress {checkTypes}\n *\n */\nslots.__sub__ = {\n    $name: \"__sub__\",\n    $slot_name: \"nb$subtract\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self-value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_subtract\n * @implements __rsub__\n * @suppress {checkTypes}\n */\nslots.__rsub__ = {\n    $name: \"__rsub__\",\n    $slot_name: \"nb$reflected_subtract\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value-self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_multiply\n * @implements __imul__\n * @suppress {checkTypes}\n */\nslots.__imul__ = {\n    $name: \"__imul__\",\n    $slot_name: \"nb$inplace_multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self*=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$multiply\n * @implements __mul__\n * @suppress {checkTypes}\n */\nslots.__mul__ = {\n    $name: \"__mul__\",\n    $slot_name: \"nb$multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self*value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_multiply\n * @implements __rmul__\n * @suppress {checkTypes}\n */\nslots.__rmul__ = {\n    $name: \"__rmul__\",\n    $slot_name: \"nb$reflected_multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value*self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_subtract\n * @implements __isub__\n * @suppress {checkTypes}\n */\nslots.__isub__ = {\n    $name: \"__isub__\",\n    $slot_name: \"nb$inplace_subtract\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self-=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$remainder\n * @implements __mod__\n * @suppress {checkTypes}\n */\nslots.__mod__ = {\n    $name: \"__mod__\",\n    $slot_name: \"nb$remainder\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self%value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_remainder\n * @implements __rmod__\n * @suppress {checkTypes}\n */\nslots.__rmod__ = {\n    $name: \"__rmod__\",\n    $slot_name: \"nb$reflected_remainder\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value%self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_remainder\n * @implements __imod__\n * @suppress {checkTypes}\n */\nslots.__imod__ = {\n    $name: \"__imod__\",\n    $slot_name: \"nb$inplace_remainder\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement value%=self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$divmod\n * @implements __divmod__\n * @suppress {checkTypes}\n */\nslots.__divmod__ = {\n    $name: \"__divmod__\",\n    $slot_name: \"nb$divmod\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return divmod(self, value).\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_divmod\n * @implements __rdivmod__\n * @suppress {checkTypes}\n */\nslots.__rdivmod__ = {\n    $name: \"__rdivmod__\",\n    $slot_name: \"nb$reflected_divmod\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return divmod(value, self)\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$positive\n * @implements __pos__\n * @suppress {checkTypes}\n */\nslots.__pos__ = {\n    $name: \"__pos__\",\n    $slot_name: \"nb$positive\",\n    $slot_func: slotFuncNoArgs,\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"+self\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$negative\n * @implements __neg__\n * @suppress {checkTypes}\n */\nslots.__neg__ = {\n    $name: \"__neg__\",\n    $slot_name: \"nb$negative\",\n    $slot_func: slotFuncNoArgs,\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"-self\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$abs\n * @implements __abs__\n * @suppress {checkTypes}\n */\nslots.__abs__ = {\n    $name: \"__abs__\",\n    $slot_name: \"nb$abs\",\n    $slot_func: slotFuncNoArgs,\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"abs(self)\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$bool\n * @implements __bool__\n * @suppress {checkTypes}\n * @returns {boolean}\n */\nslots.__bool__ = {\n    $name: \"__bool__\",\n    $slot_name: \"nb$bool\",\n    $slot_func: slotFuncNoArgsWithCheck(\n        \"__bool__\",\n        Sk.builtin.checkBool,\n        \"bool\",\n        (res) => res.v !== 0\n    ),\n    $wrapper: wrapperCallBack(wrapperCallNoArgs, (res) => new Sk.builtin.bool(res)),\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"self != 0\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$invert\n * @implements __invert__\n * @suppress {checkTypes}\n */\nslots.__invert__ = {\n    $name: \"__invert__\",\n    $slot_name: \"nb$invert\",\n    $slot_func: slotFuncNoArgs,\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"~self\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$lshift\n * @implements __lshift__\n * @suppress {checkTypes}\n */\nslots.__lshift__ = {\n    $name: \"__lshift__\",\n    $slot_name: \"nb$lshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self<<value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_lshift\n * @implements __rlshift__\n * @suppress {checkTypes}\n */\nslots.__rlshift__ = {\n    $name: \"__rlshift__\",\n    $slot_name: \"nb$reflected_lshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value<<self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$rshift\n * @implements __rshift__\n * @suppress {checkTypes}\n */\nslots.__rshift__ = {\n    $name: \"__rshift__\",\n    $slot_name: \"nb$rshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self>>value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_rshift\n * @implements __rrshift__\n * @suppress {checkTypes}\n */\nslots.__rrshift__ = {\n    $name: \"__rrshift__\",\n    $slot_name: \"nb$reflected_rshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value>>self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_lshift\n * @implements __ilshift__\n * @suppress {checkTypes}\n */\nslots.__ilshift__ = {\n    $name: \"__ilshift__\",\n    $slot_name: \"nb$inplace_lshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self<<=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_rshift\n * @implements __irshift__\n * @suppress {checkTypes}\n */\nslots.__irshift__ = {\n    $name: \"__irshift__\",\n    $slot_name: \"nb$inplace_rshift\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self=>>value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$and\n * @implements __and__\n * @suppress {checkTypes}\n */\nslots.__and__ = {\n    $name: \"__and__\",\n    $slot_name: \"nb$and\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self&value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_and\n * @implements __rand__\n * @suppress {checkTypes}\n */\nslots.__rand__ = {\n    $name: \"__rand__\",\n    $slot_name: \"nb$refelcted_and\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value&self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_and\n * @implements __iand__\n * @suppress {checkTypes}\n */\nslots.__iand__ = {\n    $name: \"__iand__\",\n    $slot_name: \"nb$and\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self&=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$xor\n * @implements __xor__\n * @suppress {checkTypes}\n */\nslots.__xor__ = {\n    $name: \"__xor__\",\n    $slot_name: \"nb$xor\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self^value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_xor\n * @implements __rxor__\n * @suppress {checkTypes}\n */\nslots.__rxor__ = {\n    $name: \"__rxor__\",\n    $slot_name: \"nb$reflected_xor\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value^self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_xor\n * @implements __ixor__\n * @suppress {checkTypes}\n */\nslots.__ixor__ = {\n    $name: \"__ixor__\",\n    $slot_name: \"nb$inplace_xor\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self^=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$or\n * @implements __or__\n * @suppress {checkTypes}\n */\nslots.__or__ = {\n    $name: \"__or__\",\n    $slot_name: \"nb$or\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self|value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_or\n * @implements __ror__\n * @suppress {checkTypes}\n */\nslots.__ror__ = {\n    $name: \"__ror__\",\n    $slot_name: \"nb$reflected_or\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value|self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_ior\n * @implements __ior__\n * @suppress {checkTypes}\n */\nslots.__ior__ = {\n    $name: \"__ior__\",\n    $slot_name: \"nb$inplace_or\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self|=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$int\n * @implements __int__\n * @suppress {checkTypes}\n */\nslots.__int__ = {\n    $name: \"__int__\",\n    $slot_name: \"nb$int\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__int__\", Sk.builtin.checkInt, \"int\"),\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"int(self)\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$float\n * @implements __float__\n * @suppress {checkTypes}\n */\nslots.__float__ = {\n    $name: \"__float__\",\n    $slot_name: \"nb$float\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__float__\", Sk.builtin.checkFloat, \"float\"),\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"float(self)\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$floor_divide\n * @implements __floordiv__\n * @suppress {checkTypes}\n */\nslots.__floordiv__ = {\n    $name: \"__floordiv__\",\n    $slot_name: \"nb$floor_divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self//value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_floor_divide\n * @implements __rfloordiv__\n * @suppress {checkTypes}\n */\nslots.__rfloordiv__ = {\n    $name: \"__rfloordiv__\",\n    $slot_name: \"nb$reflected_floor_divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value//self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_floor_divide\n * @implements __ifloordiv__\n * @suppress {checkTypes}\n */\nslots.__ifloordiv__ = {\n    $name: \"__ifloordiv__\",\n    $slot_name: \"nb$inplace_floor_divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self//=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$divide\n * @implements __truediv__\n * @suppress {checkTypes}\n */\nslots.__truediv__ = {\n    $name: \"__truediv__\",\n    $slot_name: \"nb$divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self/value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_divide\n * @implements __rtruediv__\n * @suppress {checkTypes}\n */\nslots.__rtruediv__ = {\n    $name: \"__rtruediv__\",\n    $slot_name: \"nb$reflected_divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value/self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_divide\n * @implements __itruediv__\n * @suppress {checkTypes}\n */\nslots.__itruediv__ = {\n    $name: \"__itruediv__\",\n    $slot_name: \"nb$inplace_divide\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self/=value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$index\n * @implements __index__\n * @suppress {checkTypes}\n */\nslots.__index__ = {\n    $name: \"__index__\",\n    $slot_name: \"nb$index\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__index__\", Sk.builtin.checkInt, \"int\", (res) => res.v),\n    $wrapper: wrapperCallBack(wrapperCallNoArgs, (res) => new Sk.builtin.int_(res)),\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"Return self converted to an integer, if self is suitable for use as an index into a list.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$power\n * @implements __pow__\n * @suppress {checkTypes}\n */\nslots.__pow__ = {\n    $name: \"__pow__\",\n    $slot_name: \"nb$power\",\n    $slot_func: function (dunderFunc) {\n        return function (value, mod) {\n            const func = dunderFunc.tp$descr_get ? dunderFunc.tp$descr_get(this) : dunderFunc;\n            if (mod == undefined) {\n                return Sk.misceval.callsimArray(func, [value]);\n            } else {\n                return Sk.misceval.callsimArray(func, [value, mod]);\n            }\n        };\n    },\n    $wrapper: wrapperCallTernary,\n    $textsig: \"($self, value, mod=None, /)\",\n    $flags: { MinArgs: 1, MaxArgs: 2 },\n    $doc: \"Return pow(self, value, mod).\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_power\n * @implements __rpow__\n * @suppress {checkTypes}\n */\nslots.__rpow__ = {\n    $name: \"__rpow__\",\n    $slot_name: \"nb$reflected_power\",\n    $slot_func: slots.__pow__.$slot_func,\n    $wrapper: wrapperCallTernary,\n    $textsig: \"($self, value, mod=None, /)\",\n    $flags: { MinArgs: 1, MaxArgs: 2 },\n    $doc: \"Return pow(value, self, mod).\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_power\n * @implements __ipow__\n * @suppress {checkTypes}\n */\nslots.__ipow__ = {\n    $name: \"__ipow__\",\n    $slot_name: \"nb$inplace_power\",\n    $slot_func: slots.__pow__.$slot_func,\n    $wrapper: wrapperCallTernary,\n    $textsig: \"($self, value, mod=None, /)\",\n    $flags: { MinArgs: 1, MaxArgs: 2 },\n    $doc: \"Implement **=\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$matrix_multiply\n * @implements __matmul__\n * @suppress {checkTypes}\n */\nslots.__matmul__ = {\n    $name: \"__matmul__\",\n    $slot_name: \"nb$matrix_multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return self@value.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$reflected_matrix_multiply\n * @implements __rmatmul__\n * @suppress {checkTypes}\n */\nslots.__rmatmul__ = {\n    $name: \"__rmatmul__\",\n    $slot_name: \"nb$reflected_matrix_multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Return value@self.\",\n};\n/**\n * @memberof Sk.slots\n * @method nb$inplace_matrix_multiply\n * @implements __imatmul__\n * @suppress {checkTypes}\n */\nslots.__imatmul__ = {\n    $name: \"__imatmul__\",\n    $slot_name: \"nb$inplace_matrix_multiply\",\n    $slot_func: slotFuncOneArg,\n    $wrapper: wrapperCallOneArg,\n    $textsig: \"($self, value, /)\",\n    $flags: { OneArg: true },\n    $doc: \"Implement self@=value.\",\n};\n\n// py2 ONLY slots\nslots.__long__ = {\n    $name: \"__long__\",\n    $slot_name: \"nb$long\",\n    $slot_func: slotFuncNoArgsWithCheck(\"__long__\", Sk.builtin.checkInt, \"int\"),\n    $wrapper: wrapperCallNoArgs,\n    $textsig: \"($self, /)\",\n    $flags: { NoArgs: true },\n    $doc: \"int(self)\",\n};\n\nvar py3$slots;\nvar py2$slots = {\n    next: {\n        $name: \"next\",\n        $slot_name: \"tp$iternext\",\n        $slot_func: slots.__next__.$slot_func,\n        $wrapper: slots.__next__.$wrapper,\n        $textsig: slots.__next__.$textsig,\n        $flags: slots.__next__.$flags,\n    },\n    __nonzero__: {\n        $name: \"__nonzero__\",\n        $slot_name: \"nb$bool\",\n        $slot_func: slotFuncNoArgsWithCheck(\n            \"__nonzero__\",\n            Sk.builtin.checkInt,\n            \"int\",\n            (res) => res.v !== 0\n        ),\n        $wrapper: wrapperCallBack(wrapperCallNoArgs, (res) => new Sk.builtin.bool(res)),\n        $textsig: \"($self, /)\",\n        $flags: { NoArgs: true },\n        $doc: \"x.__nonzero__() <==> x != 0\",\n    },\n    __div__: {\n        $name: \"__div__\",\n        $slot_name: \"nb$divide\",\n        $slot_func: slotFuncOneArg,\n        $wrapper: wrapperCallOneArg,\n        $textsig: \"($self, other/)\",\n        $flags: { OneArg: true },\n        $doc: \"x.__div__(y) <==> x/y\",\n    },\n    __rdiv__: {\n        $name: \"__rdiv__\",\n        $slot_name: \"nb$reflected_divide\",\n        $slot_func: slotFuncOneArg,\n        $wrapper: wrapperCallOneArg,\n        $textsig: \"($self, other/)\",\n        $flags: { OneArg: true },\n        $doc: \"x.__rdiv__(y) <==> x/y\",\n    },\n    __idiv__: {\n        $name: \"__idiv__\",\n        $slot_name: \"nb$inplace_divide\",\n        $slot_func: slotFuncOneArg,\n        $wrapper: wrapperCallOneArg,\n        $textsig: \"($self, other/)\",\n        $flags: { OneArg: true },\n        $doc: \"implement self /= other\",\n    },\n};\n/**\n * @memberof Sk.slots\n * @member subSlots\n * @description\n * See the source code for a full list of slots split into apprpriate categories\n */\nSk.subSlots = {\n    main_slots: Object.entries({\n        // nb we handle tp$new differently\n        // tp_slots\n        tp$init: \"__init__\",\n        tp$call: \"__call__\",\n        $r: \"__repr__\",\n        // tp$hash: \"__hash__\", // do tp$hash separately since it could be None\n        tp$str: \"__str__\",\n\n        // getattribute, setattr, delattr\n        tp$getattr: \"__getattribute__\",\n        tp$setattr: [\"__setattr__\", \"__delattr__\"],\n\n        // tp$richcompare\n        ob$eq: \"__eq__\",\n        ob$ne: \"__ne__\",\n        ob$lt: \"__lt__\",\n        ob$le: \"__le__\",\n        ob$gt: \"__gt__\",\n        ob$ge: \"__ge__\",\n\n        // getters and setters\n        tp$descr_get: \"__get__\",\n        tp$descr_set: [\"__set__\", \"__delete__\"],\n\n        // iter\n        tp$iter: \"__iter__\",\n        tp$iternext: \"__next__\",\n    }),\n\n    number_slots: Object.entries({\n        nb$abs: \"__abs__\",\n        nb$negative: \"__neg__\",\n        nb$positive: \"__pos__\",\n        nb$int: \"__int__\",\n        nb$long: \"__long__\",\n        nb$float: \"__float__\",\n        nb$index: \"__index__\",\n        nb$add: \"__add__\",\n        nb$reflected_add: \"__radd__\",\n        nb$inplace_add: \"__iadd__\",\n        nb$subtract: \"__sub__\",\n        nb$reflected_subtract: \"__rsub__\",\n        nb$inplace_subtract: \"__isub__\",\n        nb$multiply: \"__mul__\",\n        nb$reflected_multiply: \"__rmul__\",\n        nb$inplace_multiply: \"__imul__\",\n        nb$floor_divide: \"__floordiv__\",\n        nb$reflected_floor_divide: \"__rfloordiv__\",\n        nb$inplace_floor_divide: \"__ifloordiv__\",\n        nb$invert: \"__invert__\",\n        nb$remainder: \"__mod__\",\n        nb$reflected_remainder: \"__rmod__\",\n        nb$inplace_remainder: \"__imod__\",\n        nb$divmod: \"__divmod__\",\n        nb$reflected_divmod: \"__rdivmod__\",\n        nb$power: \"__pow__\",\n        nb$reflected_power: \"__rpow__\",\n        nb$inplace_power: \"__ipow__\",\n        nb$divide: \"__truediv__\", // TODO: think about py2 vs py3 truediv vs div\n        nb$reflected_divide: \"__rtruediv__\",\n        nb$inplace_divide: \"__itruediv__\",\n\n        nb$bool: \"__bool__\",\n\n        nb$and: \"__and__\",\n        nb$reflected_and: \"__rand__\",\n        nb$inplace_and: \"__iand__\",\n        nb$or: \"__or__\",\n        nb$reflected_or: \"__ror__\",\n        nb$inplace_or: \"__ior__\",\n        nb$xor: \"__xor__\",\n        nb$reflected_xor: \"__rxor__\",\n        nb$inplace_xor: \"__ixor__\",\n\n        nb$lshift: \"__lshift__\",\n        nb$reflected_lshift: \"__rlshift__\",\n        nb$rshift: \"__rshift__\",\n        nb$reflected_rshift: \"__rrshift__\",\n        nb$inplace_lshift: \"__ilshift__\",\n        nb$inplace_rshift: \"__irshift__\",\n\n        nb$matrix_multiply: \"__matmul__\",\n        nb$reflected_matrix_multiply: \"__rmatmul__\",\n        nb$inplace_matrix_multiply: \"__imatmul__\",\n    }),\n\n    sequence_and_mapping_slots: Object.entries({\n        // sequence and mapping slots\n        sq$length: \"__len__\",\n        sq$contains: \"__contains__\",\n        mp$subscript: \"__getitem__\",\n        mp$ass_subscript: [\"__setitem__\", \"__delitem__\"],\n        nb$add: \"__add__\",\n        nb$multiply: \"__mul__\",\n        nb$reflected_multiply: \"__rmul__\",\n        nb$inplace_add: \"__iadd__\",\n        nb$inplace_multiply: \"__imul__\",\n    }),\n};\n\nSk.reflectedNumberSlots = {\n    nb$add: { reflected: \"nb$reflected_add\" },\n    nb$subtract: {\n        reflected: \"nb$reflected_subtract\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$subtract(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$multiply: { reflected: \"nb$reflected_multiply\" },\n    nb$divide: {\n        reflected: \"nb$reflected_divide\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$divide(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$floor_divide: {\n        reflected: \"nb$reflected_floor_divide\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$floor_divide(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$remainder: {\n        reflected: \"nb$reflected_remainder\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$remainder(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$divmod: {\n        reflected: \"nb$reflected_divmod\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$divmod(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$power: {\n        reflected: \"nb$reflected_power\",\n        slot: function (other, mod) {\n            if (other instanceof this.constructor) {\n                return other.nb$power(this, mod);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$and: { reflected: \"nb$reflected_and\" },\n    nb$or: { reflected: \"nb$reflected_or\" },\n    nb$xor: { reflected: \"nb$reflected_xor\" },\n    nb$lshift: {\n        reflected: \"nb$reflected_lshift\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$lshift(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$rshift: {\n        reflected: \"nb$reflected_rshift\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$rshift(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    nb$matrix_multiply: {\n        reflected: \"nb$reflexted_matrix_multiply\",\n        slot: function (other) {\n            if (other instanceof this.constructor) {\n                return other.nb$matrix_multiply(this);\n            }\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n};\n\nSk.sequenceAndMappingSlots = {\n    sq$concat: [\"nb$add\"],\n    sq$repeat: [\"nb$multiply\", \"nb$reflected_multiply\"],\n    mp$length: [\"sq$length\"],\n    sq$inplace_repeat: [\"nb$inplace_multiply\"],\n    sq$inplace_concat: [\"nb$inplace_add\"],\n};\n\n/**\n *\n *\n * @member Sk.dunderToSkulpt\n *\n * Maps Python dunder names to the Skulpt Javascript function names that\n * implement them.\n *\n * Note: __add__, __mul__, and __rmul__ can be used for either numeric or\n * sequence types. Here, they default to the numeric versions (i.e. nb$add,\n * nb$multiply, and nb$reflected_multiply). This works because Sk.abstr.numberBinOp\n * checks for the numeric shortcuts and not the sequence shortcuts when computing\n * a binary operation.\n *\n * Because many of these functions are used in contexts in which Skulpt does not\n * [yet] handle suspensions, the assumption is that they must not suspend. However,\n * some of these built-in functions are acquiring \"canSuspend\" arguments to signal\n * where this is not the case. These need to be spliced out of the argument list before\n * it is passed to python. Array values in this map contain [dunderName, argumentIdx],\n * where argumentIdx specifies the index of the \"canSuspend\" boolean argument.\n *\n * @description\n * A mapping of dunder names to skulpt slots\n *\n * @type {Object}\n */\nSk.dunderToSkulpt = {\n    __repr__: \"$r\",\n    __str__: \"tp$str\",\n    __init__: \"tp$init\",\n    __new__: \"tp$new\",\n    __hash__: \"tp$hash\",\n    __call__: \"tp$call\",\n    __iter__: \"tp$iter\",\n    __next__: \"tp$iternext\",\n\n    __eq__: \"ob$eq\",\n    __ne__: \"ob$ne\",\n    __lt__: \"ob$lt\",\n    __le__: \"ob$le\",\n    __gt__: \"ob$gt\",\n    __ge__: \"ob$ge\",\n\n    __abs__: \"nb$abs\",\n    __neg__: \"nb$negative\",\n    __pos__: \"nb$positive\",\n    __int__: \"nb$int\",\n    __float__: \"nb$float\",\n    __index__: \"nb$index\",\n\n    __add__: \"nb$add\",\n    __radd__: \"nb$reflected_add\",\n    __iadd__: \"nb$inplace_add\",\n    __sub__: \"nb$subtract\",\n    __rsub__: \"nb$reflected_subtract\",\n    __isub__: \"nb$inplace_subtract\",\n    __mul__: \"nb$multiply\",\n    __rmul__: \"nb$reflected_multiply\",\n    __imul__: \"nb$inplace_multiply\",\n    __truediv__: \"nb$divide\",\n    __rtruediv__: \"nb$reflected_divide\",\n    __itruediv__: \"nb$inplace_divide\",\n    __floordiv__: \"nb$floor_divide\",\n    __rfloordiv__: \"nb$reflected_floor_divide\",\n    __ifloordiv__: \"nb$inplace_floor_divide\",\n    __invert__: \"nb$invert\",\n    __mod__: \"nb$remainder\",\n    __rmod__: \"nb$reflected_remainder\",\n    __imod__: \"nb$inplace_remainder\",\n    __divmod__: \"nb$divmod\",\n    __rdivmod__: \"nb$reflected_divmod\", //no inplace divmod\n    __pow__: \"nb$power\",\n    __rpow__: \"nb$reflected_power\",\n    __ipow__: \"nb$inplace_power\",\n\n    __bool__: \"nb$bool\",\n    // py2 only\n    __long__: \"nb$long\",\n\n    __lshift__: \"nb$lshift\",\n    __rlshift__: \"nb$reflected_lshift\",\n    __ilshift__: \"nb$inplace_lshift\",\n    __rshift__: \"nb$rshift\",\n    __rrshift__: \"nb$reflected_rshift\",\n    __irshift__: \"nb$inplace_rshift\",\n\n    __and__: \"nb$and\",\n    __rand__: \"nb$reflected_and\",\n    __iand__: \"nb$inplace_and\",\n    __or__: \"nb$or\",\n    __ror__: \"nb$reflected_or\",\n    __ior__: \"nb$inplace_or\",\n    __xor__: \"nb$xor\",\n    __rxor__: \"nb$reflected_xor\",\n    __ixor__: \"nb$inplace_xor\",\n\n    __matmul__: \"nb$matrix_multiply\",\n    __rmatmul__: \"nb$reflected_matrix_multiply\",\n    __imatmul__: \"nb$inplace_matrix_multiply\",\n\n    __get__: \"tp$descr_get\",\n    __set__: \"tp$descr_set\",\n    __delete__: \"tp$descr_set\",\n\n    __getattribute__: \"tp$getattr\",\n    __getattr__: \"tp$getattr\",\n    __setattr__: \"tp$setattr\",\n    __delattr__: \"tp$setattr\",\n\n    __len__: \"sq$length\",\n    __contains__: \"sq$contains\",\n    __getitem__: \"mp$subscript\",\n    __setitem__: \"mp$ass_subscript\",\n    __delitem__: \"mp$ass_subscript\",\n};\n\nSk.exportSymbol(\"Sk.setupDunderMethods\", Sk.setupDunderMethods);\n\nSk.setupDunderMethods = function (py3) {\n    const slots = Sk.slots;\n    if (py3 && py3$slots === undefined) {\n        // assume python3 switch version if we have to\n        return;\n    }\n    const classes_with_next = Sk.abstr.built$iterators;\n    const classes_with_bool = [\n        Sk.builtin.int_,\n        Sk.builtin.lng,\n        Sk.builtin.float_,\n        Sk.builtin.complex,\n    ];\n    const classes_with_divide = classes_with_bool;\n    const number_slots = Sk.subSlots.number_slots;\n    const main_slots = Sk.subSlots.main_slots;\n    const indexofnext = main_slots.findIndex((x) => x[0] === \"tp$iternext\");\n    const indexofbool = number_slots.findIndex((x) => x[0] === \"nb$bool\");\n    const dunderToSkulpt = Sk.dunderToSkulpt;\n\n    function switch_version(classes_with, old_meth, new_meth) {\n        for (let i = 0; i < classes_with.length; i++) {\n            const cls_proto = classes_with[i].prototype;\n            if (cls_proto.hasOwnProperty(new_meth)) {\n                continue;\n            }\n            cls_proto[new_meth] = cls_proto[old_meth];\n            delete cls_proto[old_meth];\n        }\n    }\n\n    if (py3) {\n        dunderToSkulpt.__bool__ = \"nb$bool\";\n        dunderToSkulpt.__next__ = \"tp$iternext\";\n\n        delete dunderToSkulpt.__nonzero__;\n        delete dunderToSkulpt.__div__;\n        delete dunderToSkulpt.__rdiv__;\n        delete dunderToSkulpt.__idiv__;\n        delete dunderToSkulpt.next;\n\n        for (let slot_name in py3$slots) {\n            slots[slot_name] = py3$slots[slot_name];\n        }\n        for (let slot_name in py2$slots) {\n            delete slots[slot_name];\n        }\n        for (let i = 0; i < classes_with_divide.length; i++) {\n            const cls_proto = classes_with_divide[i].prototype;\n            delete cls_proto.__div__;\n            delete cls_proto.__rdiv__;\n        }\n\n        main_slots[indexofnext][1] = \"__next__\";\n        number_slots[indexofbool][1] = \"__bool__\";\n        switch_version(classes_with_next, \"next\", \"__next__\");\n        switch_version(classes_with_bool, \"__bool__\", \"__nonzero__\");\n    } else {\n        if (py3$slots === undefined) {\n            slots.py3$slots = {\n                __next__: slots.__next__,\n            };\n            py3$slots = slots.py3$slots;\n        }\n        dunderToSkulpt.next = \"tp$iternext\";\n        dunderToSkulpt.__nonzero__ = \"nb$bool\";\n        dunderToSkulpt.__div__ = \"nb$divide\";\n        dunderToSkulpt.__rdiv__ = \"nb$reflected_divide\";\n        dunderToSkulpt.__idiv__ = \"nb$inplace_divide\";\n        delete dunderToSkulpt.__bool__;\n        delete dunderToSkulpt.__next__;\n\n        for (let slot_name in py2$slots) {\n            slots[slot_name] = py2$slots[slot_name];\n        }\n        for (let slot_name in py3$slots) {\n            delete slots[slot_name];\n        }\n\n        main_slots[indexofnext][1] = \"next\";\n        number_slots[indexofbool][1] = \"__nonzero__\";\n        switch_version(classes_with_next, \"__next__\", \"next\");\n        switch_version(classes_with_bool, \"__nonzero__\", \"__bool__\");\n\n        for (let i = 0; i < classes_with_divide.length; i++) {\n            const cls = classes_with_divide[i];\n            const cls_proto = cls.prototype;\n            if (cls_proto.hasOwnProperty(\"__div__\")) {\n                continue;\n            }\n            cls_proto.__div__ = new Sk.builtin.wrapper_descriptor(\n                cls,\n                py2$slots.__div__,\n                cls_proto.nb$divide\n            );\n            cls_proto.__rdiv__ = new Sk.builtin.wrapper_descriptor(\n                cls,\n                py2$slots.__rdiv__,\n                Sk.reflectedNumberSlots.nb$divide.slot\n            );\n        }\n    }\n};\n", "/**\n * @function\n * @param {string} type_name\n * @param {string|undefined} repr_name\n * @param {Function} descr_constructor\n *\n * @returns {FunctionConstructor}\n */\nfunction buildDescriptor(type_name, repr_name, descr_options) {\n    const descr = Sk.abstr.buildNativeClass(type_name, {\n        constructor: descr_options.constructor,\n        slots: Object.assign(\n            {\n                tp$getattr: Sk.generic.getAttr,\n                $r: descriptorRepr,\n            },\n            descr_options.slots\n        ),\n        getsets: Object.assign(descr_options.getsets || {}, descriptorGetsets),\n        proto: /**@lends {descr_object.prototype}*/ Object.assign(descr_options.proto || {}, {\n            d$repr_name: repr_name || type_name,\n            d$check: descriptorCheck,\n            d$set_check: descriptorSetCheck,\n        }),\n        flags: { sk$unacceptableBase: true },\n    });\n    return descr;\n}\n\nfunction descriptorCheck(obj) {\n    if (obj == null) {\n        return this;\n    } else if (!obj.ob$type.$isSubType(this.d$type)) {\n        throw new Sk.builtin.TypeError(\n            \"descriptor '\" +\n                this.d$name +\n                \"' requires a '\" +\n                this.d$type.prototype.tp$name +\n                \"' object but received a '\" +\n                Sk.abstr.typeName(obj) +\n                \"' object\"\n        );\n    }\n    return;\n}\n\nfunction descriptorSetCheck(obj) {\n    if (!obj.ob$type.$isSubType(this.d$type)) {\n        throw new Sk.builtin.TypeError(\n            \"descriptor '\" +\n                this.d$name +\n                \"' requires a '\" +\n                this.d$type.prototype.tp$name +\n                \"' object but received a '\" +\n                Sk.abstr.typeName(obj) +\n                \"' object\"\n        );\n    }\n}\n\nfunction descriptorRepr() {\n    return new Sk.builtin.str(\n        \"<\" +\n            this.d$repr_name +\n            \" '\" +\n            this.d$name +\n            \"' of '\" +\n            this.d$type.prototype.tp$name +\n            \"' objects>\"\n    );\n}\n\nconst descriptorGetsets = {\n    __doc__: {\n        $get() {\n            return this.d$def.$doc ? new Sk.builtin.str(this.d$def.$doc) : Sk.builtin.none.none$;\n        },\n    },\n    __objclass__: {\n        $get() {\n            return this.d$type;\n        },\n    },\n    __name__: {\n        $get() {\n            return new Sk.builtin.str(this.d$name);\n        },\n    },\n};\n\nconst descrTextSig = {\n    __text_signature__: {\n        $get() {\n            return this.d$def.$textsig\n                ? new Sk.builtin.str(this.d$def.$textsig)\n                : Sk.builtin.none.none$;\n        },\n    },\n};\n\n/**\n * @constructor\n * @param {typeObject} type_obj\n * @param {Object} gsd\n * @extends {Sk.builtin.object}\n */\nSk.builtin.getset_descriptor = buildDescriptor(\"getset_descriptor\", undefined, {\n    constructor: function getset_descr(typeobj, getset_def) {\n        this.d$def = getset_def;\n        this.$get = getset_def.$get;\n        this.$set = getset_def.$set;\n        this.d$type = typeobj;\n        this.d$name = getset_def.$name;\n    },\n    slots: {\n        tp$descr_get(obj, type) {\n            let ret;\n            if ((ret = this.d$check(obj))) {\n                return ret;\n            }\n            if (this.$get !== undefined) {\n                return this.$get.call(obj);\n            }\n\n            throw new Sk.builtin.AttributeError(\n                \"getset_descriptor '\" +\n                    this.d$name +\n                    \"' of '\" +\n                    this.d$type.prototype.tp$name +\n                    \"' objects is not readable\"\n            );\n        },\n        tp$descr_set(obj, value) {\n            this.d$set_check(obj);\n\n            if (this.$set !== undefined) {\n                return this.$set.call(obj, value);\n            }\n            throw new Sk.builtin.AttributeError(\n                \"attribute '\" +\n                    this.d$name +\n                    \"' of '\" +\n                    this.d$type.prototype.tp$name +\n                    \"' objects is readonly\"\n            );\n        },\n    },\n});\n\n/**\n * @param {typeObject} type_obj\n * @param {Object} method\n * @extends {descr_object}\n */\nSk.builtin.method_descriptor = buildDescriptor(\"method_descriptor\", \"method\", {\n    constructor: function method_descriptor(typeobj, method_def) {\n        this.d$def = method_def;\n        this.$meth = method_def.$meth; //useful for internal fast calls\n        this.d$type = typeobj;\n        this.d$name = method_def.$name || \"<native JS>\";\n        const flags = method_def.$flags || {};\n        this.$flags = flags;\n        if (flags.FastCall && flags.NoKwargs) {\n            this.tp$call = this.$methodFastCallNoKwargs;\n        } else if (flags.FastCall) {\n            this.tp$call = this.$methodFastCall;\n        } else if (flags.NoArgs) {\n            this.tp$call = this.$methodCallNoArgs;\n        } else if (flags.OneArg) {\n            this.tp$call = this.$methodCallOneArg;\n        } else if (flags.NamedArgs) {\n            this.tp$call = this.$methodCallNamedArgs;\n        } else if (flags.MinArgs !== undefined) {\n            this.tp$call = this.$methodCallMinArgs;\n        } else {\n            // for legacy methods that haven't defined flags yet\n            this.func_code = method_def.$meth;\n            this.tp$call = this.$defaultCall;\n            this.$memoiseFlags = Sk.builtin.func.prototype.$memoiseFlags;\n            this.$resolveArgs = Sk.builtin.func.prototype.$resolveArgs;\n        }\n    },\n    slots: {\n        tp$call(args, kwargs) {\n            return this.tp$call(args, kwargs);\n        },\n        tp$descr_get(obj, type) {\n            let ret;\n            if ((ret = this.d$check(obj))) {\n                return ret;\n            }\n            return new Sk.builtin.sk_method(this.d$def, obj);\n        },\n    },\n    getsets: descrTextSig,\n    proto: {\n        $methodFastCall(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            return this.$meth.call(self, args, kwargs);\n        },\n        $methodFastCallNoKwargs(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            Sk.abstr.checkNoKwargs(this.d$name, kwargs);\n            return this.$meth.call(self, args);\n        },\n        $methodCallNoArgs(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            Sk.abstr.checkNoArgs(this.d$name, args, kwargs);\n            return this.$meth.call(self);\n        },\n        $methodCallOneArg(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            Sk.abstr.checkOneArg(this.d$name, args, kwargs);\n            return this.$meth.call(self, args[0]);\n        },\n        $methodCallNamedArgs(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            args = Sk.abstr.copyKeywordsToNamedArgs(\n                this.d$name,\n                this.$flags.NamedArgs,\n                args,\n                kwargs,\n                this.$flags.Defaults\n            );\n            return this.$meth.call(self, ...args);\n        },\n        $methodCallMinArgs(args, kwargs) {\n            const self = args.shift();\n            this.m$checkself(self);\n            Sk.abstr.checkNoKwargs(this.d$name, kwargs);\n            Sk.abstr.checkArgsLen(this.d$name, args, this.$flags.MinArgs, this.$flags.MaxArgs);\n            return this.$meth.call(self, ...args);\n        },\n        $defaultCall(args, kwargs) {\n            this.m$checkself(args[0]);\n            return Sk.builtin.func.prototype.tp$call.call(this, args, kwargs);\n        },\n        m$checkself(self) {\n            if (self === undefined) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' of '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' object needs an argument\"\n                );\n            }\n            this.d$check(self);\n        },\n    },\n});\n\n/**\n * @constructor\n * @extends {descr_object}\n *\n * @param {typeObject} type_obj\n * @param {Object} wrapper_base\n * @param {Function} wrapped\n */\nSk.builtin.wrapper_descriptor = buildDescriptor(\"wrapper_descriptor\", \"slot wrapper\", {\n    constructor: function wrapper_descriptor(typeobj, slot_def, wrapped) {\n        this.d$def = slot_def;\n        this.d$type = typeobj;\n        this.d$name = wrapped.$name = slot_def.$name;\n        this.d$wrapped = wrapped;\n    },\n    slots: {\n        tp$descr_get(obj, type) {\n            let ret;\n            if ((ret = this.d$check(obj))) {\n                return ret;\n            }\n            return new Sk.builtin.method_wrapper(this, obj);\n        },\n        tp$call(args, kwargs) {\n            // make sure the first argument is acceptable as self\n            if (args.length < 1) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' of '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' object needs an argument\"\n                );\n            }\n            const self = args.shift();\n            if (!self.ob$type.$isSubType(this.d$type)) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' requires a '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' object but received a '\" +\n                        Sk.abstr.typeName(self) +\n                        \"'\"\n                );\n            }\n            return this.raw$call(self, args, kwargs);\n        },\n    },\n    proto: {\n        raw$call(self, args, kwargs) {\n            // the base might have some flags I guess... see cpython version in descr.c\n            this.d$wrapped.$name = this.d$name; // hack since some slots use the same function (__setattr__, __delattr__)\n            return this.d$def.$wrapper.call(this.d$wrapped, self, args, kwargs);\n        },\n    },\n});\n\n/**\n * @constructor\n * @extends {descr_object}\n * @param {Sk.builtin.wrapper_descriptor} type_obj\n * @param wrapper_base\n */\nSk.builtin.method_wrapper = buildDescriptor(\"method_wrapper\", undefined, {\n    constructor: function method_wrapper(wrapper_descr, self) {\n        this.m$descr = wrapper_descr;\n        this.m$self = self;\n        this.d$def = wrapper_descr.d$def;\n        this.d$name = wrapper_descr.d$name;\n        this.d$type = wrapper_descr.d$type;\n    },\n    slots: {\n        tp$call(args, kwargs) {\n            return this.m$descr.raw$call(this.m$self, args, kwargs);\n        },\n        tp$richcompare(other, op) {\n            if ((op !== \"Eq\" && op !== \"NotEq\") || !(other instanceof Sk.builtin.method_wrapper)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            let eq = this.m$self === other.m$self && this.m$descr === other.m$descr;\n            return op === \"Eq\" ? eq : !eq;\n        },\n        $r() {\n            return new Sk.builtin.str(\n                \"<method-wrapper '\" +\n                    this.d$name +\n                    \"' of \" +\n                    Sk.abstr.typeName(this.m$self) +\n                    \" object>\"\n            );\n        },\n    },\n    getsets: {\n        __self__: {\n            $get() {\n                return this.m$self;\n            },\n        },\n    },\n});\n\n/**\n *\n * @constructor\n * @extends {descr_object}\n * @param {typeObject} typeobj\n * @param {Object} method_def\n *\n * @description\n * This is for classmethods in Native Js Classes, not for \"f = classmethod(f)\" in Python\n * See dict.fromkeys for a native example\n *\n */\nSk.builtin.classmethod_descriptor = buildDescriptor(\"classmethod_descriptor\", \"method\", {\n    constructor: function classmethod_descriptor(typeobj, method_def) {\n        this.d$def = method_def;\n        this.$meth = method_def.$meth; //useful for internal fast calls\n        this.d$type = typeobj;\n        this.d$name = method_def.$name || \"<native JS>\";\n    },\n    slots: {\n        tp$call(args, kwargs) {\n            if (args.length < 1) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' of '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' object needs an argument\"\n                );\n            }\n            const self = args.shift();\n            const bound = this.tp$descr_get(null, self);\n            return bound.tp$call(args, kwargs);\n        },\n        tp$descr_get(obj, type, canSuspend) {\n            if (type === undefined) {\n                if (obj !== null) {\n                    type = type || obj.ob$type;\n                } else {\n                    throw new Sk.builtin.TypeError(\n                        \"descriptor '\" +\n                            this.d$name +\n                            \"' for type '\" +\n                            this.d$type.prototype.tp$name +\n                            \"' needs an object or a type\"\n                    );\n                }\n            }\n            if (type.ob$type !== Sk.builtin.type) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' for type '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' needs a type not a '\" +\n                        Sk.abstr.typeName(type) +\n                        \"' as arg 2\"\n                );\n            }\n\n            if (!type.$isSubType(this.d$type)) {\n                throw new Sk.builtin.TypeError(\n                    \"descriptor '\" +\n                        this.d$name +\n                        \"' requires a '\" +\n                        this.d$type.prototype.tp$name +\n                        \"' object but received a '\" +\n                        Sk.abstr.typeName(type) +\n                        \"' object\"\n                );\n            }\n            return new Sk.builtin.sk_method(this.d$def, type);\n        },\n    },\n    getsets: descrTextSig,\n});\n\n[\n    Sk.builtin.method_descriptor,\n    Sk.builtin.getset_descriptor,\n    Sk.builtin.wrapper_descriptor,\n    Sk.builtin.method_wrapper,\n    Sk.builtin.classmethod_descriptor,\n].forEach((cls) => {\n    Sk.abstr.setUpSlots(cls);\n    Sk.abstr.setUpMethods(cls);\n    Sk.abstr.setUpGetSets(cls);\n});\n", "/**\n * @constructor\n * Sk.builtin.sk_method\n *\n * @description\n * this constructor is used by all builtin functions or methods\n * the tp$call method is defined based on the flags\n *\n * A good way to determine the flags is to look at the textsignature of a function\n * or find the equivalent function in CPython and map the flags to skulpt flags\n * flags: {\n * NoArgs: true, raises exception if there are args or kwargs (METH_NOARGS)\n * OneArg: true, raises exception if there is more than one Arg (METH_O)\n *\n * MinArgs: int (also assumes noKwargs)\n * MaxArgs: int optional (used in conjuntiontion with MinArgs)\n *\n * NamedArgs: Array e.g. [null, null, \"name1\", \"name2\"]\n *            use null for posonly args\n *            ensures that the total number of args (including kwargs) equals the named args\n *            the call sig will check the kwarg names are valid\n *            the call sig applies Defaults (if set) to any named args\n * Defaults: Array (used in conjunction with NamedArgs, can use [undefined] see dict.pop for use case)\n *\n * FastCall && NoKwargs: true, check NoKewords and pass args the function will handle these (METH_FASTCALL)\n * FastCall: pass args, kwargs - the function will handle this (METH_FASTCALL || KEYWORDS)\n *\n * if no flags are set then the tp$call = function.prototype.tp$call\n *\n * @param {Object} method_def\n * @param {*} self\n * @param {string=} module\n */\nSk.builtin.sk_method = Sk.abstr.buildNativeClass(\"builtin_function_or_method\", {\n    constructor: function builtin_function_or_method(method_def, self, module) {\n        // here we set this.$meth binding it's call signature to self\n        this.$meth = method_def.$meth.bind(self);\n        this.$doc = method_def.$doc;\n        this.$self = self || null;\n        this.$module = module ? new Sk.builtin.str(module) : null;\n        this.$name = method_def.$name || method_def.$meth.name || \"<native JS>\";\n        this.m$def = method_def;\n\n        // useful to set the $textsig to determine the correct flags\n        this.$textsig = method_def.$textsig;\n\n        // override the default tp$call method if there is a valid flag\n        const flags = method_def.$flags || {};\n        this.$flags = flags;\n\n        if (flags.FastCall && flags.NoKwargs) {\n            this.tp$call = this.$fastCallNoKwargs;\n        } else if (flags.FastCall) {\n            this.tp$call = this.$meth;\n        } else if (flags.NoArgs) {\n            this.tp$call = this.$callNoArgs;\n        } else if (flags.OneArg) {\n            this.tp$call = this.$callOneArg;\n        } else if (flags.NamedArgs) {\n            this.tp$call = this.$callNamedArgs;\n        } else if (flags.MinArgs !== undefined) {\n            this.tp$call = this.$callMinArgs;\n        } else {\n            this.func_code = this.$meth;\n            this.tp$call = this.$defaultCallMethod;\n        }\n    },\n    proto: {\n        $fastCallNoKwargs(args, kwargs) {\n            Sk.abstr.checkNoKwargs(this.$name, kwargs);\n            return this.$meth(args);\n        },\n        $callNoArgs(args, kwargs) {\n            Sk.abstr.checkNoArgs(this.$name, args, kwargs);\n            return this.$meth();\n        },\n        $callOneArg(args, kwargs) {\n            Sk.abstr.checkOneArg(this.$name, args, kwargs);\n            return this.$meth(args[0]);\n        },\n        $callNamedArgs(args, kwargs) {\n            args = Sk.abstr.copyKeywordsToNamedArgs(\n                this.$name,\n                this.$flags.NamedArgs,\n                args,\n                kwargs,\n                this.$flags.Defaults\n            );\n            return this.$meth(...args);\n        },\n        $callMinArgs(args, kwargs) {\n            Sk.abstr.checkNoKwargs(this.$name, kwargs);\n            Sk.abstr.checkArgsLen(this.$name, args, this.$flags.MinArgs, this.$flags.MaxArgs);\n            return this.$meth(...args);\n        },\n        $defaultCallMethod(args, kwargs) {\n            // default implementation for all currently created functions that have yet to be be converted\n            // and don't utilise flagged calls\n            if (this.$self !== null) {\n                return Sk.builtin.func.prototype.tp$call.call(this, [this.$self, ...args], kwargs);\n            }\n            return Sk.builtin.func.prototype.tp$call.call(this, args, kwargs);\n        },\n        $memoiseFlags() {\n            return Sk.builtin.func.prototype.$memoiseFlags.call(this);\n        },\n        $resolveArgs() {\n            return Sk.builtin.func.prototype.$resolveArgs.call(this);\n        },\n    },\n    flags: { sk$unacceptableBase: true },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        $r() {\n            if (this.$self === null) {\n                return new Sk.builtin.str(\"<built-in function \" + this.$name + \">\");\n            }\n            return new Sk.builtin.str(\n                \"<built-in method \" +\n                    this.$name +\n                    \" of \" +\n                    Sk.abstr.typeName(this.$self) +\n                    \" object>\"\n            );\n        },\n        tp$call(args, kwargs) {\n            return this.tp$call(args, kwargs);\n        },\n        tp$richcompare(other, op) {\n            if ((op !== \"Eq\" && op !== \"NotEq\") || !(other instanceof Sk.builtin.sk_method)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            let eq = this.$self === other.$self && this.m$def.$meth === other.m$def.$meth;\n            return op === \"Eq\" ? eq : !eq;\n        },\n    },\n    getsets: {\n        __module__: {\n            $get() {\n                return this.$module || Sk.builtin.none.none$;\n            },\n            $set(value) {\n                value = value || Sk.builtin.none.none$;\n                this.$module = value;\n            },\n        },\n        __doc__: {\n            $get() {\n                return this.$doc ? new Sk.builtin.str(this.$doc) : Sk.builtin.none.none$;\n            },\n        },\n        __name__: {\n            $get() {\n                return new Sk.builtin.str(this.$name);\n            },\n        },\n        __text_signature__: {\n            $get() {\n                return new Sk.builtin.str(this.$textsig);\n            },\n        },\n        __self__: {\n            $get() {\n                // self might be a module object - which means it was created inside a module before the module existed\n                // so look the name up in sysmodules\n                return this.$self || Sk.sysModules.mp$lookup(this.$module) || Sk.builtin.none.none$;\n            },\n        },\n    },\n});\n", "/**\n * @constructor\n *\n * @extends {Sk.builtin.object}\n *\n * @description\n * It would be rare to call this as a constructor since it returns {@link Sk.builtin.none.none$}\n */\nSk.builtin.none = Sk.abstr.buildNativeClass(\"NoneType\", {\n    constructor: function NoneType() {\n        return Sk.builtin.none.none$; // always return the same object\n    },\n    slots: /**@lends {Sk.builtin.none.prototype}*/ {\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoArgs(\"NoneType\", args, kwargs);\n            return Sk.builtin.none.none$;\n        },\n        $r() {\n            return new Sk.builtin.str(\"None\");\n        },\n        tp$as_number: true,\n        nb$bool() {\n            return false;\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\n/**\n * Python None value.\n * @type {Sk.builtin.none}\n * @member {Sk.builtin.none}\n */\nSk.builtin.none.none$ = /** @type {Sk.builtin.none} */ (\n    Object.create(Sk.builtin.none.prototype, {\n        v: { value: null, enumerable: true },\n    })\n);\n\n/**\n * @constructor\n * Sk.builtin.NotImplemented\n *\n * @extends {Sk.builtin.object}\n */\nSk.builtin.NotImplemented = Sk.abstr.buildNativeClass(\"NotImplementedType\", {\n    constructor: function NotImplementedType() {\n        return Sk.builtin.NotImplemented.NotImplemented$; // always return the same object\n    },\n    slots: /**@lends {Sk.builtin.NotImplemented.prototype}*/ {\n        $r() {\n            return new Sk.builtin.str(\"NotImplemented\");\n        },\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoArgs(\"NotImplementedType\", args, kwargs);\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\n/**\n * Python NotImplemented constant.\n * @type {Sk.builtin.NotImplemented}\n * @member {Sk.builtin.NotImplemented}\n */\nSk.builtin.NotImplemented.NotImplemented$ = /** @type {Sk.builtin.NotImplemented} */ (\n    Object.create(Sk.builtin.NotImplemented.prototype, {\n        v: { value: null, enumerable: true },\n    })\n);\n\nconst EllipsisType = Sk.abstr.buildNativeClass(\"ellipsis\", {\n    constructor: function ellipsis() {\n        return Sk.builtin.Ellipsis;\n    },\n    slots: {\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoArgs(\"ellipsis\", args, kwargs);\n            return Sk.builtin.Ellipsis;\n        },\n        $r() {\n            return new Sk.builtin.str(\"Ellipsis\");\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\nSk.builtin.Ellipsis = Object.create(EllipsisType.prototype, { v: { value: \"...\" } });\n", "// Implement the default \"format specification mini-language\"\n// for numbers and strings\n// https://docs.python.org/3.7/library/string.html#formatspec\n\nconst FORMAT_SPEC_REGEX =\n    /^(?:(.)?([<\\>\\=\\^]))?([\\+\\-\\s])?(#)?(0)?(\\d+)?(,|_)?(?:\\.(\\d+))?([bcdeEfFgGnosxX%])?$/;\nconst FMT = {\n    FILL_CHAR: 1,\n    FILL_ALIGN: 2,\n    SIGN: 3,\n    ALT_FORM: 4,\n    ZERO_PAD: 5,\n    FIELD_WIDTH: 6,\n    COMMA: 7,\n    PRECISION: 8,\n    CONVERSION_TYPE: 9,\n};\n\nSk.formatting = {};\n\nlet handleWidth = function (m, r, prefix, isNumber) {\n    // print(prefix);\n    Sk.asserts.assert(typeof r === \"string\");\n\n    if (m[FMT.FIELD_WIDTH]) {\n        let fieldWidth = parseInt(m[FMT.FIELD_WIDTH], 10);\n        let fillChar = m[FMT.FILL_CHAR] || (m[FMT.ZERO_PAD] ? \"0\" : \" \");\n        let fillAlign = m[FMT.FILL_ALIGN] || (m[FMT.ZERO_PAD] ? \"=\" : isNumber ? \">\" : \"<\");\n        let nFill = fieldWidth - (r.length + (prefix ? prefix.length : 0));\n\n        if (nFill <= 0) {\n            return prefix + r;\n        }\n\n        let fill = fillChar.repeat(nFill);\n\n        switch (fillAlign) {\n            case \"=\":\n                if (m[FMT.CONVERSION_TYPE] === \"s\") {\n                    throw new Sk.builtin.ValueError(\n                        \"'=' alignment not allowed in string format specifier\"\n                    );\n                }\n                return prefix + fill + r;\n            case \">\":\n                return fill + prefix + r;\n            case \"<\":\n                return prefix + r + fill;\n            case \"^\":\n                let idx = Math.floor(nFill / 2);\n                return fill.substring(0, idx) + prefix + r + fill.substring(idx);\n        }\n    }\n    return prefix + r;\n};\n\nlet signForNeg = function (m, neg) {\n    return neg ? \"-\" : m[FMT.SIGN] === \"+\" ? \"+\" : m[FMT.SIGN] === \" \" ? \" \" : \"\";\n};\n\nconst thousandSep = /\\B(?=(\\d{3})+(?!\\d))/g;\nconst otherBaseSep = /\\B(?=([A-Za-z0-9]{4})+(?![A-Za-z0-9]))/g;\n\nlet handleInteger = function (m, n, base) {\n    // TODO: Do we need to tolerate float inputs for integer conversions?\n    // Python doesn't, but I'm guessing this is something to do with JS's\n    // int/float ambiguity\n    Sk.asserts.assert(n instanceof Sk.builtin.int_ || n instanceof Sk.builtin.lng);\n\n    if (m[FMT.PRECISION]) {\n        throw new Sk.builtin.ValueError(\"Precision not allowed in integer format\");\n    }\n\n    let r = n.str$(base, false);\n    let neg = n.nb$isnegative();\n\n    let prefix = signForNeg(m, neg);\n\n    if (m[FMT.ALT_FORM]) {\n        if (base === 16) {\n            prefix += \"0x\";\n        } else if (base === 8) {\n            prefix += \"0o\";\n        } else if (base === 2) {\n            prefix += \"0b\";\n        }\n    }\n\n    const conversionType = m[FMT.CONVERSION_TYPE];\n    if (conversionType === \"X\") {\n        r = r.toUpperCase(); // floats convert nan to NAN\n    }\n\n    if (m[FMT.CONVERSION_TYPE] === \"n\") {\n        r = (+r).toLocaleString();\n    } else if (m[FMT.COMMA]) {\n        const parts = r.split(\".\");\n        const sep = m[FMT.COMMA];\n        if (sep === \",\" && base !== 10) {\n            throw new Sk.builtin.ValueError(`Cannot specify ',' with '${conversionType}'`);\n        }\n        parts[0] = parts[0].replace(base === 10 ? thousandSep : otherBaseSep, sep);\n        r = parts.join(\".\");\n    }\n\n    return handleWidth(m, r, prefix, true);\n};\n\n// Common implementation of __format__ for Python number objects\nlet formatNumber = function (num, formatSpec, isFractional) {\n    if (!formatSpec) {\n        // empty or undefined\n        return num.str$(10, true);\n    }\n    let m = formatSpec.match(FORMAT_SPEC_REGEX);\n    if (!m) {\n        throw new Sk.builtin.ValueError(\"Invalid format specifier\");\n    }\n\n    let conversionType = m[FMT.CONVERSION_TYPE];\n    if (!conversionType) {\n        conversionType = isFractional ? \"g\" : \"d\";\n    }\n\n    let validConversions = isFractional ? \"fFeEgG%\" : \"bcdoxXnfFeEgG%\";\n    if (validConversions.indexOf(conversionType) == -1) {\n        throw new Sk.builtin.ValueError(\n            \"Unknown format code '\" +\n                m[FMT.CONVERSION_TYPE] +\n                \"' for object of type '\" +\n                Sk.abstr.typeName(num) +\n                \"'\"\n        );\n    }\n\n    switch (conversionType) {\n        case \"d\":\n        case \"n\":\n            return handleInteger(m, num, 10);\n        case \"x\":\n        case \"X\":\n            return handleInteger(m, num, 16);\n        case \"o\":\n            return handleInteger(m, num, 8);\n        case \"b\":\n            return handleInteger(m, num, 2);\n        case \"c\": {\n            if (m[FMT.SIGN]) {\n                throw new Sk.builtin.ValueError(\n                    \"Sign not allowed with integer format specifier 'c'\"\n                );\n            }\n            if (m[FMT.ALT_FORM]) {\n                throw new Sk.builtin.ValueError(\n                    \"Alternate form not allowed with integer format specifier 'c'\"\n                );\n            }\n            if (m[FMT.COMMA]) {\n                throw new Sk.builtin.ValueError(\"Cannot specify ',' with 'c'\");\n            }\n            if (m[FMT.PRECISION]) {\n                throw new Sk.builtin.ValueError(\"Cannot specify ',' with 'c'\");\n            }\n            return handleWidth(m, String.fromCodePoint(Sk.builtin.asnum$(num)), \"\", true);\n        }\n\n        case \"f\":\n        case \"F\":\n        case \"e\":\n        case \"E\":\n        case \"g\":\n        case \"G\": {\n            if (m[FMT.ALT_FORM]) {\n                throw new Sk.builtin.ValueError(\n                    \"Alternate form (#) not allowed in float format specifier\"\n                );\n            }\n            let convValue = Sk.builtin.asnum$(num);\n            if (typeof convValue === \"string\") {\n                convValue = Number(convValue);\n            }\n            if (convValue === Infinity) {\n                return handleWidth(m, \"inf\", \"\", true);\n            }\n            if (convValue === -Infinity) {\n                return handleWidth(m, \"inf\", \"-\", true);\n            }\n            if (isNaN(convValue)) {\n                return handleWidth(m, \"nan\", \"\", true);\n            }\n            let neg = false;\n            if (convValue < 0) {\n                convValue = -convValue;\n                neg = true;\n            }\n            let convName = [\"toExponential\", \"toFixed\", \"toPrecision\"][\n                \"efg\".indexOf(conversionType.toLowerCase())\n            ];\n            let precision = m[FMT.PRECISION] ? parseInt(m[FMT.PRECISION], 10) : 6;\n            let result = convValue[convName](precision);\n            if (\"EFG\".indexOf(conversionType) !== -1) {\n                result = result.toUpperCase();\n            }\n            // Python's 'g' does not show trailing 0s\n            if (conversionType.toLowerCase() === \"g\" || !m[FMT.CONVERSION_TYPE]) {\n                let trailingZeros = result.match(/\\.(\\d*[1-9])?(0+)$/);\n                if (trailingZeros) {\n                    let [_, hasMoreDigits, zs] = trailingZeros;\n                    // Python's default conversion shows at least one trailing zero\n                    result = result.slice(0, hasMoreDigits ? -zs.length : -(zs.length + 1));\n                }\n                if (result.indexOf(\".\") == -1 && !m[FMT.CONVERSION_TYPE]) {\n                    result += \".0\";\n                }\n            }\n            if (conversionType.toLowerCase() === \"e\") {\n                result = result.replace(/^([-+]?[0-9]*\\.?[0-9]+[eE][-+]?)([0-9])?$/, \"$10$2\");\n            }\n            if (m[FMT.COMMA]) {\n                var parts = result.toString().split(\".\");\n                parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                result = parts.join(\".\");\n            }\n\n            return handleWidth(m, result, signForNeg(m, neg), true);\n        }\n\n        case \"%\": {\n            if (m[FMT.ALT_FORM]) {\n                throw new Sk.builtin.ValueError(\n                    \"Alternate form (#) not allowed with format specifier '%'\"\n                );\n            }\n            let convValue = Sk.builtin.asnum$(num);\n            if (typeof convValue === \"string\") {\n                convValue = Number(convValue);\n            }\n            if (convValue === Infinity) {\n                return handleWidth(m, \"inf%\", \"\", true);\n            }\n            if (convValue === -Infinity) {\n                return handleWidth(m, \"inf%\", \"-\", true);\n            }\n            if (isNaN(convValue)) {\n                return handleWidth(m, \"nan%\", \"\", true);\n            }\n            let neg = false;\n            if (convValue < 0) {\n                convValue = -convValue;\n                neg = true;\n            }\n            let precision = m[FMT.PRECISION] ? parseInt(m[FMT.PRECISION], 10) : 6;\n            let result = (convValue * 100.0).toFixed(precision) + \"%\";\n            return handleWidth(m, result, signForNeg(m, neg), true);\n        }\n\n        default:\n            throw new Sk.builtin.ValueError(\"Unknown format code '\" + m[FMT.CONVERSION_TYPE] + \"'\");\n    }\n};\n\nSk.formatting.mkNumber__format__ = (isFractional) =>\n    function (format_spec) {\n        if (!Sk.builtin.checkString(format_spec)) {\n            throw new Sk.builtin.TypeError(\n                \"format() argument 2 must be str, not \" + Sk.abstr.typeName(format_spec)\n            );\n        }\n        return new Sk.builtin.str(formatNumber(this, format_spec.$jsstr(), isFractional));\n    };\n\nfunction formatString(format_spec) {\n    if (!Sk.builtin.checkString(format_spec)) {\n        throw new Sk.builtin.TypeError(\n            \"format() argument 2 must be str, not \" + Sk.abstr.typeName(format_spec)\n        );\n    }\n\n    let m = format_spec.$jsstr().match(FORMAT_SPEC_REGEX);\n    if (m[FMT.CONVERSION_TYPE] && m[FMT.CONVERSION_TYPE] !== \"s\") {\n        throw new Sk.builtin.ValueError(\n            \"Unknown format code '\" + m[FMT.CONVERSION_TYPE] + \"' for object of type 'str'\"\n        );\n    }\n\n    if (m[FMT.SIGN]) {\n        throw new Sk.builtin.ValueError(\"Sign not allowed in string format specifier\");\n    }\n\n    if (m[FMT.ALT_FORM]) {\n        throw new Sk.builtin.ValueError(\n            \"Alternate form (#) not allowed with string format specifier\"\n        );\n    }\n\n    if (m[FMT.COMMA]) {\n        throw new Sk.builtin.ValueError(\"Cannot specify ',' with 's'\");\n    }\n\n    let value = this.v;\n\n    if (m[FMT.PRECISION]) {\n        value = value.substring(0, m[FMT.PRECISION]);\n    }\n\n    return new Sk.builtin.str(handleWidth(m, value, \"\", false));\n}\n\n// str.format() implementation\nfunction format(args, kwargs) {\n    // following PEP 3101\n    kwargs = kwargs || [];\n    const arg_dict = {};\n    const regex =\n        /{(((?:\\d+)|(?:\\w+))?((?:\\.(\\w+))|(?:\\[((?:\\d+)|(?:\\w+))\\])?))?(?:\\!([rs]))?(?:\\:([^}]*))?}/g;\n    // ex: {o.name!r:*^+#030,.9b}\n    // Field 1, Field_name, o.name\n    // Field 2, arg_name, o\n    // Field 3, attribute_name/Element_index , .name\n    // Field 4, Attribute name, name\n    // Field 5, element_index, [0]\n    // Field 6, conversion, r\n    // Field 7, format_spec,*^+#030,.9b\n\n    // Detect empty/int/complex name\n    // retrive field value\n    // hand off format spec\n    // return resulting spec to function\n    for (let i = 0; i < kwargs.length; i += 2) {\n        arg_dict[kwargs[i]] = kwargs[i + 1];\n    }\n    for (let i in args) {\n        arg_dict[i] = args[i];\n    }\n\n    let index = 0;\n    function replFunc(\n        substring,\n        field_name,\n        arg_name,\n        attr_name,\n        attribute_name,\n        element_index,\n        conversion,\n        format_spec,\n        offset,\n        str_whole\n    ) {\n        let value;\n\n        if (element_index !== undefined && element_index !== \"\") {\n            let container = arg_dict[arg_name];\n            if (container.constructor === Array) {\n                value = container[element_index];\n            } else if (/^\\d+$/.test(element_index)) {\n                value = Sk.abstr.objectGetItem(\n                    container,\n                    new Sk.builtin.int_(parseInt(element_index, 10)),\n                    false\n                );\n            } else {\n                value = Sk.abstr.objectGetItem(container, new Sk.builtin.str(element_index), false);\n            }\n            index++;\n        } else if (attribute_name !== undefined && attribute_name !== \"\") {\n            value = Sk.abstr.gattr(\n                arg_dict[arg_name || index++],\n                new Sk.builtin.str(attribute_name)\n            );\n        } else if (arg_name !== undefined && arg_name !== \"\") {\n            value = arg_dict[arg_name];\n        } else if (field_name === undefined || field_name === \"\") {\n            value = arg_dict[index];\n            index++;\n        } else if (\n            field_name instanceof Sk.builtin.int_ ||\n            field_name instanceof Sk.builtin.float_ ||\n            field_name instanceof Sk.builtin.lng ||\n            /^\\d+$/.test(field_name)\n        ) {\n            value = arg_dict[field_name];\n            index++;\n        }\n\n        if (conversion === \"s\") {\n            value = new Sk.builtin.str(value);\n        } else if (conversion === \"r\") {\n            value = Sk.builtin.repr(value);\n        } else if (conversion !== \"\" && conversion !== undefined) {\n            throw new Sk.builtin.ValueError(\"Unknown conversion specifier \" + conversion);\n        }\n        // TODO \"!a\" I guess?\n\n        return Sk.abstr.objectFormat(value, new Sk.builtin.str(format_spec)).$jsstr();\n    }\n\n    const ret = this.v.replace(regex, replFunc);\n    return new Sk.builtin.str(ret);\n}\n\nSk.formatting.format = format;\nSk.formatting.formatString = formatString;\n", "var keyhash_regex = /^[0-9!#_]/;\nvar interned = Object.create(null); // avoid name conflicts with Object.prototype\n\nfunction getInterned(x) {\n    return interned[x];\n}\n\nfunction setInterned(x, pyStr) {\n    interned[x] = pyStr;\n}\n\n/**\n * @constructor\n * @param {*} x\n * @extends Sk.builtin.object\n */\nSk.builtin.str = Sk.abstr.buildNativeClass(\"str\", {\n    constructor: function str(x) {\n        // new Sk.builtin.str is an internal function called with a JS value x\n        // occasionally called with a python object and returns tp$str() or $r();\n        Sk.asserts.assert(this instanceof Sk.builtin.str, \"bad call to str - use 'new'\");\n        let ret;\n        if (typeof x === \"string\") {\n            ret = x;\n        } else if (x === undefined) {\n            ret = \"\";\n        } else if (x === null) {\n            ret = \"None\";\n        } else if (x.tp$str !== undefined) {\n            // then we're a python object - all objects inherit from object which has tp$str\n            return x.tp$str();\n        } else if (typeof x === \"number\") {\n            ret = Number.isFinite(x)\n                ? String(x)\n                : String(x).replace(\"Infinity\", \"inf\").replace(\"NaN\", \"nan\");\n        } else {\n            throw new Sk.builtin.TypeError(\n                \"could not convert object of type '\" + Sk.abstr.typeName(x) + \"' to str\"\n            );\n        }\n\n        const interned = getInterned(ret);\n        // interning required for strings in py\n        if (interned !== undefined) {\n            return interned;\n        } else {\n            setInterned(ret, this);\n        }\n\n        this.$mangled = fixReserved(ret);\n        // used by dict key hash function $savedKeyHash\n        this.$savedKeyHash = ret.replace(keyhash_regex, \"!$&\");\n        this.v = ret;\n    },\n    slots: /**@lends {Sk.builtin.str.prototype} */ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$doc: \"str(object='') -> str\\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\\n\\nCreate a new string object from the given object. If encoding or\\nerrors is specified, then the object must expose a data buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise, returns the result of object.__str__() (if defined)\\nor repr(object).\\nencoding defaults to sys.getdefaultencoding().\\nerrors defaults to 'strict'.\",\n        tp$new(args, kwargs) {\n            kwargs = kwargs || [];\n            if (this !== Sk.builtin.str.prototype) {\n                return this.$subtype_new(args, kwargs);\n            }\n            if (args.length <= 1 && !kwargs.length) {\n                return new Sk.builtin.str(args[0]);\n            } else if (!Sk.__future__.python3) {\n                throw new Sk.builtin.TypeError(\n                    \"str takes at most one argument (\" + (args.length + kwargs.length) + \" given)\"\n                );\n            } else {\n                const [x, encoding, errors] = Sk.abstr.copyKeywordsToNamedArgs(\n                    \"str\",\n                    [\"object\", \"encoding\", \"errors\"],\n                    args,\n                    kwargs\n                );\n                if (x === undefined || (encoding === undefined && errors === undefined)) {\n                    return new Sk.builtin.str(x);\n                }\n                // check the types of encoding and errors\n                Sk.builtin.bytes.check$encodeArgs(\"str\", encoding, errors);\n                if (!Sk.builtin.checkBytes(x)) {\n                    throw new Sk.builtin.TypeError(\n                        \"decoding to str: need a bytes-like object, \" +\n                            Sk.abstr.typeName(x) +\n                            \" found\"\n                    );\n                }\n                return Sk.builtin.bytes.$decode.call(x, encoding, errors);\n            }\n        },\n        $r() {\n            // single is preferred\n            let quote = \"'\";\n            if (this.v.indexOf(\"'\") !== -1 && this.v.indexOf('\"') === -1) {\n                quote = '\"';\n            }\n            //jshint ignore:end\n            const len = this.v.length;\n            let c,\n                cc,\n                ret = quote;\n            for (let i = 0; i < len; i++) {\n                c = this.v.charAt(i);\n                cc = this.v.charCodeAt(i);\n                if (c === quote || c === \"\\\\\") {\n                    ret += \"\\\\\" + c;\n                } else if (c === \"\\t\") {\n                    ret += \"\\\\t\";\n                } else if (c === \"\\n\") {\n                    ret += \"\\\\n\";\n                } else if (c === \"\\r\") {\n                    ret += \"\\\\r\";\n                } else if (((cc > 0xff && cc < 0xd800) || cc >= 0xe000) && !Sk.__future__.python3) {\n                    // BMP\n                    ret += \"\\\\u\" + (\"000\" + cc.toString(16)).slice(-4);\n                } else if (cc >= 0xd800 && !Sk.__future__.python3) {\n                    // Surrogate pair stuff\n                    let val = this.v.codePointAt(i);\n                    i++;\n\n                    val = val.toString(16);\n                    let s = \"0000000\" + val.toString(16);\n                    if (val.length > 4) {\n                        ret += \"\\\\U\" + s.slice(-8);\n                    } else {\n                        ret += \"\\\\u\" + s.slice(-4);\n                    }\n                } else if (cc > 0xff && !Sk.__future__.python3) {\n                    // Invalid!\n                    ret += \"\\\\ufffd\";\n                } else if (c < \" \" || (cc >= 0x7f && !Sk.__future__.python3)) {\n                    let ashex = c.charCodeAt(0).toString(16);\n                    if (ashex.length < 2) {\n                        ashex = \"0\" + ashex;\n                    }\n                    ret += \"\\\\x\" + ashex;\n                } else {\n                    ret += c;\n                }\n            }\n            ret += quote;\n            return new Sk.builtin.str(ret);\n        },\n        tp$str() {\n            if (this.constructor === Sk.builtin.str) {\n                return this;\n            } else {\n                return new Sk.builtin.str(this.v);\n            }\n        },\n        tp$iter() {\n            return new str_iter_(this);\n        },\n        tp$richcompare(other, op) {\n            if (!(other instanceof Sk.builtin.str)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            switch (op) {\n                case \"Lt\":\n                    return this.v < other.v;\n                case \"LtE\":\n                    return this.v <= other.v;\n                case \"Eq\":\n                    return this.v === other.v;\n                case \"NotEq\":\n                    return this.v !== other.v;\n                case \"Gt\":\n                    return this.v > other.v;\n                case \"GtE\":\n                    return this.v >= other.v;\n            }\n        },\n        mp$subscript(index) {\n            let len;\n            if (Sk.misceval.isIndex(index)) {\n                index = Sk.misceval.asIndexSized(index, Sk.builtin.OverflowError);\n                len = this.sq$length();\n                if (index < 0) {\n                    index = index + len;\n                }\n                if (index < 0 || index >= len) {\n                    throw new Sk.builtin.IndexError(\"string index out of range\");\n                }\n                if (this.codepoints) {\n                    return new Sk.builtin.str(\n                        this.v.substring(this.codepoints[index], this.codepoints[index + 1])\n                    );\n                } else {\n                    return new Sk.builtin.str(this.v.charAt(index));\n                }\n            } else if (index instanceof Sk.builtin.slice) {\n                let ret = \"\";\n                len = this.sq$length();\n                if (this.codepoints) {\n                    index.sssiter$(len, (i) => {\n                        ret += this.v.substring(this.codepoints[i], this.codepoints[i + 1]);\n                    });\n                } else {\n                    index.sssiter$(len, (i) => {\n                        ret += this.v.charAt(i);\n                    });\n                }\n                return new Sk.builtin.str(ret);\n            }\n            throw new Sk.builtin.TypeError(\n                \"string indices must be integers, not \" + Sk.abstr.typeName(index)\n            );\n        },\n        sq$length() {\n            return this.$hasAstralCodePoints() ? this.codepoints.length : this.v.length;\n        },\n        sq$concat(other) {\n            if (!(other instanceof Sk.builtin.str)) {\n                throw new Sk.builtin.TypeError(\n                    \"cannot concatenate 'str' and '\" + Sk.abstr.typeName(other) + \"' objects\"\n                );\n            }\n            return new Sk.builtin.str(this.v + other.v);\n        },\n        sq$repeat(n) {\n            if (!Sk.misceval.isIndex(n)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\"\n                );\n            }\n            n = Sk.misceval.asIndexSized(n, Sk.builtin.OverflowError);\n            if (n * this.v.length > Number.MAX_SAFE_INTEGER) {\n                throw new Sk.builtin.OverflowError();\n            }\n            let ret = \"\";\n            for (let i = 0; i < n; i++) {\n                ret += this.v;\n            }\n            return new Sk.builtin.str(ret);\n        },\n        sq$contains(ob) {\n            if (!(ob instanceof Sk.builtin.str)) {\n                throw new Sk.builtin.TypeError(\n                    \"'in <string>' requires string as left operand not \" + Sk.abstr.typeName(ob)\n                );\n            }\n            return this.v.indexOf(ob.v) !== -1;\n        },\n        tp$as_number: true,\n        nb$remainder: strBytesRemainder,\n    },\n    proto: /**@lends {Sk.builtin.str.prototype} */ {\n        toString() {\n            return this.v;\n        },\n        $subtype_new(args, kwargs) {\n            const instance = new this.constructor();\n            // we call str new method with all the args and kwargs\n            const str_instance = Sk.builtin.str.prototype.tp$new(args, kwargs);\n            instance.$mangled = str_instance.$mangled;\n            instance.$savedKeyHash = str_instance.$savedKeyHash;\n            instance.v = str_instance.v;\n            return instance;\n        },\n        $jsstr() {\n            return this.v;\n        },\n        $hasAstralCodePoints() {\n            // If a string has astral code points, we have to work out where they are before\n            // we can do things like slicing, computing length, etc. We work this out when we need to.\n            if (this.codepoints === null) {\n                return false;\n            } else if (this.codepoints !== undefined) {\n                return true;\n            }\n            // Does this string contain astral code points? If so, we have to do things the slow way.\n            for (let i = 0; i < this.v.length; i++) {\n                let cc = this.v.charCodeAt(i);\n                if (cc >= 0xd800 && cc < 0xe000) {\n                    // Yep, it's a surrogate pair. Mark off the\n                    // indices of all the code points for O(1) seeking later\n                    this.codepoints = [];\n                    for (let j = 0; j < this.v.length; j++) {\n                        this.codepoints.push(j);\n                        cc = this.v.charCodeAt(j);\n                        if (cc >= 0xd800 && cc < 0xdc00) {\n                            j++; // High surrogate. Skip next char\n                        }\n                    }\n                    return true;\n                }\n            }\n            this.codepoints = null;\n            return false;\n        },\n        sk$asarray() {\n            const ret = [];\n            if (this.$hasAstralCodePoints()) {\n                const codepoints = this.codepoints;\n                for (let i = 0; i < codepoints.length; i++) {\n                    ret.push(\n                        new Sk.builtin.str(this.v.substring(codepoints[i], codepoints[i + 1]))\n                    );\n                }\n            } else {\n                for (let i = 0; i < this.v.length; i++) {\n                    ret.push(new Sk.builtin.str(this.v[i]));\n                }\n            }\n            return ret;\n        },\n        find$left: mkFind(false),\n        find$right: mkFind(true),\n        get$tgt(tgt) {\n            if (tgt instanceof Sk.builtin.str) {\n                return tgt.v;\n            }\n            throw new Sk.builtin.TypeError(\n                \"a str instance is required not '\" + Sk.abstr.typeName(tgt) + \"'\"\n            );\n        },\n        $isIdentifier() {\n            return Sk.token.isIdentifier(this.v);\n        },\n    },\n    methods: /**@lends {Sk.builtin.str.prototype} */ {\n        encode: {\n            $meth: function encode(encoding, errors) {\n                ({ encoding, errors } = Sk.builtin.bytes.check$encodeArgs(\n                    \"encode\",\n                    encoding,\n                    errors\n                ));\n                const pyBytes = Sk.builtin.bytes.str$encode(this, encoding, errors);\n                return Sk.__future__.python3 ? pyBytes : new Sk.builtin.str(pyBytes.$jsstr());\n            },\n            $flags: { NamedArgs: [\"encoding\", \"errors\"] },\n            $textsig: \"($self, /, encoding='utf-8', errors='strict')\",\n            $doc: \"Encode the string using the codec registered for encoding.\\n\\n  encoding\\n    The encoding in which to encode the string.\\n  errors\\n    The error handling scheme to use for encoding errors.\\n    The default is 'strict' meaning that encoding errors raise a\\n    UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\\n    'xmlcharrefreplace' as well as any other name registered with\\n    codecs.register_error that can handle UnicodeEncodeErrors.\",\n        },\n        replace: {\n            $meth(oldS, newS, count) {\n                oldS = this.get$tgt(oldS);\n                newS = this.get$tgt(newS);\n                count =\n                    count === undefined\n                        ? -1\n                        : Sk.misceval.asIndexSized(count, Sk.builtin.OverflowError);\n                const patt = new RegExp(re_escape_(oldS), \"g\");\n                if (count < 0) {\n                    return new Sk.builtin.str(this.v.replace(patt, newS));\n                }\n                let c = 0;\n                const ret = this.v.replace(patt, (match) => (c++ < count ? newS : match));\n                return new Sk.builtin.str(ret);\n            },\n            $flags: { MinArgs: 2, MaxArgs: 3 },\n            $textsig: \"($self, old, new, count=-1, /)\",\n            $doc: \"Return a copy with all occurrences of substring old replaced by new.\\n\\n  count\\n    Maximum number of occurrences to replace.\\n    -1 (the default value) means replace all occurrences.\\n\\nIf the optional argument count is given, only the first count occurrences are\\nreplaced.\",\n        },\n        split: {\n            $meth: function split(sep, maxsplit) {\n                maxsplit = Sk.misceval.asIndexSized(maxsplit, Sk.builtin.OverflowError);\n                const codepoints = splitPoints(this, sep, maxsplit);\n                const ret = [];\n                for (let i = 0; i < codepoints.length; i++) {\n                    ret.push(new Sk.builtin.str(this.v.substring(codepoints[i], codepoints[++i])));\n                }\n                return new Sk.builtin.list(ret);\n            },\n            $flags: { NamedArgs: [\"sep\", \"maxsplit\"], Defaults: [Sk.builtin.none.none$, -1] },\n            $textsig: \"($self, /, sep=None, maxsplit=-1)\",\n            $doc: \"Return a list of the words in the string, using sep as the delimiter string.\\n\\n  sep\\n    The delimiter according which to split the string.\\n    None (the default value) means split according to any whitespace,\\n    and discard empty strings from the result.\\n  maxsplit\\n    Maximum number of splits to do.\\n    -1 (the default value) means no limit.\",\n        },\n        rsplit: {\n            $meth: function rsplit(sep, maxsplit) {\n                // do a full split and then slice the string accordingly;\n                maxsplit = Sk.misceval.asIndexSized(maxsplit, Sk.builtin.OverflowError);\n                const codepoints = splitPoints(this, sep, -1);\n                let from = maxsplit < 0 ? 0 : (codepoints.length / 2 - maxsplit) * 2;\n                const ret = [];\n                if (from <= 0) {\n                    from = 0;\n                } else {\n                    ret.push(new Sk.builtin.str(this.v.slice(0, codepoints[from - 1])));\n                }\n                for (let i = from; i < codepoints.length; i++) {\n                    ret.push(new Sk.builtin.str(this.v.substring(codepoints[i], codepoints[++i])));\n                }\n                return new Sk.builtin.list(ret);\n            },\n            $flags: { NamedArgs: [\"sep\", \"maxsplit\"], Defaults: [Sk.builtin.none.none$, -1] },\n            $textsig: \"($self, /, sep=None, maxsplit=-1)\",\n            $doc: \"Return a list of the words in the string, using sep as the delimiter string.\\n\\n  sep\\n    The delimiter according which to split the string.\\n    None (the default value) means split according to any whitespace,\\n    and discard empty strings from the result.\\n  maxsplit\\n    Maximum number of splits to do.\\n    -1 (the default value) means no limit.\\n\\nSplits are done starting at the end of the string and working to the front.\",\n        },\n        join: {\n            $meth(seq) {\n                const arrOfStrs = [];\n                return Sk.misceval.chain(\n                    Sk.misceval.iterFor(Sk.abstr.iter(seq), (i) => {\n                        if (!(i instanceof Sk.builtin.str)) {\n                            throw new Sk.builtin.TypeError(\n                                \"sequence item \" +\n                                    arrOfStrs.length +\n                                    \": expected str, \" +\n                                    Sk.abstr.typeName(i) +\n                                    \" found\"\n                            );\n                        }\n                        arrOfStrs.push(i.v);\n                    }),\n                    () => new Sk.builtin.str(arrOfStrs.join(this.v))\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, iterable, /)\",\n            $doc: \"Concatenate any number of strings.\\n\\nThe string whose method is called is inserted in between each given string.\\nThe result is returned as a new string.\\n\\nExample: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'\",\n        },\n        capitalize: {\n            $meth: function capitalize() {\n                return new Sk.builtin.str(\n                    this.v.charAt(0).toUpperCase() + this.v.slice(1).toLowerCase()\n                );\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a capitalized version of the string.\\n\\nMore specifically, make the first character have upper case and the rest lower\\ncase.\",\n        },\n        // casefold: {\n        //     $meth: methods.casefold,\n        //     $flags: { NoArgs: true },\n        //     $textsig: \"($self, /)\",\n        //     $doc: \"Return a version of the string suitable for caseless comparisons.\",\n        // },\n        title: {\n            $meth: function title() {\n                const ret = this.v.replace(\n                    /[a-z][a-z]*/gi,\n                    (str) => str[0].toUpperCase() + str.substr(1).toLowerCase()\n                );\n                return new Sk.builtin.str(ret);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a version of the string where each word is titlecased.\\n\\nMore specifically, words start with uppercased characters and all remaining\\ncased characters have lower case.\",\n        },\n        center: {\n            $meth: mkJust(false, true),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: \"($self, width, fillchar=' ', /)\",\n            $doc: \"Return a centered string of length width.\\n\\nPadding is done using the specified fill character (default is a space).\",\n        },\n        count: {\n            $meth: function count(pat, start, end) {\n                pat = this.get$tgt(pat);\n                ({ start, end } = indices(this, start, end));\n                if (end < start) {\n                    return new Sk.builtin.int_(0);\n                }\n                const normaltext = pat.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n                const m = new RegExp(normaltext, \"g\");\n                const slice = this.v.slice(start, end);\n                const ctl = slice.match(m);\n                if (!ctl) {\n                    return new Sk.builtin.int_(0);\n                } else {\n                    return new Sk.builtin.int_(ctl.length);\n                }\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.count(sub[, start[, end]]) -> int\\n\\nReturn the number of non-overlapping occurrences of substring sub in\\nstring S[start:end].  Optional arguments start and end are\\ninterpreted as in slice notation.\",\n        },\n        expandtabs: {\n            $meth: function expandtabs(tabsize) {\n                if (Sk.builtin.checkInt(tabsize)) {\n                    tabsize = Sk.builtin.asnum$(tabsize);\n                } else {\n                    throw new Sk.builtin.TypeError(\n                        \"an integer is required, got type\" + Sk.abstr.typeName(tabsize)\n                    );\n                }\n                const spaces = new Array(tabsize + 1).join(\" \");\n                const expanded = this.v.replace(\n                    /([^\\r\\n\\t]*)\\t/g,\n                    (a, b) => b + spaces.slice(b.length % tabsize)\n                );\n                return new Sk.builtin.str(expanded);\n            },\n            $flags: { NamedArgs: [\"tabsize\"], Defaults: [8] },\n            $textsig: \"($self, /, tabsize=8)\",\n            $doc: \"Return a copy where all tab characters are expanded using spaces.\\n\\nIf tabsize is not given, a tab size of 8 characters is assumed.\",\n        },\n        find: {\n            $meth: function find(tgt, start, end) {\n                return new Sk.builtin.int_(this.find$left(tgt, start, end));\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.find(sub[, start[, end]]) -> int\\n\\nReturn the lowest index in S where substring sub is found,\\nsuch that sub is contained within S[start:end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nReturn -1 on failure.\",\n        },\n        partition: {\n            $meth: mkPartition(false),\n            $flags: { OneArg: true },\n            $textsig: \"($self, sep, /)\",\n            $doc: \"Partition the string into three parts using the given separator.\\n\\nThis will search for the separator in the string.  If the separator is found,\\nreturns a 3-tuple containing the part before the separator, the separator\\nitself, and the part after it.\\n\\nIf the separator is not found, returns a 3-tuple containing the original string\\nand two empty strings.\",\n        },\n        index: {\n            $meth: function index(tgt, start, end) {\n                const val = this.find$left(tgt, start, end);\n                if (val === -1) {\n                    throw new Sk.builtin.ValueError(\"substring not found\");\n                } else {\n                    return new Sk.builtin.int_(val);\n                }\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.index(sub[, start[, end]]) -> int\\n\\nReturn the lowest index in S where substring sub is found, \\nsuch that sub is contained within S[start:end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nRaises ValueError when the substring is not found.\",\n        },\n        ljust: {\n            $meth: mkJust(false, false),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: \"($self, width, fillchar=' ', /)\",\n            $doc: \"Return a left-justified string of length width.\\n\\nPadding is done using the specified fill character (default is a space).\",\n        },\n        lower: {\n            $meth() {\n                return new Sk.builtin.str(this.v.toLowerCase());\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a copy of the string converted to lowercase.\",\n        },\n        lstrip: {\n            $meth: mkStrip(/^\\s+/g, (regex) => \"^[\" + regex + \"]+\"),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, chars=None, /)\",\n            $doc: \"Return a copy of the string with leading whitespace removed.\\n\\nIf chars is given and not None, remove characters in chars instead.\",\n        },\n        rfind: {\n            $meth(tgt, start, end) {\n                return new Sk.builtin.int_(this.find$right(tgt, start, end));\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.rfind(sub[, start[, end]]) -> int\\n\\nReturn the highest index in S where substring sub is found,\\nsuch that sub is contained within S[start:end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nReturn -1 on failure.\",\n        },\n        rindex: {\n            $meth: function rindex(tgt, start, end) {\n                const val = this.find$right(tgt, start, end);\n                if (val === -1) {\n                    throw new Sk.builtin.ValueError(\"substring not found\");\n                } else {\n                    return new Sk.builtin.int_(val);\n                }\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.rindex(sub[, start[, end]]) -> int\\n\\nReturn the highest index in S where substring sub is found,\\nsuch that sub is contained within S[start:end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nRaises ValueError when the substring is not found.\",\n        },\n        rjust: {\n            $meth: mkJust(true, false),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: \"($self, width, fillchar=' ', /)\",\n            $doc: \"Return a right-justified string of length width.\\n\\nPadding is done using the specified fill character (default is a space).\",\n        },\n        rstrip: {\n            $meth: mkStrip(/\\s+$/g, (regex) => \"[\" + regex + \"]+$\"),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, chars=None, /)\",\n            $doc: \"Return a copy of the string with trailing whitespace removed.\\n\\nIf chars is given and not None, remove characters in chars instead.\",\n        },\n        rpartition: {\n            $meth: mkPartition(true),\n            $flags: { OneArg: true },\n            $textsig: \"($self, sep, /)\",\n            $doc: \"Partition the string into three parts using the given separator.\\n\\nThis will search for the separator in the string, starting at the end. If\\nthe separator is found, returns a 3-tuple containing the part before the\\nseparator, the separator itself, and the part after it.\\n\\nIf the separator is not found, returns a 3-tuple containing two empty strings\\nand the original string.\",\n        },\n        splitlines: {\n            $meth: function splitlines(keepends) {\n                keepends = Sk.misceval.isTrue(keepends);\n                const data = this.v;\n                const final = [];\n                const len = data.length;\n                let slice,\n                    ch,\n                    eol,\n                    sol = 0;\n                for (let i = 0; i < len; i++) {\n                    ch = data.charAt(i);\n                    if (data.charAt(i + 1) === \"\\n\" && ch === \"\\r\") {\n                        eol = i + 2;\n                        slice = data.slice(sol, eol);\n                        if (!keepends) {\n                            slice = slice.replace(/(\\r|\\n)/g, \"\");\n                        }\n                        final.push(new Sk.builtin.str(slice));\n                        sol = eol;\n                    } else if ((ch === \"\\n\" && data.charAt(i - 1) !== \"\\r\") || ch === \"\\r\") {\n                        eol = i + 1;\n                        slice = data.slice(sol, eol);\n                        if (!keepends) {\n                            slice = slice.replace(/(\\r|\\n)/g, \"\");\n                        }\n                        final.push(new Sk.builtin.str(slice));\n                        sol = eol;\n                    }\n                }\n                if (sol < len) {\n                    eol = len;\n                    slice = data.slice(sol, eol);\n                    if (!keepends) {\n                        slice = slice.replace(/(\\r|\\n)/g, \"\");\n                    }\n                    final.push(new Sk.builtin.str(slice));\n                }\n                return new Sk.builtin.list(final);\n            },\n            $flags: { NamedArgs: [\"keepends\"], Defaults: [false] },\n            $textsig: \"($self, /, keepends=False)\",\n            $doc: \"Return a list of the lines in the string, breaking at line boundaries.\\n\\nLine breaks are not included in the resulting list unless keepends is given and\\ntrue.\",\n        },\n        strip: {\n            $meth: mkStrip(/^\\s+|\\s+$/g, (regex) => \"^[\" + regex + \"]+|[\" + regex + \"]+$\"),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, chars=None, /)\",\n            $doc: \"Return a copy of the string with leading and trailing whitespace remove.\\n\\nIf chars is given and not None, remove characters in chars instead.\",\n        },\n        swapcase: {\n            $meth() {\n                const ret = this.v.replace(/[a-z]/gi, (c) => {\n                    const lc = c.toLowerCase();\n                    return lc === c ? c.toUpperCase() : lc;\n                });\n                return new Sk.builtin.str(ret);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Convert uppercase characters to lowercase and lowercase characters to uppercase.\",\n        },\n        // translate: {\n        //     $meth: methods.translate,\n        //     $flags: {},\n        //     $textsig: \"($self, table, /)\",\n        //     $doc:\n        //         \"Replace each character in the string using the given translation table.\\n\\n  table\\n    Translation table, which must be a mapping of Unicode ordinals to\\n    Unicode ordinals, strings, or None.\\n\\nThe table must implement lookup/indexing via __getitem__, for instance a\\ndictionary or list.  If this operation raises LookupError, the character is\\nleft untouched.  Characters mapped to None are deleted.\",\n        // },\n        upper: {\n            $meth() {\n                return new Sk.builtin.str(this.v.toUpperCase());\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a copy of the string converted to uppercase.\",\n        },\n        startswith: {\n            $meth: mkStartsEndswith(\"startswith\", (substr, i) => substr.indexOf(i) === 0),\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.startswith(prefix[, start[, end]]) -> bool\\n\\nReturn True if S starts with the specified prefix, False otherwise.\\nWith optional start, test S beginning at that position.\\nWith optional end, stop comparing S at that position.\\nprefix can also be a tuple of strings to try.\",\n        },\n        endswith: {\n            $meth: mkStartsEndswith(\n                \"endswith\",\n                (substr, i) => substr.indexOf(i, substr.length - i.length) !== -1\n            ),\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"S.endswith(suffix[, start[, end]]) -> bool\\n\\nReturn True if S ends with the specified suffix, False otherwise.\\nWith optional start, test S beginning at that position.\\nWith optional end, stop comparing S at that position.\\nsuffix can also be a tuple of strings to try.\",\n        },\n        isascii: {\n            $meth() {\n                return new Sk.builtin.bool(/^[\\x00-\\x7F]*$/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if all characters in the string are ASCII, False otherwise.\\n\\nASCII characters have code points in the range U+0000-U+007F.\\nEmpty string is ASCII too.\",\n        },\n        islower: {\n            $meth: function islower() {\n                return new Sk.builtin.bool(\n                    this.v.length && /[a-z]/.test(this.v) && !/[A-Z]/.test(this.v)\n                );\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is a lowercase string, False otherwise.\\n\\nA string is lowercase if all cased characters in the string are lowercase and\\nthere is at least one cased character in the string.\",\n        },\n        isupper: {\n            $meth: function islower() {\n                return new Sk.builtin.bool(\n                    this.v.length && !/[a-z]/.test(this.v) && /[A-Z]/.test(this.v)\n                );\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is an uppercase string, False otherwise.\\n\\nA string is uppercase if all cased characters in the string are uppercase and\\nthere is at least one cased character in the string.\",\n        },\n        istitle: {\n            $meth: function istitle() {\n                // Comparing to str.title() seems the most intuitive thing, but it fails on \"\",\n                // Other empty-ish strings with no change.\n                const input = this.v;\n                let cased = false;\n                let previous_is_cased = false;\n                let ch;\n                for (let pos = 0; pos < input.length; pos++) {\n                    ch = input.charAt(pos);\n                    if (!/[a-z]/.test(ch) && /[A-Z]/.test(ch)) {\n                        if (previous_is_cased) {\n                            return Sk.builtin.bool.false$;\n                        }\n                        previous_is_cased = true;\n                        cased = true;\n                    } else if (/[a-z]/.test(ch) && !/[A-Z]/.test(ch)) {\n                        if (!previous_is_cased) {\n                            return Sk.builtin.bool.false$;\n                        }\n                        cased = true;\n                    } else {\n                        previous_is_cased = false;\n                    }\n                }\n                return new Sk.builtin.bool(cased);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is a title-cased string, False otherwise.\\n\\nIn a title-cased string, upper- and title-case characters may only\\nfollow uncased characters and lowercase characters only cased ones.\",\n        },\n        isspace: {\n            $meth: function isspace() {\n                return new Sk.builtin.bool(/^\\s+$/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is a whitespace string, False otherwise.\\n\\nA string is whitespace if all characters in the string are whitespace and there\\nis at least one character in the string.\",\n        },\n        // isdecimal: {\n        //     $meth: methods.isdecimal,\n        //     $flags: { NoArgs: true },\n        //     $textsig: \"($self, /)\",\n        //     $doc:\n        //         \"Return True if the string is a decimal string, False otherwise.\\n\\nA string is a decimal string if all characters in the string are decimal and\\nthere is at least one character in the string.\",\n        // },\n        isdigit: {\n            $meth: function isdigit() {\n                return new Sk.builtin.bool(/^\\d+$/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is a digit string, False otherwise.\\n\\nA string is a digit string if all characters in the string are digits and there\\nis at least one character in the string.\",\n        },\n        isnumeric: {\n            $meth: function isnumeric() {\n                return new Sk.builtin.bool(this.v.length && !/[^0-9]/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is a numeric string, False otherwise.\\n\\nA string is numeric if all characters in the string are numeric and there is at\\nleast one character in the string.\",\n        },\n        isalpha: {\n            $meth: function isalpha() {\n                return new Sk.builtin.bool(this.v.length && !/[^a-zA-Z]/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is an alphabetic string, False otherwise.\\n\\nA string is alphabetic if all characters in the string are alphabetic and there\\nis at least one character in the string.\",\n        },\n        isalnum: {\n            $meth: function isalnum() {\n                return new Sk.builtin.bool(this.v.length && !/[^a-zA-Z0-9]/.test(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the string is an alpha-numeric string, False otherwise.\\n\\nA string is alpha-numeric if all characters in the string are alpha-numeric and\\nthere is at least one character in the string.\",\n        },\n        isidentifier: {\n            $meth: function isidentifier() {\n                return this.$isIdentifier() ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: 'Return True if the string is a valid Python identifier, False otherwise.\\n\\nUse keyword.iskeyword() to test for reserved identifiers such as \"def\" and\\n\"class\".',\n        },\n        // isprintable: {\n        //     $meth: methods.isprintable,\n        //     $flags: {},\n        //     $textsig: \"($self, /)\",\n        //     $doc:\n        //         \"Return True if the string is printable, False otherwise.\\n\\nA string is printable if all of its characters are considered printable in\\nrepr() or if it is empty.\",\n        // },\n        zfill: {\n            $meth: function zfill(len) {\n                len = Sk.misceval.asIndexSized(len, Sk.builtin.OverflowError);\n                let pad = \"\";\n                // figure out how many zeroes are needed to make the proper length\n                const zeroes = len - this.v.length; // techinally this should sq$length ?\n                // offset by 1 if there is a +/- at the beginning of the string\n                const offset = this.v[0] === \"+\" || this.v[0] === \"-\" ? 1 : 0;\n                for (let i = 0; i < zeroes; i++) {\n                    pad += \"0\";\n                }\n                // combine the string and the zeroes\n                return new Sk.builtin.str(this.v.substr(0, offset) + pad + this.v.substr(offset));\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, width, /)\",\n            $doc: \"Pad a numeric string with zeros on the left, to fill a field of the given width.\\n\\nThe string is never truncated.\",\n        },\n        format: {\n            $meth: Sk.formatting.format,\n            $flags: { FastCall: true },\n            $textsig: null,\n            $doc: \"S.format(*args, **kwargs) -> str\\n\\nReturn a formatted version of S, using substitutions from args and kwargs.\\nThe substitutions are identified by braces ('{' and '}').\",\n        },\n        // format_map: {\n        //     $meth: methods.format_map,\n        //     $flags: {},\n        //     $textsig: null,\n        //     $doc:\n        //         \"S.format_map(mapping) -> str\\n\\nReturn a formatted version of S, using substitutions from mapping.\\nThe substitutions are identified by braces ('{' and '}').\",\n        // },\n        __format__: {\n            $meth: Sk.formatting.formatString,\n            $flags: { OneArg: true },\n            $textsig: \"($self, format_spec, /)\",\n            $doc: \"Return a formatted version of the string as described by format_spec.\",\n        },\n        // __sizeof__: {\n        //     $meth: methods.__sizeof__,\n        //     $flags: {},\n        //     $textsig: \"($self, /)\",\n        //     $doc: \"Return the size of the string in memory, in bytes.\",\n        // },\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple(new Sk.builtin.str(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: null,\n        },\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.str\", Sk.builtin.str);\n\nvar re = /^[A-Za-z0-9]+$/;\nfunction re_escape_(s) {\n    let c;\n    const ret = [];\n    for (let i = 0; i < s.length; i++) {\n        c = s.charAt(i);\n        if (re.test(c)) {\n            ret.push(c);\n        } else {\n            if (c === \"\\\\000\") {\n                ret.push(\"\\\\000\");\n            } else {\n                ret.push(\"\\\\\" + c);\n            }\n        }\n    }\n    return ret.join(\"\");\n}\n\n// methods\nvar special_chars = /([.*+?=|\\\\\\/()\\[\\]\\{\\}^$])/g;\nvar leading_whitespace = /^[\\s\\xa0]+/;\n\nfunction splitPoints(self, sep, maxsplit) {\n    sep = Sk.builtin.checkNone(sep) ? null : self.get$tgt(sep);\n    if (sep !== null && !sep.length) {\n        throw new Sk.builtin.ValueError(\"empty separator\");\n    }\n    let jsstr = self.v;\n    let offset = 0;\n    let regex;\n    if (sep === null) {\n        // Remove leading whitespace\n        regex = /[\\s\\xa0]+/g;\n        const len = jsstr.length;\n        jsstr = jsstr.replace(leading_whitespace, \"\");\n        offset = len - jsstr.length;\n    } else {\n        // Escape special characters in null so we can use a regexp\n        const s = sep.replace(special_chars, \"\\\\$1\");\n        regex = new RegExp(s, \"g\");\n    }\n    // This is almost identical to re.split,\n    // except how the regexp is constructed\n    const pairs = [];\n    let index = 0;\n    let splits = 0;\n    let match;\n    maxsplit = maxsplit < 0 ? Infinity : maxsplit;\n    while ((match = regex.exec(jsstr)) != null && splits < maxsplit) {\n        if (match.index === regex.lastIndex) {\n            // empty match\n            break;\n        }\n        pairs.push(index + offset);\n        pairs.push(match.index + offset);\n        index = regex.lastIndex;\n        splits += 1;\n    }\n    if (sep !== null || jsstr.length - index) {\n        pairs.push(index + offset);\n        pairs.push(jsstr.length + offset);\n    }\n    return pairs;\n}\n\nfunction mkStrip(pat, regf) {\n    return function strip(chars) {\n        let pattern;\n        if (chars === undefined || Sk.builtin.checkNone(chars)) {\n            pattern = pat;\n        } else if (chars instanceof Sk.builtin.str) {\n            const regex = re_escape_(chars.v);\n            pattern = new RegExp(regf(regex), \"g\");\n        } else {\n            throw new Sk.builtin.TypeError(\"strip arg must be None or str\");\n        }\n        return new Sk.builtin.str(this.v.replace(pattern, \"\"));\n    };\n}\n\nfunction mkPartition(isReversed) {\n    return function partition(sep) {\n        const sepStr = this.get$tgt(sep);\n        const jsstr = this.v;\n        let pos;\n        if (isReversed) {\n            pos = jsstr.lastIndexOf(sepStr);\n            if (pos < 0) {\n                return new Sk.builtin.tuple([\n                    new Sk.builtin.str(\"\"),\n                    new Sk.builtin.str(\"\"),\n                    new Sk.builtin.str(jsstr),\n                ]);\n            }\n        } else {\n            pos = jsstr.indexOf(sepStr);\n            if (pos < 0) {\n                return new Sk.builtin.tuple([\n                    new Sk.builtin.str(jsstr),\n                    new Sk.builtin.str(\"\"),\n                    new Sk.builtin.str(\"\"),\n                ]);\n            }\n        }\n\n        return new Sk.builtin.tuple([\n            new Sk.builtin.str(jsstr.substring(0, pos)),\n            new Sk.builtin.str(sepStr),\n            new Sk.builtin.str(jsstr.substring(pos + sepStr.length)),\n        ]);\n    };\n}\n\nfunction mkJust(isRight, isCenter) {\n    return function strJustify(len, fillchar) {\n        len = Sk.misceval.asIndexSized(len, Sk.builtin.OverflowError);\n        if (fillchar === undefined) {\n            fillchar = \" \";\n        } else if (!(fillchar instanceof Sk.builtin.str) || fillchar.sq$length() !== 1) {\n            throw new Sk.builtin.TypeError(\"the fill character must be a str of length 1\");\n        } else {\n            fillchar = fillchar.v;\n        }\n\n        const mylen = this.sq$length();\n        let newstr;\n        if (mylen >= len) {\n            return new Sk.builtin.str(this.v);\n        } else if (isCenter) {\n            newstr = fillchar.repeat(Math.floor((len - mylen) / 2));\n            newstr = newstr + this.v + newstr;\n\n            if ((len - mylen) % 2) {\n                newstr += fillchar;\n            }\n\n            return new Sk.builtin.str(newstr);\n        } else {\n            newstr = fillchar.repeat(len - mylen);\n            return new Sk.builtin.str(isRight ? newstr + this.v : this.v + newstr);\n        }\n    };\n}\n\nfunction indices(self, start, end) {\n    ({ start, end } = Sk.builtin.slice.startEnd$wrt(self, start, end));\n    if (self.$hasAstralCodePoints()) {\n        const tmp = self.codepoints[start];\n        start = tmp === undefined ? start + self.v.length - self.codepoints.length : tmp;\n        end = self.codepoints[end];\n        end = end === undefined ? self.v.length : end;\n    }\n    return {\n        start: start,\n        end: end,\n    };\n}\n\nfunction mkFind(isReversed) {\n    return function (tgt, start, end) {\n        tgt = this.get$tgt(tgt);\n\n        ({ start, end } = indices(this, start, end));\n        if (end < start) {\n            return -1;\n        }\n        // ...do the search..\n        end -= tgt.length;\n        let jsidx = isReversed ? this.v.lastIndexOf(tgt, end) : this.v.indexOf(tgt, start);\n        jsidx = jsidx >= start && jsidx <= end ? jsidx : -1;\n\n        let idx;\n        if (this.codepoints) {\n            // ...and now convert them back\n            const len = this.sq$length();\n            idx = -1;\n            for (let i = 0; i < len; i++) {\n                if (jsidx == this.codepoints[i]) {\n                    idx = i;\n                }\n            }\n        } else {\n            // No astral codepoints, no conversion required\n            idx = jsidx;\n        }\n        return idx;\n    };\n}\n\nfunction mkStartsEndswith(funcname, is_match) {\n    return function (tgt, start, end) {\n        if (!(tgt instanceof Sk.builtin.str) && !(tgt instanceof Sk.builtin.tuple)) {\n            throw new Sk.builtin.TypeError(\n                funcname + \" first arg must be str or a tuple of str, not \" + Sk.abstr.typeName(tgt)\n            );\n        }\n\n        ({ start, end } = indices(this, start, end));\n\n        if (start > end) {\n            return Sk.builtin.bool.false$;\n        }\n\n        const substr = this.v.slice(start, end);\n\n        if (tgt instanceof Sk.builtin.tuple) {\n            for (\n                let it = Sk.abstr.iter(tgt), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                if (!(i instanceof Sk.builtin.str)) {\n                    throw new Sk.builtin.TypeError(\n                        \"tuple for \" +\n                            funcname +\n                            \" must only contain str, not \" +\n                            Sk.abstr.typeName(i)\n                    );\n                }\n                if (is_match(substr, i.v)) {\n                    return Sk.builtin.bool.true$;\n                }\n            }\n            return Sk.builtin.bool.false$;\n        }\n        return new Sk.builtin.bool(is_match(substr, tgt.v));\n    };\n}\n\nSk.builtin.str.$py2decode = new Sk.builtin.method_descriptor(Sk.builtin.str, {\n    $name: \"decode\",\n    $meth(encoding, errors) {\n        const pyBytes = new Sk.builtin.bytes(this.v);\n        return Sk.builtin.bytes.$decode.call(pyBytes, encoding, errors);\n    },\n    $flags: { NamedArgs: [\"encoding\", \"errors\"] },\n});\n\nfunction strBytesRemainder(rhs) {\n    // % format op. rhs can be a value, a tuple, or something with __getitem__ (dict)\n\n    // From http://docs.python.org/library/stdtypes.html#string-formatting the\n    // format looks like:\n    // 1. The '%' character, which marks the start of the specifier.\n    // 2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)).\n    // 3. Conversion flags (optional), which affect the result of some conversion types.\n    // 4. Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next\n    // element of the tuple in values, and the object to convert comes after the minimum field width and optional\n    // precision. 5. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an\n    // asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes\n    // after the precision. 6. Length modifier (optional). 7. Conversion type.  length modifier is ignored\n\n    var ret;\n    var replFunc;\n    var index;\n    var regex;\n    var val;\n    const strBytesConstructor = this.sk$builtinBase;\n    // distinguish between bytes and str\n\n    if (\n        rhs.constructor !== Sk.builtin.tuple &&\n        !(rhs instanceof Sk.builtin.dict || rhs instanceof Sk.builtin.mappingproxy)\n    ) {\n        rhs = new Sk.builtin.tuple([rhs]);\n    }\n    // general approach is to use a regex that matches the format above, and\n    // do an re.sub with a function as replacement to make the subs.\n\n    //           1 2222222222222222   33333333   444444444   5555555555555  66666  777777777777777777\n    regex =\n        /%(\\([a-zA-Z0-9]+\\))?([#0 +\\-]+)?(\\*|[0-9]+)?(\\.(\\*|[0-9]+))?[hlL]?([diouxXeEfFgGcrsb%])/g;\n    index = 0;\n    replFunc = function (\n        substring,\n        mappingKey,\n        conversionFlags,\n        fieldWidth,\n        precision,\n        precbody,\n        conversionType\n    ) {\n        var result;\n        var convName;\n        var convValue;\n        var base;\n        var r;\n        var mk;\n        var value;\n        var handleWidth;\n        var formatNumber;\n        var alternateForm;\n        var precedeWithSign;\n        var blankBeforePositive;\n        var leftAdjust;\n        var zeroPad;\n        var i;\n\n        fieldWidth = Sk.builtin.asnum$(fieldWidth);\n        precision = Sk.builtin.asnum$(precision);\n\n        if ((mappingKey === undefined || mappingKey === \"\") && conversionType != \"%\") {\n            i = index++;\n        } // ff passes '' not undef for some reason\n\n        if (precision === \"\") {\n            // ff passes '' here aswell causing problems with G,g, etc.\n            precision = undefined;\n        }\n\n        zeroPad = false;\n        leftAdjust = false;\n        blankBeforePositive = false;\n        precedeWithSign = false;\n        alternateForm = false;\n        if (conversionFlags) {\n            if (conversionFlags.indexOf(\"-\") !== -1) {\n                leftAdjust = true;\n            } else if (conversionFlags.indexOf(\"0\") !== -1) {\n                zeroPad = true;\n            }\n\n            if (conversionFlags.indexOf(\"+\") !== -1) {\n                precedeWithSign = true;\n            } else if (conversionFlags.indexOf(\" \") !== -1) {\n                blankBeforePositive = true;\n            }\n\n            alternateForm = conversionFlags.indexOf(\"#\") !== -1;\n        }\n\n        if (precision) {\n            precision = parseInt(precision.substr(1), 10);\n        }\n\n        formatNumber = function (n, base) {\n            var precZeroPadded;\n            var prefix;\n            var didSign;\n            var neg;\n            var r;\n            var j;\n            base = Sk.builtin.asnum$(base);\n            neg = false;\n            didSign = false;\n            if (typeof n === \"number\") {\n                if (n < 0) {\n                    n = -n;\n                    neg = true;\n                }\n                r = n.toString(base);\n            } else if (n instanceof Sk.builtin.float_) {\n                r = n.str$(base, false);\n                if (r.length > 2 && r.substr(-2) === \".0\") {\n                    r = r.substr(0, r.length - 2);\n                }\n                neg = n.nb$isnegative();\n            } else if (n instanceof Sk.builtin.int_) {\n                r = n.str$(base, false);\n                neg = n.nb$isnegative();\n            } else if (n instanceof Sk.builtin.lng) {\n                r = n.str$(base, false);\n                neg = n.nb$isnegative();\n            }\n\n            Sk.asserts.assert(r !== undefined, \"unhandled number format\");\n\n            precZeroPadded = false;\n\n            if (precision) {\n                //print(\"r.length\",r.length,\"precision\",precision);\n                for (j = r.length; j < precision; ++j) {\n                    r = \"0\" + r;\n                    precZeroPadded = true;\n                }\n            }\n\n            prefix = \"\";\n\n            if (neg) {\n                prefix = \"-\";\n            } else if (precedeWithSign) {\n                prefix = \"+\" + prefix;\n            } else if (blankBeforePositive) {\n                prefix = \" \" + prefix;\n            }\n\n            if (alternateForm) {\n                if (base === 16) {\n                    prefix += \"0x\";\n                } else if (base === 8 && !precZeroPadded && r !== \"0\") {\n                    prefix += \"0\";\n                }\n            }\n\n            return [prefix, r];\n        };\n\n        handleWidth = function (args) {\n            var totLen;\n            var prefix = args[0];\n            var r = args[1];\n            var j;\n\n            if (fieldWidth) {\n                fieldWidth = parseInt(fieldWidth, 10);\n                totLen = r.length + prefix.length;\n                if (zeroPad) {\n                    for (j = totLen; j < fieldWidth; ++j) {\n                        r = \"0\" + r;\n                    }\n                } else if (leftAdjust) {\n                    for (j = totLen; j < fieldWidth; ++j) {\n                        r = r + \" \";\n                    }\n                    if (Sk.__future__.python3) {\n                        r += prefix;\n                        prefix = \"\";\n                    }\n                } else {\n                    for (j = totLen; j < fieldWidth; ++j) {\n                        prefix = \" \" + prefix;\n                    }\n                }\n            }\n            return prefix + r;\n        };\n        //print(\"Rhs:\",rhs, \"ctor\", rhs.constructor);\n        if (rhs.constructor === Sk.builtin.tuple) {\n            value = rhs.v[i];\n        } else if (rhs.mp$subscript !== undefined && mappingKey !== undefined) {\n            mk = mappingKey.substring(1, mappingKey.length - 1);\n            //print(\"mk\",mk);\n            value = rhs.mp$subscript(new strBytesConstructor(mk));\n        } else if (rhs.constructor === Sk.builtin.dict || rhs.constructor === Sk.builtin.list) {\n            // new case where only one argument is provided\n            value = rhs;\n        } else {\n            throw new Sk.builtin.AttributeError(\n                rhs.tp$name + \" instance has no attribute 'mp$subscript'\"\n            );\n        }\n        base = 10;\n        if (conversionType === \"d\" || conversionType === \"i\") {\n            let tmpData = formatNumber(value, base);\n            if (tmpData[1] === undefined) {\n                throw new Sk.builtin.TypeError(\n                    \"%\" +\n                        conversionType +\n                        \" format: a number is required, not \" +\n                        Sk.abstr.typeName(value)\n                );\n            }\n            let r = tmpData[1];\n            tmpData[1] = r.indexOf(\".\") !== -1 ? parseInt(r, 10).toString() : r;\n            return handleWidth(tmpData);\n        } else if (conversionType === \"o\") {\n            return handleWidth(formatNumber(value, 8));\n        } else if (conversionType === \"x\") {\n            return handleWidth(formatNumber(value, 16));\n        } else if (conversionType === \"X\") {\n            return handleWidth(formatNumber(value, 16)).toUpperCase();\n        } else if (\n            conversionType === \"f\" ||\n            conversionType === \"F\" ||\n            conversionType === \"e\" ||\n            conversionType === \"E\" ||\n            conversionType === \"g\" ||\n            conversionType === \"G\"\n        ) {\n            convValue = Sk.builtin.asnum$(value);\n            if (typeof convValue === \"string\") {\n                convValue = Number(convValue);\n            }\n            if (convValue === Infinity) {\n                return \"inf\";\n            }\n            if (convValue === -Infinity) {\n                return \"-inf\";\n            }\n            if (isNaN(convValue)) {\n                return \"nan\";\n            }\n            convName = [\"toExponential\", \"toFixed\", \"toPrecision\"][\n                \"efg\".indexOf(conversionType.toLowerCase())\n            ];\n            if (precision === undefined || precision === \"\") {\n                if (conversionType === \"e\" || conversionType === \"E\") {\n                    precision = 6;\n                } else if (conversionType === \"f\" || conversionType === \"F\") {\n                    if (Sk.__future__.python3) {\n                        precision = 6;\n                    } else {\n                        precision = 7;\n                    }\n                }\n            }\n            result = convValue[convName](precision); // possible loose of negative zero sign\n\n            // apply sign to negative zeros, floats only!\n            if (Sk.builtin.checkFloat(value)) {\n                if (convValue === 0 && 1 / convValue === -Infinity) {\n                    result = \"-\" + result; // add sign for zero\n                }\n            }\n            if (Sk.__future__.python3) {\n                if (result.length >= 7 && result.slice(0, 6) == \"0.0000\") {\n                    val = parseFloat(result);\n                    result = val.toExponential();\n                }\n                if (result.charAt(result.length - 2) == \"-\") {\n                    result =\n                        result.slice(0, result.length - 1) + \"0\" + result.charAt(result.length - 1);\n                }\n            }\n            if (\"EFG\".indexOf(conversionType) !== -1) {\n                result = result.toUpperCase();\n            }\n            return handleWidth([\"\", result]);\n        } else if (conversionType === \"c\") {\n            if (typeof value === \"number\") {\n                return String.fromCharCode(value);\n            } else if (value instanceof Sk.builtin.int_) {\n                return String.fromCharCode(value.v);\n            } else if (value instanceof Sk.builtin.float_) {\n                return String.fromCharCode(value.v);\n            } else if (value instanceof Sk.builtin.lng) {\n                return String.fromCharCode(value.str$(10, false)[0]);\n            } else if (value.constructor === Sk.builtin.str) {\n                return value.v.substr(0, 1);\n            } else {\n                throw new Sk.builtin.TypeError(\"an integer is required\");\n            }\n        } else if (conversionType === \"r\") {\n            r = Sk.builtin.repr(value);\n            if (precision) {\n                return r.v.substr(0, precision);\n            }\n            return r.v;\n        } else if (conversionType === \"s\" && strBytesConstructor === Sk.builtin.str) {\n            r = new Sk.builtin.str(value);\n            r = r.$jsstr();\n            if (precision) {\n                return r.substr(0, precision);\n            }\n            if (fieldWidth) {\n                r = handleWidth([\" \", r]);\n            }\n            return r;\n        } else if (conversionType === \"b\" || conversionType === \"s\") {\n            if (strBytesConstructor === Sk.builtin.str) {\n                throw new Sk.builtin.ValueError(\"unsupported format character 'b'\");\n            }\n            let func;\n            if (\n                !(value instanceof Sk.builtin.bytes) &&\n                (func = Sk.abstr.lookupSpecial(value, Sk.builtin.str.$bytes)) === undefined\n            ) {\n                throw new Sk.builtin.TypeError(\n                    \"%b requires a bytes-like object, or an object that implements __bytes__, not '\" +\n                        Sk.abstr.typeName(value) +\n                        \"'\"\n                );\n            }\n            if (func !== undefined) {\n                value = new Sk.builtin.bytes(value);\n                // raises the appropriate error message if __bytes__ does not return bytes\n            }\n            r = value.$jsstr();\n            if (precision) {\n                return r.substr(0, precision);\n            }\n            if (fieldWidth) {\n                r = handleWidth([\" \", r]);\n            }\n            return r;\n        } else if (conversionType === \"%\") {\n            return \"%\";\n        }\n    };\n    ret = this.$jsstr().replace(regex, replFunc);\n    if (rhs instanceof Sk.builtin.tuple && index < rhs.sq$length()) {\n        throw new Sk.builtin.TypeError(\"not all arguments converted during string formatting\");\n    }\n    return new strBytesConstructor(ret);\n}\n\n/**\n * @constructor\n * @param {Object} obj\n */\nvar str_iter_ = Sk.abstr.buildIteratorClass(\"str_iterator\", {\n    constructor: function str_iter_(str) {\n        this.$index = 0;\n        if (str.$hasAstralCodePoints()) {\n            this.$seq = str.codepoints;\n            this.tp$iternext = () => {\n                const i = this.$seq[this.$index];\n                if (i === undefined) {\n                    return undefined;\n                }\n                return new Sk.builtin.str(str.v.substring(i, this.$seq[++this.$index]));\n            };\n        } else {\n            this.$seq = str.v;\n            this.tp$iternext = () => {\n                const ch = this.$seq[this.$index++];\n                if (ch === undefined) {\n                    return undefined;\n                }\n                return new Sk.builtin.str(ch);\n            };\n        }\n    },\n    iternext() {\n        return this.tp$iternext();\n    },\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\nvar reservedWords_ = {\n    abstract: true,\n    as: true,\n    boolean: true,\n    break: true,\n    byte: true,\n    case: true,\n    catch: true,\n    char: true,\n    class: true,\n    continue: true,\n    const: true,\n    debugger: true,\n    default: true,\n    delete: true,\n    do: true,\n    double: true,\n    else: true,\n    enum: true,\n    export: true,\n    extends: true,\n    false: true,\n    final: true,\n    finally: true,\n    float: true,\n    for: true,\n    function: true,\n    goto: true,\n    if: true,\n    implements: true,\n    import: true,\n    in: true,\n    instanceof: true,\n    int: true,\n    interface: true,\n    is: true,\n    long: true,\n    namespace: true,\n    native: true,\n    new: true,\n    null: true,\n    package: true,\n    private: true,\n    protected: true,\n    public: true,\n    return: true,\n    short: true,\n    static: true,\n    super: true,\n    switch: true,\n    synchronized: true,\n    this: true,\n    throw: true,\n    throws: true,\n    transient: true,\n    true: true,\n    try: true,\n    typeof: true,\n    use: true,\n    var: true,\n    void: true,\n    volatile: true,\n    while: true,\n    with: true,\n    // reserved Names\n    constructor: true,\n    __defineGetter__: true,\n    __defineSetter__: true,\n    apply: true,\n    arguments: true,\n    call: true,\n    caller: true,\n    eval: true,\n    hasOwnProperty: true,\n    isPrototypeOf: true,\n    __lookupGetter__: true,\n    __lookupSetter__: true,\n    __noSuchMethod__: true,\n    propertyIsEnumerable: true,\n    prototype: true,\n    toSource: true,\n    toLocaleString: true,\n    toString: true,\n    unwatch: true,\n    valueOf: true,\n    watch: true,\n    length: true,\n    name: true,\n};\n\nfunction fixReserved(name) {\n    if (reservedWords_[name] === undefined) {\n        return name;\n    }\n    return name + \"_$rw$\";\n}\n\nSk.builtin.str.reservedWords_ = reservedWords_;\n", "/**\n * @constructor\n * Sk.builtin.func\n *\n * @description\n * This function converts a Javascript function into a Python object that is callable.  Or just\n * think of it as a Python function rather than a Javascript function now.  This is an important\n * distinction in skulpt because once you have Python function you cannot just call it.\n * You must now use Sk.misceval.callsim to call the Python function.\n *\n * @param {Function} code the javascript implementation of this function\n * @param {Object=} globals the globals where this function was defined.\n * Can be undefined (which will be stored as null) for builtins. (is\n * that ok?)\n * @param {Object=} closure dict of free variables\n * @param {Object=} closure2 another dict of free variables that will be\n * merged into 'closure'. there's 2 to simplify generated code (one is $free,\n * the other is $cell)\n *\n * closure is the cell variables from the parent scope that we need to close\n * over. closure2 is the free variables in the parent scope that we also might\n * need to access.\n *\n * NOTE: co_varnames and co_name are defined by compiled code only, so we have\n * to access them via dict-style lookup for closure.\n *\n */\nSk.builtin.func = Sk.abstr.buildNativeClass(\"function\", {\n    constructor: function func(code, globals, closure, closure2) {\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.func,\n            \"builtin func should be called as a class with `new`\"\n        );\n\n        this.func_code = code;\n        this.func_globals = globals || null;\n\n        this.$name = (code.co_name && code.co_name.v) || code.name || \"<native JS>\";\n        this.$d = Sk.builtin.dict ? new Sk.builtin.dict() : undefined;\n        this.$doc = code.co_docstring || Sk.builtin.none.none$;\n        this.$module = (Sk.globals && Sk.globals[\"__name__\"]) || Sk.builtin.none.none$;\n        this.$qualname = (code.co_qualname && code.co_qualname.v) || this.$name;\n\n        if (closure2 !== undefined) {\n            // todo; confirm that modification here can't cause problems\n            for (let k in closure2) {\n                closure[k] = closure2[k];\n            }\n        }\n        this.func_closure = closure;\n        this.func_annotations = null;\n        this.$memoiseFlags();\n        this.memoised = code.co_fastcall || null;\n        if (code.co_fastcall) {\n            this.tp$call = code.bind(this);\n        } else {\n            this.tp$call = Sk.builtin.func.prototype.tp$call.bind(this); // keep func the same shape\n        }\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$descr_get(obj, objtype) {\n            if (obj === null) {\n                return this;\n            }\n            return new Sk.builtin.method(this, obj);\n        },\n        $r() {\n            return new Sk.builtin.str(\"<function \" + this.$qualname + \">\");\n        },\n        tp$call(posargs, kw) {\n            // Property reads from func_code are slooow, but\n            // the existing external API allows setup first, so as a\n            // hack we delay this initialisation.\n            // TODO change the external API to require all the co_vars\n            // to be supplied at construction time!\n            if (!this.memoised) {\n                this.$memoiseFlags();\n                this.memoised = true;\n            }\n\n            // Fast path for JS-native functions (which should be implemented\n            // in a separate tp$call, really)\n            if (\n                this.co_argcount === undefined &&\n                this.co_varnames === undefined &&\n                !this.co_kwargs &&\n                !this.func_closure\n            ) {\n                // It's a JS function with no type info, don't hang around\n                // resolving anything.\n                if (kw && kw.length !== 0) {\n                    throw new Sk.builtin.TypeError(this.$name + \"() takes no keyword arguments\");\n                }\n                return this.func_code.apply(this.func_globals, posargs);\n            }\n            // end js fast path\n\n            let args = this.$resolveArgs(posargs, kw);\n            if (this.func_closure) {\n                args.push(this.func_closure);\n            }\n            // note: functions expect 'this' to be globals to avoid having to\n            // slice/unshift onto the main args\n            return this.func_code.apply(this.func_globals, args);\n        },\n    },\n    getsets: {\n        __name__: {\n            $get() {\n                return new Sk.builtin.str(this.$name);\n            },\n            $set(value) {\n                if (!Sk.builtin.checkString(value)) {\n                    throw new Sk.builtin.TypeError(\"__name__ must be set to a string object\");\n                }\n                this.$name = value.$jsstr();\n            },\n        },\n        __qualname__: {\n            $get() {\n                return new Sk.builtin.str(this.$qualname);\n            },\n            $set(value) {\n                if (!Sk.builtin.checkString(value)) {\n                    throw new Sk.builtin.TypeError(\"__qualname__ must be set to a string object\");\n                }\n                this.$qualname = value.$jsstr();\n            },\n        },\n        __dict__: Sk.generic.getSetDict,\n        __annotations__: {\n            $get() {\n                if (this.func_annotations === null) {\n                    this.func_annotations = new Sk.builtin.dict([]);\n                } else if (Array.isArray(this.func_annotations)) {\n                    this.func_annotations = Sk.abstr.keywordArrayToPyDict(this.func_annotations);\n                }\n                return this.func_annotations;\n            },\n            $set(v) {\n                if (v === undefined || Sk.builtin.checkNone(v)) {\n                    this.func_annotations = new Sk.builtin.dict([]);\n                } else if (v instanceof Sk.builtin.dict) {\n                    this.func_annotations = v;\n                } else {\n                    throw new Sk.builtin.TypeError(\"__annotations__ must be set to a dict object\");\n                }\n            },\n        },\n        __defaults__: {\n            $get() {\n                return new Sk.builtin.tuple(this.$defaults);\n            }, // technically this is a writable property but we'll leave it as read-only for now\n        },\n        __doc__: {\n            $get() {\n                return this.$doc;\n            },\n            $set(v) {\n                // The value the user is setting __doc__ to can be any Python\n                // object.  If we receive 'undefined' then the user is deleting\n                // __doc__, which is allowed and results in __doc__ being None.\n                this.$doc = v || Sk.builtin.none.none$;\n            },\n        },\n        __module__: {\n            $get() {\n                return this.$module;\n            },\n            $set(v) {\n                this.$module = v || Sk.builtin.none.none$;\n            },\n        },\n    },\n    proto: {\n        $memoiseFlags() {\n            this.co_varnames = this.func_code.co_varnames;\n            this.co_argcount = this.func_code.co_argcount;\n            if (this.co_argcount === undefined && this.co_varnames) {\n                this.co_argcount = this.co_argcount = this.co_varnames.length;\n            }\n            this.co_kwonlyargcount = this.func_code.co_kwonlyargcount || 0;\n            this.co_varargs = this.func_code.co_varargs;\n            this.co_kwargs = this.func_code.co_kwargs;\n            this.$defaults = this.func_code.$defaults || [];\n            this.$kwdefs = this.func_code.$kwdefs || [];\n        },\n        $resolveArgs,\n    },\n});\n\nfunction $resolveArgs(posargs, kw) {\n    // The rest of this function is a logical Javascript port of\n    // _PyEval_EvalCodeWithName, and follows its logic,\n    // plus fast-paths imported from _PyFunction_FastCall* as marked\n\n    let co_argcount = this.co_argcount;\n\n    if (co_argcount === undefined) {\n        co_argcount = this.co_varnames ? this.co_varnames.length : posargs.length;\n    }\n    let varnames = this.co_varnames || [];\n    let co_kwonlyargcount = this.co_kwonlyargcount || 0;\n    let totalArgs = co_argcount + co_kwonlyargcount;\n\n    // Fast path from _PyFunction_FastCallDict\n    if (\n        co_kwonlyargcount === 0 &&\n        !this.co_kwargs &&\n        (!kw || kw.length === 0) &&\n        !this.co_varargs\n    ) {\n        if (posargs.length == co_argcount) {\n            return posargs;\n        } else if (\n            posargs.length === 0 &&\n            this.$defaults &&\n            this.$defaults.length === co_argcount\n        ) {\n            for (let i = 0; i != this.$defaults.length; i++) {\n                posargs[i] = this.$defaults[i];\n            }\n            return posargs;\n        }\n    }\n    // end fast path from _PyFunction_FastCallDict\n\n    let kwargs;\n\n    /* Create a NOT-a-dictionary for keyword parameters (**kwargs) */\n    if (this.co_kwargs) {\n        kwargs = [];\n    }\n\n    /* Copy positional arguments into arguments to our JS function*/\n    let nposargs = posargs.length;\n    let args = posargs.length <= co_argcount ? posargs : posargs.slice(0, co_argcount);\n\n    /* Pack other positional arguments into the *args argument */\n    if (this.co_varargs) {\n        let vararg = posargs.length > args.length ? posargs.slice(args.length) : [];\n        args[totalArgs] = new Sk.builtin.tuple(vararg);\n    } else if (nposargs > co_argcount) {\n        throw new Sk.builtin.TypeError(\n            this.$name +\n                \"() takes \" +\n                co_argcount +\n                \" positional argument\" +\n                (co_argcount == 1 ? \"\" : \"s\") +\n                \" but \" +\n                nposargs +\n                (nposargs == 1 ? \" was \" : \" were \") +\n                \" given\"\n        );\n    }\n\n    /* Handle keyword arguments */\n    if (kw) {\n        if (this.func_code[\"no_kw\"]) {\n            throw new Sk.builtin.TypeError(this.$name + \"() takes no keyword arguments\");\n        }\n\n        for (let i = 0; i < kw.length; i += 2) {\n            let name = kw[i]; // JS string\n            let value = kw[i + 1]; // Python value\n            let idx = varnames.indexOf(name);\n\n            if (idx >= 0) {\n                if (args[idx] !== undefined) {\n                    throw new Sk.builtin.TypeError(\n                        this.$name + \"() got multiple values for argument '\" + name + \"'\"\n                    );\n                }\n                args[idx] = value;\n            } else if (kwargs) {\n                kwargs.push(new Sk.builtin.str(name), value);\n            } else {\n                throw new Sk.builtin.TypeError(\n                    this.$name + \"() got an unexpected keyword argument '\" + name + \"'\"\n                );\n            }\n        }\n    }\n\n    /* \"Check the number of positional arguments\" (which only checks for too many)\n       has been handled before keywords */\n\n    /* Add missing positional arguments (copy default values from defs)\n       (also checks for missing args where no defaults) */\n    {\n        let defaults = this.$defaults || [];\n        let i = 0,\n            missing = [],\n            missingUnnamed = false;\n        // Positional args for which we *don't* have a default\n        let defaultStart = co_argcount - defaults.length;\n        for (; i < defaultStart; i++) {\n            if (args[i] === undefined) {\n                missing.push(varnames[i]);\n                if (varnames[i] === undefined) {\n                    missingUnnamed = true;\n                }\n            }\n        }\n        if (missing.length != 0 && (this.co_argcount || this.co_varnames)) {\n            throw new Sk.builtin.TypeError(\n                this.$name +\n                    \"() missing \" +\n                    missing.length +\n                    \" required argument\" +\n                    (missing.length == 1 ? \"\" : \"s\") +\n                    (missingUnnamed ? \"\" : \": \" + missing.map((x) => \"'\" + x + \"'\").join(\", \"))\n            );\n        }\n        for (; i < co_argcount; i++) {\n            if (args[i] === undefined) {\n                args[i] = defaults[i - defaultStart];\n            }\n        }\n    }\n\n    /* Add missing keyword arguments (copy default values from kwdefs) */\n\n    if (co_kwonlyargcount > 0) {\n        let missing = [];\n        let kwdefs = this.$kwdefs;\n\n        for (let i = co_argcount; i < totalArgs; i++) {\n            if (args[i] === undefined) {\n                if (kwdefs[i - co_argcount] !== undefined) {\n                    args[i] = kwdefs[i - co_argcount];\n                } else {\n                    missing.push(varnames[i]);\n                }\n            }\n        }\n        if (missing.length !== 0) {\n            throw new Sk.builtin.TypeError(\n                this.$name +\n                    \"() missing \" +\n                    missing.length +\n                    \" required keyword argument\" +\n                    (missing.length == 1 ? \"\" : \"s\") +\n                    \": \" +\n                    missing.join(\", \")\n            );\n        }\n    }\n\n    if (this.func_closure) {\n        // todo; OK to modify?\n        if (varnames) {\n            // Make sure all default arguments are in args before adding closure\n            for (let i = args.length; i < varnames.length; i++) {\n                args.push(undefined);\n            }\n        }\n    }\n\n    if (kwargs) {\n        args.unshift(kwargs);\n    }\n\n    return args;\n}\n", "/** @typedef {Sk.builtin.object} */ var pyObject;\n\n/**\n * builtins are supposed to come from the __builtin__ module, but we don't do\n * that yet.\n * todo; these should all be func objects too, otherwise str() of them won't\n * work, etc.\n */\n\nSk.builtin.asnum$ = function (a) {\n    if (a === undefined) {\n        return a;\n    }\n    if (a === null) {\n        return a;\n    }\n    if (typeof a === \"number\") {\n        return a;\n    }\n    if (a instanceof Sk.builtin.int_) {\n        if (typeof a.v === \"number\") {\n            return a.v;\n        }\n        return a.v.toString(); // then we have a BigInt\n    }\n    if (a instanceof Sk.builtin.float_) {\n        return a.v;\n    }\n    if (a === Sk.builtin.none.none$) {\n        return null;\n    }\n    if (typeof a === \"string\") {\n        return a;\n    }\n    return a;\n};\n\nSk.exportSymbol(\"Sk.builtin.asnum$\", Sk.builtin.asnum$);\n\n/**\n * Return a Python number (either float or int) from a Javascript number.\n *\n * Javacsript function, returns Python object.\n *\n * @param  {number} a Javascript number to transform into Python number.\n * @return {(Sk.builtin.int_|Sk.builtin.float_)} A Python number.\n */\nSk.builtin.assk$ = function (a) {\n    if (a % 1 === 0) {\n        return new Sk.builtin.int_(a);\n    } else {\n        return new Sk.builtin.float_(a);\n    }\n};\nSk.exportSymbol(\"Sk.builtin.assk$\", Sk.builtin.assk$);\n\nSk.builtin.asnum$nofloat = function (a) {\n    var decimal;\n    var mantissa;\n    var expon;\n    if (a === undefined) {\n        return a;\n    } else if (a === null) {\n        return a;\n    } else if (typeof a === \"number\") {\n        a = a.toString();\n    } else if (a instanceof Sk.builtin.int_) {\n        a = a.v.toString();\n    } else if (a instanceof Sk.builtin.float_) {\n        a = a.v.toString();\n    } else if (a === Sk.builtin.none.none$) {\n        return null;\n    } else {\n        return undefined;\n    }\n\n    //  Sk.debugout(\"INITIAL: \" + a);\n\n    //  If not a float, great, just return this\n    if (a.indexOf(\".\") < 0 && a.indexOf(\"e\") < 0 && a.indexOf(\"E\") < 0) {\n        return a;\n    }\n\n    expon = 0;\n\n    if (a.indexOf(\"e\") >= 0) {\n        mantissa = a.substr(0, a.indexOf(\"e\"));\n        expon = a.substr(a.indexOf(\"e\") + 1);\n    } else if (a.indexOf(\"E\") >= 0) {\n        mantissa = a.substr(0, a.indexOf(\"e\"));\n        expon = a.substr(a.indexOf(\"E\") + 1);\n    } else {\n        mantissa = a;\n    }\n\n    expon = parseInt(expon, 10);\n\n    decimal = mantissa.indexOf(\".\");\n\n    //  Simplest case, no decimal\n    if (decimal < 0) {\n        if (expon >= 0) {\n            // Just add more zeroes and we're done\n            while (expon-- > 0) {\n                mantissa += \"0\";\n            }\n            return mantissa;\n        } else {\n            if (mantissa.length > -expon) {\n                return mantissa.substr(0, mantissa.length + expon);\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    //  Negative exponent OR decimal (neg or pos exp)\n    if (decimal === 0) {\n        mantissa = mantissa.substr(1);\n    } else if (decimal < mantissa.length) {\n        mantissa = mantissa.substr(0, decimal) + mantissa.substr(decimal + 1);\n    } else {\n        mantissa = mantissa.substr(0, decimal);\n    }\n\n    decimal = decimal + expon;\n    while (decimal > mantissa.length) {\n        mantissa += \"0\";\n    }\n\n    if (decimal <= 0) {\n        mantissa = 0;\n    } else {\n        mantissa = mantissa.substr(0, decimal);\n    }\n\n    return mantissa;\n};\nSk.exportSymbol(\"Sk.builtin.asnum$nofloat\", Sk.builtin.asnum$nofloat);\n\nSk.builtin.round = function round(number, ndigits) {\n    if (number === undefined) {\n        throw new Sk.builtin.TypeError(\"a float is required\");\n    }\n    if (!Sk.__future__.dunder_round) {\n        if (!Sk.builtin.checkNumber(number)) {\n            throw new Sk.builtin.TypeError(\"a float is required\");\n        }\n        if (number.round$) {\n            return number.round$(ndigits);\n        } else {\n            throw new Sk.builtin.AttributeError(\n                Sk.abstr.typeName(number) + \" instance has no attribute '__float__'\"\n            );\n        }\n    }\n\n    if (ndigits !== undefined && !Sk.builtin.checkNone(ndigits) && !Sk.misceval.isIndex(ndigits)) {\n        throw new Sk.builtin.TypeError(\n            \"'\" + Sk.abstr.typeName(ndigits) + \"' object cannot be interpreted as an index\"\n        );\n    }\n\n    // try calling internal magic method\n    const special = Sk.abstr.lookupSpecial(number, Sk.builtin.str.$round);\n    if (special !== undefined) {\n        // method on builtin, provide this arg\n        if (ndigits !== undefined) {\n            return Sk.misceval.callsimArray(special, [ndigits]);\n        } else {\n            return Sk.misceval.callsimArray(special, []);\n        }\n    } else {\n        throw new Sk.builtin.TypeError(\"a float is required\");\n    }\n};\n\nSk.builtin.len = function len(item) {\n    // checking will happen in slot wrapper\n    let res;\n    if (item.sq$length) {\n        res = item.sq$length(true);\n    } else {\n        throw new Sk.builtin.TypeError(\n            \"object of type '\" + Sk.abstr.typeName(item) + \"' has no len()\"\n        );\n    }\n    return Sk.misceval.chain(res, (r) => {\n        return new Sk.builtin.int_(r);\n    });\n};\n\nSk.builtin.min = function min(args, kwargs) {\n    let iter;\n    const nargs = args.length;\n    if (!nargs) {\n        throw new Sk.builtin.TypeError(\"min expected 1 argument, got 0\");\n    }\n    const [$default, key] = Sk.abstr.copyKeywordsToNamedArgs(\n        \"min\",\n        [\"default\", \"key\"],\n        [],\n        kwargs,\n        [null, Sk.builtin.none.none$]\n    );\n\n    // if args is not a single iterable then default should not be included as a kwarg\n    if (nargs > 1 && $default !== null) {\n        throw new Sk.builtin.TypeError(\n            \"Cannot specify a default for min() with multiple positional arguments\"\n        );\n    }\n\n    if (nargs == 1) {\n        iter = Sk.abstr.iter(args[0]);\n    } else {\n        iter = Sk.abstr.iter(new Sk.builtin.tuple(args));\n    }\n\n    if (!Sk.builtin.checkNone(key) && !Sk.builtin.checkCallable(key)) {\n        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(key) + \"' object is not callable\");\n    }\n\n    let lowest;\n    return Sk.misceval.chain(\n        iter.tp$iternext(true),\n        (i) => {\n            lowest = i;\n            if (lowest === undefined) {\n                return;\n            }\n            if (Sk.builtin.checkNone(key)) {\n                return Sk.misceval.iterFor(iter, (i) => {\n                    if (Sk.misceval.richCompareBool(i, lowest, \"Lt\")) {\n                        lowest = i;\n                    }\n                });\n            } else {\n                return Sk.misceval.chain(\n                    Sk.misceval.callsimOrSuspendArray(key, [lowest]),\n                    (lowest_compare) =>\n                        Sk.misceval.iterFor(iter, (i) =>\n                            Sk.misceval.chain(\n                                Sk.misceval.callsimOrSuspendArray(key, [i]),\n                                (i_compare) => {\n                                    if (\n                                        Sk.misceval.richCompareBool(i_compare, lowest_compare, \"Lt\")\n                                    ) {\n                                        lowest = i;\n                                        lowest_compare = i_compare;\n                                    }\n                                }\n                            )\n                        )\n                );\n            }\n        },\n        () => {\n            if (lowest === undefined) {\n                if ($default === null) {\n                    throw new Sk.builtin.ValueError(\"min() arg is an empty sequence\");\n                } else {\n                    lowest = $default;\n                }\n            }\n            return lowest;\n        }\n    );\n};\n\nSk.builtin.max = function max(args, kwargs) {\n    let iter;\n    const nargs = args.length;\n\n    if (!nargs) {\n        throw new Sk.builtin.TypeError(\"max expected 1 argument, got 0\");\n    }\n    const [$default, key] = Sk.abstr.copyKeywordsToNamedArgs(\n        \"max\",\n        [\"default\", \"key\"],\n        [],\n        kwargs,\n        [null, Sk.builtin.none.none$]\n    );\n\n    // if args is not a single iterable then default should not be included as a kwarg\n    if (nargs > 1 && $default !== null) {\n        throw new Sk.builtin.TypeError(\n            \"Cannot specify a default for max() with multiple positional arguments\"\n        );\n    }\n\n    if (nargs === 1) {\n        iter = Sk.abstr.iter(args[0]);\n    } else {\n        iter = Sk.abstr.iter(new Sk.builtin.tuple(args));\n    }\n\n    if (!Sk.builtin.checkNone(key) && !Sk.builtin.checkCallable(key)) {\n        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(key) + \"' object is not callable\");\n    }\n    let highest;\n    return Sk.misceval.chain(\n        iter.tp$iternext(true),\n        (i) => {\n            highest = i;\n            if (highest === undefined) {\n                return;\n            }\n            if (Sk.builtin.checkNone(key)) {\n                return Sk.misceval.iterFor(iter, (i) => {\n                    if (Sk.misceval.richCompareBool(i, highest, \"Gt\")) {\n                        highest = i;\n                    }\n                });\n            } else {\n                return Sk.misceval.chain(\n                    Sk.misceval.callsimOrSuspendArray(key, [highest]),\n                    (highest_compare) =>\n                        Sk.misceval.iterFor(iter, (i) =>\n                            Sk.misceval.chain(\n                                Sk.misceval.callsimOrSuspendArray(key, [i]),\n                                (i_compare) => {\n                                    if (\n                                        Sk.misceval.richCompareBool(\n                                            i_compare,\n                                            highest_compare,\n                                            \"Gt\"\n                                        )\n                                    ) {\n                                        highest = i;\n                                        highest_compare = i_compare;\n                                    }\n                                }\n                            )\n                        )\n                );\n            }\n        },\n        () => {\n            if (highest === undefined) {\n                if ($default === null) {\n                    throw new Sk.builtin.ValueError(\"max() arg is an empty sequence\");\n                } else {\n                    highest = $default;\n                }\n            }\n            return highest;\n        }\n    );\n};\n\n// incase someone calls these functions via Sk.misceval.call\nSk.builtin.min.co_fastcall = Sk.builtin.max.co_fastcall = 1;\n\nSk.builtin.any = function any(iter) {\n    return Sk.misceval.chain(\n        Sk.misceval.iterFor(Sk.abstr.iter(iter), function (i) {\n            if (Sk.misceval.isTrue(i)) {\n                return new Sk.misceval.Break(Sk.builtin.bool.true$);\n            }\n        }),\n        (brValue) => brValue || Sk.builtin.bool.false$\n    );\n};\n\nSk.builtin.all = function all(iter) {\n    return Sk.misceval.chain(\n        Sk.misceval.iterFor(Sk.abstr.iter(iter), function (i) {\n            if (!Sk.misceval.isTrue(i)) {\n                return new Sk.misceval.Break(Sk.builtin.bool.false$);\n            }\n        }),\n        (brValue) => brValue || Sk.builtin.bool.true$\n    );\n};\n\nSk.builtin.sum = function sum(iter, start) {\n    var tot;\n    // follows the order of CPython checks\n    const it = Sk.abstr.iter(iter);\n    if (start === undefined) {\n        tot = new Sk.builtin.int_(0);\n    } else if (Sk.builtin.checkString(start)) {\n        throw new Sk.builtin.TypeError(\"sum() can't sum strings [use ''.join(seq) instead]\");\n    } else {\n        tot = start;\n    }\n\n    function fastSumInt() {\n        return Sk.misceval.iterFor(it, (i) => {\n            if (i.constructor === Sk.builtin.int_) {\n                tot = tot.nb$add(i);\n            } else if (i.constructor === Sk.builtin.float_) {\n                tot = tot.nb$float().nb$add(i);\n                return new Sk.misceval.Break(\"float\");\n            } else {\n                tot = Sk.abstr.numberBinOp(tot, i, \"Add\");\n                return new Sk.misceval.Break(\"slow\");\n            }\n        });\n    }\n\n    function fastSumFloat() {\n        return Sk.misceval.iterFor(it, (i) => {\n            if (i.constructor === Sk.builtin.float_ || i.constructor === Sk.builtin.int_) {\n                tot = tot.nb$add(i);\n            } else {\n                tot = Sk.abstr.numberBinOp(tot, i, \"Add\");\n                return new Sk.misceval.Break(\"slow\");\n            }\n        });\n    }\n\n    function slowSum() {\n        return Sk.misceval.iterFor(it, (i) => {\n            tot = Sk.abstr.numberBinOp(tot, i, \"Add\");\n        });\n    }\n\n    let sumType;\n    if (start === undefined || start.constructor === Sk.builtin.int_) {\n        sumType = fastSumInt();\n    } else if (start.constructor === Sk.builtin.float_) {\n        sumType = \"float\";\n    } else {\n        sumType = \"slow\";\n    }\n\n    return Sk.misceval.chain(\n        sumType,\n        (sumType) => {\n            if (sumType === \"float\") {\n                return fastSumFloat();\n            }\n            return sumType;\n        },\n        (sumType) => {\n            if (sumType === \"slow\") {\n                return slowSum();\n            }\n        },\n        () => tot\n    );\n};\n\nSk.builtin.zip = function zip() {\n    var el;\n    var tup;\n    var done;\n    var res;\n    var i;\n    var iters;\n    if (arguments.length === 0) {\n        return new Sk.builtin.list([]);\n    }\n\n    iters = [];\n    for (i = 0; i < arguments.length; i++) {\n        if (Sk.builtin.checkIterable(arguments[i])) {\n            iters.push(Sk.abstr.iter(arguments[i]));\n        } else {\n            throw new Sk.builtin.TypeError(\"argument \" + i + \" must support iteration\");\n        }\n    }\n    res = [];\n    done = false;\n    while (!done) {\n        tup = [];\n        for (i = 0; i < arguments.length; i++) {\n            el = iters[i].tp$iternext();\n            if (el === undefined) {\n                done = true;\n                break;\n            }\n            tup.push(el);\n        }\n        if (!done) {\n            res.push(new Sk.builtin.tuple(tup));\n        }\n    }\n    return new Sk.builtin.list(res);\n};\n\nSk.builtin.abs = function abs(x) {\n    if (x.nb$abs) {\n        return x.nb$abs();\n    }\n    throw new Sk.builtin.TypeError(\"bad operand type for abs(): '\" + Sk.abstr.typeName(x) + \"'\");\n};\n\n// fabs belongs in the math module but has been a Skulpt builtin since 41665a97d (2012).\n// Left in for backwards compatibility for now\nSk.builtin.fabs = function fabs(x) {\n    return Sk.builtin.abs(x);\n};\n\nSk.builtin.ord = function ord(x) {\n    if (Sk.builtin.checkString(x)) {\n        if ([...x.v].length !== 1 && x.sq$length() !== 1) {\n            // ^^ avoid the astral check unless necessary ^^\n            throw new Sk.builtin.TypeError(\n                \"ord() expected a character, but string of length \" + x.v.length + \" found\"\n            );\n        }\n        return new Sk.builtin.int_(x.v.codePointAt(0));\n    } else if (Sk.builtin.checkBytes(x)) {\n        if (x.sq$length() !== 1) {\n            throw new Sk.builtin.TypeError(\n                \"ord() expected a character, but string of length \" + x.v.length + \" found\"\n            );\n        }\n        return new Sk.builtin.int_(x.v[0]);\n    }\n    throw new Sk.builtin.TypeError(\n        \"ord() expected a string of length 1, but \" + Sk.abstr.typeName(x) + \" found\"\n    );\n};\n\nSk.builtin.chr = function chr(x) {\n    if (!Sk.builtin.checkInt(x)) {\n        throw new Sk.builtin.TypeError(\"an integer is required\");\n    }\n    x = Sk.builtin.asnum$(x);\n    if (Sk.__future__.python3) {\n        if (x < 0 || x >= 0x110000) {\n            throw new Sk.builtin.ValueError(\"chr() arg not in range(0x110000)\");\n        }\n    } else {\n        if (x < 0 || x >= 256) {\n            throw new Sk.builtin.ValueError(\"chr() arg not in range(256)\");\n        }\n    }\n\n    return new Sk.builtin.str(String.fromCodePoint(x));\n};\n\nSk.builtin.unichr = function unichr(x) {\n    Sk.builtin.pyCheckArgsLen(\"unichr\", arguments.length, 1, 1);\n    if (!Sk.builtin.checkInt(x)) {\n        throw new Sk.builtin.TypeError(\"an integer is required\");\n    }\n    x = Sk.builtin.asnum$(x);\n\n    try {\n        return new Sk.builtin.str(String.fromCodePoint(x));\n    } catch (err) {\n        if (err instanceof RangeError) {\n            throw new Sk.builtin.ValueError(err.message);\n        }\n        throw err;\n    }\n};\n\n/**\n * This is a helper function and we already know that x is an int or has an nb$index slot\n */\nSk.builtin.int2str_ = function helper_(x, radix, prefix) {\n    let v = x.nb$index();\n    let isNegative = false;\n    if (typeof v === \"number\") {\n        isNegative = v < 0;\n        v = isNegative ? -v : v;\n    } else {\n        isNegative = JSBI.lessThan(v, JSBI.__ZERO);\n        v = isNegative ? JSBI.unaryMinus(v) : v;\n    }\n    let str = v.toString(radix);\n    if (isNegative) {\n        str = \"-\" + prefix + str;\n    } else {\n        str = prefix + str;\n    }\n    if (\n        radix !== 2 &&\n        !Sk.__future__.python3 &&\n        (x instanceof Sk.builtin.lng || JSBI.__isBigInt(v))\n    ) {\n        str += \"L\";\n    }\n    return new Sk.builtin.str(str);\n};\n\nSk.builtin.hex = function hex(x) {\n    if (!Sk.misceval.isIndex(x)) {\n        throw new Sk.builtin.TypeError(\"hex() argument can't be converted to hex\");\n    }\n    return Sk.builtin.int2str_(x, 16, \"0x\");\n};\n\nSk.builtin.oct = function oct(x) {\n    if (!Sk.misceval.isIndex(x)) {\n        throw new Sk.builtin.TypeError(\"oct() argument can't be converted to hex\");\n    }\n    if (Sk.__future__.octal_number_literal) {\n        return Sk.builtin.int2str_(x, 8, \"0o\");\n    } else {\n        return Sk.builtin.int2str_(x, 8, \"0\");\n    }\n};\n\nSk.builtin.bin = function bin(x) {\n    if (!Sk.misceval.isIndex(x)) {\n        throw new Sk.builtin.TypeError(\n            \"'\" + Sk.abstr.typeName(x) + \"' object can't be interpreted as an index\"\n        );\n    }\n    return Sk.builtin.int2str_(x, 2, \"0b\");\n};\n\nSk.builtin.dir = function dir(obj) {\n    if (obj !== undefined) {\n        const obj_dir_func = Sk.abstr.lookupSpecial(obj, Sk.builtin.str.$dir);\n        return Sk.misceval.chain(Sk.misceval.callsimOrSuspendArray(obj_dir_func, []), (dir) =>\n            Sk.builtin.sorted(dir)\n        );\n        // now iter through the keys and check they are all stings\n    }\n    // then we want all the objects in the global scope\n    //todo\n    throw new Sk.builtin.NotImplementedError(\"skulpt does not yet support dir with no args\");\n};\n\nSk.builtin.repr = function repr(x) {\n    return x.$r();\n};\n\nSk.builtin.ascii = function ascii(x) {\n    return Sk.misceval.chain(x.$r(), (r) => {\n        let ret;\n        let i;\n        // Fast path\n        for (i = 0; i < r.v.length; i++) {\n            if (r.v.charCodeAt(i) >= 0x7f) {\n                ret = r.v.substr(0, i);\n                break;\n            }\n        }\n        if (!ret) {\n            return r;\n        }\n        for (; i < r.v.length; i++) {\n            let c = r.v.charAt(i);\n            let cc = r.v.charCodeAt(i);\n\n            if (cc > 0x7f && cc <= 0xff) {\n                let ashex = cc.toString(16);\n                if (ashex.length < 2) {\n                    ashex = \"0\" + ashex;\n                }\n                ret += \"\\\\x\" + ashex;\n            } else if ((cc > 0x7f && cc < 0xd800) || cc >= 0xe000) {\n                // BMP\n                ret += \"\\\\u\" + (\"000\" + cc.toString(16)).slice(-4);\n            } else if (cc >= 0xd800) {\n                // Surrogate pair stuff\n                let val = r.v.codePointAt(i);\n                i++;\n\n                val = val.toString(16);\n                let s = \"0000000\" + val.toString(16);\n                if (val.length > 4) {\n                    ret += \"\\\\U\" + s.slice(-8);\n                } else {\n                    ret += \"\\\\u\" + s.slice(-4);\n                }\n            } else {\n                ret += c;\n            }\n        }\n        return new Sk.builtin.str(ret);\n    });\n};\n\nSk.builtin.open = function open(\n    filename,\n    mode,\n    bufsize,\n    encoding,\n    errors,\n    newline,\n    closedf,\n    opener\n) {\n    if (mode === undefined) {\n        mode = new Sk.builtin.str(\"r\");\n    }\n    if (bufsize === undefined) {\n        bufsize = -1;\n    }\n\n    if (/\\+/.test(mode.v)) {\n        throw \"todo; haven't implemented read/write mode\";\n    } else if (\n        (mode.v === \"w\" || mode.v === \"wb\" || mode.v === \"a\" || mode.v === \"ab\") &&\n        !Sk.nonreadopen\n    ) {\n        throw \"todo; haven't implemented non-read opens\";\n    }\n\n    return new Sk.builtin.file(filename, mode, bufsize, encoding, errors, newline, closedf, opener);\n};\n\nSk.builtin.isinstance = function isinstance(obj, type) {\n    if (!Sk.builtin.checkClass(type) && !(type instanceof Sk.builtin.tuple)) {\n        throw new Sk.builtin.TypeError(\n            \"isinstance() arg 2 must be a class, type, or tuple of classes and types\"\n        );\n    }\n\n    // Fast path\n    const act_type = obj.ob$type;\n    if (act_type === type) {\n        return Sk.builtin.bool.true$;\n    }\n    if (!(type instanceof Sk.builtin.tuple)) {\n        // attempt 1\n        if (act_type.$isSubType(type)) {\n            return Sk.builtin.bool.true$;\n        }\n        // fail so check if we have overriden __class__\n        const maybe_type = obj.tp$getattr(Sk.builtin.str.$class);\n        if (maybe_type == act_type) {\n            return Sk.builtin.bool.false$;\n        } else if (Sk.builtin.checkClass(maybe_type) && maybe_type.$isSubType(type)) {\n            return Sk.builtin.bool.true$;\n        }\n        return Sk.builtin.bool.false$;\n    }\n    // Handle tuple type argument\n    for (let i = 0; i < type.v.length; ++i) {\n        if (Sk.misceval.isTrue(Sk.builtin.isinstance(obj, type.v[i]))) {\n            return Sk.builtin.bool.true$;\n        }\n    }\n    return Sk.builtin.bool.false$;\n};\n\nSk.builtin.hash = function hash(obj) {\n    return new Sk.builtin.int_(Sk.abstr.objectHash(obj));\n};\n\nSk.builtin.getattr = function getattr(obj, pyName, default_) {\n    if (!Sk.builtin.checkString(pyName)) {\n        throw new Sk.builtin.TypeError(\"attribute name must be string\");\n    }\n    const res = Sk.misceval.tryCatch(\n        () => obj.tp$getattr(pyName, true),\n        (e) => {\n            if (e instanceof Sk.builtin.AttributeError) {\n                return undefined;\n            } else {\n                throw e;\n            }\n        }\n    );\n    return Sk.misceval.chain(res, (r) => {\n        if (r === undefined) {\n            if (default_ !== undefined) {\n                return default_;\n            }\n            throw new Sk.builtin.AttributeError(\n                obj.sk$attrError() + \" has no attribute \" + Sk.misceval.objectRepr(pyName)\n            );\n        }\n        return r;\n    });\n};\n\nSk.builtin.setattr = function setattr(obj, pyName, value) {\n    // cannot set or del attr from builtin type\n    if (!Sk.builtin.checkString(pyName)) {\n        throw new Sk.builtin.TypeError(\"attribute name must be string\");\n    }\n    return Sk.misceval.chain(obj.tp$setattr(pyName, value, true), () => Sk.builtin.none.none$);\n};\n\nSk.builtin.raw_input = function (prompt) {\n    var lprompt = prompt ? prompt : \"\";\n\n    return Sk.misceval.chain(Sk.importModule(\"sys\", false, true), function (sys) {\n        if (Sk.inputfunTakesPrompt) {\n            return Sk.builtin.file.$readline(sys[\"$d\"][\"stdin\"], null, lprompt);\n        } else {\n            return Sk.misceval.chain(\n                undefined,\n                function () {\n                    return Sk.misceval.callsimOrSuspendArray(sys[\"$d\"][\"stdout\"][\"write\"], [\n                        sys[\"$d\"][\"stdout\"],\n                        new Sk.builtin.str(lprompt),\n                    ]);\n                },\n                function () {\n                    return Sk.misceval.callsimOrSuspendArray(sys[\"$d\"][\"stdin\"][\"readline\"], [\n                        sys[\"$d\"][\"stdin\"],\n                    ]);\n                }\n            );\n        }\n    });\n};\n\nSk.builtin.input = Sk.builtin.raw_input;\n\nSk.builtin.jseval = function jseval(evalcode) {\n    var result = Sk.global[\"eval\"](Sk.ffi.remapToJs(evalcode));\n    try {\n        return Sk.ffi.remapToPy(result);\n    } catch (err) {\n        if (err.constructor === Sk.asserts.AssertionError) {\n            return Sk.builtin.none.none$;\n        }\n\n        throw err;\n    }\n};\n\nSk.builtin.jsmillis = function jsmillis() {\n    var now = new Date();\n    return now.valueOf();\n};\n\nconst pyCode = Sk.abstr.buildNativeClass(\"code\", {\n    constructor: function code(filename, compiled) {\n        this.compiled = compiled; // old \"source\"\n        this.code = compiled.code;\n        this.filename = filename;\n    },\n    slots: {\n        tp$new(args, kwargs) {\n            throw new Sk.builtin.NotImplementedError(\"cannot construct a code object in skulpt\");\n        },\n        $r() {\n            return new Sk.builtin.str(\"<code object <module>, file \" + this.filename + \">\");\n        },\n    },\n});\n\nSk.builtin.compile = function (source, filename, mode, flags, dont_inherit, optimize) {\n    Sk.builtin.pyCheckType(\"source\", \"str\", Sk.builtin.checkString(source));\n    Sk.builtin.pyCheckType(\"filename\", \"str\", Sk.builtin.checkString(filename));\n    Sk.builtin.pyCheckType(\"mode\", \"str\", Sk.builtin.checkString(mode));\n    source = source.$jsstr();\n    filename = filename.$jsstr();\n    mode = mode.$jsstr();\n    return Sk.misceval.chain(\n        Sk.compile(source, filename, mode, true, true),\n        (co) => new pyCode(filename, co)\n    );\n};\n\nSk.builtin.eval = function (source, globals, locals) {\n    if (Sk.builtin.checkString(source)) {\n        source = source.$jsstr();\n    } else if (Sk.builtin.checkBytes(source)) {\n        throw new Sk.builtin.NotImplementedError(\"bytes for eval is not yet implemented in skulpt\");\n    }\n    if (typeof source === \"string\") {\n        source = source.trim();\n        const parse = Sk.parse(\"?\", source);\n        const ast = Sk.astFromParse(parse.cst, \"?\", parse.flags);\n        if (ast.body.length > 1 || !(ast.body[0] instanceof Sk.astnodes.Expr)) {\n            throw new Sk.builtin.SyntaxError(\"invalid syntax\");\n        }\n        source = \"__final_res__ = \" + source;\n    } else if (!(source instanceof pyCode)) {\n        throw new Sk.builtin.TypeError(\"eval() arg 1 must be a string, bytes or code object\");\n    }\n    return Sk.misceval.chain(Sk.builtin.exec(source, globals, locals), (new_locals) => {\n        const res = new_locals.__final_res__ || Sk.builtin.none.none$;\n        delete new_locals.__final_res__;\n        return res;\n    });\n};\n\nSk.builtin.map = function map(fun, seq) {\n    var retval = [];\n    var next;\n    var nones;\n    var args;\n    var argnum;\n    var i;\n    var iterables;\n    var combined;\n    Sk.builtin.pyCheckArgsLen(\"map\", arguments.length, 2);\n\n    if (arguments.length > 2) {\n        // Pack sequences into one list of Javascript Arrays\n\n        combined = [];\n        iterables = Array.prototype.slice.apply(arguments).slice(1);\n        for (i = 0; i < iterables.length; i++) {\n            if (!Sk.builtin.checkIterable(iterables[i])) {\n                argnum = parseInt(i, 10) + 2;\n                throw new Sk.builtin.TypeError(\n                    \"argument \" + argnum + \" to map() must support iteration\"\n                );\n            }\n            iterables[i] = Sk.abstr.iter(iterables[i]);\n        }\n\n        while (true) {\n            args = [];\n            nones = 0;\n            for (i = 0; i < iterables.length; i++) {\n                next = iterables[i].tp$iternext();\n                if (next === undefined) {\n                    args.push(Sk.builtin.none.none$);\n                    nones++;\n                } else {\n                    args.push(next);\n                }\n            }\n            if (nones !== iterables.length) {\n                combined.push(args);\n            } else {\n                // All iterables are done\n                break;\n            }\n        }\n        seq = new Sk.builtin.list(combined);\n    }\n\n    if (!Sk.builtin.checkIterable(seq)) {\n        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(seq) + \"' object is not iterable\");\n    }\n\n    return Sk.misceval.chain(\n        Sk.misceval.iterFor(Sk.abstr.iter(seq), function (item) {\n            if (fun === Sk.builtin.none.none$) {\n                if (item instanceof Array) {\n                    // With None function and multiple sequences,\n                    // map should return a list of tuples\n                    item = new Sk.builtin.tuple(item);\n                }\n                retval.push(item);\n            } else {\n                if (!(item instanceof Array)) {\n                    // If there was only one iterable, convert to Javascript\n                    // Array for call to apply.\n                    item = [item];\n                }\n\n                return Sk.misceval.chain(\n                    Sk.misceval.callsimOrSuspendArray(fun, item),\n                    function (result) {\n                        retval.push(result);\n                    }\n                );\n            }\n        }),\n        function () {\n            return new Sk.builtin.list(retval);\n        }\n    );\n};\n\nSk.builtin.reduce = function reduce(fun, seq, initializer) {\n    var item;\n    var accum_value;\n    var iter;\n    if (!Sk.builtin.checkIterable(seq)) {\n        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(seq) + \"' object is not iterable\");\n    }\n\n    iter = Sk.abstr.iter(seq);\n    if (initializer === undefined) {\n        initializer = iter.tp$iternext();\n        if (initializer === undefined) {\n            throw new Sk.builtin.TypeError(\"reduce() of empty sequence with no initial value\");\n        }\n    }\n    accum_value = initializer;\n    for (item = iter.tp$iternext(); item !== undefined; item = iter.tp$iternext()) {\n        accum_value = Sk.misceval.callsimArray(fun, [accum_value, item]);\n    }\n\n    return accum_value;\n};\n\n/**\n *\n * @param {pyObject} iterable\n * @param {*=} cmp\n * @param {*=} key\n * @param {*=} reverse\n */\nSk.builtin.sorted = function sorted(iterable, cmp, key, reverse) {\n    const lst = Sk.misceval.arrayFromIterable(iterable, true);\n    return Sk.misceval.chain(lst, (L) => {\n        L = new Sk.builtin.list(L);\n        L.list$sort(cmp, key, reverse);\n        return L;\n    });\n};\n\nSk.builtin.filter = function filter(fun, iterable) {\n    var result;\n    var iter, item;\n    var retval;\n    var ret;\n    var add;\n    var ctor;\n    Sk.builtin.pyCheckArgsLen(\"filter\", arguments.length, 2, 2);\n    if (!Sk.builtin.checkIterable(iterable)) {\n        throw new Sk.builtin.TypeError(\n            \"'\" + Sk.abstr.typeName(iterable) + \"' object is not iterable\"\n        );\n    }\n    ctor = function () {\n        return [];\n    };\n    add = function (iter, item) {\n        iter.push(item);\n        return iter;\n    };\n    ret = function (iter) {\n        return new Sk.builtin.list(iter);\n    };\n\n    if (iterable.ob$type === Sk.builtin.str) {\n        ctor = function () {\n            return new Sk.builtin.str(\"\");\n        };\n        add = function (iter, item) {\n            return iter.sq$concat(item);\n        };\n        ret = function (iter) {\n            return iter;\n        };\n    } else if (iterable.ob$type === Sk.builtin.tuple) {\n        ret = function (iter) {\n            return new Sk.builtin.tuple(iter);\n        };\n    }\n\n    retval = ctor();\n\n    for (\n        iter = Sk.abstr.iter(iterable), item = iter.tp$iternext();\n        item !== undefined;\n        item = iter.tp$iternext()\n    ) {\n        if (fun === Sk.builtin.none.none$) {\n            result = new Sk.builtin.bool(item);\n        } else {\n            result = Sk.misceval.callsimArray(fun, [item]);\n        }\n\n        if (Sk.misceval.isTrue(result)) {\n            retval = add(retval, item);\n        }\n    }\n\n    return ret(retval);\n};\n\nSk.builtin.hasattr = function hasattr(obj, pyName) {\n    if (!Sk.builtin.checkString(pyName)) {\n        throw new Sk.builtin.TypeError(\"hasattr(): attribute name must be string\");\n    }\n    const res = Sk.misceval.tryCatch(\n        () => obj.tp$getattr(pyName, true),\n        (e) => {\n            if (e instanceof Sk.builtin.AttributeError) {\n                return undefined;\n            } else {\n                throw e;\n            }\n        }\n    );\n    return Sk.misceval.chain(res, (val) =>\n        val === undefined ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$\n    );\n};\n\nSk.builtin.pow = function pow(v, w, z) {\n    // skulpt does support ternary slots\n    if (z === undefined || Sk.builtin.checkNone(z)) {\n        return Sk.abstr.numberBinOp(v, w, \"Pow\");\n    }\n    // only support a third argument if they're all the integers.\n    if (!(Sk.builtin.checkInt(v) && Sk.builtin.checkInt(w) && Sk.builtin.checkInt(z))) {\n        if (Sk.builtin.checkFloat(v) || Sk.builtin.checkComplex(v)) {\n            return v.nb$power(w, z); // these slots for float and complex throw the correct errors\n        }\n        throw new Sk.builtin.TypeError(\n            \"unsupported operand type(s) for ** or pow(): '\" +\n                Sk.abstr.typeName(v) +\n                \"', '\" +\n                Sk.abstr.typeName(w) +\n                \"', '\" +\n                Sk.abstr.typeName(z) +\n                \"'\"\n        );\n    }\n    return v.nb$power(w, z);\n};\n\nSk.builtin.quit = function quit(msg) {\n    var s = new Sk.builtin.str(msg).v;\n    throw new Sk.builtin.SystemExit(s);\n};\n\nSk.builtin.issubclass = function issubclass(c1, c2) {\n    if (!Sk.builtin.checkClass(c1)) {\n        throw new Sk.builtin.TypeError(\"issubclass() arg 1 must be a class\");\n    }\n    let c2_isClass = Sk.builtin.checkClass(c2);\n    if (!c2_isClass && !(c2 instanceof Sk.builtin.tuple)) {\n        throw new Sk.builtin.TypeError(\"issubclass() arg 2 must be a class or tuple of classes\");\n    }\n    if (c2_isClass) {\n        return c1.$isSubType(c2) ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n    }\n    // Handle tuple type argument\n    for (let i = 0; i < c2.v.length; ++i) {\n        if (Sk.misceval.isTrue(Sk.builtin.issubclass(c1, c2.v[i]))) {\n            return Sk.builtin.bool.true$;\n        }\n    }\n    return Sk.builtin.bool.false$;\n};\n\nSk.builtin.globals = function globals() {\n    var i, unmangled;\n    var ret = new Sk.builtin.dict([]);\n    for (i in Sk[\"globals\"]) {\n        unmangled = Sk.unfixReserved(i);\n        ret.mp$ass_subscript(new Sk.builtin.str(unmangled), Sk[\"globals\"][i]);\n    }\n\n    return ret;\n};\n\nSk.builtin.divmod = function divmod(a, b) {\n    return Sk.abstr.numberBinOp(a, b, \"DivMod\");\n};\n\n/**\n * Convert a value to a \u201Cformatted\u201D representation, as controlled by format_spec. The interpretation of format_spec\n * will depend on the type of the value argument, however there is a standard formatting syntax that is used by most\n * built-in types: Format Specification Mini-Language.\n */\nSk.builtin.format = function format(value, format_spec) {\n    return Sk.abstr.objectFormat(value, format_spec);\n};\n\nconst idMap = new Map();\nlet _id = 0;\nSk.builtin.id = function (obj) {\n    const id = idMap.get(obj);\n    if (id !== undefined) {\n        return new Sk.builtin.int_(id);\n    }\n    idMap.set(obj, _id);\n    return new Sk.builtin.int_(_id++);\n};\n\nSk.builtin.bytearray = function bytearray() {\n    throw new Sk.builtin.NotImplementedError(\"bytearray is not yet implemented\");\n};\n\nSk.builtin.callable = function callable(obj) {\n    // check num of args\n\n    if (Sk.builtin.checkCallable(obj)) {\n        return Sk.builtin.bool.true$;\n    }\n    return Sk.builtin.bool.false$;\n};\n\nSk.builtin.delattr = function delattr(obj, attr) {\n    return Sk.builtin.setattr(obj, attr, undefined);\n};\n\nSk.builtin.execfile = function execfile() {\n    throw new Sk.builtin.NotImplementedError(\"execfile is not yet implemented\");\n};\n\nvar extractDict = function (obj) {\n    var ret = {};\n    var k, v, kAsJs, iter;\n    if (obj === undefined) {\n        return ret;\n    }\n    for (iter = obj.tp$iter(), k = iter.tp$iternext(); k !== undefined; k = iter.tp$iternext()) {\n        v = obj.mp$subscript(k);\n        if (v === undefined) {\n            v = null;\n        }\n        kAsJs = Sk.ffi.remapToJs(k);\n        // todo; assert that this is a reasonble lhs?\n        ret[Sk.fixReserved(kAsJs)] = v;\n    }\n    return ret;\n};\n\nvar mergeDict = function (obj1, obj2) {\n    var k, v, kAsJs, iter;\n    if (obj2 === undefined) {\n        return obj1;\n    }\n    for (iter = obj2.tp$iter(), k = iter.tp$iternext(); k !== undefined; k = iter.tp$iternext()) {\n        v = obj2.mp$subscript(k);\n        if (v === undefined) {\n            v = null;\n        }\n        kAsJs = Sk.ffi.remapToJs(k);\n        // todo; assert that this is a reasonble lhs?\n        obj1[Sk.fixReserved(kAsJs)] = v;\n    }\n    return obj1;\n};\n\nfunction tryCatchWithPromises(tryFn, catchFn) {\n    var r;\n\n    try {\n        r = tryFn();\n    } catch (e) {\n        return catchFn(e);\n    }\n\n    if (r instanceof Sk.misceval.Suspension) {\n        var susp = new Sk.misceval.Suspension(undefined, r);\n        susp.resume = function () {\n            return tryCatchWithPromises(r.resume, catchFn);\n        };\n        return susp;\n    } else {\n        return r;\n    }\n}\n\nSk.builtin.exec = function exec(code, globals, locals) {\n    Sk.builtin.pyCheckArgs(\"exec\", arguments, 1, 3);\n\n    let filename = globals && globals.__file__;\n    if (filename !== undefined && Sk.builtin.checkString(filename)) {\n        filename = filename.toString();\n    } else if (code instanceof pyCode) {\n        filename = code.filename;\n    } else {\n        filename = \"<string>\";\n    }\n\n    if (Sk.builtin.checkString(code)) {\n        code = Sk.compile(code.$jsstr(), filename, \"exec\", true, true);\n    } else if (typeof code === \"string\") {\n        code = Sk.compile(code, filename, \"exec\", true, true);\n    } else if (!(code instanceof pyCode)) {\n        throw new Sk.builtin.TypeError(\"exec() arg 1 must be a string, bytes or code object\");\n    }\n\n    Sk.asserts.assert(\n        globals === undefined || globals.constructor === Object,\n        \"internal calls to exec should be called with a javascript object for globals\"\n    );\n    Sk.asserts.assert(\n        locals === undefined || locals.constructor === Object,\n        \"internal calls to exec should be called with a javascript object for locals\"\n    );\n\n    let backupGlobals, backupRG, caughtError;\n    return Sk.misceval.chain(\n        code,\n        (co) => {\n            if (!Sk.sysmodules.sq$contains(Sk.builtin.str.$sys)) {\n                Sk.importModule(\"sys\", false, true);\n            }\n            return co;\n        },\n        (co) => {\n            // Backup the \"retainGlobals\" flag\n            backupRG = Sk.retainGlobals;\n            // Make sure we remember the globals before we do anything\n            Sk.retainGlobals = true;\n            // Create a dictionary to hold the new temporary globals\n            //globalsCopy = extractDict(globals);\n            // Ensure certain defaults are available\n            if (!globals.__file__) {\n                globals.__file__ = Sk.ffi.remapToPy(filename);\n            }\n            if (!globals.__name__) {\n                globals.__name__ = Sk.ffi.remapToPy(filename);\n            }\n            if (!globals.__package__) {\n                globals.__package__ = Sk.builtin.none.none$;\n            }\n            // Swap the real globals for our freshly copied temporary globals\n            backupGlobals = Sk.globals;\n            Sk.globals = globals;\n            // Set up some error catching\n            caughtError = null;\n\n            // Guard against exceptions so we can recover gracefully\n            return Sk.misceval.tryCatch(\n                () => {\n                    let result = Sk.global[\"eval\"](co.code)(globals, locals);\n                    // Ensure it terminates\n                    // If the result has a promise, we need to execute that first\n                    // Then attach the result/error to the suspension\n                    // And then finally call resume on the suspension\n                    while (result instanceof Sk.misceval.Suspension) {\n                        if (!result.optional) {\n                            return Sk.misceval.promiseToSuspension(\n                                Sk.misceval.asyncToPromise(() => result)\n                            );\n                        }\n                        result = result.resume();\n                    }\n                    return result;\n                },\n                (e) => {\n                    console.error(\"exec error:\", e, locals, globals);\n                    caughtError = e;\n                }\n            );\n        },\n        (new_locals) => {\n            // Restore the Original globals\n            Sk.globals = backupGlobals;\n            // Copy over the temporary globals' data to the original globals we were given\n            /*for (let key in globalsCopy) {\n                if (globalsCopy.hasOwnProperty(key)) {\n                    const pykey = Sk.ffi.remapToPy(Sk.unfixReserved(key));\n                    Sk.builtin.dict.prototype.mp$ass_subscript.call(globals, pykey, globals[key]);\n                }\n            }*/\n            // And restore the retainGlobals flag\n            Sk.retainGlobals = backupRG;\n            // Throw any errors at this point in time\n            if (caughtError !== null) {\n                throw caughtError;\n            }\n            // Return new_locals internally for eval\n            return new_locals;\n        }\n    );\n};\n\nSk.builtin.help = function help() {\n    throw new Sk.builtin.NotImplementedError(\"help is not yet implemented\");\n};\n\nSk.builtin.iter = function iter(obj, sentinel) {\n    if (arguments.length === 1) {\n        return Sk.abstr.iter(obj);\n    } else {\n        return Sk.abstr.iter(new Sk.builtin.callable_iter_(obj, sentinel));\n    }\n};\n\nSk.builtin.locals = function locals() {\n    throw new Sk.builtin.NotImplementedError(\"locals is not yet implemented\");\n};\nSk.builtin.memoryview = function memoryview() {\n    throw new Sk.builtin.NotImplementedError(\"memoryview is not yet implemented\");\n};\n\nSk.builtin.next_ = function next_(iter, default_) {\n    if (!iter.tp$iternext) {\n        throw new Sk.builtin.TypeError(\n            \"'\" + Sk.abstr.typeName(iter) + \"' object is not an iterator\"\n        );\n    }\n    return Sk.misceval.chain(iter.tp$iternext(true), (nxt) => {\n        if (nxt === undefined) {\n            if (default_) {\n                return default_;\n            }\n            const v = iter.gi$ret;\n            // gi$ret is the original value that was thrown by the StopIteration\n            // (or returned by a generator)\n            // We've now lost the original StopIteration\n            // We make the assumption that it was probably called like\n            // raise StopIteration # or  StopIteration()\n            // rather than\n            // raise StopIteration(None)\n            if (v !== undefined && v !== Sk.builtin.none.none$) {\n                throw new Sk.builtin.StopIteration(v);\n            } else {\n                throw new Sk.builtin.StopIteration();\n            }\n        }\n        return nxt;\n    });\n};\n\nSk.builtin.reload = function reload() {\n    throw new Sk.builtin.NotImplementedError(\"reload is not yet implemented\");\n};\nSk.builtin.vars = function vars(obj) {\n    if (arguments.length === 1) {\n        if (obj.$d) {\n            return obj.$d;\n        } else {\n            throw new Sk.builtin.TypeError(\"vars() argument must have __dict__ attribute\");\n        }\n    } else {\n        throw new Sk.builtin.NotImplementedError(\"vars() is not yet implemented\");\n    }\n};\n\nSk.builtin.apply_ = function apply_() {\n    throw new Sk.builtin.NotImplementedError(\"apply is not yet implemented\");\n};\nSk.builtin.buffer = function buffer_() {\n    throw new Sk.builtin.NotImplementedError(\"buffer is not yet implemented\");\n};\nSk.builtin.coerce = function coerce() {\n    throw new Sk.builtin.NotImplementedError(\"coerce is not yet implemented\");\n};\nSk.builtin.intern = function intern() {\n    throw new Sk.builtin.NotImplementedError(\"intern is not yet implemented\");\n};\n\n/*\n Sk.builtinFiles = {};\n Sk.builtin.read = function read(x) {\n if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined)\n throw \"File not found: '\" + x + \"'\";\n return Sk.builtinFiles[\"files\"][x];\n };\n Sk.builtinFiles = undefined;\n */\n", "/*\n * The filename, line number, and column number of exceptions are\n * stored within the exception object.  Note that not all exceptions\n * clearly report the column number.  To customize the exception\n * message to use any/all of these fields, you can either modify\n * tp$str below to print the desired message, or use them in the\n * skulpt wrapper (i.e., runit) to present the exception message.\n */\n\n/**\n * @constructor\n * @param {...} args Typically called with a single string argument\n */\nconst BaseException = Sk.abstr.buildNativeClass(\"BaseException\", {\n    constructor: function BaseException(arg, ...tb) {\n        // internally args is either a string\n        Sk.asserts.assert(\n            this instanceof BaseException,\n            \"bad call to exception constructor, use 'new'\"\n        );\n        // for all internal calls only the first argument is included in args\n        if (typeof arg === \"string\") {\n            arg = new Sk.builtin.str(arg);\n        }\n        this.args = new Sk.builtin.tuple(arg ? [arg] : []);\n        // if we have tb args then it's an internal call indicating the pre instantiated traceback\n        // we should probably change this at some point because this only happens with SyntaxErrors\n        this.traceback =\n            tb.length >= 2 ? [{ filename: tb[0] || \"<unknown>\", text: tb[1], lineno: tb[2] }] : [];\n        this._full_traceback = tb;\n        this.feedback = Sk.builtin.none.none$;\n        this.__cause__ = Sk.builtin.none.none$;\n        this.__context__ = Sk.builtin.none.none$;\n        this.__suppress_context__ = Sk.builtin.none.none$;\n        this.$d = new Sk.builtin.dict();\n    },\n    slots: /**@lends {BaseException}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$doc: \"Common base class for all exceptions\",\n        tp$new: BaseExc_new,\n        tp$init: BaseExc_init,\n        $r() {\n            let ret = this.tp$name;\n            ret += \"(\" + this.args.v.map((x) => Sk.misceval.objectRepr(x)).join(\", \") + \")\";\n            return new Sk.builtin.str(ret);\n        },\n        tp$str: BaseExc_str,\n    },\n    getsets: /**@lends {BaseException}*/ {\n        args: {\n            $get() {\n                return this.args;\n            },\n            $set(v) {\n                checkDeleting(v, \"args\");\n                this.args = new Sk.builtin.tuple(v);\n            },\n        },\n        __dict__: Sk.generic.getSetDict,\n        __cause__: {\n            $get: function () {\n                return this.__cause__;\n            },\n            $set: function (v) {\n                this.__cause__ = v;\n            },\n        },\n        feedback: {\n            $get: function () {\n                return this.feedback;\n            },\n            $set: function (v) {\n                this.feedback = v;\n            },\n        },\n        __context__: {\n            $get: function () {\n                return this.__context__;\n            },\n            $set: function (v) {\n                this.__context__ = v;\n            },\n        },\n        __suppress_context__: {\n            $get: function () {\n                return this.__suppress_context__;\n            },\n            $set: function (v) {\n                this.__suppress_context__ = v;\n            },\n        },\n    },\n    proto: /**@lends {BaseException}*/ {\n        toString() {\n            let ret = this.tp$name;\n            ret += \": \" + this.tp$str().v;\n\n            if (this.traceback.length !== 0) {\n                ret += \" on line \" + this.traceback[0].lineno;\n            } else {\n                ret += \" at <unknown>\";\n            }\n\n            if (this.args.v.length > 4) {\n                ret += \"\\n\" + this.args.v[4].v + \"\\n\";\n                for (let i = 0; i < this.args.v[3]; ++i) {\n                    ret += \" \";\n                }\n                ret += \"^\\n\";\n            }\n\n            return ret;\n        },\n    },\n});\n\n// will be used when we implement other getsets\nfunction checkDeleting(v, name) {\n    if (v === undefined) {\n        throw new Sk.builtin.TypeError(`${name} may not be deleted`);\n    }\n}\n\nfunction BaseExc_new(args, kws) {\n    const instance = new this.constructor();\n    if (this.ht$type) {\n        BaseException.call(instance);\n    }\n    // called from python so do the args here\n    instance.args = new Sk.builtin.tuple(args.slice(0));\n    return instance;\n}\n\nfunction BaseExc_init(args, kws) {\n    Sk.abstr.checkNoKwargs(Sk.abstr.typeName(this), kws);\n    this.args = new Sk.builtin.tuple(args.slice(0));\n}\n\nfunction BaseExc_str() {\n    if (this.args.v.length <= 1) {\n        return new Sk.builtin.str(this.args.v[0]);\n    }\n    return this.args.$r();\n}\n\nfunction complexExtends(base, name, doc, init, descriptors, str) {\n    descriptors || (descriptors = []);\n    const flags = init ? {} : { sk$solidBase: false };\n    const slots = { tp$init: init || BaseExc_init, tp$doc: doc };\n    if (str) {\n        slots.tp$str = str;\n    }\n\n    return Sk.abstr.buildNativeClass(name, {\n        base,\n        constructor: function pyExc(...args) {\n            base.apply(this, args);\n            descriptors.forEach((getset, i) => {\n                this[\"$\" + getset] = Sk.ffi.remapToPy(args[i]);\n            });\n        },\n        slots,\n        getsets: Object.fromEntries(\n            descriptors.map((getset) => [\n                getset,\n                {\n                    $get() {\n                        return this[\"$\" + getset] || Sk.builtin.none.none$;\n                    },\n                    $set(v) {\n                        this[\"$\" + getset] = v || Sk.builtin.none.none$;\n                    },\n                },\n            ])\n        ),\n        flags,\n    });\n}\n\nfunction simpleExtends(base, name, doc) {\n    const tp$init = base.prototype.tp$init;\n    const slots = { tp$doc: doc, tp$init };\n    if (tp$init === BaseExc_init) {\n        slots.tp$new = BaseExc_new;\n    }\n    return Sk.abstr.buildNativeClass(name, {\n        base,\n        constructor: function pyExc(...args) {\n            base.apply(this, args);\n        },\n        slots,\n        flags: {\n            sk$solidBase: false,\n        },\n    });\n}\n\nconst SystemExit = simpleExtends(\n    BaseException,\n    \"SystemExit\",\n    \"Request to exit from the interpreter.\"\n);\nconst KeyboardInterrupt = simpleExtends(\n    BaseException,\n    \"KeyboardInterrupt\",\n    \"Program interrupted by user.\"\n);\nconst GeneratorExit = simpleExtends(\n    BaseException,\n    \"GeneratorExit\",\n    \"Request that a generator exit.\"\n);\n\nconst Exception = simpleExtends(\n    BaseException,\n    \"Exception\",\n    \"Common base class for all non-exit exceptions.\"\n);\n\nconst StopIteration = complexExtends(\n    Exception,\n    \"StopIteration\",\n    \"Signal the end from iterator.__next__().\",\n    function init(args, kws) {\n        BaseExc_init.call(this, args, kws);\n        this.$value = args[0] || Sk.builtin.none.none$;\n    },\n    [\"value\"]\n);\n\nconst StopAsyncIteration = simpleExtends(\n    Exception,\n    \"StopAsyncIteration\",\n    \"Signal the end from iterator.__anext__().\"\n);\n\nconst ArithmeticError = simpleExtends(\n    Exception,\n    \"ArithmeticError\",\n    \"Base class for arithmetic errors.\"\n);\nconst FloatingPointError = simpleExtends(\n    ArithmeticError,\n    \"FloatingPointError\",\n    \"Floating point operation failed.\"\n);\nconst OverflowError = simpleExtends(\n    ArithmeticError,\n    \"OverflowError\",\n    \"Result too large to be represented.\"\n);\nconst ZeroDivisionError = simpleExtends(\n    ArithmeticError,\n    \"ZeroDivisionError\",\n    \"Second argument to a division or modulo operation was zero.\"\n);\nconst AssertionError = simpleExtends(Exception, \"AssertionError\", \"Assertion failed.\");\nconst AttributeError = simpleExtends(Exception, \"AttributeError\", \"Attribute not found.\");\nconst BufferError = simpleExtends(Exception, \"BufferError\", \"Buffer error.\");\nconst EOFError = simpleExtends(Exception, \"EOFError\", \"Read beyond end of file.\");\n\nconst ImportError = complexExtends(\n    Exception,\n    \"ImportError\",\n    \"Import can't find module, or can't find name in module.\",\n    function init(args, kws) {\n        BaseExc_init.call(this, args);\n        const [name, path] = Sk.abstr.copyKeywordsToNamedArgs(\n            \"ImportError\",\n            [\"name\", \"path\"],\n            [],\n            kws\n        );\n        this.$name = name;\n        this.$path = path;\n        if (args.length === 1) {\n            this.$msg = args[0];\n        }\n    },\n    [\"msg\", \"name\", \"path\"],\n    function str() {\n        if (Sk.builtin.checkString(this.$msg)) {\n            return this.$msg;\n        }\n        return BaseExc_str.call(this);\n    }\n);\n\nconst ModuleNotFoundError = simpleExtends(ImportError, \"ModuleNotFoundError\", \"Module not found.\");\n\nconst LookupError = simpleExtends(Exception, \"LookupError\", \"Base class for lookup errors.\");\nconst IndexError = simpleExtends(LookupError, \"IndexError\", \"Sequence index out of range.\");\nconst KeyError = complexExtends(\n    LookupError,\n    \"KeyError\",\n    \"Mapping key not found.\",\n    null,\n    null,\n    function str() {\n        if (this.args.v.length === 1) {\n            return this.args.v[0].$r(); // prevents printing an empty string\n        }\n        return BaseExc_str.call(this);\n    }\n);\n\nconst MemoryError = simpleExtends(Exception, \"MemoryError\", \"Out of memory.\");\n\nconst NameError = simpleExtends(Exception, \"NameError\", \"Name not found globally.\");\nconst UnboundLocalError = simpleExtends(\n    NameError,\n    \"UnboundLocalError\",\n    \"Local name referenced but not bound to a value.\"\n);\n\nconst OSError = complexExtends(\n    Exception,\n    \"OSError\",\n    \"Base class for I/O related errors.\",\n    function (args, kws) {\n        BaseExc_init.call(this, args, kws);\n    }\n);\n// const BlockingIOError = simpleExtends(OSError, \"BlockingIOError\", \"I/O operation would block.\");\n// const ChildProcessError = simpleExtends(OSError, \"ChildProcessError\", \"Child process error.\");\n// const ConnectionError = simpleExtends(OSError, \"ConnectionError\", \"Connection error.\");\n// const BrokenPipeError = simpleExtends(ConnectionError, \"BrokenPipeError\", \"Broken pipe.\");\n// const ConnectionAbortedError = simpleExtends(ConnectionError, \"ConnectionAbortedError\", \"Connection aborted.\");\n// const ConnectionRefusedError = simpleExtends(ConnectionError, \"ConnectionRefusedError\", \"Connection refused.\");\n// const ConnectionResetError = simpleExtends(ConnectionError, \"ConnectionResetError\", \"Connection reset.\");\n// const FileExistsError = simpleExtends(OSError, \"FileExistsError\", \"File already exists.\");\nconst FileNotFoundError = simpleExtends(OSError, \"FileNotFoundError\", \"File not found.\");\n// const InterruptedError = simpleExtends(OSError, \"InterruptedError\", \"Interrupted by signal.\");\n// const IsADirectoryError = simpleExtends(OSError, \"IsADirectoryError\", \"Operation doesn't work on directories.\");\n// const NotADirectoryError = simpleExtends(OSError, \"NotADirectoryError\", \"Operation only works on directories.\");\n// const PermissionError = simpleExtends(OSError, \"PermissionError\", \"Not enough permissions.\");\n// const ProcessLookupError = simpleExtends(OSError, \"ProcessLookupError\", \"Process not found.\");\nconst TimeoutError = simpleExtends(OSError, \"TimeoutError\", \"Timeout expired.\");\n\nconst ReferenceError = simpleExtends(\n    Exception,\n    \"ReferenceError\",\n    \"Weak ref proxy used after referent went away.\"\n);\n\nconst RuntimeError = simpleExtends(Exception, \"RuntimeError\", \"Unspecified run-time error.\");\nconst NotImplementedError = simpleExtends(\n    RuntimeError,\n    \"NotImplementedError\",\n    \"Method or function hasn't been implemented yet.\"\n);\nconst RecursionError = simpleExtends(RuntimeError, \"RecursionError\", \"Recursion limit exceeded.\");\n\nconst SyntaxError = complexExtends(\n    Exception,\n    \"SyntaxError\",\n    \"Invalid syntax.\",\n    function init(args, kws) {\n        // TODO: this doesn't actually get called any more??\n        BaseExc_init.call(this, args, kws);\n        if (args.length >= 1) {\n            this.$msg = args[0];\n        }\n        if (args.length === 2) {\n            const info = new Sk.builtin.tuple(args[1]).v;\n            this.$filename = info[0];\n            this.$lineno = info[1];\n            //console.debug(this, info);\n            // if info[2] is an array, then we break it up\n            if (Array.isArray(info[2].v)) {\n                if (Array.isArray(info[2].v[0].v)) {\n                    // Nested array?\n                    this.$offset = info[2].v[0].v[1];\n                    this.$end_lineno = info[2].v[1].v[0];\n                    this.$end_offset = info[2].v[1].v[1];\n                } else {\n                    // Flat array\n                    this.$offset = info[2].v[1];\n                    this.$end_lineno = info[2].v[2];\n                    this.$end_offset = info[2].v[3];\n                }\n            } else {\n                this.$offset = info[2];\n                this.$end_lineno = info[1];\n                this.$end_offset = info[2];\n            }\n            /*this.$offset = info[2].v[0].v[1];\n            this.$end_lineno = info[2].v[1].v[0];\n            this.$end_offset = info[2].v[1].v[1];*/\n            this.$text = info[3];\n            // TODO: acbart this just makes the traceback work for now, not actually getting the data yet\n        }\n    },\n    [\n        \"msg\",\n        \"filename\",\n        \"text\",\n        \"lineno\",\n        \"offset\",\n        \"end_lineno\",\n        \"end_offset\" /*\"print_file_and_line\"*/,\n    ],\n    function str() {\n        return BaseExc_str.call(this);\n    }\n);\nconst IndentationError = simpleExtends(SyntaxError, \"IndentationError\", \"Improper indentation.\");\nconst TabError = simpleExtends(\n    IndentationError,\n    \"TabError\",\n    \"Improper mixture of spaces and tabs.\"\n);\n\nconst SystemError = simpleExtends(\n    Exception,\n    \"SystemError\",\n    \"Internal error in the Skulpt interpreter.\"\n);\n\nconst TypeError = simpleExtends(Exception, \"TypeError\", \"Inappropriate argument type.\");\nconst ValueError = simpleExtends(\n    Exception,\n    \"ValueError\",\n    \"Inappropriate argument value (of correct type).\"\n);\n\nconst UnicodeError = simpleExtends(ValueError, \"UnicodeError\", \"Unicode related error.\");\n// these have some extra args - for now just keep them as simple extends\nconst UnicodeDecodeError = simpleExtends(\n    UnicodeError,\n    \"UnicodeDecodeError\",\n    \"Unicode decoding error.\"\n);\nconst UnicodeEncodeError = simpleExtends(\n    UnicodeError,\n    \"UnicodeEncodeError\",\n    \"Unicode encoding error.\"\n);\n// const UnicodeTranslateError = simpleExtends(UnicodeError, \"UnicodeTranslateError\", \"Unicode translation error.\");\n\n/**@todo we should support warnings */\n// const Warning = simpleExtends(Exception, \"Warning\", \"Base class for warning categories.\");\n// const DeprecationWarning = simpleExtends(Warning, \"DeprecationWarning\", \"Base class for warnings about deprecated features.\");\n// const PendingDeprecationWarning = simpleExtends(Warning, \"PendingDeprecationWarning\", \"Base class for warnings about features which will be deprecated\\nin the future.\");\n// const RuntimeWarning = simpleExtends(Warning, \"RuntimeWarning\", \"Base class for warnings about dubious runtime behavior.\");\n// const SyntaxWarning = simpleExtends(Warning, \"SyntaxWarning\", \"Base class for warnings about dubious syntax.\");\n// const UserWarning = simpleExtends(Warning, \"UserWarning\", \"Base class for warnings generated by user code.\");\n// const FutureWarning = simpleExtends(Warning, \"FutureWarning\", \"Base class for warnings about constructs that will change semantically\\nin the future.\");\n// const ImportWarning = simpleExtends(Warning, \"ImportWarning\", \"Base class for warnings about probable mistakes in module imports\");\n// const UnicodeWarning = simpleExtends(Warning, \"UnicodeWarning\", \"Base class for warnings about Unicode related problems, mostly\\nrelated to conversion problems.\");\n// const BytesWarning = simpleExtends(Warning, \"BytesWarning\", \"Base class for warnings about bytes and buffer related problems, mostly\\nrelated to conversion from str or comparing to str.\");\n// const ResourceWarning = simpleExtends(Warning, \"ResourceWarning\", \"Base class for warnings about resource usage.\");\n\nconst pyExc = {\n    BaseException,\n    SystemExit,\n    KeyboardInterrupt,\n    GeneratorExit,\n    Exception,\n    StopIteration,\n    StopAsyncIteration,\n    ArithmeticError,\n    FloatingPointError,\n    OverflowError,\n    ZeroDivisionError,\n    AssertionError,\n    AttributeError,\n    BufferError,\n    EOFError,\n    ImportError,\n    ModuleNotFoundError,\n    LookupError,\n    IndexError,\n    KeyError,\n    MemoryError,\n    NameError,\n    UnboundLocalError,\n    OSError,\n    IOError: OSError,\n    // BlockingIOError,\n    // ChildProcessError,\n    // ConnectionError,\n    // BrokenPipeError,\n    // ConnectionAbortedError,\n    // ConnectionRefusedError,\n    // ConnectionResetError,\n    // FileExistsError,\n    FileNotFoundError,\n    // InterruptedError,\n    // IsADirectoryError,\n    // NotADirectoryError,\n    // PermissionError,\n    // ProcessLookupError,\n    TimeoutError,\n    ReferenceError,\n    RuntimeError,\n    NotImplementedError,\n    RecursionError,\n    SyntaxError,\n    IndentationError,\n    TabError,\n    SystemError,\n    TypeError,\n    ValueError,\n    UnicodeError,\n    UnicodeDecodeError,\n    UnicodeEncodeError,\n    // UnicodeTranslateError,\n    // Warning,\n    // DeprecationWarning,\n    // PendingDeprecationWarning,\n    // RuntimeWarning,\n    // SyntaxWarning,\n    // UserWarning,\n    // FutureWarning,\n    // ImportWarning,\n    // UnicodeWarning,\n    // BytesWarning,\n    // ResourceWarning,\n};\n\nObject.assign(Sk.builtin, pyExc);\n\nSk.builtin.SuspensionError = simpleExtends(\n    Exception,\n    \"SuspensionError\",\n    \"Unsupported Suspension in code.\"\n);\n\nSk.builtin.ExternalError = Sk.abstr.buildNativeClass(\"ExternalError\", {\n    constructor: function ExternalError(...args) {\n        this.nativeError = args[0];\n        if (!Sk.builtin.checkString(this.nativeError)) {\n            args[0] = this.nativeError.toString();\n            if (args[0].startsWith(\"RangeError: Maximum call\")) {\n                args[0] = \"Maximum call stack size exceeded\";\n                return new RecursionError(...args);\n            }\n        }\n        Exception.apply(this, args);\n    },\n    base: Exception,\n});\n\n/**\n * @constructor\n */\nSk.builtin.frame = function (trace, index = 0) {\n    if (!(this instanceof Sk.builtin.frame)) {\n        return new Sk.builtin.frame(trace);\n    }\n    this.trace = trace;\n    this.index = index;\n    this.__class__ = Sk.builtin.frame;\n    return this;\n};\n\nSk.abstr.setUpInheritance(\"frame\", Sk.builtin.frame, Sk.builtin.object);\n\nSk.builtin.frame.prototype.tp$getattr = function (name) {\n    if (name != null && (Sk.builtin.checkString(name) || typeof name === \"string\")) {\n        var _name = name;\n\n        // get javascript string\n        if (Sk.builtin.checkString(name)) {\n            _name = Sk.ffi.remapToJs(name);\n        }\n\n        let line = this.trace.source;\n        if (line == null) {\n            if (this.trace.filename != null && this.trace.lineno != null) {\n                if (Sk.parse.linecache[this.trace.filename]) {\n                    line = Sk.parse.linecache[this.trace.filename][this.trace.lineno - 1];\n                }\n            }\n        }\n\n        switch (_name) {\n            case \"f_back\":\n                return Sk.builtin.none.none$;\n            case \"f_builtins\":\n                return Sk.builtin.none.none$;\n            case \"f_code\":\n                return Sk.builtin.none.none$;\n            case \"f_globals\":\n                return Sk.builtin.none.none$;\n            case \"f_lasti\":\n                return Sk.builtin.none.none$;\n            case \"f_lineno\":\n                return Sk.ffi.remapToPy(this.trace.lineno);\n            case \"f_line\":\n                return Sk.ffi.remapToPy(line);\n            case \"f_locals\":\n                return Sk.builtin.none.none$;\n            case \"f_trace\":\n                return Sk.builtin.none.none$;\n            case \"co_filename\":\n                return Sk.ffi.remapToPy(this.trace.filename);\n            case \"co_name\":\n                return Sk.ffi.remapToPy(this.trace.scope);\n        }\n    }\n\n    // if we have not returned yet, try the genericgetattr\n    return Sk.builtin.object.prototype.GenericGetAttr(name);\n};\nSk.builtin.frame.prototype[\"$r\"] = function () {\n    return new Sk.builtin.str(\"<frame object>\");\n};\nSk.exportSymbol(\"Sk.builtin.frame\", Sk.builtin.frame);\n\n/**\n * @constructor\n * @param {Object} err\n */\nSk.builtin.traceback = function (trace) {\n    if (!(this instanceof Sk.builtin.traceback)) {\n        return new Sk.builtin.traceback(trace);\n    }\n\n    this.trace = trace;\n\n    const lineno = Array.isArray(trace.lineno) ? trace.lineno[2] : trace.lineno || -1;\n\n    this.tb_lineno = new Sk.builtin.int_(lineno);\n    // TODO: Hack, you know this isn't right\n    this.tb_frame = new Sk.builtin.frame(trace);\n    this.tb_source = new Sk.builtin.str(trace.source || \"(Missing Source Code)\");\n\n    //tb_frame, tb_lasti, tb_lineno, tb_next\n\n    this.__class__ = Sk.builtin.traceback;\n\n    return this;\n};\n\nSk.abstr.setUpInheritance(\"traceback\", Sk.builtin.traceback, Sk.builtin.object);\nSk.builtin.traceback.fromList = function (traces) {\n    var current = Sk.builtin.traceback(traces[0]),\n        first = current;\n    for (var i = 1; i < traces.length; i++) {\n        current.tb_next = Sk.builtin.traceback(traces[i]);\n        current = current.tb_next;\n    }\n    current.tb_next = Sk.builtin.none.none$;\n    return first;\n};\nSk.builtin.traceback.prototype.tp$getattr = function (name) {\n    if (name != null && (Sk.builtin.checkString(name) || typeof name === \"string\")) {\n        var _name = name;\n\n        // get javascript string\n        if (Sk.builtin.checkString(name)) {\n            _name = Sk.ffi.remapToJs(name);\n        }\n\n        switch (_name) {\n            case \"tb_lineno\":\n            case \"tb_source\":\n            case \"tb_frame\":\n            case \"tb_next\":\n                return this[_name];\n        }\n    }\n\n    // if we have not returned yet, try the genericgetattr\n    return Sk.builtin.object.prototype.GenericGetAttr(name);\n};\nSk.builtin.traceback.prototype[\"$r\"] = function () {\n    return new Sk.builtin.str(\"<traceback object>\");\n};\nSk.exportSymbol(\"Sk.builtin.traceback\", Sk.builtin.traceback);\n\n// TODO: Extract into sys.exc_info(). Work out how the heck\n// to find out what exceptions are being processed by parent stack frames...\nSk.builtin.getExcInfo = function (e) {\n    const v = [e.ob$type || Sk.builtin.none.none$, e, Sk.builtin.none.none$];\n    // TODO create a Traceback object for the third tuple element\n\n    return new Sk.builtin.tuple(v);\n};\n", "/**\n * @constructor\n *\n * @param {Sk.builtin.func} func\n * @param {Sk.builtin.object} self\n *\n */\nSk.builtin.method = Sk.abstr.buildNativeClass(\"method\", {\n    constructor: function method(func, self) {\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.method,\n            \"bad call to method constructor, use 'new'\"\n        );\n        this.im_func = func;\n        this.im_self = self;\n        this.im_call = func.tp$call;\n    },\n    slots: {\n        $r() {\n            const def_name = \"?\";\n            let name =\n                this.im_func.tp$getattr(Sk.builtin.str.$qualname) ||\n                this.im_func.tp$getattr(Sk.builtin.str.$name);\n            name = (name && name.v) || def_name;\n            return new Sk.builtin.str(\n                \"<bound method \" + name + \" of \" + Sk.misceval.objectRepr(this.im_self) + \">\"\n            );\n        },\n        tp$hash() {\n            const selfhash = Sk.abstr.objectHash(this.im_self);\n            const funchash = Sk.abstr.objectHash(this.im_func);\n            return selfhash + funchash;\n        },\n        tp$call(args, kwargs) {\n            var im_call = this.im_call;\n            if (im_call === undefined) {\n                throw new Sk.builtin.TypeError(\n                    \"'\" + Sk.abstr.typeName(this.im_func) + \"' object is not callable\"\n                );\n            }\n            args = [this.im_self, ...args];\n            return im_call.call(this.im_func, args, kwargs);\n        },\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"method\", kwargs);\n            Sk.abstr.checkArgsLen(\"method\", args, 2, 2);\n            const func = args[0];\n            const self = args[1];\n            if (!Sk.builtin.checkCallable(func)) {\n                throw new Sk.builtin.TypeError(\"first argument must be callable\");\n            }\n            if (Sk.builtin.checkNone(self)) {\n                throw new Sk.builtin.TypeError(\"self must not be None\");\n            }\n            return new Sk.builtin.method(func, self);\n        },\n        tp$richcompare(other, op) {\n            if ((op != \"Eq\" && op != \"NotEq\") || !(other instanceof Sk.builtin.method)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            let eq;\n            try {\n                eq =\n                    Sk.misceval.richCompareBool(this.im_self, other.im_self, \"Eq\", false) &&\n                    this.im_func == other.im_func;\n            } catch (x) {\n                eq = false;\n            }\n            if (op == \"Eq\") {\n                return eq;\n            } else {\n                return !eq;\n            }\n        },\n        tp$descr_get(obj, obtype) {\n            return this;\n        },\n        tp$getattr(pyName, canSuspend) {\n            const descr = Sk.abstr.lookupSpecial(this, pyName);\n            if (descr !== undefined) {\n                return descr;\n            }\n            return this.im_func.tp$getattr(pyName, canSuspend);\n        },\n    },\n    getsets: {\n        __func__: {\n            $get() {\n                return this.im_func;\n            },\n        },\n        __self__: {\n            $get() {\n                return this.im_self;\n            },\n        },\n        __doc__: {\n            $get() {\n                return this.im_func.tp$getattr(Sk.builtin.str.$doc);\n            },\n        },\n    },\n    flags: { sk$unacceptableBase: true },\n});\n", "/**\n * @namespace Sk.misceval\n *\n * @description\n * Various function protocols that include suspension aware options\n * As well as handling some common pyObject operations to Javascript\n *\n */\nSk.misceval = {};\n\n/** @typedef {Sk.builtin.object}*/ var pyObject;\n\n/*\n  Suspension object format:\n  {resume: function() {...}, // the continuation - returns either another suspension or the return value\n   data: <copied down from innermost level>,\n   optional: <if true, can be resumed immediately (eg debug stops)>,\n   child: <Suspension, or null if we are the innermost level>,\n   $blk: <>, $loc: <>, $gbl: <>, $exc: <>, $err: <>, [$cell: <>],\n  }\n*/\n\n/**\n * @description\n * Hi kids lets make a suspension...\n *\n * @constructor\n * @param {function(?)=} resume A function to be called on resume. child is resumed first and its return value is passed to this function.\n * @param {Object=} child A child suspension. 'optional' will be copied from here if supplied.\n * @param {Object=} data Data attached to this suspension. Will be copied from child if not supplied.\n */\nSk.misceval.Suspension = function Suspension(resume, child, data) {\n    this.$isSuspension = true;\n    if (resume !== undefined && child !== undefined) {\n        this.resume = function () {\n            return resume(child.resume());\n        };\n    }\n    this.child = child;\n    this.optional = child !== undefined && child.optional;\n    if (data === undefined && child !== undefined) {\n        this.data = child.data;\n    } else {\n        this.data = data;\n    }\n};\nSk.exportSymbol(\"Sk.misceval.Suspension\", Sk.misceval.Suspension);\n\n/**\n * @description\n * Well this seems pretty obvious by the name what it should do..\n *\n * @param {Sk.misceval.Suspension} susp\n * @param {string=} message\n */\nSk.misceval.retryOptionalSuspensionOrThrow = function (susp, message) {\n    while (susp instanceof Sk.misceval.Suspension) {\n        if (!susp.optional) {\n            const err = new Sk.builtin.SuspensionError(\n                message || \"Cannot call a function that blocks or suspends here\"\n            );\n            let prev_susp = susp;\n            const tb = [];\n            while (prev_susp != null) {\n                if (prev_susp.$lineno) {\n                    // compile code added attributes so fill the traceback\n                    tb.push({\n                        filename: prev_susp.$filename,\n                        lineno: prev_susp.$lineno,\n                        colno: prev_susp.$colno,\n                    });\n                }\n                prev_susp = prev_susp.child;\n            }\n            tb.reverse();\n            err.traceback.push(...tb);\n            throw err;\n        }\n        susp = susp.resume();\n    }\n    return susp;\n};\nSk.exportSymbol(\n    \"Sk.misceval.retryOptionalSuspensionOrThrow\",\n    Sk.misceval.retryOptionalSuspensionOrThrow\n);\n\n/**\n * @description\n * Check if the given object is valid to use as an index. Only ints, or if the object has an `__index__` method.\n *\n * @param {pyObject} o - typically an {@link Sk.builtin.int_} legacy code might use a js number\n * @returns {boolean}\n */\nSk.misceval.isIndex = function (o) {\n    return (\n        o !== null &&\n        o !== undefined &&\n        (o.nb$index !== undefined || (typeof o === \"number\" && Number.isInteger(o)))\n    );\n};\nSk.exportSymbol(\"Sk.misceval.isIndex\", Sk.misceval.isIndex);\n\nfunction asIndex(index) {\n    if (index === null || index === undefined) {\n        return;\n    } else if (index.sk$int === true) {\n        // if we're an int or int subclass use the internal value - as per CPython\n        return index.v;\n    } else if (index.nb$index !== undefined) {\n        return index.nb$index(); // this slot will check the return value is a number / JSBI.BigInt.\n    } else if (typeof index === \"number\" && Number.isInteger(index)) {\n        return index;\n    }\n}\n\nfunction asIndexOrThrow(index, msg) {\n    const i = asIndex(index);\n    if (i !== undefined) {\n        return i;\n    }\n    msg = msg || \"'{tp$name}' object cannot be interpreted as an integer\";\n    msg = msg.replace(\"{tp$name}\", Sk.abstr.typeName(index));\n    throw new Sk.builtin.TypeError(msg);\n}\n\n/**\n *\n * @param {*} index\n *\n * @description\n * will return an integer javascript number\n * if the value is larger than Number.MAX_SAFE_INTEGER will return a BigInt\n * if the object passed is not a valid indexable object then it will return undefined\n * if you want to throw an error instead of returning undefined use {@link Sk.misceval.asIndexOrThrow}\n * If you know you want a number and not a BigInt - use {@link Sk.misceval.asIndexSized}\n */\nSk.misceval.asIndex = asIndex;\n\n/**\n *\n * @param {*} index\n * @param {Sk.builtin.Exception=} Err provided an excption type if you wish to throw an exception\n * @param {string} msg an option message if the index passed is not a valid indexable object\n *\n * @description\n * this function will always return a `Number` whose size is less than `Number.MAX_SAFE_INTEGER`\n * If you provide an err then this function will throw an error if the index is larger than `Number.MAX_SAFE_INTEGER`\n */\nSk.misceval.asIndexSized = function (index, Err, msg) {\n    const i = asIndexOrThrow(index, msg);\n    if (typeof i === \"number\") {\n        return i; // integer v property will by a javascript number if it is index sized\n    }\n    if (Err == null) {\n        return JSBI.lessThan(i, JSBI.__ZERO) ? -Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\n    }\n    throw new Err(\"cannot fit '\" + Sk.abstr.typeName(index) + \"' into an index-sized integer\");\n};\n\n/**\n * @function\n *\n * @param {pyObject|number} index - typically an {@link Sk.builtin.int_} legacy code might use a js number\n * @param {string=} msg - an optional message when throwing the TypeError\n * @throws {Sk.builtin.TypeError}\n *\n * @description\n * requires a pyObject - returns a string or integer depending on the size.\n * throws a TypeError that the object cannot be interpreted as an index\n * can provide a custom message\n * include {tp$name} in the custom message which will be replaced by the typeName of the object\n *\n * - converts the `Sk.builtin.int_`\n * - if the number is too large to be safe returns a string\n * @returns {number|BigInt|JSBI}\n */\nSk.misceval.asIndexOrThrow = asIndexOrThrow;\n\n/**\n * return u[v:w]\n * @ignore\n */\nSk.misceval.applySlice = function (u, v, w, canSuspend) {\n    return Sk.abstr.objectGetItem(u, new Sk.builtin.slice(v, w, null), canSuspend);\n};\nSk.exportSymbol(\"Sk.misceval.applySlice\", Sk.misceval.applySlice);\n\n/**\n * u[v:w] = x\n * @ignore\n */\nSk.misceval.assignSlice = function (u, v, w, x, canSuspend) {\n    const slice = new Sk.builtin.slice(v, w);\n    if (x === null) {\n        return Sk.abstr.objectDelItem(u, slice);\n    } else {\n        return Sk.abstr.objectSetItem(u, slice, x, canSuspend);\n    }\n};\nSk.exportSymbol(\"Sk.misceval.assignSlice\", Sk.misceval.assignSlice);\n\n/**\n * Note that this does no validation, just coercion.\n */\nSk.misceval.arrayFromArguments = function (args) {\n    // If args is not a single thing return as is\n    var it, i;\n    var res;\n    var arg;\n    if (args.length != 1) {\n        return args;\n    }\n    arg = args[0];\n    if (arg instanceof Sk.builtin.set) {\n        // this is a Sk.builtin.set\n        arg = arg.tp$iter().$obj;\n    } else if (arg instanceof Sk.builtin.dict) {\n        // this is a Sk.builtin.list\n        arg = Sk.builtin.dict.prototype[\"keys\"].func_code(arg);\n    }\n\n    // shouldn't else if here as the above may output lists to arg.\n    if (arg instanceof Sk.builtin.list || arg instanceof Sk.builtin.tuple) {\n        return arg.v;\n    } else if (Sk.builtin.checkIterable(arg)) {\n        // handle arbitrary iterable (strings, generators, etc.)\n        res = [];\n        for (it = Sk.abstr.iter(arg), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {\n            res.push(i);\n        }\n        return res;\n    }\n\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(arg) + \"' object is not iterable\");\n};\nSk.exportSymbol(\"Sk.misceval.arrayFromArguments\", Sk.misceval.arrayFromArguments);\n\n/**\n *\n * @constructor\n *\n * @param {Function} fn\n * @param {boolean=} [handlesOwnSuspensions=false] - Does it handle its own suspension?\n *\n * @description\n * Create a generic Python iterator that repeatedly calls a given JS function\n * until it returns 'undefined'. This function is useful for user defined Native classes\n *\n * @example\n * // some immutable tuple like class where the v property is an array\n * MyClass.prototype.tp$iter = function() {\n *   let i = 0;\n *   const len = this.v.length;\n *   return new Sk.miscival.iterator(() => i >= len ? this.v[i++] : undefined);\n * }\n * @extends {Sk.builtin.object}\n *\n */\nSk.misceval.iterator = Sk.abstr.buildIteratorClass(\"iterator\", {\n    constructor: function iterator(fn, handlesOwnSuspensions) {\n        this.tp$iternext = handlesOwnSuspensions\n            ? fn\n            : function (canSuspend) {\n                  let x = fn();\n                  if (canSuspend || !x.$isSuspension) {\n                      return x;\n                  } else {\n                      return Sk.misceval.retryOptionalSuspensionOrThrow(x);\n                  }\n              };\n    },\n    iternext: function (canSuspend) {\n        /* keep slot __next__ happy */\n        return this.tp$iternext(canSuspend);\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\n/**\n * for reversed comparison: Gt -> Lt, etc.\n * @ignore\n */\nSk.misceval.swappedOp_ = {\n    Eq: \"Eq\",\n    NotEq: \"NotEq\",\n    Lt: \"GtE\",\n    LtE: \"Gt\",\n    Gt: \"LtE\",\n    GtE: \"Lt\",\n    Is: \"IsNot\",\n    IsNot: \"Is\",\n    In_: \"NotIn\",\n    NotIn: \"In_\",\n};\n\nSk.misceval.opSymbols = {\n    Eq: \"==\",\n    NotEq: \"!=\",\n    Lt: \"<\",\n    LtE: \"<=\",\n    Gt: \">\",\n    GtE: \">=\",\n    Is: \"is\",\n    IsNot: \"is not\",\n    In_: \"in\",\n    NotIn: \"not in\",\n};\n\n/**\n * @function\n *\n * @param {pyObject} v\n * @param {pyObject} w\n * @param {string} op - `Eq`, `NotEq`, `Lt`, `LtE`, `Gt`, `GtE`, `Is`, `IsNot`, `In_`, `NotIn`\n * @param {boolean=} canSuspend\n *\n * @returns {boolean}\n *\n * @todo This implementation overrides the return value from a user defined dunder method since it returns a boolean\n * whereas Python will return the user defined return value.\n *\n * @throws {Sk.builtin.TypeError}\n */\nSk.misceval.richCompareBool = function (v, w, op, canSuspend) {\n    // v and w must be Python objects. will return Javascript true or false for internal use only\n    // if you want to return a value from richCompareBool to Python you must wrap as Sk.builtin.bool first\n    Sk.asserts.assert(v.sk$object && w.sk$object, \"JS object passed to richCompareBool\");\n    var ret, swapped_shortcut, shortcut;\n\n    const v_type = v.ob$type;\n    const w_type = w.ob$type;\n    const w_is_subclass =\n        w_type !== v_type && w_type.sk$baseClass === undefined && w_type.$isSubType(v_type);\n\n    // Python 2 has specific rules when comparing two different builtin types\n    // currently, this code will execute even if the objects are not builtin types\n    // but will fall through and not return anything in this section\n    if (\n        !Sk.__future__.python3 &&\n        v_type !== w_type &&\n        (op === \"GtE\" || op === \"Gt\" || op === \"LtE\" || op === \"Lt\")\n    ) {\n        // note: sets are omitted here because they can only be compared to other sets\n        const numeric_types = [Sk.builtin.float_, Sk.builtin.int_, Sk.builtin.lng, Sk.builtin.bool];\n        const sequence_types = [\n            Sk.builtin.dict,\n            Sk.builtin.enumerate,\n            Sk.builtin.filter_,\n            Sk.builtin.list,\n            Sk.builtin.map_,\n            Sk.builtin.str,\n            Sk.builtin.tuple,\n            Sk.builtin.zip_,\n        ];\n\n        const v_num_type = numeric_types.indexOf(v_type);\n        const v_seq_type = sequence_types.indexOf(v_type);\n        const w_num_type = numeric_types.indexOf(w_type);\n        const w_seq_type = sequence_types.indexOf(w_type);\n\n        // NoneTypes are considered less than any other type in Python\n        // note: this only handles comparing NoneType with any non-NoneType.\n        // Comparing NoneType with NoneType is handled further down.\n        if (v === Sk.builtin.none.none$) {\n            switch (op) {\n                case \"Lt\":\n                    return true;\n                case \"LtE\":\n                    return true;\n                case \"Gt\":\n                    return false;\n                case \"GtE\":\n                    return false;\n            }\n        }\n\n        if (w === Sk.builtin.none.none$) {\n            switch (op) {\n                case \"Lt\":\n                    return false;\n                case \"LtE\":\n                    return false;\n                case \"Gt\":\n                    return true;\n                case \"GtE\":\n                    return true;\n            }\n        }\n\n        // numeric types are always considered smaller than sequence types in Python\n        if (v_num_type !== -1 && w_seq_type !== -1) {\n            switch (op) {\n                case \"Lt\":\n                    return true;\n                case \"LtE\":\n                    return true;\n                case \"Gt\":\n                    return false;\n                case \"GtE\":\n                    return false;\n            }\n        }\n\n        if (v_seq_type !== -1 && w_num_type !== -1) {\n            switch (op) {\n                case \"Lt\":\n                    return false;\n                case \"LtE\":\n                    return false;\n                case \"Gt\":\n                    return true;\n                case \"GtE\":\n                    return true;\n            }\n        }\n\n        // in Python, different sequence types are ordered alphabetically\n        // by name so that dict < list < str < tuple\n        if (v_seq_type !== -1 && w_seq_type !== -1) {\n            switch (op) {\n                case \"Lt\":\n                    return v_seq_type < w_seq_type;\n                case \"LtE\":\n                    return v_seq_type <= w_seq_type;\n                case \"Gt\":\n                    return v_seq_type > w_seq_type;\n                case \"GtE\":\n                    return v_seq_type >= w_seq_type;\n            }\n        }\n    }\n\n    // handle identity and membership comparisons\n    if (op === \"Is\") {\n        if (v_type === w_type) {\n            if (v === w) {\n                return true;\n            } else if (v_type === Sk.builtin.float_) {\n                return v.v === w.v;\n            } else if (v_type === Sk.builtin.int_) {\n                if (typeof v.v === \"number\" && typeof v.v === \"number\") {\n                    return v.v === w.v;\n                }\n                return JSBI.equal(JSBI.BigInt(v.v), JSBI.BigInt(w.v));\n            }\n        }\n        return false;\n    }\n\n    if (op === \"IsNot\") {\n        if (v_type !== w_type) {\n            return true;\n        } else if (v_type === Sk.builtin.float_) {\n            return v.v !== w.v;\n        } else if (v_type === Sk.builtin.int_) {\n            if (typeof v.v === \"number\" && typeof v.v === \"number\") {\n                return v.v !== w.v;\n            }\n            return JSBI.notEqual(JSBI.BigInt(v.v), JSBI.BigInt(w.v));\n        }\n        return v !== w;\n    }\n\n    if (op === \"In\") {\n        return Sk.misceval.chain(Sk.abstr.sequenceContains(w, v, canSuspend), Sk.misceval.isTrue);\n    }\n    if (op === \"NotIn\") {\n        return Sk.misceval.chain(Sk.abstr.sequenceContains(w, v, canSuspend), function (x) {\n            return !Sk.misceval.isTrue(x);\n        });\n    }\n\n    // Call Javascript shortcut method if exists for either object\n\n    var op2shortcut = {\n        Eq: \"ob$eq\",\n        NotEq: \"ob$ne\",\n        Gt: \"ob$gt\",\n        GtE: \"ob$ge\",\n        Lt: \"ob$lt\",\n        LtE: \"ob$le\",\n    };\n\n    shortcut = op2shortcut[op];\n    // similar rules apply as with binops - prioritize the reflected ops of subtypes\n    // but different to binop - even if the swapped op is the same as the parent still call it\n    if (w_is_subclass) {\n        swapped_shortcut = op2shortcut[Sk.misceval.swappedOp_[op]];\n        if ((ret = w[swapped_shortcut](v)) !== Sk.builtin.NotImplemented.NotImplemented$) {\n            return Sk.misceval.isTrue(ret);\n        }\n    }\n    if ((ret = v[shortcut](w)) !== Sk.builtin.NotImplemented.NotImplemented$) {\n        return Sk.misceval.isTrue(ret);\n        // techincally this is not correct along with the compile code see #1252\n        // richcompare slots could return any pyObject ToDo - would require changing compile code\n    }\n\n    if (!w_is_subclass) {\n        swapped_shortcut = op2shortcut[Sk.misceval.swappedOp_[op]];\n        if ((ret = w[swapped_shortcut](v)) !== Sk.builtin.NotImplemented.NotImplemented$) {\n            return Sk.misceval.isTrue(ret);\n        }\n    }\n\n    if (!Sk.__future__.python3) {\n        const vcmp = Sk.abstr.lookupSpecial(v, Sk.builtin.str.$cmp);\n        if (vcmp) {\n            try {\n                ret = Sk.misceval.callsimArray(vcmp, [w]);\n                if (Sk.builtin.checkNumber(ret)) {\n                    ret = Sk.builtin.asnum$(ret);\n                    if (op === \"Eq\") {\n                        return ret === 0;\n                    } else if (op === \"NotEq\") {\n                        return ret !== 0;\n                    } else if (op === \"Lt\") {\n                        return ret < 0;\n                    } else if (op === \"Gt\") {\n                        return ret > 0;\n                    } else if (op === \"LtE\") {\n                        return ret <= 0;\n                    } else if (op === \"GtE\") {\n                        return ret >= 0;\n                    }\n                }\n\n                if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n                    throw new Sk.builtin.TypeError(\"comparison did not return an int\");\n                }\n            } catch (e) {\n                throw new Sk.builtin.TypeError(\"comparison did not return an int\");\n            }\n        }\n        const wcmp = Sk.abstr.lookupSpecial(w, Sk.builtin.str.$cmp);\n        if (wcmp) {\n            // note, flipped on return value and call\n            try {\n                ret = Sk.misceval.callsimArray(wcmp, [v]);\n                if (Sk.builtin.checkNumber(ret)) {\n                    ret = Sk.builtin.asnum$(ret);\n                    if (op === \"Eq\") {\n                        return ret === 0;\n                    } else if (op === \"NotEq\") {\n                        return ret !== 0;\n                    } else if (op === \"Lt\") {\n                        return ret > 0;\n                    } else if (op === \"Gt\") {\n                        return ret < 0;\n                    } else if (op === \"LtE\") {\n                        return ret >= 0;\n                    } else if (op === \"GtE\") {\n                        return ret <= 0;\n                    }\n                }\n\n                if (ret !== Sk.builtin.NotImplemented.NotImplemented$) {\n                    throw new Sk.builtin.TypeError(\"comparison did not return an int\");\n                }\n            } catch (e) {\n                throw new Sk.builtin.TypeError(\"comparison did not return an int\");\n            }\n        }\n        // handle special cases for comparing None with None or Bool with Bool\n        if (v === Sk.builtin.none.none$ && w === Sk.builtin.none.none$) {\n            // Javascript happens to return the same values when comparing null\n            // with null or true/false with true/false as Python does when\n            // comparing None with None or True/False with True/False\n\n            if (op === \"Eq\") {\n                return v.v === w.v;\n            }\n            if (op === \"NotEq\") {\n                return v.v !== w.v;\n            }\n            if (op === \"Gt\") {\n                return v.v > w.v;\n            }\n            if (op === \"GtE\") {\n                return v.v >= w.v;\n            }\n            if (op === \"Lt\") {\n                return v.v < w.v;\n            }\n            if (op === \"LtE\") {\n                return v.v <= w.v;\n            }\n        }\n    }\n\n    // handle equality comparisons for any remaining objects\n    if (op === \"Eq\") {\n        return v === w;\n    }\n    if (op === \"NotEq\") {\n        return v !== w;\n    }\n\n    const vname = Sk.abstr.typeName(v);\n    const wname = Sk.abstr.typeName(w);\n    throw new Sk.builtin.TypeError(\n        \"'\" +\n            Sk.misceval.opSymbols[op] +\n            \"' not supported between instances of '\" +\n            vname +\n            \"' and '\" +\n            wname +\n            \"'\"\n    );\n    //throw new Sk.builtin.ValueError(\"don't know how to compare '\" + vname + \"' and '\" + wname + \"'\");\n};\nSk.exportSymbol(\"Sk.misceval.richCompareBool\", Sk.misceval.richCompareBool);\n\n/**\n * @function\n * @description\n * calls the __repr__ of a pyObject or returns `<unknown>` if a JS object was passed\n * @param {*} obj\n * @returns {string}\n *\n */\nSk.misceval.objectRepr = function (obj) {\n    Sk.asserts.assert(obj !== undefined, \"trying to repr undefined\");\n    if (obj !== null && obj.$r) {\n        return obj.$r().v;\n    } else {\n        try {\n            // str goes through the common javascript cases or throws a TypeError;\n            return new Sk.builtin.str(obj).v;\n        } catch (e) {\n            if (e instanceof Sk.builtin.TypeError) {\n                return \"<unknown>\";\n            } else {\n                throw e;\n            }\n        }\n    }\n};\nSk.exportSymbol(\"Sk.misceval.objectRepr\", Sk.misceval.objectRepr);\n\nSk.misceval.opAllowsEquality = function (op) {\n    switch (op) {\n        case \"LtE\":\n        case \"Eq\":\n        case \"GtE\":\n            return true;\n    }\n    return false;\n};\nSk.exportSymbol(\"Sk.misceval.opAllowsEquality\", Sk.misceval.opAllowsEquality);\n\n/**\n * @function\n * @description\n * Decides whether a pyObject is True or not\n * @returns {boolean}\n * @param {*} x\n */\nSk.misceval.isTrue = function (x) {\n    if (x === true || x === Sk.builtin.bool.true$) {\n        return true;\n    }\n    if (x === false || x === Sk.builtin.bool.false$) {\n        return false;\n    }\n    if (x === null || x === undefined) {\n        return false;\n    }\n    if (x.nb$bool) {\n        return x.nb$bool(); // the slot wrapper takes care of converting to js Boolean\n    }\n    if (x.sq$length) {\n        // the slot wrapper takes care of the error message and converting to js int\n        return x.sq$length() !== 0;\n    }\n    return Boolean(x);\n};\nSk.exportSymbol(\"Sk.misceval.isTrue\", Sk.misceval.isTrue);\n\nSk.misceval.softspace_ = false;\nSk.misceval.print_ = function (x) {\n    var s;\n\n    function isspace(c) {\n        return c === \"\\n\" || c === \"\\t\" || c === \"\\r\";\n    }\n\n    if (Sk.misceval.softspace_) {\n        if (x !== \"\\n\") {\n            Sk.output(\" \");\n        }\n        Sk.misceval.softspace_ = false;\n    }\n\n    s = new Sk.builtin.str(x);\n\n    return Sk.misceval.chain(\n        Sk.importModule(\"sys\", false, true),\n        function (sys) {\n            return Sk.misceval.apply(\n                sys[\"$d\"][\"stdout\"][\"write\"],\n                undefined,\n                undefined,\n                undefined,\n                [sys[\"$d\"][\"stdout\"], s]\n            );\n        },\n        function () {\n            if (s.v.length === 0 || !isspace(s.v[s.v.length - 1]) || s.v[s.v.length - 1] === \" \") {\n                Sk.misceval.softspace_ = true;\n            }\n        }\n    );\n};\nSk.exportSymbol(\"Sk.misceval.print_\", Sk.misceval.print_);\n\n/**\n * @function\n * @description\n * Get a python object from a given namespace\n * @param {string} name\n * @param {Object=} other generally globals\n * @example\n * Sk.misceval.loadname(\"foo\", Sk.globals);\n */\nSk.misceval.loadname = function (name, other) {\n    var builtinModuleVersion, bi;\n    var v = other[name];\n    if (v !== undefined) {\n        if (typeof v === \"function\" && v.sk$object === undefined) {\n            return v();\n        }\n        return v;\n    }\n\n    // Check if we've overridden the builtin via the builtin's module\n    //console.log(\"MISCEVAL\", other, other[\"__builtins__\"], name);\n    //console.log(Object.keys(other));\n    //console.log(\"CONSIDERING LOADING\", name, Object.keys(other), Object.keys(Sk.globals), Sk.globals === other);\n    if (other[\"__builtins__\"] !== undefined) {\n        builtinModuleVersion = other[\"__builtins__\"].mp$lookup(new Sk.builtin.str(name));\n        if (builtinModuleVersion !== undefined) {\n            return builtinModuleVersion;\n        }\n    }\n\n    bi = Sk.builtins[name];\n    if (bi !== undefined) {\n        return bi;\n    }\n\n    throw new Sk.builtin.NameError(\"name '\" + Sk.unfixReserved(name) + \"' is not defined\");\n};\nSk.exportSymbol(\"Sk.misceval.loadname\", Sk.misceval.loadname);\n\n/**\n *\n * Notes on necessity for 'call()':\n *\n * Classes are callable in python to create an instance of the class. If\n * we're calling \"C()\" we cannot tell at the call site whether we're\n * calling a standard function, or instantiating a class.\n *\n * JS does not support user-level callables. So, we can't use the normal\n * prototype hierarchy to make the class inherit from a 'class' type\n * where the various tp$getattr, etc. methods would live.\n *\n * Instead, we must copy all the methods from the prototype of our class\n * type onto every instance of the class constructor function object.\n * That way, both \"C()\" and \"C.tp$getattr(...)\" can still work. This is\n * of course quite expensive.\n *\n * The alternative would be to indirect all calls (whether classes or\n * regular functions) through something like C.$call(...). In the case\n * of class construction, $call could then call the constructor after\n * munging arguments to pass them on. This would impose a penalty on\n * regular function calls unfortunately, as they would have to do the\n * same thing.\n *\n * Note that the same problem exists for function objects too (a \"def\"\n * creates a function object that also has properties). It just happens\n * that attributes on classes in python are much more useful and common\n * that the attributes on functions.\n *\n * Also note, that for full python compatibility we have to do the $call\n * method because any python object could have a __call__ method which\n * makes the python object callable too. So, unless we were to make\n * *all* objects simply (function(){...}) and use the dict to create\n * hierarchy, there would be no way to call that python user function. I\n * think I'm prepared to sacrifice __call__ support, or only support it\n * post-ECMA5 or something.\n *\n * Is using (function(){...}) as the only object type too crazy?\n * Probably. Better or worse than having two levels of function\n * invocation for every function call?\n *\n * For a class `C' with instance `inst' we have the following cases:\n *\n * 1. C.attr\n *\n * 2. C.staticmeth()\n *\n * 3. x = C.staticmeth; x()\n *\n * 4. inst = C()\n *\n * 5. inst.attr\n *\n * 6. inst.meth()\n *\n * 7. x = inst.meth; x()\n *\n * 8. inst(), where C defines a __call__\n *\n * Because in general these are accomplished by a helper function\n * (tp$getattr/setattr/slice/ass_slice/etc.) it seems appropriate to add\n * a call that generally just calls through, but sometimes handles the\n * unusual cases. Once ECMA-5 is more broadly supported we can revisit\n * and hopefully optimize.\n *\n * @param {Object} func the thing to call\n * @param {Object=} kwdict **kwargs\n * @param {Object=} varargseq **args\n * @param {Object=} kws keyword args or undef\n * @param {...*} args stuff to pass it\n *\n *\n * @todo I think all the above is out of date.\n * @ignore\n */\nSk.misceval.call = function (func, kwdict, varargseq, kws, args) {\n    args = Array.prototype.slice.call(arguments, 4);\n    // todo; possibly inline apply to avoid extra stack frame creation\n    return Sk.misceval.apply(func, kwdict, varargseq, kws, args);\n};\nSk.exportSymbol(\"Sk.misceval.call\", Sk.misceval.call);\n\n/**\n * @param {?Object} suspensionHandlers\n * @param {Object} func the thing to call\n * @param {Object=} kwdict **kwargs\n * @param {Object=} varargseq **args\n * @param {Object=} kws keyword args or undef\n * @param {...*} args stuff to pass it\n *\n *\n * @todo I think all the above is out of date.\n */\n\nSk.misceval.callAsync = function (suspensionHandlers, func, kwdict, varargseq, kws, args) {\n    args = Array.prototype.slice.call(arguments, 5);\n    // todo; possibly inline apply to avoid extra stack frame creation\n    return Sk.misceval.applyAsync(suspensionHandlers, func, kwdict, varargseq, kws, args);\n};\nSk.exportSymbol(\"Sk.misceval.callAsync\", Sk.misceval.callAsync);\n\nSk.misceval.callOrSuspend = function (func, kwdict, varargseq, kws, args) {\n    args = Array.prototype.slice.call(arguments, 4);\n    // todo; possibly inline apply to avoid extra stack frame creation\n    return Sk.misceval.applyOrSuspend(func, kwdict, varargseq, kws, args);\n};\nSk.exportSymbol(\"Sk.misceval.callOrSuspend\", Sk.misceval.callOrSuspend);\n\n/**\n * @param {Object} func the thing to call\n * @param {...*} args stuff to pass it\n * @ignore\n */\nSk.misceval.callsim = function (func, args) {\n    args = Array.prototype.slice.call(arguments, 1);\n    return Sk.misceval.apply(func, undefined, undefined, undefined, args);\n};\nSk.exportSymbol(\"Sk.misceval.callsim\", Sk.misceval.callsim);\n\n/**\n * @param {Object=} func the thing to call\n * @param {Array=} args an array of arguments to pass to the func\n * @param {Array=} kws an array of string/pyObject pairs to pass to the func as kwargs\n *\n * @description\n * Call a pyObject - if the object is not callable will throw a TypeError\n * Requires args to be a Javascript array.\n * kws should be an array of string/pyObject pairs as key/values\n */\nSk.misceval.callsimArray = function (func, args, kws) {\n    args = args || [];\n    return Sk.misceval.retryOptionalSuspensionOrThrow(\n        Sk.misceval.callsimOrSuspendArray(func, args, kws)\n    );\n};\nSk.exportSymbol(\"Sk.misceval.callsimArray\", Sk.misceval.callsimArray);\n\n/**\n * @param {?Object} suspensionHandlers any custom suspension handlers\n * @param {Object} func the thing to call\n * @param {...*} args stuff to pass it\n */\nSk.misceval.callsimAsync = function (suspensionHandlers, func, args) {\n    args = Array.prototype.slice.call(arguments, 2);\n    return Sk.misceval.applyAsync(suspensionHandlers, func, undefined, undefined, undefined, args);\n};\nSk.exportSymbol(\"Sk.misceval.callsimAsync\", Sk.misceval.callsimAsync);\n\n/**\n * @param {Object} func the thing to call\n * @param {...*} args stuff to pass it\n * @deprecated\n * @ignore\n */\nSk.misceval.callsimOrSuspend = function (func, args) {\n    args = Array.prototype.slice.call(arguments, 1);\n    return Sk.misceval.applyOrSuspend(func, undefined, undefined, undefined, args);\n};\nSk.exportSymbol(\"Sk.misceval.callsimOrSuspend\", Sk.misceval.callsimOrSuspend);\n\n/**\n * @description\n * Does the same thing as callsimOrSuspend without expensive call to\n * Array.slice.  Requires args+kws to be Javascript arrays.\n * The preferred method for calling a pyObject.\n *\n * @param {Object=} func the thing to call\n * @param {Array=} args an array of arguments to pass to the func\n * @param {Array=} kws an array of keyword arguments to pass to the func\n *\n */\nSk.misceval.callsimOrSuspendArray = function (func, args, kws) {\n    args = args || [];\n    if (func !== undefined && func.tp$call) {\n        return func.tp$call(args, kws);\n    } else {\n        // Slow path handles things like calling native JS fns\n        // (perhaps we should stop supporting that), and weird\n        // detection of the __call__ method (everything should use tp$call)\n        return Sk.misceval.applyOrSuspend(func, undefined, undefined, kws, args);\n    }\n};\nSk.exportSymbol(\"Sk.misceval.callsimOrSuspendArray\", Sk.misceval.callsimOrSuspendArray);\n\n/**\n * Wrap Sk.misceval.applyOrSuspend, but throw an error if we suspend\n * @ignore\n */\nSk.misceval.apply = function (func, kwdict, varargseq, kws, args) {\n    var r = Sk.misceval.applyOrSuspend(func, kwdict, varargseq, kws, args);\n    if (r instanceof Sk.misceval.Suspension) {\n        return Sk.misceval.retryOptionalSuspensionOrThrow(r);\n    } else {\n        return r;\n    }\n};\nSk.exportSymbol(\"Sk.misceval.apply\", Sk.misceval.apply);\n\n/**\n * Wraps anything that can return an Sk.misceval.Suspension, and returns a\n * JS Promise with the result. Also takes an object map of suspension handlers:\n * pass in {\"suspType\": function (susp) {} }, and your function will be called\n * with the Suspension object if susp.type==\"suspType\". The type \"*\" will match\n * all otherwise unhandled suspensions.\n *\n * A suspension handler should return a Promise yielding the return value of\n * r.resume() - ie, either the final return value of this call or another\n * Suspension. That is, the null suspension handler is:\n *\n *     function handler(susp) {\n *       return new Promise(function(resolve, reject) {\n *         try {\n *           resolve(susp.resume());\n *         } catch(e) {\n *           reject(e);\n *         }\n *       });\n *     }\n *\n * Alternatively, a handler can return null to perform the default action for\n * that suspension type.\n *\n * (Note: do *not* call asyncToPromise() in a suspension handler; this will\n * create a new Promise object for each such suspension that occurs)\n *\n * asyncToPromise() returns a Promise that will be resolved with the final\n * return value, or rejected with an exception if one is thrown.\n *\n * @param{function()} suspendablefn returns either a result or a Suspension\n * @param{Object=} suspHandlers an object map of suspension handlers\n */\nSk.misceval.asyncToPromise = function (suspendablefn, suspHandlers) {\n    return new Promise(function (resolve, reject) {\n        try {\n            var r = suspendablefn();\n\n            (function handleResponse(r) {\n                try {\n                    // jsh*nt insists these be defined outside the loop\n                    var resume = function () {\n                        try {\n                            handleResponse(r.resume());\n                        } catch (e) {\n                            reject(e);\n                        }\n                    };\n                    var resumeWithData = function resolved(x) {\n                        try {\n                            r.data[\"result\"] = x;\n                            resume();\n                        } catch (e) {\n                            reject(e);\n                        }\n                    };\n                    var resumeWithError = function rejected(e) {\n                        try {\n                            r.data[\"error\"] = e;\n                            resume();\n                        } catch (ex) {\n                            reject(ex);\n                        }\n                    };\n\n                    while (r instanceof Sk.misceval.Suspension) {\n                        var handler =\n                            suspHandlers && (suspHandlers[r.data[\"type\"]] || suspHandlers[\"*\"]);\n\n                        if (handler) {\n                            var handlerPromise = handler(r);\n                            if (handlerPromise) {\n                                handlerPromise.then(handleResponse, reject);\n                                return;\n                            }\n                        }\n\n                        if (r.data[\"type\"] == \"Sk.promise\") {\n                            r.data[\"promise\"].then(resumeWithData, resumeWithError);\n                            return;\n                        } else if (r.data[\"type\"] == \"Sk.yield\") {\n                            // Assumes all yields are optional, as Sk.setTimeout might\n                            // not be able to yield.\n                            //Sk.setTimeout(resume, 0);\n                            Sk.global[\"setImmediate\"](resume);\n                            return;\n                        } else if (r.data[\"type\"] == \"Sk.delay\") {\n                            //Sk.setTimeout(resume, 1);\n                            Sk.global[\"setImmediate\"](resume);\n                            return;\n                        } else if (r.optional) {\n                            // Unhandled optional suspensions just get\n                            // resumed immediately, and we go around the loop again.\n                            r = r.resume();\n                        } else {\n                            // Unhandled, non-optional suspension.\n                            throw new Sk.builtin.SuspensionError(\n                                \"Unhandled non-optional suspension of type '\" + r.data[\"type\"] + \"'\"\n                            );\n                        }\n                    }\n\n                    resolve(r);\n                } catch (e) {\n                    reject(e);\n                }\n            })(r);\n        } catch (e) {\n            reject(e);\n        }\n    });\n};\nSk.exportSymbol(\"Sk.misceval.asyncToPromise\", Sk.misceval.asyncToPromise);\n\nSk.misceval.applyAsync = function (suspHandlers, func, kwdict, varargseq, kws, args) {\n    return Sk.misceval.asyncToPromise(function () {\n        return Sk.misceval.applyOrSuspend(func, kwdict, varargseq, kws, args);\n    }, suspHandlers);\n};\nSk.exportSymbol(\"Sk.misceval.applyAsync\", Sk.misceval.applyAsync);\n\n/**\n * Chain together a set of functions, each of which might return a value or\n * an Sk.misceval.Suspension. Each function is called with the return value of\n * the preceding function, but does not see any suspensions. If a function suspends,\n * Sk.misceval.chain() returns a suspension that will resume the chain once an actual\n * return value is available.\n *\n * The idea is to allow a Promise-like chaining of possibly-suspending steps without\n * repeating boilerplate suspend-and-resume code.\n *\n * For example, imagine we call Sk.misceval.chain(x, f).\n *  - If x is a value, we return f(x).\n *  - If x is a suspension, we suspend. We will suspend and resume until we get a\n *    return value, and then we will return f(<resumed-value).\n * This can be expanded to an arbitrary number of functions\n * (eg Sk.misceval.chain(x, f, g), which is equivalent to chain(chain(x, f), g).)\n * @template T\n * @param {T}              initialValue\n * @param {...function(T)} chainedFns\n */\nSk.misceval.chain = function (initialValue, chainedFns) {\n    // We try to minimse overhead when nothing suspends (the common case)\n    var i = 1,\n        value = initialValue,\n        j,\n        fs;\n\n    while (true) {\n        if (i == arguments.length) {\n            return value;\n        }\n        if (value && value.$isSuspension) {\n            break;\n        } // oops, slow case\n        value = arguments[i](value);\n        i++;\n    }\n\n    // Okay, we've suspended at least once, so we're taking the slow(er) path.\n\n    // Copy our remaining arguments into an array (inline, because passing\n    // \"arguments\" out of a function kills the V8 optimiser).\n    // (discussion: https://github.com/skulpt/skulpt/pull/552)\n    fs = new Array(arguments.length - i);\n\n    for (j = 0; j < arguments.length - i; j++) {\n        fs[j] = arguments[i + j];\n    }\n\n    j = 0;\n\n    return (function nextStep(r) {\n        while (j < fs.length) {\n            if (r instanceof Sk.misceval.Suspension) {\n                return new Sk.misceval.Suspension(nextStep, r);\n            }\n\n            r = fs[j](r);\n            j++;\n        }\n\n        return r;\n    })(value);\n};\nSk.exportSymbol(\"Sk.misceval.chain\", Sk.misceval.chain);\n\n/**\n * Catch any exceptions thrown by a function, or by resuming any suspension it\n * returns.\n *\n *     var result = Sk.misceval.tryCatch(asyncFunc, function(err) {\n *       console.log(err);\n *     });\n *\n * Because exceptions are returned asynchronously aswell you can't catch them\n * with a try/catch. That's what this function is for.\n */\nSk.misceval.tryCatch = function (tryFn, catchFn) {\n    var r;\n\n    try {\n        r = tryFn();\n    } catch (e) {\n        return catchFn(e);\n    }\n\n    if (r instanceof Sk.misceval.Suspension) {\n        var susp = new Sk.misceval.Suspension(undefined, r);\n        susp.resume = function () {\n            return Sk.misceval.tryCatch(r.resume, catchFn);\n        };\n        return susp;\n    } else {\n        return r;\n    }\n};\nSk.exportSymbol(\"Sk.misceval.tryCatch\", Sk.misceval.tryCatch);\n\n/**\n * @function\n * @description\n * Perform a suspension-aware for-each on an iterator, without\n * blowing up the stack.\n * forFn() is called for each element in the iterator, with two\n * arguments: the current element and the previous return value\n * of forFn() (or initialValue on the first call). In this way,\n * iterFor() can be used as a simple for loop, or alternatively\n * as a 'reduce' operation. The return value of the final call to\n * forFn() will be the return value of iterFor() (after all\n * suspensions are resumed, that is; if the iterator is empty then\n * initialValue will be returned.)\n *\n * The iteration can be terminated early, by returning\n * an instance of Sk.misceval.Break. If an argument is given to\n * the Sk.misceval.Break() constructor, that value will be\n * returned from iterFor(). It is therefore possible to use\n * iterFor() on infinite iterators.\n *\n * @param {*} iter\n * @param {function(pyObject,*=)} forFn\n * @param {*=} initialValue\n */\nSk.misceval.iterFor = function (iter, forFn, initialValue) {\n    var prevValue = initialValue;\n\n    var breakOrIterNext = function (r) {\n        prevValue = r;\n        return r instanceof Sk.misceval.Break ? r : iter.tp$iternext(true);\n    };\n\n    return (function nextStep(i) {\n        while (i !== undefined) {\n            if (i instanceof Sk.misceval.Suspension) {\n                return new Sk.misceval.Suspension(nextStep, i);\n            }\n\n            if (i === Sk.misceval.Break || i instanceof Sk.misceval.Break) {\n                return i.brValue;\n            }\n\n            i = Sk.misceval.chain(forFn(i, prevValue), breakOrIterNext);\n        }\n        return prevValue;\n    })(iter.tp$iternext(true));\n};\nSk.exportSymbol(\"Sk.misceval.iterFor\", Sk.misceval.iterFor);\n\n/**\n * @function\n * @description\n *\n * As per iterFor but with an array rather than a python iterable\n * Useful for iterating over args where doing so could result in a suspension\n *\n * @param {Array} args\n * @param {function(pyObject,*=)} forFn\n * @param {*=} initialValue\n */\nSk.misceval.iterArray = function (args, forFn, initialValue) {\n    Sk.asserts.assert(Array.isArray(args), \"iterArgs requires an array\");\n    let i = 0;\n    return Sk.misceval.iterFor({ tp$iternext: () => args[i++] }, forFn, initialValue);\n};\n\n/**\n * @function\n *\n * @description\n * Convert a Python iterable into a javascript array\n *\n * @param {pyObject} iterable\n * @param {boolean=} canSuspend - Can this function suspend\n *\n * @returns {!Array}\n */\nSk.misceval.arrayFromIterable = function (iterable, canSuspend) {\n    if (iterable === undefined) {\n        return [];\n    }\n    if (iterable.ht$type === undefined && iterable.sk$asarray !== undefined) {\n        // use sk$asarray only if we're a builtin\n        return iterable.sk$asarray();\n    }\n    const L = [];\n    const ret = Sk.misceval.chain(\n        Sk.misceval.iterFor(Sk.abstr.iter(iterable), (i) => {\n            L.push(i);\n        }),\n        () => L\n    );\n    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n};\n\n/**\n * A special value to return from an iterFor() function,\n * to abort the iteration. Optionally supply a value for iterFor() to return\n * (defaults to 'undefined')\n *\n * @constructor\n * @param {*=}  brValue\n */\nSk.misceval.Break = function (brValue) {\n    if (!(this instanceof Sk.misceval.Break)) {\n        return new Sk.misceval.Break(brValue);\n    }\n\n    this.brValue = brValue;\n};\nSk.exportSymbol(\"Sk.misceval.Break\", Sk.misceval.Break);\n\n/**\n * same as Sk.misceval.call except args is an actual array, rather than\n * varargs.\n * @deprecated\n * @ignore\n */\nSk.misceval.applyOrSuspend = function (func, kwdict, varargseq, kws, args) {\n    var fcall;\n    var it, i;\n\n    if (func == null || func === Sk.builtin.none.none$) {\n        throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(func) + \"' object is not callable\");\n    }\n\n    if (typeof func === \"function\" && func.tp$call === undefined) {\n        func = new Sk.builtin.func(func);\n    }\n\n    fcall = func.tp$call;\n    if (fcall !== undefined) {\n        if (varargseq) {\n            for (\n                it = varargseq.tp$iter(), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                args.push(i);\n            }\n        }\n\n        if (kwdict) {\n            for (\n                it = Sk.abstr.iter(kwdict), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                if (!Sk.builtin.checkString(i)) {\n                    throw new Sk.builtin.TypeError(\"Function keywords must be strings\");\n                }\n                kws.push(i.v);\n                kws.push(Sk.abstr.objectGetItem(kwdict, i, false));\n            }\n        }\n        return fcall.call(func, args, kws, kwdict);\n    }\n\n    // todo; can we push this into a tp$call somewhere so there's\n    // not redundant checks everywhere for all of these __x__ ones?\n    fcall = func.__call__;\n    if (fcall !== undefined) {\n        // func is actually the object here because we got __call__\n        // from it. todo; should probably use descr_get here\n        args.unshift(func);\n        return Sk.misceval.apply(fcall, kwdict, varargseq, kws, args);\n    }\n\n    throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(func) + \"' object is not callable\");\n};\nSk.exportSymbol(\"Sk.misceval.applyOrSuspend\", Sk.misceval.applyOrSuspend);\n\n/**\n * Do the boilerplate suspension stuff.\n */\nSk.misceval.promiseToSuspension = function (promise) {\n    var suspension = new Sk.misceval.Suspension();\n\n    suspension.resume = function () {\n        if (suspension.data[\"error\"]) {\n            throw suspension.data[\"error\"];\n        }\n\n        return suspension.data[\"result\"];\n    };\n\n    suspension.data = {\n        type: \"Sk.promise\",\n        promise: promise,\n    };\n\n    return suspension;\n};\nSk.exportSymbol(\"Sk.misceval.promiseToSuspension\", Sk.misceval.promiseToSuspension);\n\n/**\n * @function\n * @description\n * Constructs a class object given a code object representing the body\n * of the class, the name of the class, and the list of bases.\n *\n * There are no \"old-style\" classes in Skulpt, so use the user-specified\n * metaclass (todo;) if there is one, the type of the 0th base class if\n * there's bases, or otherwise the 'type' type.\n *\n * The func code object is passed a (js) dict for its locals which it\n * stores everything into.\n *\n * The metaclass is then called as metaclass(name, bases, locals) and\n * should return a newly constructed class object.\n *\n */\nSk.misceval.buildClass = function (globals, func, name, bases, cell) {\n    // todo; metaclass\n    var klass;\n    var meta = Sk.builtin.type;\n\n    var l_cell = cell === undefined ? {} : cell;\n    var locals = {};\n\n    // init the dict for the class\n    func(globals, locals, l_cell);\n    // ToDo: check if func contains the __meta__ attribute\n    // or if the bases contain __meta__\n    // new Syntax would be different\n\n    // file's __name__ is class's __module__\n    if (globals[\"__name__\"]) {\n        // some js modules haven't set their module name and we shouldn't set a dictionary value to be undefined that should be equivalent to deleting a value;\n        locals.__module__ = globals[\"__name__\"];\n    }\n    var _name = new Sk.builtin.str(name);\n    var _bases = new Sk.builtin.tuple(bases);\n    var _locals = [];\n    var key;\n\n    // build array for python dict\n    for (key in locals) {\n        if (!locals.hasOwnProperty(key)) {\n            //The current property key not a direct property of p\n            continue;\n        }\n        _locals.push(new Sk.builtin.str(key)); // push key\n        _locals.push(locals[key]); // push associated value\n    }\n    _locals = new Sk.builtin.dict(_locals);\n\n    klass = Sk.misceval.callsimArray(meta, [_name, _bases, _locals]);\n\n    return klass;\n};\nSk.exportSymbol(\"Sk.misceval.buildClass\", Sk.misceval.buildClass);\n\nSk.misceval.handleTraceback = function (\n    err,\n    currLineNo,\n    currColNo,\n    currSource,\n    filename,\n    scopeName\n) {\n    if (err instanceof Sk.builtin.TimeoutError) {\n        Sk.execStart = Date.now();\n        Sk.execPaused = 0;\n    }\n    if (!(err instanceof Sk.builtin.BaseException)) {\n        err = new Sk.builtin.ExternalError(err);\n    }\n    Sk.err = err;\n    err.traceback.push({\n        lineno: currLineNo,\n        colno: currColNo,\n        source: currSource,\n        filename: filename,\n        scope: scopeName,\n    });\n    return err;\n};\nSk.exportSymbol(\"Sk.misceval.handleTraceback\", Sk.misceval.handleTraceback);\n\nSk.misceval.startTimer = function () {\n    if (typeof Sk.execStart === \"undefined\") {\n        Sk.execStart = Date.now();\n        Sk.execPaused = 0;\n    }\n};\nSk.exportSymbol(\"Sk.misceval.startTimer\", Sk.misceval.startTimer);\n\nSk.misceval.resetYield = function () {\n    if (typeof Sk.lastYield === \"undefined\") {\n        Sk.lastYield = Date.now();\n    }\n};\nSk.exportSymbol(\"Sk.misceval.resetYield\", Sk.misceval.resetYield);\n\nSk.misceval.pauseTimer = function () {\n    Sk.execPaused = Date.now();\n};\nSk.exportSymbol(\"Sk.misceval.pauseTimer\", Sk.misceval.pauseTimer);\n\nSk.misceval.unpauseTimer = function () {\n    Sk.execPaused = Date.now() - Sk.execPaused;\n    Sk.execPausedAmount += Sk.execPaused;\n};\nSk.exportSymbol(\"Sk.misceval.unpauseTimer\", Sk.misceval.unpauseTimer);\n\nSk.misceval.timeoutCheck = function (d) {\n    if (Sk.execLimit !== null && d - Sk.execStart - Sk.execPausedAmount > Sk.execLimit) {\n        let shouldContinue = null;\n        if (Sk.timeoutHandler) {\n            Sk.misceval.pauseTimer();\n            shouldContinue = Sk.timeoutHandler(\n                d - Sk.execStart - Sk.execPausedAmount,\n                Sk.execLimit\n            );\n            Sk.misceval.unpauseTimer();\n        }\n        if (!shouldContinue) {\n            throw new Sk.builtin.TimeoutError(Sk.timeoutMsg());\n        }\n    }\n};\nSk.exportSymbol(\"Sk.misceval.timeoutCheck\", Sk.misceval.timeoutCheck);\n\nSk.misceval.injectSusp = function (\n    $child,\n    $blk,\n    $loc,\n    $gbl,\n    $exc,\n    $err,\n    $postfinally,\n    $filename,\n    $lineno,\n    $colno,\n    $source,\n    $tmps\n) {\n    var susp = new Sk.misceval.Suspension();\n    susp.child = $child;\n    susp.data = susp.child.data;\n    susp.$blk = $blk;\n    susp.$loc = $loc;\n    susp.$gbl = $gbl;\n    susp.$exc = $exc;\n    susp.$err = $err;\n    susp.$postfinally = $postfinally;\n    susp.$filename = $filename;\n    susp.$lineno = $lineno;\n    susp.$colno = $colno;\n    susp.source = $source;\n    susp.optional = susp.child.optional;\n    susp.$tmps = $tmps;\n    return susp;\n};\nSk.exportSymbol(\"Sk.misceval.injectSusp\", Sk.misceval.injectSusp);\n\nSk.misceval.errorUL = function (mangled) {\n    throw new Sk.builtin.UnboundLocalError(\n        \"local variable '\" + mangled + \"' referenced before assignment\"\n    );\n};\nSk.exportSymbol(\"Sk.misceval.errorUL\", Sk.misceval.errorUL);\n\nSk.misceval.loadattr = function (val, mname) {\n    const $ret = val.tp$getattr(mname, true);\n    if ($ret === undefined) {\n        const error_name = val.sk$type\n            ? \"type object '\" + val.prototype.tp$name + \"'\"\n            : \"'\" + Sk.abstr.typeName(val) + \"' object\";\n        throw new Sk.builtin.AttributeError(\n            error_name + \" has no attribute '\" + mname.$jsstr() + \"'\"\n        );\n    }\n    return $ret;\n    /*out(\"$ret = \", val, \".tp$getattr(\", mname, \", true);\");\n                    out(\"\\nif ($ret === undefined) {\");\n                    out(\"\\nconst error_name =\", val, \".sk$type ? \\\"type object '\\\" +\", val, \".prototype.tp$name + \\\"'\\\" : \\\"'\\\" + Sk.abstr.typeName(\", val, \") + \\\"' object\\\";\");\n                    out(\"\\nthrow new Sk.builtin.AttributeError(error_name + \\\" has no attribute '\\\" + \", mname, \".$jsstr() + \\\"'\\\");\");\n                    out(\"\\n};\");*/\n};\nSk.exportSymbol(\"Sk.misceval.loadattr\", Sk.misceval.loadattr);\n", "/**\n *\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.func} callable\n * @param {Sk.builtin.object} sentinel - if reached returns undefined\n * @private\n */\nSk.builtin.callable_iter_ = Sk.abstr.buildIteratorClass(\"callable_iterator\", {\n    constructor: function callable_iter(callable, sentinel) {\n        if (!Sk.builtin.checkCallable(callable)) {\n            throw new Sk.builtin.TypeError(\"iter(v, w): v must be callable\");\n        }\n        this.$callable = callable;\n        this.$sentinel = sentinel;\n        this.$flag = false;\n    },\n    iternext(canSuspend) {\n        let ret;\n        if (this.$flag === true) {\n            // Iterator has already completed\n            return undefined;\n        }\n        if (canSuspend) {\n            ret = Sk.misceval.callsimOrSuspendArray(this.$callable, []);\n            return Sk.misceval.chain(ret, (r) => {\n                if (Sk.misceval.richCompareBool(r, this.$sentinel, \"Eq\", true)) {\n                    this.$flag = true;\n                    return undefined;\n                } else {\n                    return r;\n                }\n            });\n        } else {\n            ret = Sk.misceval.callsimArray(this.$callable, []);\n            if (Sk.misceval.richCompareBool(ret, this.$sentinel, \"Eq\", false)) {\n                this.$flag = true;\n                return undefined;\n            } else {\n                return ret;\n            }\n        }\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.object} seq\n * @private\n */\nSk.builtin.seq_iter_ = Sk.abstr.buildIteratorClass(\"iterator\", {\n    constructor: function seq_iter(seq) {\n        this.$index = 0;\n        this.$seq = seq;\n    },\n    iternext(canSuspend) {\n        let ret;\n        ret = Sk.misceval.tryCatch(\n            () => {\n                return this.$seq.mp$subscript(new Sk.builtin.int_(this.$index++), canSuspend);\n            },\n            (e) => {\n                if (e instanceof Sk.builtin.IndexError || e instanceof Sk.builtin.StopIteration) {\n                    this.gi$ret = e.$value || Sk.builtin.none.none$;\n                    return undefined;\n                } else {\n                    throw e;\n                }\n            }\n        );\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    methods: {\n        __length_hint__: {\n            $flags: { NoArgs: true },\n            $meth() {\n                if (this.$seq.sq$length) {\n                    // sq$length will return Sk.miseval.asIndex\n                    return this.$seq.sq$length() - this.$index;\n                } else {\n                    throw new Sk.builtin.NotImplementedError(\n                        \"len is not implemented for \" + Sk.abstr.typeName(this.$seq)\n                    );\n                }\n            },\n        },\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\nSk.exportSymbol(\"Sk.builtin.callable_iter_\", Sk.builtin.callable_iter_);\n", "/**\n * @constructor\n * @param {Array} L\n *\n * @extends {Sk.builtin.object}\n */\nSk.builtin.list = Sk.abstr.buildNativeClass(\"list\", {\n    constructor: function list(L) {\n        // this is an internal function and should be called with an array object\n        if (L === undefined) {\n            L = [];\n        } else if (!Array.isArray(L)) {\n            L = Sk.misceval.arrayFromIterable(L);\n            // internal calls to constructor can't suspend - avoid using this;\n        }\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.list,\n            \"bad call to list, use 'new' with an Array of python objects\"\n        );\n        this.v = L;\n        this.in$repr = false;\n    },\n    slots: /** @lends {Sk.builtin.list.prototype}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$hash: Sk.builtin.none.none$,\n        tp$doc: \"Built-in mutable sequence.\\n\\nIf no argument is given, the constructor creates a new empty list.\\nThe argument must be an iterable if specified.\",\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            // this will be an Sk.builtin.list.prototype or a sk$klass.prototype that inherits from Sk.builtin.list.prototype\n            Sk.abstr.checkNoKwargs(\"list\", kwargs);\n            Sk.abstr.checkArgsLen(\"list\", args, 0, 1);\n            return Sk.misceval.chain(Sk.misceval.arrayFromIterable(args[0], true), (L) => {\n                this.v = L;\n            });\n        },\n        $r() {\n            if (this.in$repr) {\n                return new Sk.builtin.str(\"[...]\");\n            }\n            this.in$repr = true;\n            const ret = this.v.map((x) => Sk.misceval.objectRepr(x));\n            this.in$repr = false;\n            return new Sk.builtin.str(\"[\" + ret.join(\", \") + \"]\");\n        },\n        tp$richcompare: Sk.generic.seqCompare,\n        tp$iter() {\n            return new list_iter_(this);\n        },\n\n        // sequence and mapping slots\n        sq$length() {\n            return this.v.length;\n        },\n        sq$concat(other) {\n            if (!(other instanceof Sk.builtin.list)) {\n                throw new Sk.builtin.TypeError(\"can only concatenate list to list\");\n            }\n            return new Sk.builtin.list(this.v.concat(other.v));\n        },\n        sq$contains(item) {\n            for (\n                let it = this.tp$iter(), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                if (i === item || Sk.misceval.richCompareBool(i, item, \"Eq\")) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        sq$repeat(n) {\n            if (!Sk.misceval.isIndex(n)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\"\n                );\n            }\n            n = Sk.misceval.asIndexSized(n, Sk.builtin.OverflowError);\n            if (n * this.v.length > Number.MAX_SAFE_INTEGER) {\n                throw new Sk.builtin.OverflowError();\n            }\n            const ret = [];\n            for (let i = 0; i < n; i++) {\n                for (let j = 0; j < this.v.length; j++) {\n                    ret.push(this.v[j]);\n                }\n            }\n            return new Sk.builtin.list(ret);\n        },\n        mp$subscript(index) {\n            if (Sk.misceval.isIndex(index)) {\n                let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n                i = this.list$inRange(i, \"list index out of range\");\n                return this.v[i];\n            } else if (index instanceof Sk.builtin.slice) {\n                const ret = [];\n                index.sssiter$(this.v.length, (i) => {\n                    ret.push(this.v[i]);\n                });\n                return new Sk.builtin.list(ret);\n            }\n            throw new Sk.builtin.TypeError(\n                \"list indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n            );\n        },\n        mp$ass_subscript(index, value) {\n            if (value === undefined) {\n                this.del$subscript(index);\n            } else {\n                this.ass$subscript(index, value);\n            }\n        },\n        sq$inplace_concat(other) {\n            if (other === this) {\n                // prevent an infinite loop\n                this.v.push(...this.v);\n                return this;\n            }\n            return Sk.misceval.chain(\n                Sk.misceval.iterFor(Sk.abstr.iter(other), (i) => {\n                    this.v.push(i);\n                }),\n                () => this\n            );\n        },\n        sq$inplace_repeat(n) {\n            if (!Sk.misceval.isIndex(n)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\"\n                );\n            }\n            n = Sk.misceval.asIndexSized(n, Sk.builtin.OverflowError);\n            const len = this.v.length;\n            if (n <= 0) {\n                this.v.length = 0;\n            } else if (n * len > Number.MAX_SAFE_INTEGER) {\n                throw new Sk.builtin.OverflowError();\n            }\n\n            for (let i = 1; i < n; i++) {\n                for (let j = 0; j < len; j++) {\n                    this.v.push(this.v[j]);\n                }\n            }\n            return this;\n        },\n    },\n    methods: /** @lends {Sk.builtin.list.prototype}*/ {\n        __reversed__: {\n            $meth() {\n                return new reverselist_iter_(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a reverse iterator over the list.\",\n        },\n        clear: {\n            $meth() {\n                this.v.length = 0;\n                return Sk.builtin.none.none$;\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Remove all items from list.\",\n        },\n        copy: {\n            $meth() {\n                return new Sk.builtin.list(this.v.slice(0));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return a shallow copy of the list.\",\n        },\n        append: {\n            $meth(item) {\n                this.v.push(item);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, object, /)\",\n            $doc: \"Append object to the end of the list.\",\n        },\n        insert: {\n            $meth(i, x) {\n                i = Sk.misceval.asIndexSized(i, Sk.builtin.OverflowError);\n                const { start } = Sk.builtin.slice.startEnd$wrt(this, i);\n                this.v.splice(start, 0, x);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { MinArgs: 2, MaxArgs: 2 },\n            $textsig: \"($self, index, object, /)\",\n            $doc: \"Insert object before index.\",\n        },\n        extend: {\n            $meth(iterable) {\n                if (iterable === this) {\n                    // prevent an infinite loop\n                    this.v = this.v.concat(this.v);\n                    return Sk.builtin.none.none$;\n                }\n                return Sk.misceval.chain(\n                    // TODONEW: Check for performance issue, optimize with concat\n                    Sk.misceval.iterFor(Sk.abstr.iter(iterable), (i) => {\n                        this.v.push(i);\n                    }),\n                    () => Sk.builtin.none.none$\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, iterable, /)\",\n            $doc: \"Extend list by appending elements from the iterable.\",\n        },\n        pop: {\n            $meth(i) {\n                if (i === undefined) {\n                    i = this.v.length - 1;\n                } else {\n                    i = Sk.misceval.asIndexSized(i, Sk.builtin.OverflowError);\n                }\n                i = this.list$inRange(i, \"pop index out of range\");\n                const res = this.v[i];\n                this.v.splice(i, 1);\n                return res;\n            },\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, index=-1, /)\",\n            $doc: \"Remove and return item at index (default last).\\n\\nRaises IndexError if list is empty or index is out of range.\",\n        },\n        remove: {\n            $meth(item) {\n                const i = this.list$indexOf(item);\n                if (i === -1) {\n                    throw new Sk.builtin.ValueError(\"list.remove(x): x not in list\");\n                }\n                this.v.splice(i, 1);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, value, /)\",\n            $doc: \"Remove first occurrence of value.\\n\\nRaises ValueError if the value is not present.\",\n        },\n        sort: {\n            $meth(args, kwargs) {\n                if (args.length) {\n                    throw new Sk.builtin.TypeError(\"sort() takes no positional arguments\");\n                }\n                const [key, reverse] = Sk.abstr.copyKeywordsToNamedArgs(\n                    \"sort\",\n                    [\"key\", \"reverse\"],\n                    args,\n                    kwargs,\n                    [Sk.builtin.none.none$, Sk.builtin.bool.false$]\n                );\n                return this.list$sort(undefined, key, reverse);\n            },\n            $flags: { FastCall: true },\n            $textsig: \"($self, /, *, key=None, reverse=False)\",\n            $doc: \"Stable sort *IN PLACE*.\",\n        },\n        index: {\n            $meth(value, start, stop) {\n                if (\n                    (start !== undefined && !Sk.misceval.isIndex(start)) ||\n                    (stop !== undefined && !Sk.misceval.isIndex(stop))\n                ) {\n                    // unusually can't have None here so check this first...\n                    throw new Sk.builtin.TypeError(\n                        \"slice indices must be integers or have an __index__ method\"\n                    );\n                }\n                const i = this.list$indexOf(value, start, stop);\n                if (i === -1) {\n                    throw new Sk.builtin.ValueError(\n                        Sk.misceval.objectRepr(value) + \" is not in list\"\n                    );\n                }\n                return new Sk.builtin.int_(i);\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: \"($self, value, start=0, stop=sys.maxsize, /)\",\n            $doc: \"Return first index of value.\\n\\nRaises ValueError if the value is not present.\",\n        },\n        count: {\n            $meth(item) {\n                let count = 0;\n                const len = this.v.length;\n                for (let i = 0; i < len; i++) {\n                    if (this.v[i] === item || Sk.misceval.richCompareBool(this.v[i], item, \"Eq\")) {\n                        count += 1;\n                    }\n                }\n                return new Sk.builtin.int_(count);\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, value, /)\",\n            $doc: \"Return number of occurrences of value.\",\n        },\n        reverse: {\n            $meth() {\n                this.list$reverse();\n                return Sk.builtin.none.none$;\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Reverse *IN PLACE*.\",\n        },\n    },\n    classmethods: Sk.generic.classGetItem,\n    proto: /** @lends {Sk.builtin.list.prototype}*/ {\n        sk$asarray() {\n            return this.v.slice(0);\n        },\n        list$sort,\n        list$inRange(i, msg) {\n            if (i < 0) {\n                i += this.v.length;\n            }\n            if (i >= 0 && i < this.v.length) {\n                return i;\n            }\n            throw new Sk.builtin.IndexError(msg);\n        },\n        list$indexOf(item, start, end) {\n            ({ start, end } = Sk.builtin.slice.startEnd$wrt(this, start, end));\n            for (let i = start; i < end && i < this.v.length; i++) {\n                if (this.v[i] === item || Sk.misceval.richCompareBool(this.v[i], item, \"Eq\")) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n        list$reverse() {\n            this.v.reverse();\n        },\n        ass$subscript(index, value) {\n            if (Sk.misceval.isIndex(index)) {\n                this.ass$index(index, value);\n            } else if (index instanceof Sk.builtin.slice) {\n                const { start, stop, step } = index.slice$indices(this.v.length);\n                if (step === 1) {\n                    this.ass$slice(start, stop, value);\n                } else {\n                    this.ass$ext_slice(index, value);\n                }\n            } else {\n                throw new Sk.builtin.TypeError(\n                    \"list indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n                );\n            }\n        },\n        ass$index(index, value) {\n            let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n            i = this.list$inRange(i, \"list assignment index out of range\");\n            this.v[i] = value;\n        },\n        ass$slice(start, stop, iterable) {\n            if (!Sk.builtin.checkIterable(iterable)) {\n                throw new Sk.builtin.TypeError(\"can only assign an iterable\");\n            }\n            const vals = Sk.misceval.arrayFromIterable(iterable);\n            this.v.splice(start, stop - start, ...vals);\n        },\n        ass$ext_slice(slice, iterable) {\n            const indices = [];\n            slice.sssiter$(this.v.length, (i) => {\n                indices.push(i);\n            });\n            if (!Sk.builtin.checkIterable(iterable)) {\n                throw new Sk.builtin.TypeError(\"must assign iterable to extended slice\");\n            }\n            const vals = Sk.misceval.arrayFromIterable(iterable);\n            if (indices.length !== vals.length) {\n                throw new Sk.builtin.ValueError(\n                    \"attempt to assign sequence of size \" +\n                        vals.length +\n                        \" to extended slice of size \" +\n                        indices.length\n                );\n            }\n            for (let i = 0; i < indices.length; i++) {\n                this.v.splice(indices[i], 1, vals[i]);\n            }\n        },\n        del$subscript(index) {\n            if (Sk.misceval.isIndex(index)) {\n                this.del$index(index);\n            } else if (index instanceof Sk.builtin.slice) {\n                const { start, stop, step } = index.slice$indices(this.v.length);\n                if (step === 1) {\n                    this.del$slice(start, stop);\n                } else {\n                    this.del$ext_slice(index, step > 0 ? 1 : 0);\n                }\n            } else {\n                throw new Sk.builtin.TypeError(\n                    \"list indices must be integers, not \" + Sk.abstr.typeName(index)\n                );\n            }\n        },\n        del$index(index) {\n            let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n            i = this.list$inRange(i, \"list assignment index out of range\");\n            this.v.splice(i, 1);\n        },\n        del$slice(start, stop) {\n            this.v.splice(start, stop - start);\n        },\n        del$ext_slice(slice, offdir) {\n            let dec = 0; // offset of removal for next index (because we'll have removed, but the iterator is giving orig indices)\n            slice.sssiter$(this.v.length, (i) => {\n                this.v.splice(i - dec, 1);\n                dec += offdir;\n            });\n        },\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.list\", Sk.builtin.list);\n\n/**\n * @function\n *\n * @param {?=} cmp optional (not supported in py3)\n * @param {?=} key optional (keyword only argument in py3)\n * @param {?=} reverse optional (keyword only argument in py3)\n *\n * @private\n */\nfunction list$sort(cmp, key, reverse) {\n    const has_key = key != null && key !== Sk.builtin.none.none$;\n    const has_cmp = cmp != null && cmp !== Sk.builtin.none.none$;\n    let rev, item;\n    if (reverse === undefined) {\n        rev = false;\n    } else if (!Sk.builtin.checkInt(reverse)) {\n        throw new Sk.builtin.TypeError(\"an integer is required\");\n    } else {\n        rev = Sk.misceval.isTrue(reverse);\n    }\n    const timsort = new Sk.builtin.timSort(this);\n\n    this.v = [];\n    const zero = new Sk.builtin.int_(0);\n\n    if (has_key) {\n        if (has_cmp) {\n            timsort.lt = function (a, b) {\n                var res = Sk.misceval.callsimArray(cmp, [a[0], b[0]]);\n                return Sk.misceval.richCompareBool(res, zero, \"Lt\");\n            };\n        } else {\n            timsort.lt = function (a, b) {\n                return Sk.misceval.richCompareBool(a[0], b[0], \"Lt\");\n            };\n        }\n        for (let i = 0; i < timsort.listlength; i++) {\n            item = timsort.list.v[i];\n            const keyvalue = Sk.misceval.callsimArray(key, [item]);\n            timsort.list.v[i] = [keyvalue, item];\n        }\n    } else if (has_cmp) {\n        timsort.lt = function (a, b) {\n            var res = Sk.misceval.callsimArray(cmp, [a, b]);\n            return Sk.misceval.richCompareBool(res, zero, \"Lt\");\n        };\n    }\n\n    if (rev) {\n        timsort.list.list$reverse();\n    }\n\n    timsort.sort();\n\n    if (rev) {\n        timsort.list.list$reverse();\n    }\n\n    if (has_key) {\n        for (let j = 0; j < timsort.listlength; j++) {\n            item = timsort.list.v[j][1];\n            timsort.list.v[j] = item;\n        }\n    }\n\n    const mucked = this.sq$length() > 0;\n\n    this.v = timsort.list.v;\n\n    if (mucked) {\n        throw new Sk.builtin.ValueError(\"list modified during sort\");\n    }\n\n    return Sk.builtin.none.none$;\n}\n\nSk.builtin.list.py2$methods = {\n    sort: {\n        $name: \"sort\",\n        $meth(args, kwargs) {\n            const [cmp, key, reverse] = Sk.abstr.copyKeywordsToNamedArgs(\n                \"sort\",\n                [\"cmp\", \"key\", \"reverse\"],\n                args,\n                kwargs,\n                [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.bool.false$]\n            );\n            return this.list$sort(cmp, key, reverse);\n        },\n        $flags: {\n            FastCall: true, // named args might be better here but one of the args is pyFalse\n            // and bool class does not exist yet. So use FastCall instead.\n        },\n        $textsig: \"($self, cmp=None, key=None, reverse=False)\",\n        $doc: \"Stable sort *IN PLACE*.\",\n    },\n};\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.list} lst\n * @private\n */\nvar list_iter_ = Sk.abstr.buildIteratorClass(\"list_iterator\", {\n    constructor: function list_iter_(lst) {\n        this.$index = 0;\n        this.$seq = lst.v;\n    },\n    iternext: Sk.generic.iterNextWithArray,\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.list} lst\n * @private\n */\nvar reverselist_iter_ = Sk.abstr.buildIteratorClass(\"list_reverseiterator\", {\n    constructor: function reverselist_iter_(lst) {\n        this.$index = lst.v.length - 1;\n        this.$seq = lst.v;\n    },\n    iternext() {\n        const item = this.$seq[this.$index--];\n        if (item === undefined) {\n            this.tp$iternext = () => undefined;\n            return undefined;\n        }\n        return item;\n    },\n    methods: {\n        __length_hint__: Sk.generic.iterReverseLengthHintMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n", "'use strict';(function(r){function x(){}function y(){}var z=String.fromCharCode,v={}.toString,A=v.call(r.SharedArrayBuffer),B=v(),q=r.Uint8Array,t=q||Array,w=q?ArrayBuffer:t,C=w.isView||function(g){return g&&\"length\"in g},D=v.call(w.prototype);w=y.prototype;var E=r.TextEncoder,a=new (q?Uint16Array:t)(32);x.prototype.decode=function(g){if(!C(g)){var l=v.call(g);if(l!==D&&l!==A&&l!==B)throw TypeError(\"Failed to execute 'decode' on 'TextDecoder': The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\ng=q?new t(g):g||[]}for(var f=l=\"\",b=0,c=g.length|0,u=c-32|0,e,d,h=0,p=0,m,k=0,n=-1;b<c;){for(e=b<=u?32:c-b|0;k<e;b=b+1|0,k=k+1|0){d=g[b]&255;switch(d>>4){case 15:m=g[b=b+1|0]&255;if(2!==m>>6||247<d){b=b-1|0;break}h=(d&7)<<6|m&63;p=5;d=256;case 14:m=g[b=b+1|0]&255,h<<=6,h|=(d&15)<<6|m&63,p=2===m>>6?p+4|0:24,d=d+256&768;case 13:case 12:m=g[b=b+1|0]&255,h<<=6,h|=(d&31)<<6|m&63,p=p+7|0,b<c&&2===m>>6&&h>>p&&1114112>h?(d=h,h=h-65536|0,0<=h&&(n=(h>>10)+55296|0,d=(h&1023)+56320|0,31>k?(a[k]=n,k=k+1|0,n=-1):\n(m=n,n=d,d=m))):(d>>=8,b=b-d-1|0,d=65533),h=p=0,e=b<=u?32:c-b|0;default:a[k]=d;continue;case 11:case 10:case 9:case 8:}a[k]=65533}f+=z(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]);32>k&&(f=f.slice(0,k-32|0));if(b<c){if(a[0]=n,k=~n>>>31,n=-1,f.length<l.length)continue}else-1!==n&&(f+=z(n));l+=f;f=\"\"}return l};w.encode=function(g){g=void 0===g?\"\":\"\"+g;var l=g.length|\n0,f=new t((l<<1)+8|0),b,c=0,u=!q;for(b=0;b<l;b=b+1|0,c=c+1|0){var e=g.charCodeAt(b)|0;if(127>=e)f[c]=e;else{if(2047>=e)f[c]=192|e>>6;else{a:{if(55296<=e)if(56319>=e){var d=g.charCodeAt(b=b+1|0)|0;if(56320<=d&&57343>=d){e=(e<<10)+d-56613888|0;if(65535<e){f[c]=240|e>>18;f[c=c+1|0]=128|e>>12&63;f[c=c+1|0]=128|e>>6&63;f[c=c+1|0]=128|e&63;continue}break a}e=65533}else 57343>=e&&(e=65533);!u&&b<<1<c&&b<<1<(c-7|0)&&(u=!0,d=new t(3*l),d.set(f),f=d)}f[c]=224|e>>12;f[c=c+1|0]=128|e>>6&63}f[c=c+1|0]=128|e&63}}return q?\nf.subarray(0,c):f.slice(0,c)};E||(r.TextDecoder=x,r.TextEncoder=y)})(\"\"+void 0==typeof global?\"\"+void 0==typeof self?this:self:global);//AnonyCo\n//# sourceMappingURL=https://cdn.jsdelivr.net/gh/AnonyCo/FastestSmallestTextEncoderDecoder/EncoderDecoderTogether.min.js.map\n", "require(\"fastestsmallesttextencoderdecoder\");\n\n// Mapping from supported valid encodings to normalized encoding name\nconst supportedEncodings = {\n    utf: \"utf-8\",\n    utf8: \"utf-8\",\n    utf_8: \"utf-8\",\n    ascii: \"ascii\",\n    latin_1: \"latin1\",\n    latin1: \"latin1\",\n};\n\nvar space_reg = /\\s+/g;\nvar underscore_hyphen_reg = /[_-]+/g;\nfunction normalizeEncoding(encoding) {\n    const normalized = encoding\n        .replace(space_reg, \"\")\n        .replace(underscore_hyphen_reg, \"_\")\n        .toLowerCase();\n    const supported = supportedEncodings[normalized];\n    if (supported === undefined) {\n        return encoding;\n    } else {\n        return supported;\n    }\n}\nconst Encoder = new TextEncoder();\nconst Decoder = new TextDecoder();\n\nconst Latin1Decoder = new TextDecoder(\"latin1\");\nconst Latin1Encoder = new TextEncoder(\"latin1\");\n\n/**\n * @constructor\n * @param {undefined|Uint8Array|Array|number|string} source Using constructor with new should be a js object\n * @return {Sk.builtin.bytes}\n * @extends {Sk.builtin.object}\n */\nSk.builtin.bytes = Sk.abstr.buildNativeClass(\"bytes\", {\n    constructor: function bytes(source) {\n        if (!(this instanceof Sk.builtin.bytes)) {\n            throw new TypeError(\"bytes is a constructor use 'new'\");\n        }\n        // deal with internal calls\n        if (source === undefined) {\n            this.v = new Uint8Array();\n        } else if (source instanceof Uint8Array) {\n            this.v = source;\n        } else if (source instanceof Uint8ClampedArray) {\n            this.v = new Uint8Array(source);\n        } else if (Array.isArray(source)) {\n            Sk.asserts.assert(\n                source.every((x) => x >= 0 && x <= 0xff),\n                \"bad internal call to bytes with array\"\n            );\n            this.v = new Uint8Array(source);\n        } else if (typeof source === \"string\") {\n            // fast path must be binary string https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary\n            // i.e. the reverse of this.$jsstr();\n            let cc;\n            const uint8 = new Uint8Array(source.length);\n            const len = source.length;\n            for (let i = 0; i < len; i++) {\n                cc = source.charCodeAt(i);\n                if (cc > 0xff) {\n                    throw new Sk.builtin.UnicodeDecodeError(\n                        \"invalid string at index \" + i + \" (possibly contains a unicode character)\"\n                    );\n                }\n                uint8[i] = cc;\n            }\n            this.v = uint8;\n        } else if (typeof source === \"number\") {\n            this.v = new Uint8Array(source);\n        } else {\n            throw new TypeError(\n                `bad internal argument to bytes constructor (got '${typeof source}': ${source})`\n            );\n        }\n    },\n    slots: /**@lends {Sk.builtin.bytes.prototype} */ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$doc: \"bytes(iterable_of_ints) -> bytes\\nbytes(string, encoding[, errors]) -> bytes\\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\\nbytes() -> empty bytes object\\n\\nConstruct an immutable array of bytes from:\\n  - an iterable yielding integers in range(256)\\n  - a text string encoded using the specified encoding\\n  - any object implementing the buffer API.\\n  - an integer\",\n        tp$new(args, kwargs) {\n            if (this !== Sk.builtin.bytes.prototype) {\n                return this.$subtype_new(args, kwargs);\n            }\n            kwargs = kwargs || [];\n            let source, pySource, dunderBytes, encoding, errors;\n            if (args.length <= 1 && +kwargs.length === 0) {\n                pySource = args[0];\n            } else {\n                [pySource, encoding, errors] = Sk.abstr.copyKeywordsToNamedArgs(\n                    \"bytes\",\n                    [null, \"pySource\", \"errors\"],\n                    args,\n                    kwargs\n                );\n                ({ encoding, errors } = checkGetEncodingErrors(\"bytes\", encoding, errors));\n                if (!Sk.builtin.checkString(pySource)) {\n                    throw new Sk.builtin.TypeError(\"encoding or errors without a string argument\");\n                }\n                return strEncode(pySource, encoding, errors);\n            }\n\n            if (pySource === undefined) {\n                return new Sk.builtin.bytes();\n            } else if (\n                (dunderBytes = Sk.abstr.lookupSpecial(pySource, Sk.builtin.str.$bytes)) !==\n                undefined\n            ) {\n                const ret = Sk.misceval.callsimOrSuspendArray(dunderBytes, []);\n                return Sk.misceval.chain(ret, (bytesSource) => {\n                    if (!Sk.builtin.checkBytes(bytesSource)) {\n                        throw new Sk.builtin.TypeError(\n                            \"__bytes__ returned non-bytes (type \" +\n                                Sk.abstr.typeName(bytesSource) +\n                                \")\"\n                        );\n                    }\n                    return bytesSource;\n                });\n            } else if (Sk.misceval.isIndex(pySource)) {\n                source = Sk.misceval.asIndexSized(pySource, Sk.builtin.OverflowError);\n                if (source < 0) {\n                    throw new Sk.builtin.ValueError(\"negative count\");\n                }\n                return new Sk.builtin.bytes(source);\n            } else if (Sk.builtin.checkBytes(pySource)) {\n                return new Sk.builtin.bytes(pySource.v);\n            } else if (Sk.builtin.checkString(pySource)) {\n                throw new Sk.builtin.TypeError(\"string argument without an encoding\");\n            } else if (Sk.builtin.checkIterable(pySource)) {\n                let source = [];\n                let r = Sk.misceval.iterFor(Sk.abstr.iter(pySource), (byte) => {\n                    const n = Sk.misceval.asIndexSized(byte);\n                    if (n < 0 || n > 255) {\n                        throw new Sk.builtin.ValueError(\"bytes must be in range(0, 256)\");\n                    }\n                    source.push(n);\n                });\n                return Sk.misceval.chain(r, () => new Sk.builtin.bytes(source));\n            }\n            throw new Sk.builtin.TypeError(\n                \"cannot convert '\" + Sk.abstr.typeName(pySource) + \"' object into bytes\"\n            );\n        },\n        $r() {\n            return bytesToString(this);\n        },\n        tp$str() {\n            return this.$r();\n        },\n        tp$iter() {\n            return new bytes_iter_(this);\n        },\n        tp$richcompare(other, op) {\n            if (this === other && Sk.misceval.opAllowsEquality(op)) {\n                return true;\n            } else if (!(other instanceof Sk.builtin.bytes)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            const v = this.v;\n            const w = other.v;\n            if (v.length !== w.length && (op === \"Eq\" || op === \"NotEq\")) {\n                /* Shortcut: if the lengths differ, the bytes differ */\n                return op !== \"Eq\";\n            }\n            let i;\n            const min_len = Math.min(v.length, w.length);\n            for (i = 0; i < min_len; i++) {\n                if (v[i] !== w[i]) {\n                    break; // we've found a different element\n                }\n            }\n            switch (op) {\n                case \"Lt\":\n                    return (i === min_len && v.length < w.length) || v[i] < w[i];\n                case \"LtE\":\n                    return (i === min_len && v.length <= w.length) || v[i] <= w[i];\n                case \"Eq\":\n                    return i === min_len;\n                case \"NotEq\":\n                    return i < min_len;\n                case \"Gt\":\n                    return (i === min_len && v.length > w.length) || v[i] > w[i];\n                case \"GtE\":\n                    return (i === min_len && v.length >= w.length) || v[i] >= w[i];\n            }\n        },\n        tp$hash() {\n            return new Sk.builtin.str(this.$jsstr()).tp$hash();\n        },\n        tp$as_sequence_or_mapping: true,\n        mp$subscript(index) {\n            if (Sk.misceval.isIndex(index)) {\n                let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n                if (i !== undefined) {\n                    if (i < 0) {\n                        i = this.v.length + i;\n                    }\n                    if (i < 0 || i >= this.v.length) {\n                        throw new Sk.builtin.IndexError(\"index out of range\");\n                    }\n                    return new Sk.builtin.int_(this.v[i]);\n                }\n            } else if (index instanceof Sk.builtin.slice) {\n                const ret = [];\n                index.sssiter$(this.v.length, (i) => {\n                    ret.push(this.v[i]);\n                });\n                return new Sk.builtin.bytes(new Uint8Array(ret));\n            }\n            throw new Sk.builtin.TypeError(\n                \"byte indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n            );\n        },\n        sq$length() {\n            return this.v.length;\n        },\n        sq$concat(other) {\n            if (!(other instanceof Sk.builtin.bytes) && !(other instanceof Sk.builtin.array)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't concat \" + Sk.abstr.typeName(other) + \" to bytes\"\n                );\n            }\n            const ret = new Uint8Array(this.v.length + other.v.length);\n            let i;\n            for (i = 0; i < this.v.length; i++) {\n                ret[i] = this.v[i];\n            }\n            for (let j = 0; j < other.v.length; j++, i++) {\n                ret[i] = other.v[j];\n            }\n            return new Sk.builtin.bytes(ret);\n        },\n        sq$repeat(n) {\n            if (!Sk.misceval.isIndex(n)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't multiply sequence by non-int of type '\" + Sk.abstr.typeName(n) + \"'\"\n                );\n            }\n            n = Sk.misceval.asIndexSized(n, Sk.builtin.OverflowError);\n            const len = n * this.v.length;\n            if (len > Number.MAX_SAFE_INTEGER) {\n                throw new Sk.builtin.OverflowError();\n            } else if (n <= 0) {\n                return new Sk.builtin.bytes();\n            }\n            const ret = new Uint8Array(len);\n            let j = 0;\n            while (j < len) {\n                for (let i = 0; i < this.v.length; i++) {\n                    ret[j++] = this.v[i];\n                }\n            }\n            return new Sk.builtin.bytes(ret);\n        },\n        sq$contains(tgt) {\n            return this.find$left(tgt) !== -1;\n        },\n        tp$as_number: true,\n        nb$remainder: Sk.builtin.str.prototype.nb$remainder,\n    },\n    proto: {\n        $jsstr() {\n            // returns binary string - not bidirectional for non ascii characters - use with caution\n            // i.e. new Sk.builtin.bytes(x.$jsstr()).v  may be different to x.v;\n            let ret = \"\";\n            for (let i = 0; i < this.v.length; i++) {\n                ret += String.fromCharCode(this.v[i]);\n            }\n            return ret;\n        },\n        get$tgt(tgt) {\n            if (tgt instanceof Sk.builtin.bytes) {\n                return tgt.v;\n            }\n            tgt = Sk.misceval.asIndexOrThrow(\n                tgt,\n                \"argument should be integer or bytes-like object, not {tp$name}\"\n            );\n            if (tgt < 0 || tgt > 0xff) {\n                throw new Sk.builtin.ValueError(\"bytes must be in range(0, 256)\");\n            }\n            return tgt;\n        },\n        get$raw(tgt) {\n            if (tgt instanceof Sk.builtin.bytes) {\n                return tgt.v;\n            }\n            throw new Sk.builtin.TypeError(\n                \"a bytes-like object is required, not '\" + Sk.abstr.typeName(tgt) + \"'\"\n            );\n        },\n        get$splitArgs: checkSepMaxSplit,\n        find$left: mkFind(false),\n        find$right: mkFind(true),\n        find$subleft: function findSubLeft(uint8, start, end) {\n            end = end - uint8.length + 1;\n            let i = start;\n            while (i < end) {\n                if (uint8.every((val, j) => val === this.v[i + j])) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        },\n        find$subright(uint8, start, end) {\n            let i = end - uint8.length;\n            while (i >= start) {\n                if (uint8.every((val, j) => val === this.v[i + j])) {\n                    return i;\n                }\n                i--;\n            }\n            return -1;\n        },\n        $subtype_new(args, kwargs) {\n            const instance = new this.constructor();\n            // we call bytes new method with all the args and kwargs\n            const bytes_instance = Sk.builtin.bytes.prototype.tp$new(args, kwargs);\n            instance.v = bytes_instance.v;\n            return instance;\n        },\n        sk$asarray() {\n            const ret = [];\n            this.v.forEach((x) => {\n                ret.push(new Sk.builtin.int_(x));\n            });\n            return ret;\n        },\n        valueOf() {\n            return this.v;\n        },\n    },\n    flags: {\n        str$encode: strEncode,\n        $decode: bytesDecode,\n        check$encodeArgs: checkGetEncodingErrors,\n    },\n    methods: {\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple(new Sk.builtin.bytes(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: null,\n        },\n        capitalize: {\n            $meth() {\n                const len = this.v.length;\n                if (len === 0) {\n                    return new Sk.builtin.bytes(this.v);\n                }\n                const final = new Uint8Array(len);\n                let val = this.v[0];\n                final[0] = islower(val) ? val - 32 : val;\n                for (let i = 1; i < len; i++) {\n                    val = this.v[i];\n                    final[i] = isupper(val) ? val + 32 : val;\n                }\n                return new Sk.builtin.bytes(final);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.capitalize() -> copy of B\\n\\nReturn a copy of B with only its first character capitalized (ASCII)\\nand the rest lower-cased.\",\n        },\n        center: {\n            $meth: mkJust(\"center\", false, true),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: null,\n            $doc: \"B.center(width[, fillchar]) -> copy of B\\n\\nReturn B centered in a string of length width.  Padding is\\ndone using the specified fill character (default is a space).\",\n        },\n        count: {\n            $meth(tgt, start, end) {\n                tgt = this.get$tgt(tgt);\n                ({ start, end } = Sk.builtin.slice.startEnd$wrt(this, start, end));\n                let count = 0;\n                if (typeof tgt === \"number\") {\n                    for (let i = start; i < end; i++) {\n                        if (this.v[i] === tgt) {\n                            count++;\n                        }\n                    }\n                } else {\n                    const upto = end - tgt.length + 1;\n                    for (let i = start; i < upto; i++) {\n                        if (tgt.every((val, j) => val === this.v[i + j])) {\n                            count++;\n                            i += tgt.length - 1;\n                        }\n                    }\n                }\n                return new Sk.builtin.int_(count);\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.count(sub[, start[, end]]) -> int\\n\\nReturn the number of non-overlapping occurrences of subsection sub in\\nbytes B[start:end].  Optional arguments start and end are interpreted\\nas in slice notation.\",\n        },\n        decode: {\n            $meth: bytesDecode,\n            $flags: { NamedArgs: [\"encoding\", \"errors\"] },\n            $textsig: \"($self, /, encoding='utf-8', errors='strict')\",\n            $doc: \"Decode the bytes using the codec registered for encoding.\\n\\n  encoding\\n    The encoding with which to decode the bytes.\\n  errors\\n    The error handling scheme to use for the handling of decoding errors.\\n    The default is 'strict' meaning that decoding errors raise a\\n    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\\n    as well as any other name registered with codecs.register_error that\\n    can handle UnicodeDecodeErrors.\",\n        },\n        endswith: {\n            $meth: mkStartsEndsWith(\"endswith\", (subarray, tgt) => {\n                const start = subarray.length - tgt.length;\n                return start >= 0 && tgt.every((val, i) => val === subarray[start + i]);\n            }),\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.endswith(suffix[, start[, end]]) -> bool\\n\\nReturn True if B ends with the specified suffix, False otherwise.\\nWith optional start, test B beginning at that position.\\nWith optional end, stop comparing B at that position.\\nsuffix can also be a tuple of bytes to try.\",\n        },\n        expandtabs: {\n            $meth(tabsize) {\n                tabsize = Sk.misceval.asIndexSized(\n                    tabsize,\n                    Sk.builtin.OverflowError,\n                    \"an integer is required (got type {tp$nam})\"\n                );\n                const final = [];\n                let linepos = 0;\n                for (let i = 0; i < this.v.length; i++) {\n                    const val = this.v[i];\n                    if (val === 9) {\n                        const inc = tabsize - (linepos % tabsize);\n                        final.push(...new Array(inc).fill(32));\n                        linepos += inc;\n                    } else if (val === 10 || val === 13) {\n                        final.push(val);\n                        linepos = 0;\n                    } else {\n                        final.push(val);\n                        linepos++;\n                    }\n                }\n                return new Sk.builtin.bytes(new Uint8Array(final));\n            },\n            $flags: { NamedArgs: [\"tabsize\"], Defaults: [8] },\n            $textsig: null,\n            $doc: \"B.expandtabs(tabsize=8) -> copy of B\\n\\nReturn a copy of B where all tab characters are expanded using spaces.\\nIf tabsize is not given, a tab size of 8 characters is assumed.\",\n        },\n        find: {\n            $meth: function find(tgt, start, end) {\n                return new Sk.builtin.int_(this.find$left(tgt, start, end));\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.find(sub[, start[, end]]) -> int\\n\\nReturn the lowest index in B where subsection sub is found,\\nsuch that sub is contained within B[start,end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nReturn -1 on failure.\",\n        },\n        hex: {\n            $meth() {\n                let final = \"\";\n                for (let i = 0; i < this.v.length; i++) {\n                    final += this.v[i].toString(16).padStart(2, \"0\");\n                }\n                return new Sk.builtin.str(final);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.hex() -> string\\n\\nCreate a string of hexadecimal numbers from a bytes object.\\nExample: b'\\\\xb9\\\\x01\\\\xef'.hex() -> 'b901ef'.\",\n        },\n        index: {\n            $meth: function index(tgt, start, end) {\n                const val = this.find$left(tgt, start, end);\n                if (val === -1) {\n                    throw new Sk.builtin.ValueError(\"subsection not found\");\n                } else {\n                    return new Sk.builtin.int_(val);\n                }\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.index(sub[, start[, end]]) -> int\\n\\nReturn the lowest index in B where subsection sub is found,\\nsuch that sub is contained within B[start,end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nRaises ValueError when the subsection is not found.\",\n        },\n        isalnum: {\n            $meth: mkIsAll((val) => isdigit(val) || islower(val) || isupper(val)),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isalnum() -> bool\\n\\nReturn True if all characters in B are alphanumeric\\nand there is at least one character in B, False otherwise.\",\n        },\n        isalpha: {\n            $meth: mkIsAll((val) => (val >= 65 && val <= 90) || (val >= 97 && val <= 122)),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isalpha() -> bool\\n\\nReturn True if all characters in B are alphabetic\\nand there is at least one character in B, False otherwise.\",\n        },\n        isascii: {\n            $meth: mkIsAll((val) => val >= 0 && val <= 0x7f, true),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isascii() -> bool\\n\\nReturn True if B is empty or all characters in B are ASCII,\\nFalse otherwise.\",\n        },\n        isdigit: {\n            $meth: mkIsAll(isdigit),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isdigit() -> bool\\n\\nReturn True if all characters in B are digits\\nand there is at least one character in B, False otherwise.\",\n        },\n        islower: {\n            $meth: makeIsUpperLower(islower, isupper),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.islower() -> bool\\n\\nReturn True if all cased characters in B are lowercase and there is\\nat least one cased character in B, False otherwise.\",\n        },\n        isspace: {\n            $meth: mkIsAll(isspace),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isspace() -> bool\\n\\nReturn True if all characters in B are whitespace\\nand there is at least one character in B, False otherwise.\",\n        },\n        istitle: {\n            $meth: function istitle() {\n                let inword = false;\n                let cased = false;\n                for (let i = 0; i < this.v.length; i++) {\n                    const val = this.v[i];\n                    if (isupper(val)) {\n                        if (inword) {\n                            return Sk.builtin.bool.false$;\n                        }\n                        inword = true;\n                        cased = true;\n                    } else if (islower(val)) {\n                        if (!inword) {\n                            return Sk.builtin.bool.false$;\n                        }\n                        cased = true;\n                    } else {\n                        inword = false;\n                    }\n                }\n                return cased ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.istitle() -> bool\\n\\nReturn True if B is a titlecased string and there is at least one\\ncharacter in B, i.e. uppercase characters may only follow uncased\\ncharacters and lowercase characters only cased ones. Return False\\notherwise.\",\n        },\n        isupper: {\n            $meth: makeIsUpperLower(isupper, islower),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.isupper() -> bool\\n\\nReturn True if all cased characters in B are uppercase and there is\\nat least one cased character in B, False otherwise.\",\n        },\n        join: {\n            $meth(iterable) {\n                const final = [];\n                let i = 0;\n                return Sk.misceval.chain(\n                    Sk.misceval.iterFor(Sk.abstr.iter(iterable), (item) => {\n                        if (!(item instanceof Sk.builtin.bytes)) {\n                            throw new Sk.builtin.TypeError(\n                                \"sequence item \" +\n                                    i +\n                                    \": expected a bytes-like object, \" +\n                                    Sk.abstr.typeName(item) +\n                                    \" found\"\n                            );\n                        }\n                        i++;\n                        if (final.length) {\n                            final.push(...this.v);\n                        }\n                        final.push(...item.v);\n                    }),\n                    () => new Sk.builtin.bytes(new Uint8Array(final))\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, iterable_of_bytes, /)\",\n            $doc: \"Concatenate any number of bytes objects.\\n\\nThe bytes whose method is called is inserted in between each pair.\\n\\nThe result is returned as a new bytes object.\\n\\nExample: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.\",\n        },\n        ljust: {\n            $meth: mkJust(\"ljust\", false, false),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: null,\n            $doc: \"B.ljust(width[, fillchar]) -> copy of B\\n\\nReturn B left justified in a string of length width. Padding is\\ndone using the specified fill character (default is a space).\",\n        },\n        lower: {\n            $meth: mkCaseSwitch((val) => (isupper(val) ? val + 32 : val)),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.lower() -> copy of B\\n\\nReturn a copy of B with all ASCII characters converted to lowercase.\",\n        },\n        lstrip: {\n            $meth: mkStrip(true, false),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, bytes=None, /)\",\n            $doc: \"Strip leading bytes contained in the argument.\\n\\nIf the argument is omitted or None, strip leading  ASCII whitespace.\",\n        },\n        partition: {\n            $meth: mkPartition(false),\n            $flags: { OneArg: true },\n            $textsig: \"($self, sep, /)\",\n            $doc: \"Partition the bytes into three parts using the given separator.\\n\\nThis will search for the separator sep in the bytes. If the separator is found,\\nreturns a 3-tuple containing the part before the separator, the separator\\nitself, and the part after it.\\n\\nIf the separator is not found, returns a 3-tuple containing the original bytes\\nobject and two empty bytes objects.\",\n        },\n        replace: {\n            $meth(oldB, newB, count) {\n                oldB = this.get$raw(oldB);\n                newB = this.get$raw(newB);\n                count =\n                    count === undefined\n                        ? -1\n                        : Sk.misceval.asIndexSized(count, Sk.builtin.OverflowError);\n                count = count < 0 ? Infinity : count;\n                const final = [];\n                let found = 0,\n                    i = 0;\n                while (i < this.v.length && found < count) {\n                    const next = this.find$subleft(oldB, i, this.v.length);\n                    if (next === -1) {\n                        break;\n                    }\n                    for (let j = i; j < next; j++) {\n                        final.push(this.v[j]);\n                    }\n                    final.push(...newB);\n                    i = next + oldB.length;\n                    found++;\n                }\n                for (i; i < this.v.length; i++) {\n                    final.push(this.v[i]);\n                }\n                return new Sk.builtin.bytes(new Uint8Array(final));\n            },\n            $flags: { MinArgs: 2, MaxArgs: 3 },\n            $textsig: \"($self, old, new, count=-1, /)\",\n            $doc: \"Return a copy with all occurrences of substring old replaced by new.\\n\\n  count\\n    Maximum number of occurrences to replace.\\n    -1 (the default value) means replace all occurrences.\\n\\nIf the optional argument count is given, only the first count occurrences are\\nreplaced.\",\n        },\n        rfind: {\n            $meth(tgt, start, end) {\n                return new Sk.builtin.int_(this.find$right(tgt, start, end));\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.rfind(sub[, start[, end]]) -> int\\n\\nReturn the highest index in B where subsection sub is found,\\nsuch that sub is contained within B[start,end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nReturn -1 on failure.\",\n        },\n        rindex: {\n            $meth: function rindex(tgt, start, end) {\n                const val = this.find$right(tgt, start, end);\n                if (val === -1) {\n                    throw new Sk.builtin.ValueError(\"subsection not found\");\n                } else {\n                    return new Sk.builtin.int_(val);\n                }\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.rindex(sub[, start[, end]]) -> int\\n\\nReturn the highest index in B where subsection sub is found,\\nsuch that sub is contained within B[start,end].  Optional\\narguments start and end are interpreted as in slice notation.\\n\\nRaise ValueError when the subsection is not found.\",\n        },\n        rjust: {\n            $meth: mkJust(\"rjust\", true, false),\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: null,\n            $doc: \"B.rjust(width[, fillchar]) -> copy of B\\n\\nReturn B right justified in a string of length width. Padding is\\ndone using the specified fill character (default is a space)\",\n        },\n        rpartition: {\n            $meth: mkPartition(true),\n            $flags: { OneArg: true },\n            $textsig: \"($self, sep, /)\",\n            $doc: \"Partition the bytes into three parts using the given separator.\\n\\nThis will search for the separator sep in the bytes, starting at the end. If\\nthe separator is found, returns a 3-tuple containing the part before the\\nseparator, the separator itself, and the part after it.\\n\\nIf the separator is not found, returns a 3-tuple containing two empty bytes\\nobjects and the original bytes object.\",\n        },\n        rsplit: {\n            $meth: function rSplit(sep, maxsplit) {\n                ({ sep, maxsplit } = this.get$splitArgs(sep, maxsplit));\n\n                const result = [];\n                let splits = 0,\n                    i = this.v.length;\n\n                if (sep !== null) {\n                    while (i >= 0 && splits < maxsplit) {\n                        const next = this.find$subright(sep, 0, i);\n                        if (next === -1) {\n                            break;\n                        }\n                        result.push(new Sk.builtin.bytes(this.v.subarray(next + sep.length, i)));\n                        i = next;\n                        splits++;\n                    }\n                    result.push(new Sk.builtin.bytes(this.v.subarray(0, i)));\n                } else {\n                    i--;\n                    while (splits < maxsplit) {\n                        while (isspace(this.v[i])) {\n                            i--;\n                        }\n                        if (i < 0) {\n                            break;\n                        }\n                        const index = i + 1;\n                        i--;\n                        while (i >= 0 && !isspace(this.v[i])) {\n                            i--;\n                        }\n                        result.push(new Sk.builtin.bytes(this.v.subarray(i + 1, index)));\n                        splits++;\n                    }\n                    if (i >= 0) {\n                        while (isspace(this.v[i])) {\n                            i--;\n                        }\n                        if (i >= 0) {\n                            result.push(new Sk.builtin.bytes(this.v.subarray(0, i + 1)));\n                        }\n                    }\n                }\n                return new Sk.builtin.list(result.reverse());\n            },\n            $flags: { NamedArgs: [\"sep\", \"maxsplit\"], Defaults: [Sk.builtin.none.none$, -1] },\n            $textsig: \"($self, /, sep=None, maxsplit=-1)\",\n            $doc: \"Return a list of the sections in the bytes, using sep as the delimiter.\\n\\n  sep\\n    The delimiter according which to split the bytes.\\n    None (the default value) means split on ASCII whitespace characters\\n    (space, tab, return, newline, formfeed, vertical tab).\\n  maxsplit\\n    Maximum number of splits to do.\\n    -1 (the default value) means no limit.\\n\\nSplitting is done starting at the end of the bytes and working to the front.\",\n        },\n        rstrip: {\n            $meth: mkStrip(false, true),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, bytes=None, /)\",\n            $doc: \"Strip trailing bytes contained in the argument.\\n\\nIf the argument is omitted or None, strip trailing ASCII whitespace.\",\n        },\n        split: {\n            $meth: function Split(sep, maxsplit) {\n                ({ sep, maxsplit } = this.get$splitArgs(sep, maxsplit));\n\n                const result = [];\n                const mylen = this.v.length;\n                let splits = 0,\n                    i = 0;\n\n                if (sep !== null) {\n                    while (i < mylen && splits < maxsplit) {\n                        const next = this.find$subleft(sep, i, mylen);\n                        if (next === -1) {\n                            break;\n                        }\n                        result.push(new Sk.builtin.bytes(this.v.subarray(i, next)));\n                        i = next + sep.length;\n                        splits++;\n                    }\n                    result.push(new Sk.builtin.bytes(this.v.subarray(i, mylen)));\n                } else {\n                    while (splits < maxsplit) {\n                        while (isspace(this.v[i])) {\n                            i++;\n                        }\n                        if (i === mylen) {\n                            break;\n                        }\n                        const index = i;\n                        i++;\n                        while (i < mylen && !isspace(this.v[i])) {\n                            i++;\n                        }\n                        result.push(new Sk.builtin.bytes(this.v.subarray(index, i)));\n                        splits++;\n                    }\n                    if (i < mylen) {\n                        while (isspace(this.v[i])) {\n                            i++;\n                        }\n                        if (i < mylen) {\n                            result.push(new Sk.builtin.bytes(this.v.subarray(i, mylen)));\n                        }\n                    }\n                }\n                return new Sk.builtin.list(result);\n            },\n            $flags: { NamedArgs: [\"sep\", \"maxsplit\"], Defaults: [Sk.builtin.none.none$, -1] },\n            $textsig: \"($self, /, sep=None, maxsplit=-1)\",\n            $doc: \"Return a list of the sections in the bytes, using sep as the delimiter.\\n\\n  sep\\n    The delimiter according which to split the bytes.\\n    None (the default value) means split on ASCII whitespace characters\\n    (space, tab, return, newline, formfeed, vertical tab).\\n  maxsplit\\n    Maximum number of splits to do.\\n    -1 (the default value) means no limit.\",\n        },\n        splitlines: {\n            $meth(keepends) {\n                keepends = Sk.misceval.isTrue(keepends);\n                const final = [];\n                let sol = 0;\n                let eol;\n                let i = 0;\n                const len = this.v.length;\n                while (i < len) {\n                    const val = this.v[i];\n                    if (val === 13) {\n                        // \\r\n                        const rn = this.v[i + 1] === 10; // \\r\\n\n                        if (keepends) {\n                            eol = rn ? i + 2 : i + 1;\n                        } else {\n                            eol = i;\n                        }\n                        final.push(new Sk.builtin.bytes(this.v.subarray(sol, eol)));\n                        i = sol = rn ? i + 2 : i + 1;\n                    } else if (val === 10) {\n                        // \\n\n                        eol = keepends ? i + 1 : i;\n                        final.push(new Sk.builtin.bytes(this.v.subarray(sol, eol)));\n                        i = sol = i + 1;\n                    } else {\n                        i++;\n                    }\n                }\n                if (sol < len) {\n                    final.push(new Sk.builtin.bytes(this.v.subarray(sol, len)));\n                }\n                return new Sk.builtin.list(final);\n            },\n            $flags: { NamedArgs: [\"keepends\"], Defaults: [false] },\n            $textsig: \"($self, /, keepends=False)\",\n            $doc: \"Return a list of the lines in the bytes, breaking at line boundaries.\\n\\nLine breaks are not included in the resulting list unless keepends is given and\\ntrue.\",\n        },\n        startswith: {\n            $meth: mkStartsEndsWith(\n                \"startswith\",\n                (subarray, tgt) =>\n                    tgt.length <= subarray.length && tgt.every((val, i) => val === subarray[i])\n            ),\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: null,\n            $doc: \"B.startswith(prefix[, start[, end]]) -> bool\\n\\nReturn True if B starts with the specified prefix, False otherwise.\\nWith optional start, test B beginning at that position.\\nWith optional end, stop comparing B at that position.\\nprefix can also be a tuple of bytes to try.\",\n        },\n        strip: {\n            $meth: mkStrip(true, true),\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, bytes=None, /)\",\n            $doc: \"Strip leading and trailing bytes contained in the argument.\\n\\nIf the argument is omitted or None, strip leading and trailing ASCII whitespace.\",\n        },\n        swapcase: {\n            $meth: mkCaseSwitch((val) => (isupper(val) ? val + 32 : islower(val) ? val - 32 : val)),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.swapcase() -> copy of B\\n\\nReturn a copy of B with uppercase ASCII characters converted\\nto lowercase ASCII and vice versa.\",\n        },\n        title: {\n            $meth() {\n                const len = this.v.length;\n                const final = new Uint8Array(len);\n                let inword = false;\n                for (let i = 0; i < len; i++) {\n                    const val = this.v[i];\n                    if (isupper(val)) {\n                        final[i] = inword ? val + 32 : val;\n                        inword = true;\n                    } else if (islower(val)) {\n                        final[i] = inword ? val : val - 32;\n                        inword = true;\n                    } else {\n                        final[i] = val;\n                        inword = false;\n                    }\n                }\n                return new Sk.builtin.bytes(final);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.title() -> copy of B\\n\\nReturn a titlecased version of B, i.e. ASCII words start with uppercase\\ncharacters, all remaining cased characters have lowercase.\",\n        },\n        // translate: {\n        //     $meth() {\n        //         throw new Sk.builtin.NotImplementedError(\"translate() bytes method not implemented in Skulpt\");\n        //     },\n        //     $flags: { NoArgs: true },\n        //     $textsig: \"($self, table, /, delete=b'')\",\n        //     $doc:\n        //         \"Return a copy with each character mapped by the given translation table.\\n\\n  table\\n    Translation table, which must be a bytes object of length 256.\\n\\nAll characters occurring in the optional argument delete are removed.\\nThe remaining characters are mapped through the given translation table.\",\n        // },\n        upper: {\n            $meth: mkCaseSwitch((val) => (islower(val) ? val - 32 : val)),\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"B.upper() -> copy of B\\n\\nReturn a copy of B with all ASCII characters converted to uppercase.\",\n        },\n        zfill: {\n            $meth(width) {\n                width = Sk.misceval.asIndexSized(width, Sk.builtin.IndexError);\n                const fill_len = width - this.v.length;\n                if (fill_len <= 0) {\n                    return new Sk.builtin.bytes(this.v);\n                }\n                const final = new Uint8Array(width);\n                let i = 0,\n                    j;\n                if (this.v[0] === 43 || this.v[0] === 45) {\n                    final[0] = this.v[0];\n                    i++;\n                }\n                final.fill(48, i, i + fill_len);\n                for (j = i, i = i + fill_len; i < width; i++, j++) {\n                    final[i] = this.v[j];\n                }\n                return new Sk.builtin.bytes(final);\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"B.zfill(width) -> copy of B\\n\\nPad a numeric string B with zeros on the left, to fill a field\\nof the specified width.  B is never truncated.\",\n        },\n    },\n    classmethods: {\n        fromhex: {\n            $meth: fromhex,\n            $flags: { OneArg: true },\n            $textsig: \"($type, string, /)\",\n            $doc: \"Create a bytes object from a string of hexadecimal numbers.\\n\\nSpaces between two numbers are accepted.\\nExample: bytes.fromhex('B9 01EF') -> b'\\\\\\\\xb9\\\\\\\\x01\\\\\\\\xef'.\",\n        },\n    },\n});\n\n/**\n * @constructor\n * @param {undefined|Uint8Array|Array|number|string} source Using constructor with new should be a js object\n * @return {Sk.builtin.bytearray}\n * @extends {Sk.builtin.object}\n */\nSk.builtin.bytearray = Sk.abstr.buildNativeClass(\"bytearray\", {\n    constructor: function bytearray(source) {\n        if (!(this instanceof Sk.builtin.bytearray)) {\n            throw new TypeError(\"bytearray is a constructor use 'new'\");\n        }\n        // Same initialization as bytes, but we allow mutability\n        if (source === undefined) {\n            this.v = new Uint8Array();\n        } else if (source instanceof Uint8Array) {\n            this.v = source;\n        } else if (source instanceof Uint8ClampedArray) {\n            this.v = new Uint8Array(source);\n        } else if (Array.isArray(source)) {\n            Sk.asserts.assert(\n                source.every((x) => x >= 0 && x <= 0xff),\n                \"bad internal call to bytearray with array\"\n            );\n            this.v = new Uint8Array(source);\n        } else if (typeof source === \"string\") {\n            let cc;\n            const uint8 = new Uint8Array(source.length);\n            const len = source.length;\n            for (let i = 0; i < len; i++) {\n                cc = source.charCodeAt(i);\n                if (cc > 0xff) {\n                    throw new Sk.builtin.UnicodeDecodeError(\n                        \"invalid string at index \" + i + \" (possibly contains a unicode character)\"\n                    );\n                }\n                uint8[i] = cc;\n            }\n            this.v = uint8;\n        } else if (typeof source === \"number\") {\n            this.v = new Uint8Array(source);\n        } else {\n            throw new TypeError(\n                `bad internal argument to bytearray constructor (got '${typeof source}': ${source})`\n            );\n        }\n    },\n    slots: /**@lends {Sk.builtin.bytearray.prototype} */ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$setattr: Sk.generic.setAttr,\n        tp$doc: \"bytearray([source[, encoding[, errors]]]) -> bytearray\\n\\nReturn a new array of bytes. The bytearray class is a mutable\\nsequence of integers in the range 0 <= x < 256. It has most of\\nthe usual methods of mutable sequences, described in Mutable\\nSequence Types, as well as most methods that the bytes type has,\\nsee Bytes and Byte Array Methods.\",\n        tp$new(args, kwargs) {\n            if (this !== Sk.builtin.bytearray.prototype) {\n                return this.$subtype_new(args, kwargs);\n            }\n            kwargs = kwargs || [];\n            let source, pySource, dunderBytes, encoding, errors;\n            if (args.length <= 1 && +kwargs.length === 0) {\n                pySource = args[0];\n            } else {\n                [pySource, encoding, errors] = Sk.abstr.copyKeywordsToNamedArgs(\n                    \"bytearray\",\n                    [null, \"pySource\", \"errors\"],\n                    args,\n                    kwargs\n                );\n                ({ encoding, errors } = checkGetEncodingErrors(\"bytearray\", encoding, errors));\n                if (!Sk.builtin.checkString(pySource)) {\n                    throw new Sk.builtin.TypeError(\"encoding or errors without a string argument\");\n                }\n                return bytesToBytearray(strEncode(pySource, encoding, errors));\n            }\n\n            if (pySource === undefined) {\n                return new Sk.builtin.bytearray();\n            } else if (\n                (dunderBytes = Sk.abstr.lookupSpecial(pySource, Sk.builtin.str.$bytes)) !==\n                undefined\n            ) {\n                const ret = Sk.misceval.callsimOrSuspendArray(dunderBytes, []);\n                return Sk.misceval.chain(ret, (bytesSource) => {\n                    if (!Sk.builtin.checkBytes(bytesSource)) {\n                        throw new Sk.builtin.TypeError(\n                            \"__bytes__ returned non-bytes (type \" +\n                                Sk.abstr.typeName(bytesSource) +\n                                \")\"\n                        );\n                    }\n                    return bytesToBytearray(bytesSource);\n                });\n            } else if (Sk.misceval.isIndex(pySource)) {\n                source = Sk.misceval.asIndexSized(pySource, Sk.builtin.OverflowError);\n                if (source < 0) {\n                    throw new Sk.builtin.ValueError(\"negative count\");\n                }\n                return new Sk.builtin.bytearray(source);\n            } else if (Sk.builtin.checkBytes(pySource)) {\n                return new Sk.builtin.bytearray(pySource.v);\n            } else if (Sk.builtin.checkString(pySource)) {\n                throw new Sk.builtin.TypeError(\"string argument without an encoding\");\n            } else if (Sk.builtin.checkIterable(pySource)) {\n                let source = [];\n                let r = Sk.misceval.iterFor(Sk.abstr.iter(pySource), (byte) => {\n                    const n = Sk.misceval.asIndexSized(byte);\n                    if (n < 0 || n > 255) {\n                        throw new Sk.builtin.ValueError(\"bytes must be in range(0, 256)\");\n                    }\n                    source.push(n);\n                });\n                return Sk.misceval.chain(r, () => new Sk.builtin.bytearray(source));\n            }\n            throw new Sk.builtin.TypeError(\n                \"cannot convert '\" + Sk.abstr.typeName(pySource) + \"' object into bytes\"\n            );\n        },\n        $r() {\n            return bytesToString(this);\n        },\n        tp$str() {\n            return this.$r();\n        },\n        tp$iter() {\n            return new bytes_iter_(this);\n        },\n        tp$richcompare(other, op) {\n            if (this === other && Sk.misceval.opAllowsEquality(op)) {\n                return true;\n            } else if (!(other instanceof Sk.builtin.bytearray)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            const v = this.v;\n            const w = other.v;\n            if (v.length !== w.length && (op === \"Eq\" || op === \"NotEq\")) {\n                /* Shortcut: if the lengths differ, the bytes differ */\n                return op !== \"Eq\";\n            }\n            let i;\n            const min_len = Math.min(v.length, w.length);\n            for (i = 0; i < min_len; i++) {\n                if (v[i] !== w[i]) {\n                    break; // we've found a different element\n                }\n            }\n            switch (op) {\n                case \"Lt\":\n                    return (i === min_len && v.length < w.length) || v[i] < w[i];\n                case \"LtE\":\n                    return (i === min_len && v.length <= w.length) || v[i] <= w[i];\n                case \"Eq\":\n                    return i === min_len;\n                case \"NotEq\":\n                    return i < min_len;\n                case \"Gt\":\n                    return (i === min_len && v.length > w.length) || v[i] > w[i];\n                case \"GtE\":\n                    return (i === min_len && v.length >= w.length) || v[i] >= w[i];\n            }\n        },\n        tp$hash() {\n            throw new Sk.builtin.TypeError(\"unhashable type: 'bytearray'\");\n        },\n        tp$as_sequence_or_mapping: true,\n        mp$subscript(index) {\n            // Similar to bytes, but allow set item\n            if (Sk.misceval.isIndex(index)) {\n                let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n                if (i !== undefined) {\n                    if (i < 0) {\n                        i = this.v.length + i;\n                    }\n                    if (i < 0 || i >= this.v.length) {\n                        throw new Sk.builtin.IndexError(\"index out of range\");\n                    }\n                    return new Sk.builtin.int_(this.v[i]);\n                }\n            } else if (index instanceof Sk.builtin.slice) {\n                const ret = [];\n                index.sssiter$(this.v.length, (i) => {\n                    ret.push(this.v[i]);\n                });\n                return new Sk.builtin.bytearray(new Uint8Array(ret));\n            }\n            throw new Sk.builtin.TypeError(\n                \"byte indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n            );\n        },\n        mp$ass_subscript(index, value) {\n            if (Sk.misceval.isIndex(index)) {\n                this.ass$index(index, value);\n            } else if (index instanceof Sk.builtin.slice) {\n                const { start, stop, step } = index.slice$indices(this.v.length);\n                if (step === 1) {\n                    this.ass$slice(start, stop, value);\n                } else {\n                    this.ass$ext_slice(index, value);\n                }\n            } else {\n                throw new Sk.builtin.TypeError(\n                    \"list indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n                );\n            }\n        },\n        ass$index(index, value) {\n            let i = Sk.misceval.asIndexSized(index, Sk.builtin.IndexError);\n            i = this.list$inRange(i, \"bytearray assignment index out of range\");\n            this.v[i] = value;\n        },\n        ass$slice(start, stop, iterable) {\n            if (!Sk.builtin.checkIterable(iterable)) {\n                throw new Sk.builtin.TypeError(\"can only assign an iterable\");\n            }\n\n            const vals = Sk.misceval.arrayFromIterable(iterable).map((v) => v.v);\n            const oldLength = this.v.length;\n            let target = this.v;\n            if (vals.length > oldLength) {\n                target = new Uint8Array(vals.length);\n                target.set(this.v);\n            }\n            // Do splice(start, stop - start, ...vals) equivalent for Uint8Array\n            target.set(vals, start);\n            this.v = target;\n        },\n        ass$ext_slice(slice, iterable) {\n            const indices = [];\n            slice.sssiter$(this.v.length, (i) => {\n                indices.push(i);\n            });\n            if (!Sk.builtin.checkIterable(iterable)) {\n                throw new Sk.builtin.TypeError(\"must assign iterable to extended slice\");\n            }\n            const vals = Sk.misceval.arrayFromIterable(iterable);\n            if (indices.length !== vals.length) {\n                throw new Sk.builtin.ValueError(\n                    \"attempt to assign sequence of size \" +\n                        vals.length +\n                        \" to extended slice of size \" +\n                        indices.length\n                );\n            }\n            for (let i = 0; i < indices.length; i++) {\n                // Can't use this.v.splice(indices[i], 1, vals[i]) because it's a Uint8array\n                this.v[indices[i]] = vals[i];\n            }\n        },\n        sq$length() {\n            return this.v.length;\n        },\n        sq$concat(other) {\n            if (!(other instanceof Sk.builtin.bytes) && !(other instanceof Sk.builtin.array)) {\n                throw new Sk.builtin.TypeError(\n                    \"can't concat \" + Sk.abstr.typeName(other) + \" to bytearray\"\n                );\n            }\n            const ret = new Uint8Array(this.v.length + other.v.length);\n            let i;\n            for (i = 0; i < this.v.length; i++) {\n                ret[i] = this.v[i];\n            }\n            for (let j = 0; j < other.v.length; j++, i++) {\n                ret[i] = other.v[j];\n            }\n            return new Sk.builtin.bytearray(ret);\n        },\n        sq$contains(tgt) {\n            return this.find$left(tgt) !== -1;\n        },\n        tp$as_number: true,\n        nb$remainder: Sk.builtin.str.prototype.nb$remainder,\n    },\n    proto: {\n        $jsstr() {\n            // returns binary string - not bidirectional for non ascii characters - use with caution\n            // i.e. new Sk.builtin.bytes(x.$jsstr()).v  may be different to x.v;\n            let ret = \"\";\n            for (let i = 0; i < this.v.length; i++) {\n                ret += String.fromCharCode(this.v[i]);\n            }\n            return ret;\n        },\n        get$tgt(tgt) {\n            if (tgt instanceof Sk.builtin.bytearray || tgt instanceof Sk.builtin.bytes) {\n                return tgt.v;\n            }\n            tgt = Sk.misceval.asIndexOrThrow(\n                tgt,\n                \"argument should be integer or bytes-like object, not {tp$name}\"\n            );\n            if (tgt < 0 || tgt > 0xff) {\n                throw new Sk.builtin.ValueError(\"bytes must be in range(0, 256)\");\n            }\n            return tgt;\n        },\n        get$raw(tgt) {\n            if (tgt instanceof Sk.builtin.bytearray || tgt instanceof Sk.builtin.bytes) {\n                return tgt.v;\n            }\n            throw new Sk.builtin.TypeError(\n                \"a bytes-like object is required, not '\" + Sk.abstr.typeName(tgt) + \"'\"\n            );\n        },\n        get$splitArgs: checkSepMaxSplit,\n        find$left: mkFind(false),\n        find$right: mkFind(true),\n        find$subleft: function findSubLeft(uint8, start, end) {\n            end = end - uint8.length + 1;\n            let i = start;\n            while (i < end) {\n                if (uint8.every((val, j) => val === this.v[i + j])) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        },\n        find$subright(uint8, start, end) {\n            let i = end - uint8.length;\n            while (i >= start) {\n                if (uint8.every((val, j) => val === this.v[i + j])) {\n                    return i;\n                }\n                i--;\n            }\n            return -1;\n        },\n        $subtype_new(args, kwargs) {\n            const instance = new this.constructor();\n            // we call bytes new method with all the args and kwargs\n            const bytes_instance = Sk.builtin.bytearray.prototype.tp$new(args, kwargs);\n            instance.v = bytes_instance.v;\n            return instance;\n        },\n        sk$asarray() {\n            const ret = [];\n            this.v.forEach((x) => {\n                ret.push(new Sk.builtin.int_(x));\n            });\n            return ret;\n        },\n        valueOf() {\n            return this.v;\n        },\n        append(value) {\n            const v = Sk.misceval.asIndexSized(value);\n            if (v < 0 || v > 255) {\n                throw new Sk.builtin.ValueError(\"byte must be in range(0, 256)\");\n            }\n            const new_v = new Uint8Array(this.v.length + 1);\n            new_v.set(this.v);\n            new_v[this.v.length] = v;\n            this.v = new_v;\n        },\n        extend(iterable) {\n            const to_extend = [];\n            Sk.misceval.iterFor(Sk.abstr.iter(iterable), (value) => {\n                const v = Sk.misceval.asIndexSized(value);\n                if (v < 0 || v > 255) {\n                    throw new Sk.builtin.ValueError(\"byte must be in range(0, 256)\");\n                }\n                to_extend.push(v);\n            });\n            const new_v = new Uint8Array(this.v.length + to_extend.length);\n            new_v.set(this.v);\n            new_v.set(to_extend, this.v.length);\n            this.v = new_v;\n        },\n        pop(index) {\n            const len = this.v.length;\n            if (len === 0) {\n                throw new Sk.builtin.IndexError(\"pop from empty bytearray\");\n            }\n            index = index === undefined ? len - 1 : Sk.misceval.asIndexSized(index);\n            if (index < 0) {\n                index += len;\n            }\n            if (index < 0 || index >= len) {\n                throw new Sk.builtin.IndexError(\"pop index out of range\");\n            }\n            const value = this.v[index];\n            const new_v = new Uint8Array(len - 1);\n            new_v.set(this.v.subarray(0, index));\n            new_v.set(this.v.subarray(index + 1), index);\n            this.v = new_v;\n            return new Sk.builtin.int_(value);\n        },\n        clear() {\n            this.v = new Uint8Array();\n        },\n    },\n    flags: {\n        str$encode: strEncode,\n        $decode: bytesDecode,\n        check$encodeArgs: checkGetEncodingErrors,\n    },\n    methods: {\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple(new Sk.builtin.bytearray(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: null,\n        },\n        decode: {\n            $meth: bytesDecode,\n            $flags: { NamedArgs: [\"encoding\", \"errors\"] },\n            $textsig: \"($self, /, encoding='utf-8', errors='strict')\",\n            $doc: \"Decode the bytes using the codec registered for encoding.\\n\\n  encoding\\n    The encoding with which to decode the bytes.\\n  errors\\n    The error handling scheme to use for the handling of decoding errors.\\n    The default is 'strict' meaning that decoding errors raise a\\n    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\\n    as well as any other name registered with codecs.register_error that\\n    can handle UnicodeDecodeErrors.\",\n        },\n        append: {\n            $meth(value) {\n                this.append(value);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $doc: \"Append a single byte to the end of the bytearray.\",\n        },\n        extend: {\n            $meth(iterable) {\n                this.extend(iterable);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $doc: \"Extend bytearray with bytes from an iterable.\",\n        },\n        pop: {\n            $meth(index) {\n                return this.pop(index);\n            },\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $doc: \"Remove and return a single byte from the bytearray.\",\n        },\n        clear: {\n            $meth() {\n                this.clear();\n                return Sk.builtin.none.none$;\n            },\n            $flags: { NoArgs: true },\n            $doc: \"Remove all elements from the bytearray.\",\n        },\n        // Implement other mutable methods (e.g., remove, insert, etc.)\n    },\n    classmethods: {\n        fromhex: {\n            $meth: fromhex,\n            $flags: { OneArg: true },\n            $textsig: \"($type, string, /)\",\n            $doc: \"Create a bytes object from a string of hexadecimal numbers.\\n\\nSpaces between two numbers are accepted.\\nExample: bytes.fromhex('B9 01EF') -> b'\\\\\\\\xb9\\\\\\\\x01\\\\\\\\xef'.\",\n        },\n    },\n});\n\nfunction checkGetEncodingErrors(funcname, encoding, errors) {\n    // check the types of encoding and errors\n    if (encoding === undefined) {\n        encoding = \"utf-8\";\n    } else if (!Sk.builtin.checkString(encoding)) {\n        throw new Sk.builtin.TypeError(\n            funcname +\n                \"() argument \" +\n                (\"bytesstr\".includes(funcname) ? 2 : 1) +\n                \" must be str not \" +\n                Sk.abstr.typeName(encoding)\n        );\n    } else {\n        encoding = encoding.$jsstr();\n    }\n    if (errors === undefined) {\n        errors = \"strict\";\n    } else if (!Sk.builtin.checkString(errors)) {\n        throw new Sk.builtin.TypeError(\n            funcname +\n                \"() argument \" +\n                (\"bytesstr\".includes(funcname) ? 3 : 2) +\n                \" must be str not \" +\n                Sk.abstr.typeName(errors)\n        );\n    } else {\n        errors = errors.$jsstr();\n    }\n    return { encoding: encoding, errors: errors };\n}\n\nfunction strEncode(pyStr, encoding, errors) {\n    const source = pyStr.$jsstr();\n    encoding = normalizeEncoding(encoding);\n    if (!(errors === \"strict\" || errors === \"ignore\" || errors === \"replace\")) {\n        throw new Sk.builtin.NotImplementedError(\n            \"'\" + errors + \"' error handling not implemented in Skulpt\"\n        );\n    }\n    let uint8;\n    if (encoding === \"ascii\") {\n        uint8 = encodeAscii(source, errors);\n    } else if (encoding === \"utf-8\") {\n        uint8 = Encoder.encode(source);\n    } else if (encoding === \"latin1\") {\n        uint8 = Latin1Encoder.encode(source);\n    } else {\n        throw new Sk.builtin.LookupError(\"unknown encoding: \" + encoding);\n    }\n    return new Sk.builtin.bytes(uint8);\n}\n\nfunction encodeAscii(source, errors) {\n    const data = [];\n    for (let i in source) {\n        const val = source.charCodeAt(i);\n        if (val > 0x7f) {\n            if (errors === \"strict\") {\n                const hexval = makehexform(val);\n                throw new Sk.builtin.UnicodeEncodeError(\n                    \"'ascii' codec can't encode character '\" +\n                        hexval +\n                        \"' in position \" +\n                        i +\n                        \": ordinal not in range(128)\"\n                );\n            } else if (errors === \"replace\") {\n                data.push(63); // \"?\"\n            }\n        } else {\n            data.push(val);\n        }\n    }\n    return new Uint8Array(data);\n}\n\nfunction makehexform(num) {\n    var leading;\n    if (num <= 265) {\n        leading = \"\\\\x\";\n    } else {\n        leading = \"\\\\u\";\n    }\n    num = num.toString(16);\n    if (num.length === 3) {\n        num = num.slice(1, 3);\n    }\n    if (num.length === 1) {\n        num = leading + \"0\" + num;\n    } else {\n        num = leading + num;\n    }\n    return num;\n}\n\nfunction decodeAscii(source, errors) {\n    let final = \"\";\n    for (let i = 0; i < source.length; i++) {\n        const val = source[i];\n        if (val > 0x7f) {\n            if (errors === \"strict\") {\n                throw new Sk.builtin.UnicodeDecodeError(\n                    \"'ascii' codec can't decode byte 0x\" +\n                        val.toString(16) +\n                        \" in position \" +\n                        i +\n                        \": ordinal not in range(128)\"\n                );\n            } else if (errors === \"replace\") {\n                final += String.fromCharCode(65533);\n            }\n        } else {\n            final += String.fromCharCode(val);\n        }\n    }\n    return final;\n}\n\nfunction decodeUtf(source, errors) {\n    const string = Decoder.decode(source);\n    if (errors === \"replace\") {\n        return string;\n    } else if (errors === \"strict\") {\n        const i = string.indexOf(\"\uFFFD\");\n        if (i === -1) {\n            return string;\n        }\n        throw new Sk.builtin.UnicodeDecodeError(\n            \"'utf-8' codec can't decode byte 0x\" +\n                source[i].toString(16) +\n                \" in position \" +\n                i +\n                \": invalid start byte\"\n        );\n    }\n    return string.replace(/\uFFFD/g, \"\");\n}\n\nfunction decodeLatin1(source, errors) {\n    const string = Latin1Decoder.decode(source);\n    if (errors === \"replace\") {\n        return string;\n    } else if (errors === \"strict\") {\n        const i = string.indexOf(\"\uFFFD\");\n        if (i === -1) {\n            return string;\n        }\n        throw new Sk.builtin.UnicodeDecodeError(\n            \"'latin1' codec can't decode byte 0x\" +\n                source[i].toString(16) +\n                \" in position \" +\n                i +\n                \": invalid start byte\"\n        );\n    }\n}\n\nfunction bytesDecode(encoding, errors) {\n    ({ encoding, errors } = checkGetEncodingErrors(\"decode\", encoding, errors));\n    encoding = normalizeEncoding(encoding);\n\n    if (!(errors === \"strict\" || errors === \"ignore\" || errors === \"replace\")) {\n        throw new Sk.builtin.NotImplementedError(\n            \"'\" + errors + \"' error handling not implemented in Skulpt\"\n        );\n    }\n\n    let jsstr;\n    if (encoding === \"ascii\") {\n        jsstr = decodeAscii(this.v, errors);\n    } else if (encoding === \"utf-8\") {\n        jsstr = decodeUtf(this.v, errors);\n    } else if (encoding === \"latin1\") {\n        jsstr = decodeLatin1(this.v, errors);\n    } else {\n        throw new Sk.builtin.LookupError(\"unknown encoding: \" + encoding);\n    }\n    return new Sk.builtin.str(jsstr);\n}\n\nfunction mkStartsEndsWith(funcname, is_match) {\n    return function (prefix, start, end) {\n        if (!(prefix instanceof Sk.builtin.bytes || prefix instanceof Sk.builtin.tuple)) {\n            throw new Sk.builtin.TypeError(\n                funcname +\n                    \" first arg must be bytes or a tuple of bytes, not \" +\n                    Sk.abstr.typeName(prefix)\n            );\n        }\n        ({ start, end } = Sk.builtin.slice.startEnd$wrt(this, start, end));\n        if (end < start) {\n            return Sk.builtin.bool.false$;\n        }\n        const slice = this.v.subarray(start, end);\n\n        if (prefix instanceof Sk.builtin.tuple) {\n            for (\n                let iter = Sk.abstr.iter(prefix), item = iter.tp$iternext();\n                item !== undefined;\n                item = iter.tp$iternext()\n            ) {\n                item = this.get$raw(item);\n                if (is_match(slice, item)) {\n                    return Sk.builtin.bool.true$;\n                }\n            }\n            return Sk.builtin.bool.false$;\n        } else {\n            return is_match(slice, prefix.v) ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n        }\n    };\n}\n\nfunction mkFind(isReversed) {\n    return function find(tgt, start, end) {\n        tgt = this.get$tgt(tgt);\n        ({ start, end } = Sk.builtin.slice.startEnd$wrt(this, start, end));\n        if (end < start) {\n            return -1;\n        }\n        let idx;\n        if (typeof tgt === \"number\") {\n            idx = isReversed ? this.v.lastIndexOf(tgt, end - 1) : this.v.indexOf(tgt, start);\n            return idx >= start && idx < end ? idx : -1;\n        }\n        if (isReversed) {\n            return this.find$subright(tgt, start, end);\n        } else {\n            return this.find$subleft(tgt, start, end);\n        }\n    };\n}\n\nfunction mkPartition(isReversed) {\n    return function partition(sep) {\n        sep = this.get$raw(sep);\n        let pos;\n        if (isReversed) {\n            pos = this.find$subright(sep, 0, this.v.length);\n            if (pos < 0) {\n                return new Sk.builtin.tuple([new Sk.builtin.bytes(), new Sk.builtin.bytes(), this]);\n            }\n        } else {\n            pos = this.find$subleft(sep, 0, this.v.length);\n            if (pos < 0) {\n                return new Sk.builtin.tuple([this, new Sk.builtin.bytes(), new Sk.builtin.bytes()]);\n            }\n        }\n        return new Sk.builtin.tuple([\n            new Sk.builtin.bytes(this.v.subarray(0, pos)),\n            new Sk.builtin.bytes(sep),\n            new Sk.builtin.bytes(this.v.subarray(pos + sep.length)),\n        ]);\n    };\n}\n\nfunction mkStrip(isLeft, isRight) {\n    return function stripBytes(chars) {\n        let strip_chrs;\n        if (chars === undefined || chars === Sk.builtin.none.none$) {\n            // default is to remove ASCII whitespace\n            strip_chrs = new Uint8Array([9, 10, 11, 12, 13, 32, 133]);\n        } else {\n            strip_chrs = this.get$raw(chars);\n        }\n        let start = 0,\n            end = this.v.length;\n        if (isLeft) {\n            while (start < end && strip_chrs.includes(this.v[start])) {\n                start++;\n            }\n        }\n        if (isRight) {\n            while (end > start && strip_chrs.includes(this.v[end - 1])) {\n                end--;\n            }\n        }\n        const final = new Uint8Array(end - start);\n        for (let i = 0; i < final.length; i++) {\n            final[i] = this.v[i + start];\n        }\n        return new Sk.builtin.bytes(final);\n    };\n}\n\nfunction mkJust(funcname, isRight, isCenter) {\n    return function justify(width, fillbyte) {\n        if (fillbyte === undefined) {\n            fillbyte = 32;\n        } else if (!(fillbyte instanceof Sk.builtin.bytes) || fillbyte.v.length != 1) {\n            throw new Sk.builtin.TypeError(\n                funcname +\n                    \"() argument 2 must be a byte string of length 1, not \" +\n                    Sk.abstr.typeName(fillbyte)\n            );\n        } else {\n            fillbyte = fillbyte.v[0];\n        }\n        const mylen = this.v.length;\n        width = Sk.misceval.asIndexSized(width, Sk.builtin.OverflowError);\n        if (width <= mylen) {\n            return new Sk.builtin.bytes(this.v);\n        }\n        const final = new Uint8Array(width);\n        let fill1, fill2;\n        if (isCenter) {\n            fill1 = Math.floor((width - mylen) / 2);\n            fill2 = (width - mylen) % 2 ? fill1 + 1 : fill1;\n        } else if (isRight) {\n            fill1 = width - mylen;\n            fill2 = 0;\n        } else {\n            fill1 = 0;\n            fill2 = width - mylen;\n        }\n        final.fill(fillbyte, 0, fill1);\n        for (let i = 0; i < mylen; i++) {\n            final[i + fill1] = this.v[i];\n        }\n        final.fill(fillbyte, width - fill2);\n        return new Sk.builtin.bytes(final);\n    };\n}\n\nfunction isspace(val) {\n    return (val >= 9 && val <= 13) || val === 32;\n}\nfunction islower(val) {\n    return val >= 97 && val <= 122;\n}\nfunction isupper(val) {\n    return val >= 65 && val <= 90;\n}\nfunction isdigit(val) {\n    return val >= 48 && val <= 57;\n}\n\nfunction checkSepMaxSplit(sep, maxsplit) {\n    maxsplit = Sk.misceval.asIndexSized(maxsplit, Sk.builtin.OverflowError);\n    maxsplit = maxsplit < 0 ? Infinity : maxsplit;\n\n    sep = Sk.builtin.checkNone(sep) ? null : this.get$raw(sep);\n    if (sep !== null && !sep.length) {\n        throw new Sk.builtin.ValueError(\"empty separator\");\n    }\n    return { sep: sep, maxsplit: maxsplit };\n}\n\nfunction mkIsAll(passTest, passesZero) {\n    return function isAll() {\n        if (this.v.length === 0) {\n            return passesZero ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n        }\n        return this.v.every((val) => passTest(val))\n            ? Sk.builtin.bool.true$\n            : Sk.builtin.bool.false$;\n    };\n}\n\nfunction makeIsUpperLower(passTest, failTest) {\n    return function () {\n        let flag = false;\n        for (let i = 0; i < this.v.length; i++) {\n            if (failTest(this.v[i])) {\n                return Sk.builtin.bool.false$;\n            }\n            if (!flag && passTest(this.v[i])) {\n                flag = true;\n            }\n        }\n        return flag ? Sk.builtin.bool.true$ : Sk.builtin.bool.false$;\n    };\n}\n\nfunction mkCaseSwitch(switchCase) {\n    return function lowerUpperSwapCase() {\n        const final = new Uint8Array(this.v.length);\n        for (let i = 0; i < this.v.length; i++) {\n            final[i] = switchCase(this.v[i]);\n        }\n        return new Sk.builtin.bytes(final);\n    };\n}\n\nfunction fromhex(string) {\n    if (!Sk.builtin.checkString(string)) {\n        throw new Sk.builtin.TypeError(\n            \"fromhex() argument must be str, not \" + Sk.abstr.typeName(string)\n        );\n    }\n    string = string.$jsstr();\n    const spaces = /\\s+/g;\n    const ishex = /^[abcdefABCDEF0123456789]{2}$/;\n    const final = [];\n    let index = 0;\n    function pushOrThrow(upto) {\n        for (let i = index; i < upto; i += 2) {\n            let s = string.substr(i, 2);\n            if (!ishex.test(s)) {\n                throw new Sk.builtin.ValueError(\n                    \"non-hexadecimal number found in fromhex() arg at position \" + (i + 1)\n                );\n            }\n            final.push(parseInt(s, 16));\n        }\n    }\n    let match;\n    while ((match = spaces.exec(string)) !== null) {\n        pushOrThrow(match.index);\n        index = spaces.lastIndex;\n    }\n    pushOrThrow(string.length);\n    return new this(final);\n}\n\n/**\n * @constructor\n * @param {Sk.builtin.bytes} bytes\n */\nvar bytes_iter_ = Sk.abstr.buildIteratorClass(\"bytes_iterator\", {\n    constructor: function bytes_iter_(bytes) {\n        this.$index = 0;\n        this.$seq = bytes.v;\n    },\n    iternext() {\n        const next = this.$seq[this.$index++];\n        if (next === undefined) {\n            return undefined;\n        }\n        return new Sk.builtin.int_(next);\n    },\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\nvar bytesToBytearray = function (bytes) {\n    return new Sk.builtin.bytearray(bytes.v);\n};\n\nvar bytesToString = function (bytes) {\n    let num;\n    let quote = \"'\";\n    const hasdbl = bytes.v.indexOf(34) !== -1;\n    let ret = \"\";\n\n    for (let i = 0; i < bytes.v.length; i++) {\n        num = bytes.v[i];\n        if (num < 9 || (num > 10 && num < 13) || (num > 13 && num < 32) || num > 126) {\n            ret += makehexform(num);\n        } else if (num === 9 || num === 10 || num === 13 || num === 39 || num === 92) {\n            switch (num) {\n                case 9:\n                    ret += \"\\\\t\";\n                    break;\n                case 10:\n                    ret += \"\\\\n\";\n                    break;\n                case 13:\n                    ret += \"\\\\r\";\n                    break;\n                case 39:\n                    if (hasdbl) {\n                        ret += \"\\\\'\";\n                    } else {\n                        ret += \"'\";\n                        quote = '\"';\n                    }\n                    break;\n                case 92:\n                    ret += \"\\\\\\\\\";\n                    break;\n            }\n        } else {\n            ret += String.fromCharCode(num);\n        }\n    }\n    ret = \"b\" + quote + ret + quote;\n    return new Sk.builtin.str(ret);\n};\n\nSk.exportSymbol(\"Sk.builtin.bytes\", Sk.builtin.bytes);\nSk.exportSymbol(\"Sk.builtin.bytearray\", Sk.builtin.bytearray);\n", "/**\n * @constructor\n * @param {Array} L\n * @extends {Sk.builtin.object}\n */\nSk.builtin.tuple = Sk.abstr.buildNativeClass(\"tuple\", {\n    constructor: function tuple(L) {\n        if (L === undefined) {\n            L = [];\n        } else if (!Array.isArray(L)) {\n            L = Sk.misceval.arrayFromIterable(L);\n            // internal calls to constructor can't suspend - avoid using this\n        }\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.tuple,\n            \"bad call to tuple, use 'new' with an Array of python objects\"\n        );\n        this.v = L;\n        this.in$repr = false;\n    },\n    slots: /**@lends {Sk.builtin.tuple.prototype}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$doc: \"Built-in immutable sequence.\\n\\nIf no argument is given, the constructor returns an empty tuple.\\nIf iterable is specified the tuple is initialized from iterable's items.\\n\\nIf the argument is a tuple, the return value is the same object.\",\n        $r() {\n            if (this.in$repr) {\n                return new Sk.builtin.str(\"(...)\");\n            }\n            this.in$repr = true;\n            let ret = this.v.map((x) => Sk.misceval.objectRepr(x));\n            this.in$repr = false;\n            ret = ret.join(\", \");\n            if (this.v.length === 1) {\n                ret += \",\";\n            }\n            return new Sk.builtin.str(\"(\" + ret + \")\");\n        },\n        /**\n         * @param {Array} args\n         * @param {Array=} kwargs\n         * @ignore\n         */\n        tp$new(args, kwargs) {\n            // this = Sk.builtin.prototype or a prototype that inherits from Sk.builtin.tuple.prototype\n            if (this !== Sk.builtin.tuple.prototype) {\n                return this.$subtype_new(args, kwargs);\n            }\n            Sk.abstr.checkNoKwargs(\"tuple\", kwargs);\n            Sk.abstr.checkArgsLen(\"tuple\", args, 0, 1);\n            const arg = args[0];\n            if (arg === undefined) {\n                return new Sk.builtin.tuple([]);\n            }\n            if (arg.constructor === Sk.builtin.tuple) {\n                return arg;\n            }\n            return Sk.misceval.chain(\n                Sk.misceval.arrayFromIterable(arg, true),\n                (L) => new Sk.builtin.tuple(L)\n            );\n        },\n        tp$hash() {\n            // the numbers and order are taken from Cpython\n            let y,\n                x = 0x345678,\n                mult = 1000003;\n            const len = this.v.length;\n            for (let i = 0; i < len; ++i) {\n                y = Sk.abstr.objectHash(this.v[i]);\n                if (y === -1) {\n                    return -1;\n                }\n                x = (x ^ y) * mult;\n                mult += 82520 + len + len;\n            }\n            x += 97531;\n            if (x === -1) {\n                x = -2;\n            }\n            return x | 0;\n        },\n        tp$richcompare: Sk.generic.seqCompare,\n        tp$iter() {\n            return new tuple_iter_(this);\n        },\n\n        // sequence and mapping slots\n        mp$subscript(index) {\n            if (Sk.misceval.isIndex(index)) {\n                let i = Sk.misceval.asIndexSized(index);\n                if (i < 0) {\n                    i = this.v.length + i;\n                }\n                if (i < 0 || i >= this.v.length) {\n                    throw new Sk.builtin.IndexError(\"tuple index out of range\");\n                }\n                return this.v[i];\n            } else if (index instanceof Sk.builtin.slice) {\n                const ret = [];\n                index.sssiter$(this.v.length, (i) => {\n                    ret.push(this.v[i]);\n                });\n                return new Sk.builtin.tuple(ret);\n            }\n            throw new Sk.builtin.TypeError(\n                \"tuple indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n            );\n        },\n        sq$length() {\n            return this.v.length;\n        },\n        sq$repeat(n) {\n            n = Sk.misceval.asIndexSized(n, Sk.builtin.OverflowError);\n            if (n === 1 && this.constructor === Sk.builtin.tuple) {\n                return this;\n            }\n            const ret = [];\n            for (let i = 0; i < n; i++) {\n                for (let j = 0; j < this.v.length; j++) {\n                    ret.push(this.v[j]);\n                }\n            }\n            return new Sk.builtin.tuple(ret);\n        },\n        sq$concat(other) {\n            if (!(other instanceof Sk.builtin.tuple)) {\n                throw new Sk.builtin.TypeError(\n                    \"can only concatenate tuple (not '\" + Sk.abstr.typeName(other) + \"') to tuple\"\n                );\n            }\n            return new Sk.builtin.tuple(this.v.concat(other.v));\n        },\n        sq$contains(ob) {\n            for (\n                let it = this.tp$iter(), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                if (i === ob || Sk.misceval.richCompareBool(i, ob, \"Eq\")) {\n                    return true;\n                }\n            }\n            return false;\n        },\n    },\n    proto: /**@lends {Sk.builtin.tuple.prototype}*/ {\n        $subtype_new(args, kwargs) {\n            const instance = new this.constructor();\n            // pass the args but ignore the kwargs for subtyping - these might be handled by the subtypes init method\n            const tuple = Sk.builtin.tuple.prototype.tp$new(args);\n            instance.v = tuple.v;\n            return instance;\n        },\n        sk$asarray() {\n            return this.v.slice(0);\n        },\n    },\n    methods: /**@lends {Sk.builtin.tuple.prototype}*/ {\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple(this.v.slice(0));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: null,\n        },\n        index: /**@lends {Sk.builtin.type.prototype}*/ {\n            $meth(item, start, end) {\n                if (\n                    (start !== undefined && !Sk.misceval.isIndex(start)) ||\n                    (end !== undefined && !Sk.misceval.isIndex(end))\n                ) {\n                    // unusually can't have None here so check this first...\n                    throw new Sk.builtin.TypeError(\n                        \"slice indices must be integers or have an __index__ method\"\n                    );\n                }\n                ({ start, end } = Sk.builtin.slice.startEnd$wrt(this, start, end));\n                const obj = this.v;\n                for (let i = start; i < end; i++) {\n                    if (obj[i] === item || Sk.misceval.richCompareBool(obj[i], item, \"Eq\")) {\n                        return new Sk.builtin.int_(i);\n                    }\n                }\n                throw new Sk.builtin.ValueError(\"tuple.index(x): x not in tuple\");\n            },\n            $flags: { MinArgs: 1, MaxArgs: 3 },\n            $textsig: \"($self, value, start=0, stop=sys.maxsize, /)\",\n            $doc: \"Return first index of value.\\n\\nRaises ValueError if the value is not present.\",\n        },\n        count: {\n            $meth(item) {\n                const len = this.v.length;\n                const obj = this.v;\n                let count = 0;\n                for (let i = 0; i < len; ++i) {\n                    if (obj[i] === item || Sk.misceval.richCompareBool(obj[i], item, \"Eq\")) {\n                        count += 1;\n                    }\n                }\n                return new Sk.builtin.int_(count);\n            },\n            $flags: { OneArg: true },\n            $textsig: \"($self, value, /)\",\n            $doc: \"Return number of occurrences of value.\",\n        },\n    },\n    classmethods: Sk.generic.classGetItem,\n});\n\nSk.exportSymbol(\"Sk.builtin.tuple\", Sk.builtin.tuple);\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.tuple} tuple\n * @private\n */\nvar tuple_iter_ = Sk.abstr.buildIteratorClass(\"tuple_iterator\", {\n    constructor: function tuple_iter_(tuple) {\n        this.$index = 0;\n        this.$seq = tuple.sk$asarray();\n    },\n    iternext: Sk.generic.iterNextWithArray,\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n", "/** @typedef {Sk.builtin.object} */ var pyObject;\n/** @typedef {Sk.builtin.type|Function} */ var typeObject;\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Array=} L A javascript array of key value pairs - All elements should be pyObjects\n *\n * @description\n * call with an array of key value pairs\n * Do not use this function to convert a JS object to a dict\n * Instead use {@link Sk.ffi.remapToPy}\n *\n *\n */\nSk.builtin.dict = Sk.abstr.buildNativeClass(\"dict\", {\n    constructor: function dict(L) {\n        // calling new Sk.builtin.dict is an internal method that requires an array of key value pairs\n        if (L === undefined) {\n            L = [];\n        }\n        Sk.asserts.assert(\n            Array.isArray(L) && L.length % 2 === 0 && this instanceof Sk.builtin.dict,\n            \"bad call to dict constructor\"\n        );\n\n        this.size = 0;\n        this.entries = Object.create(null);\n        this.buckets = {};\n        for (let i = 0; i < L.length; i += 2) {\n            this.set$item(L[i], L[i + 1]);\n        }\n        this.in$repr = false;\n        this.$version = 0; // change version number anytime the keys change\n    },\n    slots: /**@lends {Sk.builtin.dict.prototype}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$as_number: true,\n        tp$hash: Sk.builtin.none.none$,\n        tp$doc: \"dict() -> new empty dictionary\\ndict(mapping) -> new dictionary initialized from a mapping object's\\n    (key, value) pairs\\ndict(iterable) -> new dictionary initialized as if via:\\n    d = {}\\n    for k, v in iterable:\\n        d[k] = v\\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\\n    in the keyword argument list.  For example:  dict(one=1, two=2)\",\n        $r() {\n            if (this.in$repr) {\n                // prevents recursively calling repr;\n                return new Sk.builtin.str(\"{...}\");\n            }\n            this.in$repr = true;\n            // iterate over the keys - we don't use the dict iterator or mp$subscript here\n            const ret = this.$items().map(\n                ([key, val]) => Sk.misceval.objectRepr(key) + \": \" + Sk.misceval.objectRepr(val)\n            );\n            this.in$repr = false;\n            return new Sk.builtin.str(\"{\" + ret.join(\", \") + \"}\");\n        },\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            return this.update$common(args, kwargs, \"dict\");\n        },\n        tp$iter() {\n            return new dict_iter_(this);\n        },\n        tp$richcompare(other, op) {\n            let res;\n            if (!(other instanceof Sk.builtin.dict) || (op !== \"Eq\" && op !== \"NotEq\")) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            if (other === this) {\n                res = true;\n            } else if (this.size !== other.size) {\n                res = false;\n            } else {\n                let otherv;\n                res = this.$items().every(([key, val]) => {\n                    otherv = other.mp$lookup(key);\n                    return (\n                        otherv !== undefined &&\n                        (otherv === val || Sk.misceval.richCompareBool(val, otherv, \"Eq\"))\n                    );\n                });\n            }\n            return op === \"Eq\" ? res : !res;\n        },\n        // as number slot\n        nb$or(other) {\n            if (!(other instanceof Sk.builtin.dict)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            const dict = this.dict$copy();\n            dict.dict$merge(other);\n            return dict;\n        },\n        nb$reflected_or(other) {\n            if (!(other instanceof Sk.builtin.dict)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            // dict or is not commutative so must define reflected slot here.\n            const dict = other.dict$copy();\n            dict.dict$merge(this);\n            return dict;\n        },\n        nb$inplace_or(other) {\n            return Sk.misceval.chain(this.update$onearg(other), () => this);\n        },\n        // sequence or mapping slots\n        sq$length() {\n            return this.get$size();\n        },\n        sq$contains(ob) {\n            return this.mp$lookup(ob) !== undefined;\n        },\n        mp$subscript(key, canSuspend) {\n            const res = this.mp$lookup(key);\n            if (res !== undefined) {\n                // Found in dictionary\n                return res;\n            }\n            let missing = Sk.abstr.lookupSpecial(this, Sk.builtin.str.$missing);\n            if (missing !== undefined) {\n                const ret = Sk.misceval.callsimOrSuspendArray(missing, [key]);\n                return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n            }\n            throw new Sk.builtin.KeyError(key);\n        },\n        mp$ass_subscript(key, value) {\n            if (value === undefined) {\n                const item = this.pop$item(key);\n                if (item === undefined) {\n                    throw new Sk.builtin.KeyError(key);\n                }\n            } else {\n                this.set$item(key, value);\n            }\n        },\n    },\n    methods: /**@lends {Sk.builtin.dict.prototype}*/ {\n        __reversed__: {\n            $meth() {\n                return new dict_reverse_iter_(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Return a reverse iterator over the dict keys.\",\n        },\n        get: {\n            $meth(key, d) {\n                return this.mp$lookup(key) || d || Sk.builtin.none.none$;\n            },\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: \"($self, key, default=None, /)\",\n            $doc: \"Return the value for key if key is in the dictionary, else default.\",\n        },\n        setdefault: {\n            $meth(key, default_) {\n                // logic could be simpler here but some tests dictate we can't do too many lookups\n                let item;\n                const hash = getHash(key);\n                item =\n                    typeof hash === \"string\" ? this.entries[hash] : this.get$bucket_item(key, hash);\n                if (item !== undefined) {\n                    return item[1];\n                }\n                default_ = default_ || Sk.builtin.none.none$;\n                if (typeof hash === \"string\") {\n                    this.entries[hash] = [key, default_];\n                } else {\n                    this.set$bucket_item(key, default_, hash);\n                }\n                this.size++;\n                this.$version++;\n                return default_;\n            },\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: \"($self, key, default=None, /)\",\n            $doc: \"Insert key with a value of default if key is not in the dictionary.\\n\\nReturn the value for key if key is in the dictionary, else default.\",\n        },\n        pop: {\n            $meth(key, d) {\n                const item = this.pop$item(key);\n                if (item !== undefined) {\n                    return item[1];\n                }\n                // Not found in dictionary\n                if (d !== undefined) {\n                    return d;\n                }\n                throw new Sk.builtin.KeyError(key);\n            },\n            $flags: { MinArgs: 1, MaxArgs: 2 },\n            $textsig: null,\n            $doc: \"D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\\nIf key is not found, d is returned if given, otherwise KeyError is raised\",\n        },\n        popitem: {\n            $meth() {\n                // not particularly efficent but we get allkeys as an array to iter anyway\n                const size = this.get$size();\n                if (size === 0) {\n                    throw new Sk.builtin.KeyError(\"popitem(): dictionary is empty\");\n                }\n                const [key, val] = this.$items()[size - 1];\n                this.pop$item(key);\n                return new Sk.builtin.tuple([key, val]);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.popitem() -> (k, v), remove and return some (key, value) pair as a\\n2-tuple; but raise KeyError if D is empty.\",\n        },\n        keys: {\n            $meth() {\n                return new dict_keys(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.keys() -> a set-like object providing a view on D's keys\",\n        },\n        items: {\n            $meth() {\n                return new dict_items(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.items() -> a set-like object providing a view on D's items\",\n        },\n        values: {\n            $meth() {\n                return new dict_values(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.values() -> an object providing a view on D's values\",\n        },\n        update: {\n            $meth(args, kwargs) {\n                return Sk.misceval.chain(\n                    this.update$common(args, kwargs, \"update\"),\n                    () => Sk.builtin.none.none$\n                );\n            },\n            $flags: { FastCall: true },\n            $textsig: null,\n            $doc: \"D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\\nIn either case, this is followed by: for k in F:  D[k] = F[k]\",\n        },\n        clear: {\n            $meth() {\n                this.size = 0;\n                this.$version++;\n                this.entries = Object.create(null);\n                this.buckets = {};\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.clear() -> None.  Remove all items from D.\",\n        },\n        copy: {\n            $meth() {\n                return this.dict$copy();\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.copy() -> a shallow copy of D\",\n        },\n    },\n    classmethods: /**@lends {Sk.builtin.dict.prototype}*/ Object.assign(\n        {\n            fromkeys: {\n                $meth: function fromkeys(seq, value) {\n                    value = value || Sk.builtin.none.none$;\n                    let dict = this === Sk.builtin.dict ? new this() : this.tp$call([], []);\n                    return Sk.misceval.chain(\n                        dict,\n                        (d) => {\n                            dict = d;\n                            return Sk.misceval.iterFor(Sk.abstr.iter(seq), (key) => {\n                                return dict.mp$ass_subscript(key, value, true);\n                            });\n                        },\n                        () => dict\n                    );\n                },\n                $flags: { MinArgs: 1, MaxArgs: 2 },\n                $textsig: \"($type, iterable, value=None, /)\",\n                $doc: \"Create a new dictionary with keys from iterable and values set to value.\",\n            },\n        },\n        Sk.generic.classGetItem\n    ),\n    proto: /**@lends {Sk.builtin.dict.prototype}*/ {\n        quick$lookup,\n        mp$lookup,\n        get$size() {\n            // can't be overridden by subclasses so we use this for the dict key iterator\n            return this.size;\n        },\n        sk$asarray() {\n            return Object.values(this.entries).map((item) => item[0]);\n        },\n        update$common,\n        update$onearg(arg) {\n            if (\n                arg instanceof Sk.builtin.dict ||\n                Sk.abstr.lookupSpecial(arg, Sk.builtin.str.$keys) !== undefined\n            ) {\n                return this.dict$merge(arg);\n            } else {\n                return this.dict$merge_seq(arg);\n            }\n        },\n        dict$copy() {\n            const newCopy = new Sk.builtin.dict([]);\n            newCopy.size = this.size;\n            const entries = Object.entries(this.entries); // do it this way for mappingproxy\n            for (let i in entries) {\n                const key = entries[i][0];\n                const item = entries[i][1];\n                newCopy.entries[key] = [item[0], item[1]];\n            }\n            let bucket, this_bucket;\n            for (let i in this.buckets) {\n                this_bucket = this.buckets[i];\n                newCopy.buckets[i] = bucket = [];\n                for (let j = 0; j < this_bucket.length; j++) {\n                    bucket.push(newCopy.entries[\"#\" + i + \"_\" + j]);\n                }\n            }\n            return newCopy;\n        },\n        $items() {\n            return Object.values(this.entries);\n        },\n        set$item,\n        get$bucket_item,\n        pop$bucket_item,\n        set$bucket_item,\n        pop$item,\n        dict$merge,\n        dict$merge_seq,\n    },\n});\n\nfunction getHash(key) {\n    let key_hash = key.$savedKeyHash;\n    if (key_hash !== undefined) {\n        return key_hash;\n    }\n    key_hash = Sk.abstr.objectHash(key);\n    return key_hash;\n}\n\n/**\n * @private\n * @param {Sk.builtin.str} pyName\n * @this {Sk.builtin.dict}\n *\n * this is hot code!\n */\nfunction quick$lookup(pyName) {\n    /**@type {string} */\n    var key_hash = pyName.$savedKeyHash;\n    var item = this.entries[key_hash];\n    if (item !== undefined) {\n        return item[1];\n    }\n    return;\n}\n\n/**\n * NB:\n * We could put the following methods on the proto in the above object literal\n * but they're quite long so we keep them below for readability\n * @ignore\n */\n\n/**\n * @function\n * @param {pyObject} key - key to get item for\n * @param {string} hash_value - hash_value from the key\n *\n * @description\n * fast call - if we have a str then we can guarantee that it's in the bucket\n * so we compare strings quickly rather than reaching out to richcompareBool\n *\n * @return {pyObject|undefined} the item if found or undefined if not found\n * @private\n */\nfunction get$bucket_item(key, hash_value) {\n    const bucket = this.buckets[hash_value];\n    if (bucket === undefined) {\n        return;\n    }\n    let item;\n    for (let i = 0; i < bucket.length; i++) {\n        item = bucket[i];\n        if (item === undefined) {\n            continue;\n        }\n        if (item[0] === key || Sk.misceval.richCompareBool(key, item[0], \"Eq\")) {\n            return item;\n        }\n    }\n    return;\n}\n\n/**\n * @function\n * @param {pyObject} key\n * @param {string} hash_value\n *\n * @return undefined if no key was found\n * or the item if the key was in the bucket\n * also removes the item from entries\n * @private\n */\nfunction pop$bucket_item(key, hash_value) {\n    const bucket = this.buckets[hash_value];\n    let bucket_key, item;\n    if (bucket === undefined) {\n        return undefined;\n    }\n    for (let i = 0; i < bucket.length; i++) {\n        item = bucket[i];\n        if (item === undefined) {\n            continue;\n        }\n        if (item[0] === key || Sk.misceval.richCompareBool(key, item[0], \"Eq\")) {\n            const key_hash = \"#\" + hash_value + \"_\" + i;\n            delete this.entries[key_hash];\n            bucket[i] = undefined;\n            if (bucket.every((x) => x === undefined)) {\n                delete this.buckets[hash_value];\n            }\n            return item;\n        }\n    }\n    return;\n}\n\n/**\n * @function\n * @param {Sk.builtin.object} key\n * @param {Sk.builtin.object} value\n * @param {string} hash_value\n *\n * @description\n * given a key and a hash_value will find a free slot or append to the list of slots for a given hash_value\n * then will set the item in the entries and return the item\n * Note this should only be called and immediately preceded by assigning the value to the rhs\n *\n * @private\n */\nfunction set$bucket_item(key, value, hash_value) {\n    let key_hash,\n        bucket = this.buckets[hash_value];\n    const item = [key, value];\n    if (bucket === undefined) {\n        this.buckets[hash_value] = [item];\n        key_hash = \"#\" + hash_value + \"_\" + 0;\n    } else {\n        // we might have a freeslot from deleting an item\n        const free_slot_idx = bucket.indexOf(undefined);\n        if (free_slot_idx !== -1) {\n            key_hash = \"#\" + hash_value + \"_\" + free_slot_idx;\n            bucket[free_slot_idx] = item;\n        } else {\n            key_hash = \"#\" + hash_value + \"_\" + bucket.length;\n            bucket.push(item);\n        }\n    }\n    this.entries[key_hash] = item;\n}\n\n/**\n * @function\n * @param {Sk.builtin.object} key - want to check if the key is inside the dict\n *\n * @return undefined if no key was found\n * or the item[1] (value) if the key was found\n * @private\n */\nfunction mp$lookup(key) {\n    let item;\n    const hash = getHash(key);\n    if (typeof hash === \"string\") {\n        item = this.entries[hash];\n    } else {\n        // then we have a base hash so this is non string;\n        item = this.get$bucket_item(key, hash);\n    }\n    if (item !== undefined) {\n        return item[1];\n    }\n    // Not found in dictionary\n    return undefined;\n}\n\n/**\n * @function\n *\n * @param {Sk.builtin.dict} b or dictlike object (anything with a keys method)\n *\n * @description\n * this function mimics the cpython implementation, which is also the reason for the\n * almost similar code, this may be changed in future\n *\n * Note we don't use mp$ass_subscript since that slot might be overridden by a subclass\n * Instead we use this.set$item which is the dict implementation of mp$ass_subscript\n * @private\n */\nfunction dict$merge(b) {\n    // we don't use mp$ass_subscript incase a subclass overrides __setitem__ we just ignore that like Cpython does\n    // so use this.set$item instead which can't be overridden by a subclass\n    if (b.tp$iter === Sk.builtin.dict.prototype.tp$iter) {\n        // fast way used\n        const keys = b.tp$iter();\n        for (let key = keys.tp$iternext(); key !== undefined; key = keys.tp$iternext()) {\n            const v = b.mp$subscript(key);\n            this.set$item(key, v);\n        }\n    } else {\n        // generic slower way for a subclass that has overriden the tp$iter method\n        // or other mapping types like mapping proxy\n        const keyfunc = Sk.abstr.lookupSpecial(b, Sk.builtin.str.$keys);\n        if (keyfunc === undefined) {\n            throw new Sk.builtin.TypeError(\n                \"'\" + Sk.abstr.typeName(b) + \"' object is not a mapping\"\n            );\n        }\n\n        return Sk.misceval.chain(Sk.misceval.callsimOrSuspendArray(keyfunc), (keys) =>\n            Sk.misceval.iterFor(Sk.abstr.iter(keys), (key) =>\n                Sk.misceval.chain(Sk.abstr.objectGetItem(b, key, true), (v) => {\n                    this.set$item(key, v);\n                })\n            )\n        );\n    }\n}\n\n/**\n * @function\n *\n * @param {Array} args\n * @param {Array} kwargs\n * @param {string} func_name for error messages\n *\n * @description\n *\n *   update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two).\n *   If keyword arguments are specified, the dictionary is then updated with those key/value pairs: d.update(red=1, blue=2).\n *   https://hg.python.org/cpython/file/4ff865976bb9/Objects/dictobject.c\n *\n * this function is called by both __init__ and update\n * We check that there is only 1 arg\n *\n * if arg is a dict like object we call dict$merge (must have a keys attribute)\n * otherwise call dict$merge_seq\n *\n * finally put the kwargs in the dict.\n * @private\n *\n */\nfunction update$common(args, kwargs, func_name) {\n    Sk.abstr.checkArgsLen(func_name, args, 0, 1);\n    const arg = args[0];\n    let ret;\n    if (arg !== undefined) {\n        ret = this.update$onearg(arg);\n    }\n    return Sk.misceval.chain(ret, () => {\n        if (kwargs) {\n            for (let i = 0; i < kwargs.length; i += 2) {\n                this.set$item(new Sk.builtin.str(kwargs[i]), kwargs[i + 1]);\n            }\n        }\n        return;\n    });\n}\n\n/**\n * @function\n *\n * @param {pyObject} arg\n *\n * @description\n * iterate over a sequence like object\n * check the next value has length 2\n * and then set the key value pair in\n * @private\n *\n */\nfunction dict$merge_seq(arg) {\n    let idx = 0;\n    return Sk.misceval.iterFor(Sk.abstr.iter(arg), (i) => {\n        if (!Sk.builtin.checkIterable(i)) {\n            throw new Sk.builtin.TypeError(\n                \"cannot convert dictionary update sequence element #\" + idx + \" to a sequence\"\n            );\n        }\n        const seq = Sk.misceval.arrayFromIterable(i);\n        if (seq.length !== 2) {\n            throw new Sk.builtin.ValueError(\n                \"dictionary update sequence element #\" +\n                    idx +\n                    \" has length \" +\n                    seq.length +\n                    \"; 2 is required\"\n            );\n        }\n        this.set$item(seq[0], seq[1]);\n        idx++;\n    });\n}\n\n/**\n * @function\n *\n * @param {pyObject} key should be a python object\n * @param {pyObject} value\n *\n * @description\n * sets the item from a key, value\n * @private\n *\n */\nfunction set$item(key, value) {\n    const hash = getHash(key);\n    let item;\n    if (typeof hash === \"string\") {\n        // we have a string so pass it to the dictionary\n        item = this.entries[hash];\n        if (item === undefined) {\n            this.entries[hash] = [key, value];\n            this.size++;\n            this.$version++;\n        } else {\n            item[1] = value;\n        }\n    } else {\n        item = this.get$bucket_item(key, hash);\n        if (item === undefined) {\n            this.set$bucket_item(key, value, hash);\n            this.size++;\n            this.$version++;\n        } else {\n            item[1] = value;\n        }\n    }\n}\n\n/**\n * @function\n *\n * @param {Sk.builtin.object} key\n *\n * @description\n * deletes an item in the dictionary\n * @private\n *\n */\nfunction pop$item(key) {\n    const hash = getHash(key);\n    let item;\n    if (typeof hash === \"string\") {\n        item = this.entries[hash];\n        delete this.entries[hash];\n    } else {\n        item = this.pop$bucket_item(key, hash);\n    }\n    if (item !== undefined) {\n        this.size--;\n        this.$version++;\n        return item;\n    }\n    // Not found in dictionary\n    return undefined;\n}\n\n/******** Start of Dict Views ********/\n\nfunction as_set(self) {\n    return new Sk.builtin.set(Sk.misceval.arrayFromIterable(self));\n}\nfunction checkAnyView(view) {\n    return view instanceof dict_keys || view instanceof dict_items;\n}\nfunction all_contained_in(self, other) {\n    for (\n        let it = Sk.abstr.iter(self), i = it.tp$iternext();\n        i !== undefined;\n        i = it.tp$iternext()\n    ) {\n        if (!Sk.abstr.sequenceContains(other, i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// compile shared slots\nconst dict_view_slots = {\n    tp$getattr: Sk.generic.getAttr,\n    tp$as_number: true,\n    tp$as_sequence_or_mapping: true,\n    tp$hash: Sk.builtin.none.none$,\n    $r() {\n        if (this.in$repr) {\n            // prevent recursively calling oneself\n            return new Sk.builtin.str(\"...\");\n        }\n        this.in$repr = true;\n        let ret = Sk.misceval.arrayFromIterable(this);\n        ret = ret.map((x) => Sk.misceval.objectRepr(x));\n        this.in$repr = false;\n        return new Sk.builtin.str(Sk.abstr.typeName(this) + \"([\" + ret.join(\", \") + \"])\");\n    },\n    tp$richcompare(other, op) {\n        if (!(Sk.builtin.checkAnySet(other) || checkAnyView(other))) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        const len_self = this.sq$length();\n        const len_other = other.sq$length();\n        switch (op) {\n            case \"NotEq\":\n            case \"Eq\":\n                let res;\n                if (this === other) {\n                    res = true;\n                } else if (len_self === len_other) {\n                    res = all_contained_in(this, other);\n                }\n                return op === \"NotEq\" ? !res : res;\n            case \"Lt\":\n                return len_self < len_other && all_contained_in(this, other);\n            case \"LtE\":\n                return len_self <= len_other && all_contained_in(this, other);\n            case \"Gt\":\n                return len_self > len_other && all_contained_in(other, this);\n            case \"GtE\":\n                return len_self >= len_other && all_contained_in(other, this);\n        }\n    },\n    nb$subtract(other) {\n        const set = as_set(this);\n        return set.difference.$meth.call(set, other);\n    },\n    nb$and(other) {\n        const set = as_set(this);\n        return set.intersection.$meth.call(set, other);\n    },\n    nb$or(other) {\n        const set = as_set(this);\n        return set.union.$meth.call(set, other);\n    },\n    nb$xor(other) {\n        const set = as_set(this);\n        return set.symmetric_difference.$meth.call(set, other);\n    },\n    sq$length() {\n        return this.dict.get$size();\n    },\n};\n\nfunction buildDictView(typename, slots, reverse_method) {\n    const options = {\n        constructor: function dict_view(dict) {\n            if (arguments.length !== 1) {\n                throw new Sk.builtin.TypeError(\n                    \"cannot create '\" + Sk.abstr.typeName(this) + \"' instances\"\n                );\n            }\n            this.dict = dict;\n            this.in$repr = false;\n        },\n    };\n    options.slots = Object.assign(slots, dict_view_slots);\n    options.methods = {\n        isdisjoint: {\n            $meth(other) {\n                const set = as_set(this);\n                return set.isdisjoint.$meth.call(set, other);\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Return True if the view and the given iterable have a null intersection.\",\n        },\n        __reversed__: {\n            $meth: reverse_method,\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Return a reverse iterator over the dict keys.\",\n        },\n    };\n    options.flags = {\n        sk$acceptable_as_base: false,\n    };\n    if (typename === \"dict_values\") {\n        // dict_values doesn't have number or richcompare slots\n        delete options.slots.tp$as_number;\n        delete options.slots.tp$richcompare;\n    }\n    return Sk.abstr.buildNativeClass(typename, options);\n}\n\nvar dict_keys = buildDictView(\n    \"dict_keys\",\n    {\n        sq$contains(key) {\n            return this.dict.mp$lookup(key) !== undefined;\n        },\n        tp$iter() {\n            return new dict_iter_(this.dict);\n        },\n    },\n    function __reverse__() {\n        return new dict_reverse_iter_(this.dict);\n    }\n);\n\nvar dict_values = buildDictView(\n    \"dict_values\",\n    {\n        tp$iter() {\n            return new dict_valueiter_(this.dict);\n        },\n    },\n    function __reverse__() {\n        return new dict_reverse_valueiter_(this.dict);\n    }\n);\n\nvar dict_items = buildDictView(\n    \"dict_items\",\n    {\n        sq$contains(item) {\n            if (!(item instanceof Sk.builtin.tuple && item.sq$length() === 2)) {\n                return false;\n            }\n            const key = item.mp$subscript(new Sk.builtin.int_(0));\n            const value = item.mp$subscript(new Sk.builtin.int_(1));\n            const found = this.dict.mp$lookup(key);\n            if (found === undefined) {\n                return false;\n            }\n            return found === value || Sk.misceval.richCompareBool(found, value, \"Eq\");\n        },\n        tp$iter() {\n            return new dict_itemiter_(this.dict);\n        },\n    },\n    function __reverse__() {\n        return new dict_reverse_itemiter_(this.dict);\n    }\n);\n\n/**\n * @param {string} typename\n * @param {Function} iternext\n * @param {Function=} constructor\n */\nfunction buildDictIterClass(typename, iternext, reversed) {\n    return Sk.abstr.buildIteratorClass(typename, {\n        constructor: function dict_iter_constructor(dict) {\n            this.$index = 0;\n            this.$orig = dict;\n            this.tp$iternext = () => {\n                // only set up the array on the first iteration\n                this.$seq = dict.$items();\n                this.$version = dict.$version;\n                if (reversed) {\n                    this.$seq = this.$seq.reverse();\n                }\n                this.tp$iternext = this.constructor.prototype.tp$iternext;\n                return this.tp$iternext();\n            };\n        },\n        iternext: iternext,\n        methods: {\n            __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n        },\n        flags: { sk$unacceptableBase: true },\n        proto: { next$item: itemIterNextCheckSize },\n    });\n}\n\nfunction itemIterNextCheckSize() {\n    if (this.$version !== this.$orig.$version) {\n        if (this.$seq.length !== this.$orig.get$size()) {\n            throw new Sk.builtin.RuntimeError(\"dict changed size during iteration\");\n        }\n        throw new Sk.builtin.RuntimeError(\"dictionary keys changed during iteration\");\n    }\n    return this.$seq[this.$index++];\n}\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nvar dict_iter_ = buildDictIterClass(\"dict_keyiterator\", function () {\n    const item = this.next$item();\n    return item && item[0];\n});\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nvar dict_itemiter_ = buildDictIterClass(\"dict_itemiterator\", function () {\n    const item = this.next$item();\n    return item && new Sk.builtin.tuple([item[0], item[1]]);\n});\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nvar dict_valueiter_ = buildDictIterClass(\"dict_valueiterator\", function () {\n    const item = this.next$item();\n    return item && item[1];\n});\n\nvar dict_reverse_iter_ = buildDictIterClass(\n    \"dict_reversekeyiterator\",\n    dict_iter_.prototype.tp$iternext,\n    true\n);\nvar dict_reverse_itemiter_ = buildDictIterClass(\n    \"dict_reverseitemiterator\",\n    dict_itemiter_.prototype.tp$iternext,\n    true\n);\nvar dict_reverse_valueiter_ = buildDictIterClass(\n    \"dict_reversevalueiterator\",\n    dict_valueiter_.prototype.tp$iternext,\n    true\n);\n\n/**\n * Py2 methods\n * @private\n */\nSk.builtin.dict.py2$methods = {\n    has_key: {\n        $name: \"has_key\",\n        $flags: { OneArg: true },\n        $meth(k) {\n            return new Sk.builtin.bool(this.sq$contains(k));\n        },\n        $doc: \"D.has_key(k) -> True if D has a key k, else False\",\n    },\n    keys: {\n        $name: \"keys\",\n        $meth() {\n            return new Sk.builtin.list(this.sk$asarray());\n        },\n        $flags: { NoArgs: true },\n        $textsig: null,\n        $doc: \"D.keys() -> a set-like object providing a view on D's keys\",\n    },\n    items: {\n        $name: \"items\",\n        $meth() {\n            return new Sk.builtin.list(\n                this.$items().map(([key, val]) => new Sk.builtin.tuple([key, val]))\n            );\n        },\n        $flags: { NoArgs: true },\n        $textsig: null,\n        $doc: \"D.items() -> a set-like object providing a view on D's items\",\n    },\n    values: {\n        $name: \"values\",\n        $meth() {\n            return new Sk.builtin.list(this.$items().map(([_, val]) => val));\n        },\n        $flags: { NoArgs: true },\n        $textsig: null,\n        $doc: \"D.values() -> an object providing a view on D's values\",\n    },\n};\n", "const dict$views = {\n    KEYS: \"dict_keys\",\n    VALUES: \"dict_values\",\n    ITEMS: \"dict_items\",\n};\n\nfunction buildDictView(typename) {\n    const dict_view_options = {};\n    dict_view_options.constructor = function (dict) {\n        this.dict = dict;\n    };\n    dict_view_options.slots = {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_number: true,\n        tp$as_sequence_or_mapping: true,\n        tp$hash: Sk.builtin.none.none$,\n        $r: function () {\n            if (this.$entered_repr !== undefined) {\n                // prevent recursively calling oneself\n                return new Sk.builtin.str(\"...\");\n            }\n            this.$entered_repr = true;\n            const L = Sk.misceval.arrayFromIterable(this);\n            const res = Sk.misceval.objectRepr(new Sk.builtin.list(L));\n            this.$entered_repr = undefined;\n            return new Sk.builtin.str(Sk.abstr.typeName(this) + \"(\" + res + \")\");\n        },\n        tp$richcompare: function () {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n        tp$iter: function () {\n            if (this.tp$name === dict$views.KEYS) {\n                return new Sk.builtin.dict_iter_(this.dict);\n            } else if (this.tp$name === dict$views.VALUES) {\n                return new Sk.builtin.dict_valueiter_(this.dict);\n            } else if (this.tp$name === dict$views.ITEMS) {\n                return new Sk.builtin.dict_itemiter_(this.dict);\n            }\n        },\n        nb$subtract: function () {\n            // TODO\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n        nb$and: function () {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n        nb$or: function () {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n        nb$xor: function () {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        },\n\n        sq$length: function () {\n            return this.dict.get$size();\n        },\n        sq$contains: function (item) {\n            var iter, key, value, pair;\n            if (this.tp$name === dict$views.KEYS) {\n                return this.dict.mp$lookup(item) !== undefined;\n            } else if (this.tp$name === dict$views.VALUES) {\n                for (\n                    iter = Sk.abstr.iter(this.dict), key = iter.tp$iternext();\n                    key !== undefined;\n                    key = iter.tp$iternext()\n                ) {\n                    value = this.dict.mp$subscript(key);\n                    if (value === undefined) {\n                        value = null;\n                    }\n                    if (Sk.misceval.isTrue(Sk.misceval.richCompareBool(value, item, \"Eq\"))) {\n                        return true;\n                    }\n                }\n                return false;\n            } else if (this.tp$name === dict$views.ITEMS) {\n                if (item.mp$subscript && item.sq$length && item.sq$length() === 2) {\n                    key = item.mp$subscript(new Sk.builtin.int_(0));\n                    value = this.dict.mp$lookup(key);\n                    if (value !== undefined) {\n                        pair = new Sk.builtin.tuple([key, value]);\n                        if (Sk.misceval.isTrue(Sk.misceval.richCompareBool(pair, item, \"Eq\"))) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n    };\n    dict_view_options.methods = {\n        isdisjoint: {\n            $meth: function () {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            },\n            $flags: {},\n            $textsig: null,\n            $doc: \"Return True if the view and the given iterable have a null intersection.\",\n        },\n        __reversed__: {\n            $meth: function () {\n                if (this.tp$name === dict$views.KEYS) {\n                    return new Sk.builtin.dict_reverse_iter_(this.dict);\n                } else if (this.tp$name === dict$views.ITEMS) {\n                    return new Sk.builtin.dict_reverse_itemiter_(this.dict);\n                } else if (this.tp$name === dict$views.VALUES) {\n                    return new Sk.builtin.dict_reverse_valueiter_(this.dict);\n                }\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Return a reverse iterator over the dict keys.\",\n        },\n    };\n    dict_view_options.flags = {\n        sk$acceptable_as_base: false,\n    };\n\n    return Sk.abstr.buildNativeClass(typename, dict_view_options);\n}\n\nSk.builtin.dict_keys = buildDictView(\"dict_keys\");\nSk.builtin.dict_values = buildDictView(\"dict_values\");\nSk.builtin.dict_items = buildDictView(\"dict_items\");\n\nfunction dict_iter_constructor(dict) {\n    this.$index = 0;\n    this.$seq = dict.sk$asarray();\n    this.$orig = dict;\n}\n\n/**\n * @param {string} typename\n * @param {Function} iternext\n * @param {Function=} constructor\n */\nfunction buildDictIterClass(typename, iternext, constructor) {\n    return Sk.abstr.buildIteratorClass(typename, {\n        constructor:\n            constructor ||\n            function (dict) {\n                dict_iter_constructor.call(this, dict);\n            },\n        iternext: iternext,\n        methods: {\n            __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n        },\n        flags: { sk$acceptable_as_base_class: false },\n    });\n}\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nSk.builtin.dict_iter_ = buildDictIterClass(\n    \"dict_keyiterator\",\n    Sk.generic.iterNextWithArrayCheckSize\n);\n\nfunction dict_iter_get_value_or_throw() {\n    const key = Sk.generic.iterNextWithArrayCheckSize.call(this);\n    if (key === undefined) {\n        return key;\n    }\n    const res = this.$orig.mp$lookup(key);\n    if (res !== undefined) {\n        return res;\n    }\n    // some what of a hack since we don't dynamically get keys unlike Python\n    throw new Sk.builtin.RuntimeError(Sk.misceval.objectRepr(key) + \" removed during iteration\");\n}\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nSk.builtin.dict_valueiter_ = buildDictIterClass(\"dict_valueiterator\", function () {\n    return dict_iter_get_value_or_throw.call(this);\n});\n\n/**\n * @constructor\n * @param {Sk.builtin.dict} dict\n */\nSk.builtin.dict_itemiter_ = buildDictIterClass(\"dict_itemiterator\", function __next__() {\n    const idx = this.$index;\n    const val = dict_iter_get_value_or_throw.call(this);\n    if (val === undefined) {\n        return val;\n    }\n    return new Sk.builtin.tuple([this.$seq[idx], val]);\n});\n\nfunction dict_reverse_iter_constructor(dict) {\n    dict_iter_constructor.call(this, dict);\n    this.$seq.reverse();\n}\n\nSk.builtin.dict_reverse_iter_ = buildDictIterClass(\n    \"dict_reversekeyiterator\",\n    Sk.generic.iterNextWithArrayCheckSize,\n    function (dict) {\n        dict_reverse_iter_constructor.call(this, dict);\n    }\n);\n\nSk.builtin.dict_reverse_itemiter_ = buildDictIterClass(\n    \"dict_reverseitemiterator\",\n    Sk.builtin.dict_itemiter_.prototype.tp$iternext,\n    function (dict) {\n        dict_reverse_iter_constructor.call(this, dict);\n    }\n);\n\nSk.builtin.dict_reverse_valueiter_ = buildDictIterClass(\n    \"dict_reversevalueiterator\",\n    Sk.builtin.dict_valueiter_.prototype.tp$iternext,\n    function (dict) {\n        dict_reverse_iter_constructor.call(this, dict);\n    }\n);\n", "/**\n *\n * @constructor\n *\n * @param {Object} d\n *\n * @description\n * This should be called with the prototype of a type object\n * It returns a mapping proxy\n * useful for when we do typeobject.__dict__\n * or module.__dict__ since a module $d is an object literal\n *\n * Internally this should be called with an object literal\n * from python this can be called with a dict instance (or @todo other mapping type)\n *\n * For internal object literals we create a dict object whose internal representation of\n * this.entries is created on the fly (when requested)\n *\n * We could potentially memoise the entries for static objects (builtin types @todo)\n * The problem with memoising for all type objects is that the mappingproxy\n * is a live view of the mapping rather than a static copy\n *\n * ```python\n * >>> x = A.__dict__\n * >>> A.foo = 'bar'\n * >>> x['foo']\n * 'bar'\n * ```\n *\n */\nSk.builtin.mappingproxy = Sk.abstr.buildNativeClass(\"mappingproxy\", {\n    constructor: function mappingproxy(d) {\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.mappingproxy,\n            \"bad call to mapping proxy, use 'new'\"\n        );\n        this.mapping = new Sk.builtin.dict([]);\n        if (d !== undefined) {\n            // internal call so d is an object literal\n            // adust this.mapping.entries to be a custom getter\n            // allowing support for dynamic object literals\n            customEntriesGetter(this.mapping, d);\n        }\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$hash: Sk.builtin.none.none$,\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"mappingproxy\", kwargs);\n            Sk.abstr.checkOneArg(\"mappingproxy\", args, kwargs);\n            const mapping = args[0];\n            if (!Sk.builtin.checkMapping(mapping)) {\n                throw new Sk.builtin.TypeError(\n                    \"mappingproxy() argument must be a mapping, not \" + Sk.abstr.typeName(mapping)\n                );\n            }\n            const mp = new Sk.builtin.mappingproxy();\n            mp.mapping = mapping;\n            return mp;\n        },\n        tp$richcompare(other, op) {\n            return Sk.misceval.richCompareBool(this.mapping, other, op);\n        },\n        tp$str() {\n            return this.mapping.tp$str();\n        },\n        $r() {\n            return new Sk.builtin.str(\"mappingproxy(\" + Sk.misceval.objectRepr(this.mapping) + \")\");\n        },\n        mp$subscript(key, canSuspend) {\n            return this.mapping.mp$subscript(key, canSuspend);\n        },\n        sq$contains(key) {\n            return this.mapping.sq$contains(key);\n        },\n        sq$length() {\n            return this.mapping.sq$length();\n        },\n        tp$iter() {\n            return this.mapping.tp$iter();\n        },\n        tp$as_number: true,\n        nb$or(other) {\n            if (other instanceof Sk.builtin.mappingproxy) {\n                other = other.mapping;\n            }\n            return Sk.abstr.numberBinOp(this.mapping, other, \"BitOr\");\n        },\n        nb$reflected_or(other) {\n            if (other instanceof Sk.builtin.mappingproxy) {\n                other = other.mapping;\n            }\n            return Sk.abstr.numberBinOp(other, this.mapping, \"BitOr\");\n        },\n        nb$inplace_or(other) {\n            throw new Sk.builtin.TypeError(\n                \"'|=' is not supported by \" + Sk.abstr.typeName(this) + \"; use '|' instead\"\n            );\n        },\n    },\n    methods: {\n        get: {\n            $meth(args, kwargs) {\n                return Sk.misceval.callsimArray(\n                    this.mapping.tp$getattr(this.str$get),\n                    args,\n                    kwargs\n                );\n            },\n            $flags: { FastCall: true },\n            $textsig: null,\n            $doc: \"D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\",\n        },\n        keys: {\n            $meth() {\n                return Sk.misceval.callsimArray(this.mapping.tp$getattr(this.str$keys), []);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.keys() -> a set-like object providing a view on D's keys\",\n        },\n        items: {\n            $meth() {\n                return Sk.misceval.callsimArray(this.mapping.tp$getattr(this.str$items), []);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.items() -> a set-like object providing a view on D's items\",\n        },\n        values: {\n            $meth() {\n                return Sk.misceval.callsimArray(this.mapping.tp$getattr(this.str$values), []);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.values() -> a set-like object providing a view on D's values\",\n        },\n        copy: {\n            $meth() {\n                return Sk.misceval.callsimArray(this.mapping.tp$getattr(this.str$copy), []);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"D.copy() -> a shallow copy of D\",\n        },\n    },\n    classmethods: Sk.generic.classGetItem,\n    proto: {\n        str$get: new Sk.builtin.str(\"get\"),\n        str$copy: new Sk.builtin.str(\"copy\"),\n        str$keys: new Sk.builtin.str(\"keys\"),\n        str$items: new Sk.builtin.str(\"items\"),\n        str$values: new Sk.builtin.str(\"values\"),\n        mp$lookup(key) {\n            return this.mapping.mp$lookup(key);\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\nfunction customEntriesGetter(mapping, d) {\n    Object.defineProperties(mapping, {\n        entries: {\n            get: () => {\n                const entries = Object.create(null);\n                Object.entries(d).forEach(([key, val]) => {\n                    key = Sk.unfixReserved(key);\n                    if (!key.includes(\"$\")) {\n                        key = new Sk.builtin.str(key);\n                        entries[key.$savedKeyHash] = [key, val];\n                    }\n                });\n                return entries;\n            },\n            configurable: true,\n        },\n        size: {\n            get: () => {\n                return Object.keys(d)\n                    .map((k) => Sk.unfixReserved(k))\n                    .filter((k) => !k.includes(\"$\")).length;\n            },\n            configurable: true,\n        },\n    });\n}\n", "/**\n * @constructor\n * @param {Sk.builtin.func} fget\n * @param {Sk.builtin.func} fset\n * @param {Sk.builtin.func} fdel\n * @param {Sk.builtin.str} doc\n */\nSk.builtin.property = Sk.abstr.buildNativeClass(\"property\", {\n    constructor: function property(fget, fset, fdel, doc) {\n        // this can be uses as an internal function\n        // typically these properties will be set in the init method\n        this.prop$get = fget || Sk.builtin.none.none$;\n        this.prop$set = fset || Sk.builtin.none.none$;\n        this.prop$del = fdel || Sk.builtin.none.none$;\n        this.prop$doc = doc || (fget && fget.$doc) || Sk.builtin.none.none$;\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            args = Sk.abstr.copyKeywordsToNamedArgs(\n                \"property\",\n                [\"fget\", \"fset\", \"fdel\", \"doc\"],\n                args,\n                kwargs,\n                new Array(4).fill(Sk.builtin.none.none$)\n            );\n\n            this.prop$get = args[0];\n            this.prop$set = args[1];\n            this.prop$del = args[2];\n            if (Sk.builtin.checkNone(args[3])) {\n                if (!Sk.builtin.checkNone(args[0])) {\n                    this.prop$doc = args[0].$doc || args[3];\n                }\n            } else {\n                this.prop$doc = args[3];\n            }\n        },\n        tp$doc: \"Property attribute.\\n\\n  fget\\n    function to be used for getting an attribute value\\n  fset\\n    function to be used for setting an attribute value\\n  fdel\\n    function to be used for del'ing an attribute\\n  doc\\n    docstring\\n\\nTypical use is to define a managed attribute x:\\n\\nclass C(object):\\n    def getx(self): return self._x\\n    def setx(self, value): self._x = value\\n    def delx(self): del self._x\\n    x = property(getx, setx, delx, 'I'm the 'x' property.')\\n\\nDecorators make defining new properties or modifying existing ones easy:\\n\\nclass C(object):\\n    @property\\n    def x(self):\\n        'I am the 'x' property.'\\n        return self._x\\n    @x.setter\\n    def x(self, value):\\n        self._x = value\\n    @x.deleter\\n    def x(self):\\n        del self._x\",\n        tp$descr_get(obj, type) {\n            if (obj === null) {\n                return this;\n            }\n            if (this.prop$get === undefined) {\n                throw new Sk.builtin.AttributeError(\"unreadable attribute\");\n            }\n            return Sk.misceval.callsimOrSuspendArray(this.prop$get, [obj]);\n        },\n        tp$descr_set(obj, value) {\n            let func;\n            if (value == null) {\n                func = this.prop$del;\n            } else {\n                func = this.prop$set;\n            }\n            if (Sk.builtin.checkNone(func)) {\n                const msg = value == null ? \"delete\" : \"set\";\n                throw new Sk.builtin.AttributeError(\"can't \" + msg + \" attribute\");\n            }\n            if (!func.tp$call) {\n                throw new Sk.builtin.TypeError(\"'\" + Sk.abstr.typeName(func) + \"' is not callable\");\n            }\n\n            if (value == null) {\n                return func.tp$call([obj]);\n            } else {\n                return func.tp$call([obj, value]);\n            }\n        },\n    },\n    methods: {\n        getter: {\n            $meth(fget) {\n                return new Sk.builtin.property(fget, this.prop$set, this.prop$del, this.prop$doc);\n            },\n            $flags: { OneArg: true },\n        },\n        setter: {\n            $meth(fset) {\n                return new Sk.builtin.property(this.prop$get, fset, this.prop$del, this.prop$doc);\n            },\n            $flags: { OneArg: true },\n        },\n        deleter: {\n            $meth(fdel) {\n                return new Sk.builtin.property(this.prop$get, this.prop$set, fdel, this.prop$doc);\n            },\n            $flags: { OneArg: true },\n        },\n    },\n    getsets: {\n        fget: {\n            $get() {\n                return this.prop$get;\n            },\n        },\n        fset: {\n            $get() {\n                return this.prop$set;\n            },\n        },\n        fdel: {\n            $get() {\n                return this.prop$del;\n            },\n        },\n        __doc__: {\n            $get() {\n                return this.prop$doc;\n            },\n            $set(value) {\n                value = value || Sk.builtin.none.none$;\n                this.prop$doc = value;\n            },\n        },\n    },\n});\n\n/**\n * @constructor\n * @param {Sk.builtin.func} callable\n */\n\nSk.builtin.classmethod = Sk.abstr.buildNativeClass(\"classmethod\", {\n    constructor: function classmethod(callable) {\n        // this can be used as an internal function\n        // typically callable will be set in the init method if being called by python\n        this.cm$callable = callable;\n        this.$d = new Sk.builtin.dict();\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"classmethod\", kwargs);\n            Sk.abstr.checkArgsLen(\"classmethod\", args, 1, 1);\n            this.cm$callable = args[0];\n        },\n        tp$doc: \"classmethod(function) -> method\\n\\nConvert a function to be a class method.\\n\\nA class method receives the class as implicit first argument,\\njust like an instance method receives the instance.\\nTo declare a class method, use this idiom:\\n\\n  class C:\\n      @classmethod\\n      def f(cls, arg1, arg2, ...):\\n          ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()).  The instance is ignored except for its class.\\nIf a class method is called for a derived class, the derived class\\nobject is passed as the implied first argument.\\n\\nClass methods are different than C++ or Java static methods.\\nIf you want those, see the staticmethod builtin.\",\n        tp$descr_get(obj, type) {\n            const callable = this.cm$callable;\n            if (callable === undefined) {\n                throw new Sk.builtin.RuntimeError(\"uninitialized classmethod object\");\n            }\n            if (type === undefined) {\n                type = obj.ob$type;\n            }\n            const f = callable.tp$descr_get;\n            if (f) {\n                return f.call(callable, type);\n            }\n            return new Sk.builtin.method(callable, type);\n        },\n    },\n    getsets: {\n        __func__: {\n            $get() {\n                return this.cm$callable;\n            },\n        },\n        __dict__: Sk.generic.getSetDict,\n    },\n});\n\n/**\n * @constructor\n * @param {Sk.builtin.func} callable\n */\n\nSk.builtin.staticmethod = Sk.abstr.buildNativeClass(\"staticmethod\", {\n    constructor: function staticmethod(callable) {\n        // this can be used as an internal function\n        // typically callable will be set in the init method if being called by python\n        this.sm$callable = callable;\n        this.$d = new Sk.builtin.dict();\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"staticmethod\", kwargs);\n            Sk.abstr.checkArgsLen(\"staticmethod\", args, 1, 1);\n            this.sm$callable = args[0];\n        },\n        tp$doc: \"staticmethod(function) -> method\\n\\nConvert a function to be a static method.\\n\\nA static method does not receive an implicit first argument.\\nTo declare a static method, use this idiom:\\n\\n     class C:\\n         @staticmethod\\n         def f(arg1, arg2, ...):\\n             ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()).  The instance is ignored except for its class.\\n\\nStatic methods in Python are similar to those found in Java or C++.\\nFor a more advanced concept, see the classmethod builtin.\",\n        tp$descr_get(obj, type) {\n            if (this.sm$callable === undefined) {\n                throw new Sk.builtin.RuntimeError(\"uninitialized staticmethod object\");\n            }\n            return this.sm$callable;\n        },\n    },\n    getsets: {\n        __func__: {\n            $get() {\n                return this.sm$callable;\n            },\n        },\n        __dict__: Sk.generic.getSetDict,\n    },\n});\n", "/**\n *\n * @constructor\n * @extends {Sk.builtin.object}\n * @description\n * Function should only be called with a JS number|BigInt|String\n * If the number is a string then the size will be checked to determined whether it should be a number or BigInt\n * It assumed that a number passed it is within `Number.MaxSafeInteger`\n * Similarly if a BigInt is passed it is assumed that this is larger than `Number.MaxSafeInteger`\n * Internal code like `float.nb$int` checks the resulting JS instance before calling `new Sk.builtin.int_`\n *\n * @param  {number|JSBI|string=} x\n *\n */\nSk.builtin.int_ = Sk.abstr.buildNativeClass(\"int\", {\n    constructor: function int_(x) {\n        Sk.asserts.assert(this instanceof Sk.builtin.int_, \"bad call to int use 'new'\");\n        let v;\n        if (typeof x === \"number\" || JSBI.__isBigInt(x)) {\n            v = x;\n        } else if (x === undefined) {\n            v = 0;\n        } else if (typeof x === \"string\") {\n            v = stringToNumberOrBig(x);\n        } else if (x.nb$int) {\n            return x.nb$int(); // allow this as a slow path\n        } else {\n            Sk.asserts.fail(\"bad argument to int constructor\");\n        }\n        this.v = v;\n    },\n    slots: /** @lends {Sk.builtin.int_.prototype}*/ {\n        tp$as_number: true,\n        tp$doc: \"int(x=0) -> integer\\nint(x, base=10) -> integer\\n\\nConvert a number or string to an integer, or return 0 if no arguments\\nare given.  If x is a number, return x.__int__().  For floating point\\nnumbers, this truncates towards zero.\\n\\nIf x is not a number or if base is given, then x must be a string,\\nbytes, or bytearray instance representing an integer literal in the\\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\\nBase 0 means to interpret the base from the string as an integer literal.\\n>>> int('0b100', base=0)\\n4\",\n        $r() {\n            return new Sk.builtin.str(this.v.toString());\n        },\n        tp$hash() {\n            const v = this.v;\n            return typeof v === \"number\" ? v : JSBI.toNumber(JSBI.remainder(v, JSBI.__MAX_SAFE));\n        },\n        tp$new(args, kwargs) {\n            let x, base;\n            if (args.length + (kwargs ? kwargs.length : 0) === 1) {\n                x = args[0];\n                base = Sk.builtin.none.none$;\n            } else {\n                args = Sk.abstr.copyKeywordsToNamedArgs(\"int\", [null, \"base\"], args, kwargs, [\n                    new Sk.builtin.int_(0),\n                    Sk.builtin.none.none$,\n                ]);\n                x = args[0];\n                base = args[1];\n            }\n            x = getInt(x, base);\n\n            if (this === Sk.builtin.int_.prototype) {\n                return x;\n            } else {\n                const instance = new this.constructor();\n                instance.v = x.v;\n                return instance;\n            }\n        },\n        tp$getattr: Sk.generic.getAttr,\n        ob$eq: compareSlot((v, w) => v == w, JSBI.equal),\n        ob$ne: compareSlot((v, w) => v != w, JSBI.notEqual),\n        ob$gt: compareSlot((v, w) => v > w, JSBI.greaterThan),\n        ob$ge: compareSlot((v, w) => v >= w, JSBI.greaterThanOrEqual),\n        ob$lt: compareSlot((v, w) => v < w, JSBI.lessThan),\n        ob$le: compareSlot((v, w) => v <= w, JSBI.lessThanOrEqual),\n\n        nb$int: cloneSelf,\n        nb$index() {\n            return this.v;\n        },\n        nb$float() {\n            const v = this.v;\n            if (typeof v === \"number\") {\n                return new Sk.builtin.float_(v);\n            } else {\n                const x = parseFloat(JSBI.toNumber(v));\n                if (x === Infinity || x === -Infinity) {\n                    throw new Sk.builtin.OverflowError(\"int too large to convert to float\");\n                }\n                return new Sk.builtin.float_(x);\n            }\n        },\n        nb$isnegative() {\n            const v = this.v;\n            return typeof v === \"number\" ? v < 0 : JSBI.lessThan(v, JSBI.__ZERO);\n        },\n        nb$ispositive() {\n            const v = this.v;\n            return typeof v === \"number\" ? v >= 0 : JSBI.greaterThanOrEqual(v, JSBI.__ZERO);\n        },\n        nb$bool() {\n            return this.v !== 0; // should be fine not to check BigInt here\n        },\n\n        nb$positive: cloneSelf,\n\n        nb$negative: numberUnarySlot((v) => -v, JSBI.unaryMinus),\n\n        nb$add: numberSlot(\n            (v, w) => v + w,\n            (v, w) => JSBI.numberIfSafe(JSBI.add(v, w))\n        ),\n        nb$subtract: numberSlot(\n            (v, w) => v - w,\n            (v, w) => JSBI.numberIfSafe(JSBI.subtract(v, w))\n        ),\n        nb$multiply: numberSlot((v, w) => v * w, JSBI.multiply),\n        nb$divide: trueDivide,\n        nb$floor_divide: numberDivisionSlot((v, w) => Math.floor(v / w), BigIntFloorDivide),\n        nb$remainder: numberDivisionSlot(\n            (v, w) => v - Math.floor(v / w) * w,\n            (v, w) => JSBI.subtract(v, JSBI.multiply(w, BigIntFloorDivide(v, w)))\n        ),\n        nb$divmod(other) {\n            const floor = this.nb$floor_divide(other);\n            const remainder = this.nb$remainder(other);\n            if (\n                floor === Sk.builtin.NotImplemented.NotImplemented$ ||\n                remainder === Sk.builtin.NotImplemented.NotImplemented$\n            ) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            return new Sk.builtin.tuple([floor, remainder]);\n        },\n        nb$and: numberBitSlot((v, w) => v & w, JSBI.bitwiseAnd),\n        nb$or: numberBitSlot((v, w) => v | w, JSBI.bitwiseOr),\n        nb$xor: numberBitSlot((v, w) => v ^ w, JSBI.bitwiseXor),\n\n        nb$abs: numberUnarySlot(Math.abs, BigIntAbs),\n\n        nb$lshift: numberShiftSlot((v, w) => {\n            const tmp = v * 2 * shiftconsts[w];\n            if (numberOrStringWithinThreshold(tmp)) {\n                return tmp;\n            }\n            return undefined; // fall through to using BigInt shift\n        }, JSBI.leftShift),\n        nb$rshift: numberShiftSlot(\n            (v, w) => {\n                // Avoid forced signed 32 bit conversion and just divide.\n                Math.floor(v / shiftconsts[w + 1]);\n            },\n            (v, w) => JSBI.numberIfSafe(JSBI.signedRightShift(v, w))\n        ),\n\n        nb$invert: numberUnarySlot(\n            (v) => (Math.abs(v) < 2 ** 31 ? ~v : undefined),\n            (v) => JSBI.numberIfSafe(JSBI.bitwiseNot(v))\n        ),\n        nb$power(other, mod) {\n            let ret;\n            if (mod === undefined) {\n                // pass\n            } else if (Sk.builtin.checkNone(mod)) {\n                mod = undefined;\n            }\n            if (\n                !(other instanceof Sk.builtin.int_) ||\n                (mod !== undefined && !(mod instanceof Sk.builtin.int_))\n            ) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            const wNeg = other.nb$isnegative();\n            if (wNeg && mod === undefined) {\n                return this.nb$float().nb$power(other.nb$float());\n            }\n            let v = this.v;\n            let w = other.v;\n            if (typeof v === \"number\" && typeof w === \"number\") {\n                const power = Math.pow(v, w);\n                if (numberOrStringWithinThreshold(power)) {\n                    ret = new Sk.builtin.int_(power);\n                    if (mod === undefined) {\n                        return ret;\n                    }\n                }\n            }\n            if (mod !== undefined) {\n                if (wNeg) {\n                    /** @todo - python 3.8 supports this - https://github.com/python/cpython/pull/13266 */\n                    throw new Sk.builtin.ValueError(\n                        \"pow() 2nd argument cannot be negative when 3rd argument specified\"\n                    );\n                } else if (mod.v === 0) {\n                    throw new Sk.builtin.ValueError(\"pow() 3rd argument cannot be 0\");\n                }\n                if (ret !== undefined) {\n                    return ret.nb$remainder(mod);\n                }\n                return new Sk.builtin.int_(JSBI.powermod(bigUp(v), bigUp(w), bigUp(mod.v)));\n            }\n            // if we're here then we've fallen through so do bigint exponentiate\n            return new Sk.builtin.int_(JSBI.exponentiate(bigUp(v), bigUp(w)));\n        },\n        nb$long() {\n            return new Sk.builtin.lng(this.v);\n        },\n    },\n    getsets: /** @lends {Sk.builtin.int_.prototype}*/ {\n        real: {\n            $get: cloneSelf,\n            $doc: \"the real part of a complex number\",\n        },\n        imag: {\n            $get() {\n                return new Sk.builtin.int_(0);\n            },\n            $doc: \"the imaginary part of a complex number\",\n        },\n    },\n    methods: /** @lends {Sk.builtin.int_.prototype}*/ {\n        conjugate: {\n            $meth: cloneSelf,\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Returns self, the complex conjugate of any int.\",\n        },\n        bit_length: {\n            $meth() {\n                let v = this.v;\n                if (v === 0) {\n                    return new Sk.builtin.int_(0);\n                }\n                v = typeof v === \"number\" ? Math.abs(v) : BigIntAbs(v);\n                return new Sk.builtin.int_(v.toString(2).length);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Number of bits necessary to represent self in binary.\\n\\n>>> bin(37)\\n'0b100101'\\n>>> (37).bit_length()\\n6\",\n        },\n        to_bytes: {\n            $meth() {\n                throw new Sk.builtin.NotImplementedError(\"Not yet implemented in Skulpt\");\n            },\n            $flags: { FastCall: true },\n            $textsig: \"($self, /, length, byteorder, *, signed=False)\",\n            $doc: \"Return an array of bytes representing an integer.\\n\\n  length\\n    Length of bytes object to use.  An OverflowError is raised if the\\n    integer is not representable with the given number of bytes.\\n  byteorder\\n    The byte order used to represent the integer.  If byteorder is 'big',\\n    the most significant byte is at the beginning of the byte array.  If\\n    byteorder is 'little', the most significant byte is at the end of the\\n    byte array.  To request the native byte order of the host system, use\\n    `sys.byteorder' as the byte order value.\\n  signed\\n    Determines whether two's complement is used to represent the integer.\\n    If signed is False and a negative integer is given, an OverflowError\\n    is raised.\",\n        },\n        __trunc__: {\n            $meth: cloneSelf,\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Truncating an Integral returns itself.\",\n        },\n        __floor__: {\n            $meth: cloneSelf,\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Flooring an Integral returns itself.\",\n        },\n        __ceil__: {\n            $meth: cloneSelf,\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Ceiling of an Integral returns itself.\",\n        },\n        __round__: {\n            $meth(ndigits) {\n                return this.round$(ndigits);\n            },\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: null,\n            $doc: \"Rounding an Integral returns itself.\\nRounding with an ndigits argument also returns an integer.\",\n        },\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple([new Sk.builtin.int_(this.v)]);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: Sk.builtin.none.none$,\n        },\n        __format__: {\n            $meth: Sk.formatting.mkNumber__format__(false),\n            $flags: { OneArg: true },\n            $textsig: \"($self, format_spec, /)\",\n            $doc: Sk.builtin.none.none$,\n        },\n    },\n    proto: /** @lends {Sk.builtin.int_.prototype}*/ {\n        str$(base, sign) {\n            let tmp;\n            if (base === undefined || base === 10) {\n                tmp = this.v.toString();\n            } else {\n                tmp = this.v.toString(base);\n            }\n            if (sign || sign === undefined) {\n                return tmp;\n            } else if (tmp[0] === \"-\") {\n                tmp = tmp.substring(1);\n            }\n            return tmp;\n        },\n        round$(ndigits) {\n            if (ndigits === undefined) {\n                ndigits = 0;\n            } else {\n                ndigits = Sk.misceval.asIndexSized(ndigits);\n            }\n            const v = this.v;\n            if (ndigits >= 0) {\n                return new Sk.builtin.int_(v);\n            }\n            if (typeof v !== \"number\") {\n                return BigIntRound(v, ndigits);\n            }\n            const multiplier = Math.pow(10, -ndigits);\n            if (multiplier / 10 > Math.abs(v)) {\n                return new Sk.builtin.int_(0);\n            }\n            if (!Sk.__future__.bankers_rounding) {\n                return new Sk.builtin.int_(Math.round(v / multiplier) * multiplier);\n            }\n            const num10 = v / multiplier;\n            const rounded = Math.round(num10);\n            const bankRound =\n                (num10 > 0 ? num10 : -num10) % 1 === 0.5\n                    ? 0 === rounded % 2\n                        ? rounded\n                        : rounded - 1\n                    : rounded;\n            const result = bankRound * multiplier;\n            return new Sk.builtin.int_(result);\n        },\n        valueOf() {\n            return this.v;\n        },\n        // flag to determine inheritance of ints without instanceof\n        sk$int: true,\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.int_\", Sk.builtin.int_);\n/**\n * A function that will return either a number or a BigInt\n *\n * There are two functions passed to this slot the quick function where both int values are number\n * and the JSBI.BigInt version of the same function\n * The fall through case where one or both of the int values is a bigint\n * @ignore\n *\n * @private\n *\n * @param {Function} number_func\n * @param {Function} bigint_func\n */\nfunction numberSlot(number_func, bigint_func) {\n    /**\n     * @this {Sk.builtin.int_}\n     *\n     * @param {Sk.builtin.int_|Sk.builtin.object} other\n     * @return {Sk.builtin.int_|Sk.builtin.NotImplemented}\n     */\n    return function (other) {\n        if (!(other instanceof Sk.builtin.int_)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        /**@type {number|JSBI} */\n        let v = this.v;\n        /**@type {number|JSBI} */\n        let w = other.v;\n        if (typeof v === \"number\" && typeof w === \"number\") {\n            const res = number_func(v, w);\n            if (numberOrStringWithinThreshold(res)) {\n                return new Sk.builtin.int_(res);\n            }\n        }\n        v = bigUp(v);\n        w = bigUp(w);\n        return new Sk.builtin.int_(bigint_func(v, w));\n    };\n}\n\nfunction compareSlot(number_func, bigint_func) {\n    return function (other) {\n        if (!(other instanceof Sk.builtin.int_)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        let v = this.v;\n        let w = other.v;\n        if (typeof v === \"number\" && typeof w === \"number\") {\n            return number_func(v, w);\n        }\n        v = bigUp(v);\n        w = bigUp(w);\n        return bigint_func(v, w);\n    };\n}\n\n/**\n *\n * @param {function(number): number} number_func\n * @param {function(JSBI): JSBI} bigint_func\n * @ignore\n *\n */\nfunction numberUnarySlot(number_func, bigint_func) {\n    /**\n     * @this {Sk.builtin.int_}\n     * @return {Sk.builtin.int_}\n     */\n    function doUnarySlot() {\n        let v = this.v;\n        if (typeof v === \"number\") {\n            const res = number_func(v);\n            if (res !== undefined) {\n                return new Sk.builtin.int_(res);\n            }\n            v = bigUp(v);\n        }\n        // fallthrough\n        return new Sk.builtin.int_(bigint_func(v));\n    }\n    return doUnarySlot;\n}\n\nfunction cloneSelf() {\n    return new Sk.builtin.int_(this.v);\n}\n\nconst DBL_MANT_DIG = Math.log2(Number.MAX_SAFE_INTEGER);\nconst DBL_MAX_EXP = JSBI.BigInt(Math.floor(Math.log2(Number.MAX_VALUE)));\nconst DBL_MIN_EXP = Math.ceil(Math.log2(Number.MIN_VALUE));\nconst BIG_2 = JSBI.BigInt(2);\nconst BIG_1 = JSBI.BigInt(1);\nconst DBL_MIN_OVERFLOW = JSBI.subtract(\n    JSBI.exponentiate(BIG_2, DBL_MAX_EXP),\n    JSBI.exponentiate(BIG_2, JSBI.subtract(DBL_MAX_EXP, JSBI.add(JSBI.BigInt(DBL_MANT_DIG), BIG_1)))\n);\n\nfunction trueDivide(other) {\n    if (!Sk.__future__.python3) {\n        return this.nb$floor_divide(other);\n    }\n    if (!(other instanceof Sk.builtin.int_)) {\n        return Sk.builtin.NotImplemented.NotImplemented$;\n    }\n    let v = this.v;\n    let w = other.v;\n    if (w === 0) {\n        throw new Sk.builtin.ZeroDivisionError(\"division by zero\");\n    }\n    if (typeof v === \"number\" && typeof w === \"number\") {\n        return new Sk.builtin.float_(v / w);\n    }\n\n    // slow case do what we gotta do\n    // algorithm taken from test_long.py\n    v = bigUp(v);\n    w = bigUp(w);\n    const negative = JSBI.lessThan(JSBI.bitwiseXor(v, w), JSBI.__ZERO);\n    if (JSBI.equal(v, JSBI.__ZERO)) {\n        return new Sk.builtin.float_(negative ? -0.0 : 0.0);\n    }\n    v = BigIntAbs(v);\n    w = BigIntAbs(w);\n    if (JSBI.greaterThanOrEqual(v, JSBI.multiply(DBL_MIN_OVERFLOW, w))) {\n        throw new Sk.builtin.OverflowError(\"int/int too large to represent as a float\");\n    }\n    let diff = v.toString(2).length - w.toString(2).length;\n    const absBigDiff = JSBI.BigInt(diff < 0 ? -diff : diff);\n\n    if (\n        (diff >= 0 &&\n            JSBI.greaterThanOrEqual(v, JSBI.multiply(JSBI.exponentiate(BIG_2, absBigDiff), w))) ||\n        (diff < 0 &&\n            JSBI.greaterThanOrEqual(JSBI.multiply(v, JSBI.exponentiate(BIG_2, absBigDiff)), w))\n    ) {\n        diff += 1;\n    }\n    const exp = Math.max(diff, DBL_MIN_EXP) - DBL_MANT_DIG;\n    v = JSBI.leftShift(v, JSBI.BigInt(Math.max(-exp, 0)));\n    w = JSBI.leftShift(w, JSBI.BigInt(Math.max(exp, 0)));\n\n    let q = JSBI.divide(v, w);\n    const r = JSBI.remainder(v, w);\n\n    const doubleR = JSBI.multiply(BIG_2, r);\n    if (\n        JSBI.greaterThan(doubleR, w) ||\n        (JSBI.equal(doubleR, w) && JSBI.equal(JSBI.remainder(q, BIG_2), BIG_1))\n    ) {\n        q = JSBI.add(q, BIG_1);\n    }\n    q = JSBI.toNumber(q);\n    if (q === Infinity || q === -Infinity) {\n        throw new Sk.builtin.OverflowError(\"int/int too large to represent as a float\");\n    }\n    let res = q * Math.pow(2, exp);\n    res = negative ? -res : res;\n    return new Sk.builtin.float_(res);\n}\n\nfunction numberDivisionSlot(number_func, bigint_func) {\n    return function (other) {\n        if (!(other instanceof Sk.builtin.int_)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        let v = this.v;\n        let w = other.v;\n        if (w === 0) {\n            throw new Sk.builtin.ZeroDivisionError(\"integer division or modulo by zero\");\n        }\n        if (typeof v === \"number\" && typeof w === \"number\") {\n            // it's integer division so no need to check if the number got bigger!\n            return new Sk.builtin.int_(number_func(v, w));\n        }\n        v = bigUp(v);\n        w = bigUp(w);\n        return new Sk.builtin.int_(JSBI.numberIfSafe(bigint_func(v, w)));\n    };\n}\n\nfunction numberShiftSlot(number_func, bigint_func) {\n    return function (other) {\n        if (!(other instanceof Sk.builtin.int_)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        const wNeg = other.nb$isnegative();\n        if (wNeg) {\n            throw new Sk.builtin.ValueError(\"negative shift count\");\n        }\n        let v = this.v;\n        if (v === 0) {\n            return new Sk.builtin.int_(0);\n        }\n        let w = other.v;\n        if (typeof v === \"number\" && typeof w === \"number\" && w < 53) {\n            // we use the shiftconsts below in the implementation for << and >>\n            const ret = number_func(v, w);\n            if (ret !== undefined) {\n                return new Sk.builtin.int_(ret);\n            }\n        }\n        v = bigUp(v);\n        w = bigUp(w);\n        return new Sk.builtin.int_(bigint_func(v, w)); // can't convert if safe for leftshift\n    };\n}\n\nfunction numberBitSlot(number_func, bigint_func) {\n    return function (other) {\n        if (!(other instanceof Sk.builtin.int_)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        let v = this.v;\n        let w = other.v;\n        if (\n            typeof v === \"number\" &&\n            typeof w === \"number\" &&\n            Math.abs(v) < 2 ** 31 &&\n            Math.abs(w) < 2 ** 31\n        ) {\n            return new Sk.builtin.int_(number_func(v, w));\n        }\n        v = bigUp(v);\n        w = bigUp(w);\n        return new Sk.builtin.int_(JSBI.numberIfSafe(bigint_func(v, w)));\n    };\n}\n\nfunction BigIntAbs(v) {\n    return JSBI.lessThan(v, JSBI.__ZERO) ? JSBI.unaryMinus(v) : v;\n}\n\nfunction BigIntFloorDivide(v, w) {\n    if (JSBI.greaterThanOrEqual(JSBI.bitwiseXor(v, w), JSBI.__ZERO)) {\n        return JSBI.divide(v, w);\n    }\n    // make the numerator smaller and then subtract 1 from the answer to round down.\n    if (JSBI.lessThan(v, JSBI.__ZERO)) {\n        v = JSBI.add(v, BIG_1);\n    } else {\n        v = JSBI.subtract(v, BIG_1);\n    }\n    return JSBI.subtract(JSBI.divide(v, w), BIG_1);\n}\n\nfunction BigIntRound(v, ndigits) {\n    // Get absolute versions. We'll deal with the negatives later.\n    const isNeg = JSBI.lessThan(v, JSBI.__ZERO);\n    if (isNeg) {\n        v = JSBI.unaryMinus(v);\n    }\n    const BigMultiplier = JSBI.exponentiate(JSBI.BigInt(10), JSBI.unaryMinus(JSBI.BigInt(ndigits)));\n\n    let result = JSBI.divide(v, BigMultiplier);\n    const rem = JSBI.remainder(v, BigMultiplier);\n\n    // if remainder > half divisor\n    const doubleRem = JSBI.multiply(rem, BIG_2);\n    if (JSBI.greaterThan(doubleRem, BigMultiplier)) {\n        result = JSBI.add(result, BIG_1);\n        // We should have rounded up instead of down.\n    } else if (JSBI.equal(doubleRem, BigMultiplier)) {\n        // If the remainder is exactly half the divisor, it means that the result is\n        // exactly in between two numbers and we need to apply a specific rounding\n        // method.\n        if (!Sk.__future__.bankers_rounding) {\n            result = JSBI.add(result, BIG_1);\n        } else if (JSBI.equal(JSBI.remainder(result, BIG_2), BIG_1)) {\n            // Add 1 if result is odd to get an even return value\n            result = JSBI.add(result, BIG_1);\n        }\n    }\n\n    result = JSBI.multiply(result, BigMultiplier);\n    if (isNeg) {\n        result = JSBI.unaryMinus(result);\n    }\n    return new Sk.builtin.int_(result);\n}\n\nconst validUnderscores = /_(?=[^_])/g;\n/**\n * Takes a JavaScript string and returns a number using the parser and negater\n *  functions (for int/long right now)\n * @param  {string} s       Javascript string to convert to a number.\n * @param  {number|string=} base    The base of the number.\n */\nSk.str2number = function (s, base) {\n    var origs = s,\n        neg = false,\n        i,\n        ch,\n        val;\n    // strip whitespace from ends\n    // s = s.trim();\n    s = s.replace(/^\\s+|\\s+$/g, \"\");\n\n    // check for minus sign\n    if (s.charAt(0) === \"-\") {\n        neg = true;\n        s = s.substring(1);\n    }\n\n    // check for plus sign\n    if (s.charAt(0) === \"+\") {\n        s = s.substring(1);\n    }\n\n    if (base === null || base === undefined) {\n        base = 10;\n    } // default radix is 10, not dwim\n    if (base < 2 || base > 36) {\n        if (base !== 0) {\n            throw new Sk.builtin.ValueError(\"int() base must be >= 2 and <= 36\");\n        }\n    }\n    if (typeof base === \"string\") {\n        base = Number(base); // keep closure happy for parseInt\n    }\n\n    if (s.substring(0, 2).toLowerCase() === \"0x\") {\n        if (base === 16 || base === 0) {\n            s = s.substring(2);\n            base = 16;\n        } else if (base < 34) {\n            throw new Sk.builtin.ValueError(\n                \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n            );\n        }\n    } else if (s.substring(0, 2).toLowerCase() === \"0b\") {\n        if (base === 2 || base === 0) {\n            s = s.substring(2);\n            base = 2;\n        } else if (base < 12) {\n            throw new Sk.builtin.ValueError(\n                \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n            );\n        }\n    } else if (s.substring(0, 2).toLowerCase() === \"0o\") {\n        if (base === 8 || base === 0) {\n            s = s.substring(2);\n            base = 8;\n        } else if (base < 25) {\n            throw new Sk.builtin.ValueError(\n                \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n            );\n        }\n    } else if (s.charAt(0) === \"0\") {\n        if (s === \"0\") {\n            return 0;\n        }\n        if (base === 8 || base === 0) {\n            base = 8;\n        }\n    }\n\n    if (base === 0) {\n        base = 10;\n    }\n\n    if (s.indexOf(\"_\") !== -1) {\n        if (s.indexOf(\"__\") !== -1) {\n            throw new Sk.builtin.ValueError(\n                \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n            );\n        }\n\n        if (base !== 10) {\n            s = s.replace(validUnderscores, \"\");\n        } else {\n            // avoid replacing initial `_` if present\n            // workaround since closure-compiler errors on lookbehinds\n            s = s.charAt(0) + s.substring(1).replace(validUnderscores, \"\");\n        }\n    }\n\n    if (s.length === 0) {\n        throw new Sk.builtin.ValueError(\n            \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n        );\n    }\n\n    // check all characters are valid\n    for (i = 0; i < s.length; i = i + 1) {\n        ch = s.charCodeAt(i);\n        val = base;\n        if (ch >= 48 && ch <= 57) {\n            // 0-9\n            val = ch - 48;\n        } else if (ch >= 65 && ch <= 90) {\n            // A-Z\n            val = ch - 65 + 10;\n        } else if (ch >= 97 && ch <= 122) {\n            // a-z\n            val = ch - 97 + 10;\n        }\n\n        if (val >= base) {\n            throw new Sk.builtin.ValueError(\n                \"invalid literal for int() with base \" + base + \": '\" + origs + \"'\"\n            );\n        }\n    }\n\n    if (neg) {\n        s = \"-\" + s;\n    }\n    val = parseInt(s, base);\n    if (numberOrStringWithinThreshold(val)) {\n        return val; // will convert our string to a number\n    }\n    return fromStrToBigWithBase(s, base);\n};\n\nSk.builtin.int_.py2$methods = {};\n\n/**\n *\n * @param {string} s\n * @param {number=} base\n */\nSk.longFromStr = function (s, base) {\n    if (Sk.__future__.python3) {\n        return new Sk.builtin.int_(stringToNumberOrBig(s));\n    } else {\n        const num = Sk.str2number(s, base);\n        return new Sk.builtin.lng(num);\n    }\n};\nSk.exportSymbol(\"Sk.longFromStr\", Sk.longFromStr);\n\nfunction numberOrStringWithinThreshold(v) {\n    return v <= Number.MAX_SAFE_INTEGER && v >= -Number.MAX_SAFE_INTEGER;\n}\n\nSk.builtin.int_.withinThreshold = numberOrStringWithinThreshold;\n\nfunction stringToNumberOrBig(s) {\n    if (s <= Number.MAX_SAFE_INTEGER && s >= -Number.MAX_SAFE_INTEGER) {\n        return +s;\n    }\n    return JSBI.BigInt(s);\n}\n\nSk.builtin.int_.stringToNumberOrBig = stringToNumberOrBig;\nfunction bigUp(v) {\n    if (typeof v === \"number\") {\n        return JSBI.BigInt(v);\n    }\n    return v;\n}\n\nfunction getInt(x, base) {\n    let func, res;\n    // if base is not of type int, try calling .__index__\n    if (base !== Sk.builtin.none.none$) {\n        base = Sk.misceval.asIndexOrThrow(base);\n    } else {\n        base = null;\n    }\n\n    if (x instanceof Sk.builtin.str) {\n        if (base === null) {\n            base = 10;\n        }\n        return new Sk.builtin.int_(Sk.str2number(x.v, base));\n    } else if (base !== null) {\n        throw new Sk.builtin.TypeError(\"int() can't convert non-string with explicit base\");\n    } else if (x.nb$int !== undefined) {\n        return x.nb$int();\n    } else if (x.nb$index !== undefined) {\n        return new Sk.builtin.int_(x.nb$index());\n    }\n\n    if ((func = Sk.abstr.lookupSpecial(x, Sk.builtin.str.$trunc))) {\n        res = Sk.misceval.callsimArray(func, []);\n        // check return type of magic methods\n        if (!Sk.builtin.checkInt(res)) {\n            throw new Sk.builtin.TypeError(\n                Sk.builtin.str.$trunc.$jsstr() +\n                    \" returned non-Integral (type \" +\n                    Sk.abstr.typeName(x) +\n                    \")\"\n            );\n        }\n        return new Sk.builtin.int_(res.v);\n    }\n\n    throw new Sk.builtin.TypeError(\n        \"int() argument must be a string, a bytes-like object or a number, not '\" +\n            Sk.abstr.typeName(x) +\n            \"'\"\n    );\n}\n\n/**\n *\n * We don't need to check the string has valid digits since str2number did that for us\n * @param {*} s\n * @param {*} base\n * @ignore\n */\nfunction fromStrToBigWithBase(s, base) {\n    let neg = false;\n    if (s[0] === \"-\") {\n        neg = true;\n        s = s.substring(1);\n    }\n    base = JSBI.BigInt(base);\n    let power = BIG_1;\n    let num = JSBI.__ZERO;\n    let toadd, val;\n    for (let i = s.length - 1; i >= 0; i--) {\n        val = s.charCodeAt(i);\n        if (val >= 48 && val <= 57) {\n            // 0-9\n            val = val - 48;\n        } else if (val >= 65 && val <= 90) {\n            // A-Z\n            val = val - 65 + 10;\n        } else if (val >= 97 && val <= 122) {\n            // a-z\n            val = val - 97 + 10;\n        }\n        toadd = JSBI.multiply(JSBI.BigInt(val), power);\n        num = JSBI.add(num, toadd);\n        power = JSBI.multiply(power, base);\n    }\n    if (neg) {\n        num = JSBI.multiply(num, JSBI.BigInt(-1));\n    }\n    return num;\n}\n\nconst shiftconsts = [\n    0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072,\n    262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728,\n    268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368,\n    68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552,\n    4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328,\n    281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496,\n    9007199254740992,\n];\n\n/**\n * @constructor\n *\n * @description\n * This is only for backward compatibility with py2.\n * We take the approach of using a trivial subclass with int and overriding a few methods\n *\n * @param {number|string|JSBI} x\n * @extends {Sk.builtin.int_}\n * @ignore\n */\nSk.builtin.lng = Sk.abstr.buildNativeClass(\"long\", {\n    base: Sk.builtin.int_, // not technically correct but makes backward compatibility easy\n    constructor: function lng(x) {\n        Sk.builtin.int_.call(this, x);\n    },\n    slots: /** @lends {Sk.builtin.lng.prototype} */ {\n        $r() {\n            return new Sk.builtin.str(this.v.toString() + \"L\");\n        },\n        tp$as_number: true,\n        nb$negative() {\n            return new Sk.builtin.lng(intProto.nb$negative.call(this).v);\n        },\n        nb$positive() {\n            return new Sk.builtin.lng(intProto.nb$positive.call(this).v);\n        },\n    },\n});\n\nconst intProto = Sk.builtin.int_.prototype;\n", "const int_proto = Sk.builtin.int_.prototype;\n\n/**\n * @constructor\n * Sk.builtin.bool\n *\n * @description\n * Constructor for Python bool. Also used for builtin bool() function.\n *\n * Where possible, do not create a new instance but use the constants\n * Sk.builtin.bool.true$ or Sk.builtin.bool.false$. These are defined in src/constant.js\n *\n * @extends {Sk.builtin.int_}\n *\n * @param  {(Object|number|boolean)} x Value to evaluate as true or false\n * @return {Sk.builtin.bool} Sk.builtin.bool.true$ if x is true, Sk.builtin.bool.false$ otherwise\n */\nSk.builtin.bool = Sk.abstr.buildNativeClass(\"bool\", {\n    constructor: function bool(x) {\n        if (Sk.misceval.isTrue(x)) {\n            return Sk.builtin.bool.true$;\n        } else {\n            return Sk.builtin.bool.false$;\n        }\n    },\n    base: Sk.builtin.int_,\n    slots: {\n        tp$doc: \"bool(x) -> bool\\n\\nReturns True when the argument x is true, False otherwise.\\nThe builtins True and False are the only two instances of the class bool.\\nThe class bool is a subclass of the class int, and cannot be subclassed.\",\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"bool\", kwargs);\n            Sk.abstr.checkArgsLen(\"bool\", args, 0, 1);\n            return new Sk.builtin.bool(args[0]); //technically we don't need new but easier to keep consistent\n        },\n        $r() {\n            return this.v ? this.str$True : this.str$False;\n        },\n\n        tp$as_number: true,\n        nb$and(other) {\n            if (other.ob$type === Sk.builtin.bool) {\n                return new Sk.builtin.bool(this.v & other.v);\n            }\n            return int_proto.nb$and.call(this, other);\n        },\n        nb$or(other) {\n            if (other.ob$type === Sk.builtin.bool) {\n                return new Sk.builtin.bool(this.v | other.v);\n            }\n            return int_proto.nb$or.call(this, other);\n        },\n        nb$xor(other) {\n            if (other.ob$type === Sk.builtin.bool) {\n                return new Sk.builtin.bool(this.v ^ other.v);\n            }\n            return int_proto.nb$xor.call(this, other);\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n    methods: {\n        __format__: {\n            $meth() {\n                return this.$r();\n            },\n            $flags: { OneArg: true },\n        },\n    },\n    proto: {\n        str$False: new Sk.builtin.str(\"False\"),\n        str$True: new Sk.builtin.str(\"True\"),\n    },\n});\nSk.exportSymbol(\"Sk.builtin.bool\", Sk.builtin.bool);\n\n/**\n * Python bool True constant.\n * @type {Sk.builtin.bool}\n * @member {Sk.builtin.bool}\n */\nSk.builtin.bool.true$ = /** @type {Sk.builtin.bool} */ (\n    Object.create(Sk.builtin.bool.prototype, {\n        v: { value: 1, enumerable: true },\n    })\n);\n\n/**\n * Python bool False constant.\n * @type {Sk.builtin.bool}\n * @member {Sk.builtin.bool}\n */\nSk.builtin.bool.false$ = /** @type {Sk.builtin.bool} */ (\n    Object.create(Sk.builtin.bool.prototype, {\n        v: { value: 0, enumerable: true },\n    })\n);\n", "/** @typedef {Sk.builtin.object} */ var pyObject;\n\nconst hashMap = Object.create(null, {\n    Infinity: { value: 314159 },\n    \"-Infinity\": { value: -314159 },\n    NaN: { value: 0 },\n});\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n *\n * @param {number} x only be called with a JS number\n *\n * @return {Sk.builtin.float_} Python float\n */\nSk.builtin.float_ = Sk.abstr.buildNativeClass(\"float\", {\n    constructor: function float_(x) {\n        Sk.asserts.assert(this instanceof Sk.builtin.float_, \"bad call to float use 'new'\");\n        if (typeof x === \"number\") {\n            this.v = x;\n        } else if (x === undefined) {\n            this.v = 0.0;\n        } else if (typeof x === \"string\") {\n            // be careful with converting a string as it could result in infinity\n            this.v = parseFloat(x);\n        } else if (x.nb$float) {\n            return x.nb$float(); // allow this as a slow path\n        } else {\n            Sk.asserts.fail(\"bad argument to float constructor\");\n        }\n    },\n    slots: /**@lends {Sk.builtin.float_.prototype} */ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_number: true,\n        tp$doc: \"Convert a string or number to a floating point number, if possible.\",\n        tp$hash() {\n            const v = this.v;\n            let hash = hashMap[v];\n            if (hash !== undefined) {\n                return hash;\n            } else if (Number.isInteger(v)) {\n                hash = this.nb$int().tp$hash();\n            } else {\n                hash = Math.floor(\n                    Math.random() * Number.MAX_SAFE_INTEGER - Number.MAX_SAFE_INTEGER / 2\n                );\n            }\n            hashMap[this.v] = hash;\n            return hash;\n        },\n        $r() {\n            return new Sk.builtin.str(this.str$(10, true));\n        },\n        tp$new(args, kwargs) {\n            if (kwargs && kwargs.length) {\n                throw new Sk.builtin.TypeError(\"float() takes no keyword arguments\");\n            } else if (args && args.length > 1) {\n                throw new Sk.builtin.TypeError(\n                    \"float expected at most 1 arguments, got \" + args.length\n                );\n            }\n            const arg = args[0];\n            let x;\n            // is args always an empty list?\n            if (arg === undefined) {\n                x = new Sk.builtin.float_(0.0);\n            } else if (arg.nb$float !== undefined) {\n                x = arg.nb$float();\n            } else if (arg.nb$index !== undefined) {\n                x = new Sk.builtin.int_(arg.nb$index()).nb$float();\n            } else if (Sk.builtin.checkString(arg)) {\n                x = _str_to_float(arg.v);\n            }\n            if (x === undefined) {\n                throw new Sk.builtin.TypeError(\"float() argument must be a string or a number\");\n            }\n            if (this === Sk.builtin.float_.prototype) {\n                return x;\n            } else {\n                const instance = new this.constructor();\n                instance.v = x.v;\n                return instance;\n            }\n        },\n\n        // number slots\n        nb$int() {\n            let v = this.v;\n            if (!Number.isFinite(v)) {\n                if (v === Infinity || v === -Infinity) {\n                    throw new Sk.builtin.OverflowError(\"cannot convert float infinity to integer\");\n                }\n                throw new Sk.builtin.ValueError(\"cannot convert float NaN to integer\");\n            }\n            if (v < 0) {\n                v = Math.ceil(v);\n            } else {\n                v = Math.floor(v);\n            }\n            if (Sk.builtin.int_.withinThreshold(v)) {\n                return new Sk.builtin.int_(v);\n            } else {\n                return new Sk.builtin.int_(JSBI.BigInt(v));\n            }\n        },\n        nb$float: cloneSelf,\n        nb$long() {\n            return new Sk.builtin.lng(this.nb$int().v);\n        },\n        nb$add: numberSlot((v, w) => new Sk.builtin.float_(v + w)),\n\n        nb$subtract: numberSlot((v, w) => new Sk.builtin.float_(v - w)),\n        nb$reflected_subtract: numberSlot((v, w) => new Sk.builtin.float_(w - v)),\n\n        nb$multiply: numberSlot((v, w) => new Sk.builtin.float_(v * w)),\n\n        nb$divide: numberSlot(divide),\n        nb$reflected_divide: numberSlot((v, w) => divide(w, v)),\n\n        nb$floor_divide: numberSlot(floordivide),\n        nb$reflected_floor_divide: numberSlot((v, w) => floordivide(w, v)),\n\n        nb$remainder: numberSlot(remainder),\n        nb$reflected_remainder: numberSlot((v, w) => remainder(w, v)),\n\n        nb$divmod: numberSlot((v, w) => new Sk.builtin.tuple([floordivide(v, w), remainder(v, w)])),\n        nb$reflected_divmod: numberSlot(\n            (v, w) => new Sk.builtin.tuple([floordivide(w, v), remainder(w, v)])\n        ),\n\n        nb$power: ternarySlot(power),\n        nb$reflected_power: ternarySlot((v, w) => power(w, v)),\n\n        nb$abs() {\n            return new Sk.builtin.float_(Math.abs(this.v));\n        },\n        nb$negative() {\n            return new Sk.builtin.float_(-this.v);\n        },\n        nb$positive() {\n            return new Sk.builtin.float_(this.v);\n        },\n        nb$bool() {\n            return this.v !== 0;\n        },\n        nb$isnegative() {\n            return this.v < 0;\n        },\n        nb$ispositive() {\n            return this.v >= 0;\n        },\n        ob$eq: compareSlot((v, w) => v == w, JSBI.EQ),\n        ob$ne: compareSlot((v, w) => v != w, JSBI.NE),\n        ob$gt: compareSlot((v, w) => v > w, JSBI.GT),\n        ob$ge: compareSlot((v, w) => v >= w, JSBI.GE),\n        ob$lt: compareSlot((v, w) => v < w, JSBI.LT),\n        ob$le: compareSlot((v, w) => v <= w, JSBI.LE),\n    },\n    getsets: /**@lends {Sk.builtin.float_.prototype} */ {\n        real: {\n            $get: cloneSelf,\n            $doc: \"the real part of a complex number\",\n        },\n        imag: {\n            $get() {\n                return new Sk.builtin.float_(0.0);\n            },\n            $doc: \"the imaginary part of a complex number\",\n        },\n    },\n    methods: /**@lends {Sk.builtin.float_.prototype} */ {\n        conjugate: {\n            $meth: cloneSelf,\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return self, the complex conjugate of any float.\",\n        },\n        __trunc__: {\n            $meth() {\n                return this.nb$int();\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return the Integral closest to x between 0 and x.\",\n        },\n        __round__: {\n            $meth(ndigits) {\n                return this.round$(ndigits);\n            },\n            $flags: { MinArgs: 0, MaxArgs: 1 },\n            $textsig: \"($self, ndigits=None, /)\",\n            $doc: \"Return the Integral closest to x, rounding half toward even.\\n\\nWhen an argument is passed, work like built-in round(x, ndigits).\",\n        },\n        as_integer_ratio: {\n            $meth() {\n                if (!Number.isFinite(this.v)) {\n                    if (Number.isNaN(this.v)) {\n                        throw new Sk.builtin.ValueError(\"cannot convert NaN to integer ratio\");\n                    }\n                    throw new Sk.builtin.OverflowError(\"cannot convert Infinity to integer ratio\");\n                }\n                let [float_part, exponent] = frexp(this.v);\n                for (let i = 0; i < 300 && float_part != Math.floor(float_part); i++) {\n                    float_part *= 2.0;\n                    exponent--;\n                }\n                const py_exp = new Sk.builtin.int_(Math.abs(exponent));\n                let numerator = new Sk.builtin.int_(float_part);\n                let denominator = new Sk.builtin.int_(1);\n                if (exponent > 0) {\n                    numerator = numerator.nb$lshift(py_exp);\n                } else {\n                    denominator = denominator.nb$lshift(py_exp);\n                }\n                return new Sk.builtin.tuple([numerator, denominator]);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return integer ratio.\\n\\nReturn a pair of integers, whose ratio is exactly equal to the original float\\nand with a positive denominator.\\n\\nRaise OverflowError on infinities and a ValueError on NaNs.\\n\\n>>> (10.0).as_integer_ratio()\\n(10, 1)\\n>>> (0.0).as_integer_ratio()\\n(0, 1)\\n>>> (-.25).as_integer_ratio()\\n(-1, 4)\",\n        },\n        // hex: {\n        //     $meth: methods.hex,\n        //     $flags: { NoArgs: true },\n        //     $textsig: \"($self, /)\",\n        //     $doc:\n        //         \"Return a hexadecimal representation of a floating-point number.\\n\\n>>> (-0.1).hex()\\n'-0x1.999999999999ap-4'\\n>>> 3.14159.hex()\\n'0x1.921f9f01b866ep+1'\",\n        // },\n        is_integer: {\n            $meth() {\n                return new Sk.builtin.bool(Number.isInteger(this.v));\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: \"Return True if the float is an integer.\",\n        },\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple([this]);\n            },\n            $flags: { NoArgs: true },\n            $textsig: \"($self, /)\",\n            $doc: Sk.builtin.none.none$,\n        },\n        __format__: {\n            $meth: Sk.formatting.mkNumber__format__(true),\n            $flags: { OneArg: true },\n            $textsig: \"($self, format_spec, /)\",\n            $doc: Sk.builtin.none.none$,\n        },\n    },\n});\n\nfunction frexp(arg) {\n    const res = [arg, 0];\n    if (arg === 0.0) {\n        return res;\n    }\n    const absArg = Math.abs(arg);\n    let exp = Math.max(-1023, Math.floor(Math.log2(absArg)) + 1);\n    let m = absArg * Math.pow(2, -exp);\n    // These while loops compensate for rounding errors that sometimes occur because of ECMAScript's Math.log2's undefined precision\n    // and also works around the issue of Math.pow(2, -exp) === Infinity when exp <= -1024\n    while (m < 0.5) {\n        m *= 2;\n        exp--;\n    }\n    while (m >= 1) {\n        m *= 0.5;\n        exp++;\n    }\n    if (arg < 0) {\n        m = -m;\n    }\n    res[0] = m;\n    res[1] = exp;\n    return res;\n}\nconst invalidUnderscores = /_[eE]|[eE]_|\\._|_\\.|[+-]_|__/;\nconst validUnderscores = /_(?=[^_])/g;\nfunction _str_to_float(str) {\n    let ret;\n    let tmp = str;\n    if (str.indexOf(\"_\") !== -1) {\n        if (invalidUnderscores.test(str)) {\n            throw new Sk.builtin.ValueError(\"could not convert string to float: '\" + str + \"'\");\n        }\n        tmp = str.charAt(0) + str.substring(1).replace(validUnderscores, \"\");\n    }\n\n    if (str.match(/^-inf$/i)) {\n        ret = -Infinity;\n    } else if (str.match(/^[+]?inf$/i)) {\n        ret = Infinity;\n    } else if (str.match(/^[-+]?nan$/i)) {\n        ret = NaN;\n    } else if (!isNaN(tmp)) {\n        ret = parseFloat(tmp);\n        if (Number.isNaN(ret)) {\n            ret = undefined;\n        }\n    }\n    if (ret === undefined) {\n        throw new Sk.builtin.ValueError(\n            \"could not convert string to float: \" + Sk.misceval.objectRepr(new Sk.builtin.str(str))\n        );\n    }\n    return new Sk.builtin.float_(ret);\n}\n\nfunction cloneSelf() {\n    return new Sk.builtin.float_(this.v);\n}\n\n/**\n * Checks for float subtypes, though skulpt does not allow to\n * extend them for now.\n *\n * Javascript function, returns Javascript object.\n * @param {Object} op The object to check as subtype.\n * @return {boolean} true if op is a subtype of Sk.builtin.float_, false otherwise\n */\nSk.builtin.float_.PyFloat_Check = function (op) {\n    if (op === undefined) {\n        return false;\n    }\n    // this is a little bit hacky\n    // ToDo: subclassable builtins do not require this\n    if (Sk.builtin.checkNumber(op)) {\n        return true;\n    }\n    if (Sk.builtin.checkFloat(op)) {\n        return true;\n    }\n    if (op.ob$type.$isSubType(Sk.builtin.float_)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns this instance's value as a string formatted using fixed-point notation.\n *\n * Javascript function, returns Javascript object.\n *\n * @param  {Object|number} x The numer of digits to appear after the decimal point.\n * @return {string}   The string representation of this instance's value.\n */\nSk.builtin.float_.prototype.toFixed = function (x) {\n    x = Sk.builtin.asnum$(x);\n    return this.v.toFixed(x);\n};\n\nfunction numberSlot(f) {\n    return function (other) {\n        const v = this.v;\n        let w = other.v;\n        if (typeof w === \"number\") {\n            // pass\n        } else if (JSBI.__isBigInt(w)) {\n            w = fromBigIntToNumberOrOverflow(w);\n        } else {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        return f(v, w);\n    };\n}\n\nfunction compareSlot(doCompare, JSBI_ALT) {\n    return function (other) {\n        const v = this.v;\n        const w = other.v;\n        if (typeof w === \"number\") {\n            // pass\n        } else if (!JSBI.__isBigInt(w)) {\n            // not a number or a bigint\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        } else if (JSBI_ALT !== undefined) {\n            // if we're here we have JSBI.BigInt rather than a window.BigInt\n            // use the JSBI.EQ, JSBI.NE functions which are faster for comparisons\n            // use ==, >= etc will compare the strings which is not what we want\n            // if we have a window.BigInt just use ==, >= etc i.e. fall through to doCompare\n            return JSBI_ALT(v, w);\n        }\n        return doCompare(v, w);\n    };\n}\n\nfunction ternarySlot(f) {\n    const binSlot = numberSlot(f);\n    return function (other, z) {\n        if (z !== undefined && !Sk.builtin.checkNone(z)) {\n            throw new Sk.builtin.TypeError(\n                \"pow() 3rd argument not allowed unless all arguments are integers\"\n            );\n        }\n        return binSlot.call(this, other);\n    };\n}\n\nfunction divide(v, w) {\n    if (w === 0) {\n        throw new Sk.builtin.ZeroDivisionError(\"integer division or modulo by zero\");\n    }\n    if (v === Infinity) {\n        if (w === Infinity || v === -Infinity) {\n            return new Sk.builtin.float_(NaN);\n        } else if (w < 0) {\n            return new Sk.builtin.float_(-Infinity);\n        } else {\n            return new Sk.builtin.float_(Infinity);\n        }\n    }\n    if (v === -Infinity) {\n        if (w === Infinity || v === -Infinity) {\n            return new Sk.builtin.float_(NaN);\n        } else if (w < 0) {\n            return new Sk.builtin.float_(Infinity);\n        } else {\n            return new Sk.builtin.float_(-Infinity);\n        }\n    }\n    return new Sk.builtin.float_(v / w);\n}\n\nfunction floordivide(v, w) {\n    if (v === Infinity || v === -Infinity) {\n        return new Sk.builtin.float_(NaN);\n    }\n    if (w === 0) {\n        throw new Sk.builtin.ZeroDivisionError(\"integer division or modulo by zero\");\n    }\n\n    if (w === Infinity) {\n        if (v < 0) {\n            return new Sk.builtin.float_(-1);\n        } else {\n            return new Sk.builtin.float_(0);\n        }\n    }\n    if (w === -Infinity) {\n        if (v < 0 || v !== 0) {\n            return new Sk.builtin.float_(0);\n        } else {\n            return new Sk.builtin.float_(-1);\n        }\n    }\n    return new Sk.builtin.float_(Math.floor(v / w));\n}\n\nfunction remainder(v, w) {\n    if (w === 0) {\n        throw new Sk.builtin.ZeroDivisionError(\"integer division or modulo by zero\");\n    }\n    if (v === 0) {\n        return new Sk.builtin.float_(0);\n    }\n    if (w === Infinity) {\n        if (v === Infinity || this.v === -Infinity) {\n            return new Sk.builtin.float_(NaN);\n        } else if (v > 0) {\n            return new Sk.builtin.float_(v);\n        } else {\n            return new Sk.builtin.float_(Infinity);\n        }\n    }\n\n    //  Javacript logic on negatives doesn't work for Python... do this instead\n    let tmp = v % w;\n\n    if (v < 0) {\n        if (w > 0 && tmp < 0) {\n            tmp = tmp + w;\n        }\n    } else {\n        if (w < 0 && tmp !== 0) {\n            tmp = tmp + w;\n        }\n    }\n    if (tmp === 0) {\n        if (w < 0) {\n            tmp = -0.0; // otherwise the sign gets lost by javascript modulo\n        } else if (Infinity / tmp === -Infinity) {\n            tmp = 0.0;\n        }\n    }\n    return new Sk.builtin.float_(tmp);\n}\n\nfunction power(v, w) {\n    if (v < 0 && w % 1 !== 0) {\n        throw new Sk.builtin.ValueError(\"negative number cannot be raised to a fractional power\");\n    }\n    if (v === 0 && w < 0) {\n        throw new Sk.builtin.ZeroDivisionError(\"0.0 cannot be raised to a negative power\");\n    }\n\n    const result = Math.pow(v, w);\n\n    if (Math.abs(result) === Infinity && Math.abs(v) !== Infinity && Math.abs(w) !== Infinity) {\n        throw new Sk.builtin.OverflowError(\"Numerical result out of range\");\n    }\n    return new Sk.builtin.float_(result);\n}\n\n/**\n * Round this instance to a given number of digits, or zero if omitted.\n *\n * Implements `__round__` dunder method.\n *\n * Javascript function, returns Python object.\n *\n * @param  {pyObject=} ndigits The number of digits after the decimal point to which to round.\n * @return {Sk.builtin.float_|Sk.builtin.int_} The rounded float.\n *\n */\nSk.builtin.float_.prototype.round$ = function (ndigits) {\n    var result, multiplier, number, num10, rounded, bankRound, ndigs;\n    number = Sk.builtin.asnum$(this);\n    if (ndigits === undefined) {\n        ndigs = 0;\n    } else {\n        ndigs = Sk.misceval.asIndexSized(ndigits);\n    }\n\n    if (Sk.__future__.bankers_rounding) {\n        num10 = number * Math.pow(10, ndigs);\n        rounded = Math.round(num10);\n        bankRound =\n            (num10 > 0 ? num10 : -num10) % 1 === 0.5\n                ? 0 === rounded % 2\n                    ? rounded\n                    : rounded - 1\n                : rounded;\n        result = bankRound / Math.pow(10, ndigs);\n        if (ndigits === undefined) {\n            return new Sk.builtin.int_(result);\n        } else {\n            return new Sk.builtin.float_(result);\n        }\n    } else {\n        multiplier = Math.pow(10, ndigs);\n        result = Math.round(number * multiplier) / multiplier;\n\n        return new Sk.builtin.float_(result);\n    }\n};\n\n/**\n * Convert this instance's value to a Javascript string.\n *\n * Javascript function, returns Javascript object.\n *\n * @param {number} base The base of the value.\n * @param {boolean} sign true if the value should be signed, false otherwise.\n * @return {string} The Javascript string representation of this instance.\n */\nSk.builtin.float_.prototype.str$ = function (base, sign) {\n    var post;\n    var pre;\n    var idx;\n    var tmp;\n    var work;\n\n    if (isNaN(this.v)) {\n        return \"nan\";\n    }\n\n    if (sign === undefined) {\n        sign = true;\n    }\n\n    if (this.v == Infinity) {\n        return \"inf\";\n    }\n    if (this.v == -Infinity && sign) {\n        return \"-inf\";\n    }\n    if (this.v == -Infinity && !sign) {\n        return \"inf\";\n    }\n\n    work = sign ? this.v : Math.abs(this.v);\n\n    if (base === undefined || base === 10) {\n        if (Sk.__future__.python3) {\n            tmp = work.toPrecision(16);\n        } else {\n            tmp = work.toPrecision(12);\n        }\n\n        // transform fractions with 4 or more leading zeroes into exponents\n        idx = tmp.indexOf(\".\");\n        pre = work.toString().slice(0, idx);\n        post = work.toString().slice(idx);\n\n        if (pre.match(/^-?0$/) && post.slice(1).match(/^0{4,}/)) {\n            if (tmp.length < 12) {\n                tmp = work.toExponential();\n            } else {\n                tmp = work.toExponential(11);\n            }\n        }\n\n        if (tmp.indexOf(\"e\") < 0 && tmp.indexOf(\".\") >= 0) {\n            while (tmp.charAt(tmp.length - 1) == \"0\") {\n                tmp = tmp.substring(0, tmp.length - 1);\n            }\n            if (tmp.charAt(tmp.length - 1) == \".\") {\n                tmp = tmp + \"0\";\n            }\n        }\n\n        tmp = tmp.replace(new RegExp(\"\\\\.0+e\"), \"e\", \"i\");\n        // make exponent two digits instead of one (ie e+09 not e+9)\n        tmp = tmp.replace(/(e[-+])([1-9])$/, \"$10$2\");\n        // remove trailing zeroes before the exponent\n        tmp = tmp.replace(/0+(e.*)/, \"$1\");\n    } else {\n        tmp = work.toString(base);\n    }\n\n    // restore negative zero sign\n    if (this.v === 0 && 1 / this.v === -Infinity) {\n        tmp = \"-\" + tmp;\n    }\n\n    if (tmp.indexOf(\".\") < 0 && tmp.indexOf(\"E\") < 0 && tmp.indexOf(\"e\") < 0) {\n        tmp = tmp + \".0\";\n    }\n\n    return tmp;\n};\n\nSk.builtin.float_.py2$methods = {};\n\nfunction fromBigIntToNumberOrOverflow(big) {\n    const x = parseFloat(JSBI.toNumber(big));\n    if (x == Infinity || x == -Infinity) {\n        //trying to convert a large js string to a float\n        throw new Sk.builtin.OverflowError(\"int too large to convert to float\");\n    }\n    return x;\n}\n", "/**\n * @description\n * see [Cpython complex_new](https://hg.python.org/cpython/file/f0e2caad4200/Objects/complexobject.c#l911)\n * @constructor\n * @param {number} real part of the complex number\n * @param {number} imag part of the complex number\n *\n * Prefering here == instead of ===, otherwise also undefined has to be matched explicitly\n * @extends {Sk.builtin.object}\n *\n */\nSk.builtin.complex = Sk.abstr.buildNativeClass(\"complex\", {\n    constructor: function complex(real, imag) {\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.complex,\n            \"bad call to complex constructor, use 'new'\"\n        );\n        this.real = real;\n        this.imag = imag;\n    },\n    slots: /**@lends {Sk.builtin.complex.prototype}*/ {\n        tp$as_number: true,\n        tp$doc: \"Create a complex number from a real part and an optional imaginary part.\\n\\nThis is equivalent to (real + imag*1j) where imag defaults to 0.\",\n        tp$hash() {\n            // _PyHASH_IMAG refers to _PyHASH_MULTIPLIER which refers to 1000003\n            const real_hash = new Sk.builtin.float_(this.real).tp$hash();\n            const imag_hash = new Sk.builtin.float_(this.imag).tp$hash();\n            const v = imag_hash * 1003 + real_hash;\n            if (Sk.builtin.int_.withinThreshold(v)) {\n                return v;\n            }\n            return new Sk.builtin.int_(JSBI.BigInt(v)).tp$hash();\n        },\n        tp$getattr: Sk.generic.getAttr,\n        tp$new(args, kwargs) {\n            args = Sk.abstr.copyKeywordsToNamedArgs(\"complex\", [\"real\", \"imag\"], args, kwargs, [\n                null,\n                null,\n            ]);\n            return complex_from_py.call(this, args[0], args[1]);\n        },\n        tp$richcompare(w, op) {\n            if (op !== \"Eq\" && op !== \"NotEq\") {\n                if (Sk.builtin.checkNumber(w) || _complex_check(w)) {\n                    throw new Sk.builtin.TypeError(\n                        \"no ordering relation is defined for complex numbers\"\n                    );\n                }\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            return complexNumberSlot(function (a_real, a_imag, b_real, b_imag) {\n                const equal = a_real == b_real && a_imag == b_imag;\n                return op === \"Eq\" ? equal : !equal;\n            }, true).call(this, w);\n        },\n        $r() {\n            return complex_format(this, null, \"g\");\n        },\n\n        // number slots\n        nb$int() {\n            throw new Sk.builtin.TypeError(\"can't convert complex to int\");\n        },\n        nb$long() {\n            throw new Sk.builtin.TypeError(\"can't convert complex to long\");\n        },\n        nb$float() {\n            throw new Sk.builtin.TypeError(\"can't convert complex to float\");\n        },\n        nb$positive() {\n            return new Sk.builtin.complex(this.real, this.imag);\n        },\n        nb$negative() {\n            return new Sk.builtin.complex(-this.real, -this.imag);\n        },\n        nb$bool() {\n            return this.real || this.imag;\n        },\n        nb$add: complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n            return new Sk.builtin.complex(a_real + b_real, a_imag + b_imag);\n        }),\n        nb$subtract: complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n            return new Sk.builtin.complex(a_real - b_real, a_imag - b_imag);\n        }),\n        nb$reflected_subtract: complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n            return new Sk.builtin.complex(b_real - a_real, b_imag - a_imag);\n        }),\n        nb$multiply: complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n            return new Sk.builtin.complex(\n                b_real * a_real - b_imag * a_imag,\n                a_real * b_imag + a_imag * b_real\n            );\n        }),\n        nb$divide: complexNumberSlot(divide),\n        nb$reflected_divide: complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n            return divide(b_real, b_imag, a_real, a_imag);\n        }),\n        nb$floor_divide(other) {\n            throw new Sk.builtin.TypeError(\"can't take floor of complex number.\");\n        },\n        nb$reflected_floor_divide(other) {\n            throw new Sk.builtin.TypeError(\"can't take floor of complex number.\");\n        },\n        nb$remainder(other) {\n            throw new Sk.builtin.TypeError(\"can't mod complex numbers.\");\n        },\n        nb$reflected_remainder(other) {\n            throw new Sk.builtin.TypeError(\"can't mod complex numbers.\");\n        },\n        nb$divmod(other) {\n            throw new Sk.builtin.TypeError(\"can't take floor or mod of complex number.\");\n        },\n        nb$power(other, z) {\n            if (z != null && !Sk.builtin.checkNone(z)) {\n                throw new Sk.builtin.ValueError(\"complex modulo\");\n            }\n            return power.call(this, other);\n        },\n\n        nb$abs() {\n            const _real = this.real;\n            const _imag = this.imag;\n            if (!_is_finite(_real) || !_is_finite(_imag)) {\n                /* C99 rules: if either the real or the imaginary part is an\n                   infinity, return infinity, even if the other part is a\n                   NaN.\n                */\n                if (_is_infinity(_real)) {\n                    return new Sk.builtin.float_(Math.abs(_real));\n                } else if (_is_infinity(_imag)) {\n                    return new Sk.builtin.float_(Math.abs(_imag));\n                }\n                /* either the real or imaginary part is a NaN,\n                   and neither is infinite. Result should be NaN. */\n                return new Sk.builtin.float_(NaN);\n            }\n            const result = Math.hypot(_real, _imag);\n            if (!_is_finite(result)) {\n                throw new Sk.builtin.OverflowError(\"absolute value too large\");\n            }\n            return new Sk.builtin.float_(result);\n        },\n    },\n    getsets: {\n        real: {\n            $get() {\n                return new Sk.builtin.float_(this.real);\n            },\n            $doc: \"the real part of a complex number\",\n        },\n        imag: {\n            $get() {\n                return new Sk.builtin.float_(this.imag);\n            },\n            $doc: \"the imaginary part of a complex number\",\n        },\n    },\n    methods: /**@lends {Sk.builtin.complex.prototype}*/ {\n        conjugate: {\n            $meth() {\n                return new Sk.builtin.complex(this.real, -this.imag);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"complex.conjugate() -> complex\\n\\nReturn the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.\",\n        },\n        __getnewargs__: {\n            $meth() {\n                return new Sk.builtin.tuple([\n                    new Sk.builtin.float_(this.real),\n                    new Sk.builtin.float_(this.imag),\n                ]);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: Sk.builtin.none.none$,\n        },\n        __format__: {\n            $meth(format_spec) {\n                if (Sk.builtin.checkString(format_spec)) {\n                    // currently just returns not implemented.\n                    return _PyComplex_FormatAdvanced(this, format_spec);\n                }\n                throw new Sk.builtin.TypeError(\"__format__ requires str\");\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"complex.__format__() -> str\\n\\nConvert to a string according to format_spec.\",\n        },\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.complex\", Sk.builtin.complex);\n\n/**\n * @function\n *\n * @description\n * returns a Number if the object passed as a __float__ method\n * Otherwise throws an error\n *\n * @param {Sk.builtin.object} op\n *\n * @ignore\n */\nfunction PyFloat_AsDouble(op) {\n    let v = op.v;\n    if (typeof v === \"number\") {\n        return v;\n    } else if (op.nb$float) {\n        v = op.nb$float();\n    }\n    if (v === undefined) {\n        throw new Sk.builtin.TypeError(\"a float is required\");\n    }\n    return v.v;\n}\n\n/**\n * @function\n *\n * @description\n * checks and tries the __complex__ method\n * throws an error if this returns a non complex object\n * returns null if that function does not exist\n *\n *\n * @param {Sk.builtin.object} op\n *\n * @ignore\n */\nfunction try_complex_special_method(op) {\n    // the lookup special method does already all the magic\n    if (op == null) {\n        return null;\n    }\n    const f = Sk.abstr.lookupSpecial(op, Sk.builtin.str.$complex);\n    if (f !== undefined) {\n        // method on builtin, provide this arg\n        return Sk.misceval.callsimArray(f, []);\n    }\n    return null;\n}\n\n/**\n * @function\n *\n * @description\n * copied here for easy access\n * checks whether the argument is an instance of Sk.builtin.complex\n *\n * @return {boolean}\n *\n * @param {Sk.builtin.object} op\n * @ignore\n */\nconst _complex_check = Sk.builtin.checkComplex;\n\n/**\n * @function\n *\n * @description\n * this is the logic for tp$new\n *\n * @param {Sk.builtin.object} real\n * @param {Sk.builtin.object} imag\n *\n * @ignore\n */\nfunction complex_from_py(real, imag) {\n    let tmp; // pyObject\n    // var nbr, nbi; // real, imag as numbers\n    const cr = {}; // PyComplexObject\n    const ci = {}; // PyComplexObject\n    let cr_is_complex = false;\n    let ci_is_complex = false;\n\n    let r = real;\n    let i = imag;\n\n    // handle case if passed in arguments are of type complex\n    if (r != null && r.constructor === Sk.builtin.complex && i == null) {\n        // subtypes are handled later;\n        return r;\n    }\n\n    if (Sk.builtin.checkString(r)) {\n        if (i != null) {\n            throw new Sk.builtin.TypeError(\"complex() can't take second arg if first is a string\");\n        }\n        return Sk.builtin.complex.complex_subtype_from_string(r, this);\n    }\n\n    if (i != null && Sk.builtin.checkString(i)) {\n        throw new Sk.builtin.TypeError(\"complex() second arg can't be a string\");\n    }\n\n    // try_complex_special_method\n    tmp = try_complex_special_method(r);\n    if (tmp != null && tmp !== Sk.builtin.NotImplemented.NotImplemented$) {\n        if (!_complex_check(tmp)) {\n            throw new Sk.builtin.TypeError(\"__complex__ should return a complex object\");\n        }\n        r = tmp;\n    }\n\n    // just a temporary function to match cpython\n    function check_number(nb) {\n        return nb.nb$float !== undefined;\n    }\n\n    if (r != null) {\n        if (!check_number(r)) {\n            throw new Sk.builtin.TypeError(\n                \"complex() first argument must be a string or a number, not '\" +\n                    Sk.abstr.typeName(r) +\n                    \"'\"\n            );\n        }\n    }\n\n    if (i != null) {\n        if (!check_number(i)) {\n            throw new Sk.builtin.TypeError(\n                \"complex() second argument must be a number, not '\" + Sk.abstr.typeName(r) + \"'\"\n            );\n        }\n    }\n\n    /* If we get this far, then the \"real\" and \"imag\" parts should\n       both be treated as numbers, and the constructor should return a\n       complex number equal to (real + imag*1j).\n\n       Note that we do NOT assume the input to already be in canonical\n       form; the \"real\" and \"imag\" parts might themselves be complex\n       numbers, which slightly complicates the code below. */\n    if (r == null) {\n        cr.real = 0.0;\n        cr.imag = 0.0;\n    } else if (_complex_check(r)) {\n        /* Note that if r is of a complex subtype, we're only\n        retaining its real & imag parts here, and the return\n        value is (properly) of the builtin complex type. */\n        cr.real = r.real;\n        cr.imag = r.imag;\n        cr_is_complex = true;\n    } else {\n        /* The \"real\" part really is entirely real, and contributes\n        nothing in the imaginary direction.\n        Just treat it as a double. */\n        cr.real = PyFloat_AsDouble(r);\n        cr.imag = 0.0;\n    }\n\n    if (i == null) {\n        ci.real = 0.0;\n        ci.imag = 0.0;\n    } else if (_complex_check(i)) {\n        ci.real = i.real;\n        ci.imag = i.imag;\n        ci_is_complex = true;\n    } else {\n        /* The \"imag\" part really is entirely imaginary, and\n        contributes nothing in the real direction.\n        Just treat it as a double. */\n        ci.real = PyFloat_AsDouble(i);\n        ci.imag = 0.0;\n    }\n\n    /*  If the input was in canonical form, then the \"real\" and \"imag\"\n    parts are real numbers, so that ci.imag and cr.imag are zero.\n    We need this correction in case they were not real numbers. */\n\n    if (ci_is_complex === true) {\n        cr.real -= ci.imag;\n    }\n\n    if (cr_is_complex === true) {\n        ci.real += cr.imag;\n    }\n    return complex_subtype_from_doubles(cr.real, ci.real, this);\n}\n\n/**\n * @function\n *\n * @return {Sk.builtin.complex} an instance of complex - could be a subtype's instance\n *\n * @param {number} real\n * @param {number} imag\n * @param {Object} type_prototype Sk.builtin.complex.prototype\n * @ignore\n */\nfunction complex_subtype_from_doubles(real, imag, type_prototype) {\n    if (type_prototype === Sk.builtin.complex.prototype) {\n        return new Sk.builtin.complex(real, imag);\n    } else {\n        const instance = new type_prototype.constructor();\n        Sk.builtin.complex.call(instance, real, imag);\n        return instance;\n    }\n}\n\nconst invalidUnderscores = /_[eE]|[eE]_|\\._|_\\.|[+-]_|_j|j_/;\nconst validUnderscores = /_(?=[^_])/g;\n/**\n *\n * @function\n * @description Parses a string repr of a complex number\n * @param {*} val\n * @param {Object=} type_prototype\n * We leave this as Sk.builtin.complex since it is called by the compiler\n * @ignore\n */\nSk.builtin.complex.complex_subtype_from_string = function (val, type_prototype) {\n    type_prototype = type_prototype || Sk.builtin.complex.prototype;\n    var index;\n    var start;\n    var val_wws; // val with removed beginning ws and (\n    var x = 0.0,\n        y = 0.0; // real, imag parts\n    var got_bracket = false; // flag for braces\n    var len; // total length of val\n    var match; // regex result\n\n    // first check if val is javascript string or python string\n    if (Sk.builtin.checkString(val)) {\n        val = Sk.ffi.remapToJs(val);\n    } else if (typeof val !== \"string\") {\n        throw new TypeError(\"provided unsupported string-alike argument\");\n    }\n\n    /* This is an python specific error, this does not do any harm in js, but we want\n     * to be as close to the orginial impl. as possible.\n     *\n     * Check also for empty strings. They are not allowed.\n     */\n    if (val.indexOf(\"\\0\") !== -1 || val.length === 0 || val === \"\") {\n        throw new Sk.builtin.ValueError(\"complex() arg is a malformed string\");\n    }\n\n    // transform to unicode\n    // ToDo: do we need this?\n    index = 0; // first char\n\n    // do some replacements for javascript floats\n    val = val.replace(/inf|infinity/gi, \"Infinity\");\n    val = val.replace(/nan/gi, \"NaN\");\n\n    /* position on first nonblank */\n    start = 0;\n    while (val[index] === \" \") {\n        index++;\n    }\n\n    if (val[index] === \"(\") {\n        /* skip over possible bracket from repr(). */\n        got_bracket = true;\n        index++;\n        while (val[index] === \" \") {\n            index++;\n        }\n    }\n\n    if (val.indexOf(\"_\") !== -1) {\n        if (invalidUnderscores.test(val)) {\n            throw new Sk.builtin.ValueError(\"could not convert string to complex: '\" + val + \"'\");\n        }\n\n        val = val.charAt(0) + val.substring(1).replace(validUnderscores, \"\");\n    }\n\n    /* a valid complex string usually takes one of the three forms:\n\n        <float>                - real part only\n        <float>j               - imaginary part only\n        <float><signed-float>j - real and imaginary parts\n\n        where <float> represents any numeric string that's accepted by the\n        float constructor (including 'nan', 'inf', 'infinity', etc.), and\n        <signed-float> is any string of the form <float> whose first character\n        is '+' or '-'.\n\n        For backwards compatibility, the extra forms\n\n          <float><sign>j\n          <sign>j\n          j\n\n        are also accepted, though support for these forms my be removed from\n        a future version of Python.\n     *      This is a complete regular expression for matching any valid python floats, e.g.:\n     *          - 1.0\n     *          - 0.\n     *          - .1\n     *          - nan/inf/infinity\n     *          - +-1.0\n     *          - +3.E-3\n     *\n     *      In order to work, this pattern requires only lower case characters\n     *      There is case insensitive group option in js.\n     *\n     *      the [eE] could be refactored to soley e\n     */\n    var float_regex2 = /^(?:[+-]?(?:(?:(?:\\d*\\.\\d+)|(?:\\d+\\.?))(?:[eE][+-]?\\d+)?|NaN|Infinity))/;\n    val_wws = val.substr(index); // val with removed whitespace and \"(\"\n\n    /* first try to match a float at the beginning */\n    match = val_wws.match(float_regex2);\n    if (match !== null) {\n        // one of the first 4 cases\n        index += match[0].length;\n\n        /* <float>j */\n        if (val[index] === \"j\" || val[index] === \"J\") {\n            y = parseFloat(match[0]);\n            index++;\n        } else if (val[index] === \"+\" || val[index] === \"-\") {\n            /* <float><signed-float>j | <float><sign>j */\n            x = parseFloat(match[0]);\n\n            match = val.substr(index).match(float_regex2);\n            if (match !== null) {\n                /* <float><signed-float>j */\n                y = parseFloat(match[0]);\n                index += match[0].length;\n            } else {\n                /* <float><sign>j */\n                y = val[index] === \"+\" ? 1.0 : -1.0;\n                index++;\n            }\n\n            if (val[index] !== \"j\" && val[index] !== \"J\") {\n                throw new Sk.builtin.ValueError(\"complex() arg is malformed string\");\n            }\n\n            index++;\n        } else {\n            /* <float> */\n            x = parseFloat(match[0]);\n        }\n    } else {\n        // maybe <sign>j or j\n        match = match = val_wws.match(/^([+-]?[jJ])/);\n        if (match !== null) {\n            if (match[0].length === 1) {\n                y = 1.0; // must be j\n            } else {\n                y = match[0][0] === \"+\" ? 1.0 : -1.0;\n            }\n\n            index += match[0].length;\n        }\n    }\n\n    while (val[index] === \" \") {\n        index++;\n    }\n\n    if (got_bracket) {\n        /* if there was an opening parenthesis, then the corresponding\n           closing parenthesis should be right here */\n        if (val[index] !== \")\") {\n            throw new Sk.builtin.ValueError(\"complex() arg is malformed string\");\n        }\n\n        index++;\n\n        while (val[index] === \" \") {\n            index++;\n        }\n    }\n\n    /* we should now be at the end of the string */\n    if (val.length !== index) {\n        throw new Sk.builtin.ValueError(\"complex() arg is malformed string\");\n    }\n\n    // return here complex number parts\n    return complex_subtype_from_doubles(x, y, type_prototype);\n};\n\n/**\n *\n * @function\n * @description\n *\n * A helper function for converting a big int to a number or throwing OverFlow\n * @ignore\n */\nfunction fromBigIntToNumberOrOverflow(big) {\n    const x = parseFloat(JSBI.toNumber(big));\n    if (x == Infinity || x == -Infinity) {\n        //trying to convert a large js string to a float\n        throw new Sk.builtin.OverflowError(\"int too large to convert to float\");\n    }\n    return x;\n}\n\n/**\n *\n * @function\n * @description\n * A wrapper to do the checks before passing the this.real, this.imag, other.real, other.imag\n * to the number function\n * @ignore\n * @param {function(number, number, number, number)} f\n * @param {boolean=} suppressOverflow\n */\nfunction complexNumberSlot(f, suppressOverflow) {\n    return function (other) {\n        const a_real = this.real;\n        const a_imag = this.imag;\n        let b_real = other.real;\n        let b_imag;\n        const other_v = other.v;\n        if (typeof b_real === \"number\") {\n            b_imag = other.imag;\n        } else if (typeof other_v === \"number\") {\n            b_real = other_v;\n            b_imag = 0.0;\n        } else if (JSBI.__isBigInt(other_v)) {\n            if (suppressOverflow === undefined) {\n                b_real = fromBigIntToNumberOrOverflow(other_v);\n            } else {\n                b_real = other_v.toString(); // weird case for tp_richcompare\n            }\n            b_imag = 0.0;\n        } else {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n\n        return f(a_real, a_imag, b_real, b_imag);\n    };\n}\n\nfunction divide(a_real, a_imag, b_real, b_imag) {\n    let ratio, denom, real, imag;\n    const abs_b_real = Math.abs(b_real);\n    const abs_b_imag = Math.abs(b_imag);\n    if (abs_b_real >= abs_b_imag) {\n        // divide tops and bottom by b_real\n        if (abs_b_real === 0.0) {\n            throw new Sk.builtin.ZeroDivisionError(\"complex division by zero\");\n        } else {\n            ratio = b_imag / b_real;\n            denom = b_real + b_imag * ratio;\n            real = (a_real + a_imag * ratio) / denom;\n            imag = (a_imag - a_real * ratio) / denom;\n        }\n    } else if (abs_b_imag >= abs_b_real) {\n        // divide tops and bottom by b.imag\n        ratio = b_real / b_imag;\n        denom = b_real * ratio + b_imag;\n        Sk.asserts.assert(b_imag !== 0.0);\n        real = (a_real * ratio + a_imag) / denom;\n        imag = (a_imag * ratio - a_real) / denom;\n    } else {\n        // At least one of b.real or b.imag is a NaN\n        real = NaN;\n        imag = NaN;\n    }\n\n    return new Sk.builtin.complex(real, imag);\n}\n\nconst power = complexNumberSlot((a_real, a_imag, b_real, b_imag) => {\n    const int_exponent = b_real | 0; // js convert to int\n    if (b_imag === 0.0 && b_real === int_exponent) {\n        return c_powi(a_real, a_imag, int_exponent);\n    } else {\n        return c_pow(a_real, a_imag, b_real, b_imag);\n    }\n});\n\n// power of complex a and complex exponent b\nfunction c_pow(a_real, a_imag, b_real, b_imag) {\n    let len, phase, real, imag;\n\n    if (b_real === 0.0 && b_imag === 0.0) {\n        real = 1.0;\n        imag = 0.0;\n    } else if (a_real === 0.0 && a_imag === 0.0) {\n        if (b_imag !== 0.0 || b_real < 0.0) {\n            throw new Sk.builtin.ZeroDivisionError(\"complex division by zero\");\n        }\n\n        real = 0.0;\n        imag = 0.0;\n    } else {\n        const vabs = Math.hypot(a_real, a_imag);\n        len = Math.pow(vabs, b_real);\n        const at = Math.atan2(a_imag, a_real);\n        phase = at * b_real;\n\n        if (b_imag !== 0.0) {\n            len /= Math.exp(at * b_imag);\n            phase += b_imag * Math.log(vabs);\n        }\n\n        real = len * Math.cos(phase);\n        imag = len * Math.sin(phase);\n    }\n    return new Sk.builtin.complex(real, imag);\n}\n\n// power of complex x and integer exponent n\nfunction c_powi(a_real, a_imag, n) {\n    if (n > 100 || n < -100) {\n        return c_pow(a_real, a_imag, n, 0.0);\n    } else if (n > 0) {\n        return c_powu(a_real, a_imag, n);\n    } else {\n        //  return c_quot(c_1,c_powu(x,-n));\n        const r = c_powu(a_real, a_imag, -n);\n        return divide(1.0, 0.0, r.real, r.imag);\n    }\n}\n\nfunction c_powu(a_real, a_imag, n) {\n    var r, p; // Py_complex\n    let mask = 1;\n    r = new Sk.builtin.complex(1.0, 0.0);\n    p = new Sk.builtin.complex(a_real, a_imag);\n\n    while (mask > 0 && n >= mask) {\n        if (n & mask) {\n            r = new Sk.builtin.complex(\n                r.real * p.real - r.imag * p.imag,\n                r.real * p.imag + p.real * r.imag\n            );\n        }\n\n        mask <<= 1;\n        p = new Sk.builtin.complex(p.real * p.real - p.imag * p.imag, 2 * p.real * p.imag);\n    }\n\n    return r;\n}\n\n/**\n * Internal format function for repr and str\n * It is not intended for __format__ calls\n *\n * This functions assumes, that v is always instance of Sk.builtin.complex\n * @ignore\n */\nfunction complex_format(v, precision, format_code) {\n    function copysign(a, b) {\n        let sign;\n        if (b) {\n            sign = b < 0 ? -1 : 1;\n        } else {\n            sign = 1 / b < 0 ? -1 : 1;\n        }\n        return sign * Math.abs(a);\n    }\n\n    let result; // pyObject\n\n    let pre = \"\";\n    let im = \"\";\n    let re = null;\n    let lead = \"\";\n    let tail = \"\";\n    const real = v.real;\n    const imag = v.imag;\n\n    if (real === 0.0 && copysign(1.0, real) == 1.0) {\n        re = \"\";\n        im = PyOS_double_to_string(imag, format_code, precision, 0, null);\n        // im = imag;\n    } else {\n        /* Format imaginary part with sign, real part without */\n        pre = PyOS_double_to_string(real, format_code, precision, 0, null);\n        re = pre;\n\n        im = PyOS_double_to_string(\n            imag,\n            format_code,\n            precision,\n            PyOS_double_to_string.Py_DTSF_SIGN,\n            null\n        );\n\n        if (imag === 0 && 1 / imag === -Infinity && im && im[0] !== \"-\") {\n            im = \"-\" + im; // force negative zero sign\n        }\n\n        lead = \"(\";\n        tail = \")\";\n    }\n\n    result = \"\" + lead + re + im + \"j\" + tail; // concat all parts\n    return new Sk.builtin.str(result);\n}\n\n/**\n * https://hg.python.org/cpython/file/3cf2990d19ab/Objects/complexobject.c#l907\n * also see _PyComplex_FormatAdvanced\n * @ignore\n */\nfunction _PyComplex_FormatAdvanced(self, format_spec) {\n    throw new Sk.builtin.NotImplementedError(\"__format__ is not implemented for complex type.\");\n}\n\n/**\n Return true if float or double are is neither infinite nor NAN, else false\n Value is already a Javascript object\n @ignore\n */\nfunction _is_finite(val) {\n    return Number.isFinite(val);\n}\n\nfunction _is_infinity(val) {\n    return val === Infinity || val === -Infinity;\n}\n\n/**\n * Convert a double val to a string using supplied format_code, precision, and flags.\n *\n * format_code must be one of 'e', 'E', 'f', 'F', 'g', 'G' or 'r'. For 'r', the supplied precision must be 0 and is ignored. The 'r' format code specifies the standard repr() format.\n *\n * flags can be zero or more of the values Py_DTSF_SIGN, Py_DTSF_ADD_DOT_0, or Py_DTSF_ALT, or-ed together:\n *\n * Py_DTSF_SIGN means to always precede the returned string with a sign character, even if val is non-negative.\n * Py_DTSF_ADD_DOT_0 means to ensure that the returned string will not look like an integer.\n * Py_DTSF_ALT means to apply \u201Calternate\u201D formatting rules. See the documentation for the PyOS_snprintf() '#' specifier for details.\n * If ptype is non-NULL, then the value it points to will be set to one of Py_DTST_FINITE, Py_DTST_INFINITE, or Py_DTST_NAN, signifying that val is a finite number, an\n * infinite number, or not a number, respectively.\n * @ignore\n */\nfunction PyOS_double_to_string(val, format_code, precision, flags, type) {\n    let buf,\n        t,\n        upper = false;\n    // Validate format code, and map upper and lower case\n    switch (format_code) {\n        case \"e\": /* exponent */\n        case \"f\": /* fixed */\n        case \"g\" /* general */:\n            break;\n        case \"E\":\n            upper = true;\n            format_code = \"e\";\n            break;\n        case \"F\":\n            upper = true;\n            format_code = \"f\";\n            break;\n        case \"r\" /* repr format */:\n            // Supplied precision is unused, must be 0.\n            if (precision !== 0) {\n                throw new Error(\"Bad internall call\"); // only happens when somebody messes up calling this in js\n            }\n            // repr() precision is 17 significant decimal digits\n            precision = 17;\n            format_code = \"g\";\n            break;\n        default:\n            throw new Error(\"Bad internall call\");\n    }\n    // no need for buffer size calculation like in cpython\n    // Handle nan and inf\n    if (isNaN(val)) {\n        buf = \"nan\";\n        t = PyOS_double_to_string.Py_DTST_NAN;\n    } else if (val === Infinity) {\n        buf = \"inf\";\n        t = PyOS_double_to_string.Py_DTST_INFINITE;\n    } else if (val === -Infinity) {\n        buf = \"-inf\";\n        t = PyOS_double_to_string.Py_DTST_INFINITE;\n    } else {\n        t = PyOS_double_to_string.Py_DTST_FINITE;\n        if (flags & PyOS_double_to_string.Py_DTSF_ADD_DOT_0) {\n            format_code = \"g\"; // \"Z\"; _PyOS_ascii_formatd converts \"Z\" to \"g\"\n        }\n        // ToDo: call snprintf here\n        // ToDo: call ascii_formatd\n        var format_str = \"%\";\n        format_str += flags & PyOS_double_to_string.Py_DTSF_ALT ? \"#\" : \"\";\n\n        if (precision != null) {\n            format_str += \".\";\n            format_str += precision;\n        }\n\n        format_str += format_code;\n        format_str = new Sk.builtin.str(format_str);\n        /**\n         * We can call nb$remainder with val, because it gets unwrapped and it doesn't matter if it is\n         * already a javascript number. If we do not pass a float, we can't distinguish between ints and floats\n         * and therefore we can't adjust the sign of the zero accordingly\n         */\n        buf = format_str.nb$remainder(new Sk.builtin.float_(val));\n        buf = buf.v; // get javascript string\n    }\n    /**\n     * Add sign when requested. It's convenient (esp. when formatting complex numbers) to\n     * include sign even for inf and nan.\n     */\n    if (flags & PyOS_double_to_string.Py_DTSF_SIGN && buf[0] !== \"-\") {\n        buf = \"+\" + buf;\n    }\n    if (upper) {\n        // Convert to upper case\n        buf = buf.toUpperCase();\n    }\n    return buf;\n}\n\n/* PyOS_double_to_string's \"flags\" parameter can be set to 0 or more of: */\nPyOS_double_to_string.Py_DTSF_SIGN = 0x01; // always add the sign\nPyOS_double_to_string.Py_DTSF_ADD_DOT_0 = 0x02; // if the result is an integer add \".0\"\nPyOS_double_to_string.Py_DTSF_ALT = 0x04; // \"alternate\" formatting. it's format_code specific\n\n/* PyOS_double_to_string's \"type\", if non-NULL, will be set to one of: */\nPyOS_double_to_string.Py_DTST_FINITE = 0;\nPyOS_double_to_string.Py_DTST_INFINITE = 1;\nPyOS_double_to_string.Py_DTST_NAN = 2;\n", "/** @typedef {Sk.builtin.object} */ var pyObject;\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {pyObject} start\n * @param {pyObject=} stop\n * @param {pyObject=} step\n */\nSk.builtin.slice = Sk.abstr.buildNativeClass(\"slice\", {\n    constructor: function slice(start, stop, step) {\n        if (stop === undefined && step === undefined) {\n            stop = start;\n            start = Sk.builtin.none.none$;\n        }\n        if (stop === undefined) {\n            stop = Sk.builtin.none.none$;\n        }\n        if (step === undefined) {\n            step = Sk.builtin.none.none$;\n        }\n        this.start = start;\n        this.stop = stop;\n        this.step = step;\n    },\n    slots: /**@lends {Sk.builtin.slice.prototype} */ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$doc: \"slice(stop)\\nslice(start, stop[, step])\\n\\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).\",\n        tp$hash: Sk.builtin.none.none$,\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"slice\", kwargs);\n            Sk.abstr.checkArgsLen(\"slice\", args, 1, 3);\n            return new Sk.builtin.slice(...args);\n        },\n        $r() {\n            const a = Sk.misceval.objectRepr(this.start);\n            const b = Sk.misceval.objectRepr(this.stop);\n            const c = Sk.misceval.objectRepr(this.step);\n            return new Sk.builtin.str(\"slice(\" + a + \", \" + b + \", \" + c + \")\");\n        },\n        tp$richcompare(w, op) {\n            // w not a slice - it's not subclassable so no need to use instanceof here\n            if (w.ob$type !== Sk.builtin.slice) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            // This is how CPython does it\n            const t1 = new Sk.builtin.tuple([this.start, this.stop, this.step]);\n            const t2 = new Sk.builtin.tuple([w.start, w.stop, w.step]);\n            return t1.tp$richcompare(t2, op);\n        },\n    },\n    getsets: /**@lends {Sk.builtin.slice.prototype} */ {\n        start: {\n            $get() {\n                return this.start;\n            },\n        },\n        step: {\n            $get() {\n                return this.step;\n            },\n        },\n        stop: {\n            $get() {\n                return this.stop;\n            },\n        },\n    },\n    methods: /**@lends {Sk.builtin.slice.prototype} */ {\n        indices: {\n            $meth: function indices(length) {\n                length = Sk.misceval.asIndexSized(length, Sk.builtin.OverflowError); // let's not support lengths larger than this.\n                // don't support large lengths here which seems fair.\n                if (length < 0) {\n                    throw new Sk.builtin.TypeError(\"length should not be negative\");\n                }\n                const { start, stop, step } = this.slice$indices(length);\n                return new Sk.builtin.tuple([\n                    new Sk.builtin.int_(start),\n                    new Sk.builtin.int_(stop),\n                    new Sk.builtin.int_(step),\n                ]);\n            },\n            $doc: \"S.indices(len) -> (start, stop, stride)\\n\\nAssuming a sequence of length len, calculate the start and stop\\nindices, and the stride length of the extended slice described by\\nS. Out of bounds indices are clipped in a manner consistent with the\\nhandling of normal slices.\",\n            $textsig: null,\n            $flags: { OneArg: true },\n        },\n    },\n    proto: /**@lends {Sk.builtin.slice.prototype} */ {\n        slice$as_indices(sized) {\n            let start, stop, step;\n            const msg = \"slice indices must be integers or None or have an __index__ method\";\n            let getIndex;\n            if (sized) {\n                getIndex = (idx) => Sk.misceval.asIndexSized(idx, null, msg);\n            } else {\n                getIndex = (idx) => Sk.misceval.asIndexOrThrow(idx, msg);\n            }\n            if (Sk.builtin.checkNone(this.step)) {\n                step = 1;\n            } else {\n                step = getIndex(this.step);\n                if (step === 0) {\n                    throw new Sk.builtin.ValueError(\"slice step cannot be zero\");\n                }\n            }\n            if (Sk.builtin.checkNone(this.start)) {\n                start = null;\n            } else {\n                start = getIndex(this.start);\n            }\n            if (Sk.builtin.checkNone(this.stop)) {\n                stop = null;\n            } else {\n                stop = getIndex(this.stop);\n            }\n            return { start: start, stop: stop, step: step };\n        },\n        $wrt(length, start, stop, step, sized) {\n            let idxFromNeg;\n            if (sized) {\n                idxFromNeg = (idx) =>\n                    JSBI.__isBigInt(idx) ? JSBI.add(idx, JSBI.BigInt(length)) : idx + length;\n            } else {\n                idxFromNeg = (idx) => idx + length;\n            }\n\n            if (step > 0) {\n                if (start === null) {\n                    start = 0;\n                } else if (start < 0) {\n                    start = idxFromNeg(start);\n                    if (start < 0) {\n                        start = 0;\n                    }\n                }\n                if (stop === null) {\n                    stop = length;\n                } else if (stop > length) {\n                    stop = length;\n                } else if (stop < 0) {\n                    stop = idxFromNeg(stop);\n                }\n            } else {\n                if (start === null) {\n                    start = length - 1;\n                } else if (start >= length) {\n                    start = length - 1;\n                } else if (start < 0) {\n                    start = idxFromNeg(start);\n                }\n                if (stop === null) {\n                    stop = -1;\n                } else if (stop < 0) {\n                    stop = idxFromNeg(stop);\n                    if (stop < 0) {\n                        stop = -1;\n                    }\n                }\n            }\n\n            return { start: start, stop: stop, step: step };\n        },\n        slice$indices(length, sized) {\n            let { start, stop, step } = this.slice$as_indices(true, sized);\n            return this.$wrt(length, start, stop, step, sized);\n        },\n        /**\n         * used by objects like str, list, tuple that can return a slice\n         * @param {number} len\n         * @param {Function} f\n         */\n        sssiter$(len, f) {\n            let { start, stop, step } = this.slice$indices(len, true);\n            if (step > 0) {\n                for (let i = start; i < stop; i += step) {\n                    f(i);\n                }\n            } else {\n                for (let i = start; i > stop; i += step) {\n                    f(i);\n                }\n            }\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\n/**\n *\n * @param {*} pyObj\n * @param {*} start\n * @param {*} end\n *\n * @private\n *\n * @description\n * helper function for methods that adjust their start, end arguments with respect to\n * a python sequence type object\n */\nSk.builtin.slice.startEnd$wrt = function (pyObj, start, end) {\n    const len = pyObj.sq$length();\n    const msg = \"slice indices must be integers or have an __index__ method\";\n    if (start === undefined || Sk.builtin.checkNone(start)) {\n        start = 0;\n    } else {\n        start = Sk.misceval.asIndexSized(start, null, msg);\n        if (start < 0) {\n            start = start + len;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n    }\n\n    if (end === undefined || Sk.builtin.checkNone(end)) {\n        end = len;\n    } else {\n        end = Sk.misceval.asIndexSized(end, null, msg);\n        if (end < 0) {\n            end = end + len;\n            if (end < 0) {\n                end = 0;\n            }\n        } else if (end > len) {\n            end = len;\n        }\n    }\n    return { start: start, end: end };\n};\n", "var set_private_ = {};\n\n/**\n *\n * @constructor\n * @param {Array} S\n *\n * @description\n * internally call new Sk.builtin.set with an array of python objects\n */\nSk.builtin.set = Sk.abstr.buildNativeClass(\"set\", {\n    constructor: function set(S) {\n        if (S === undefined) {\n            S = [];\n        } else if (!Array.isArray(S)) {\n            S = Sk.misceval.arrayFromIterable(S); // internal calls to constructor can't suspend;\n        }\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.set,\n            \"Bad call to set - must be called with an Array and 'new'\"\n        );\n        const L = [];\n        for (let i = 0; i < S.length; i++) {\n            L.push(S[i]);\n            L.push(true);\n        }\n        this.v = new Sk.builtin.dict(L);\n        this.in$repr = false;\n    },\n    slots: /**@lends {Sk.builtin.set.prototype}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_number: true,\n        tp$as_sequence_or_mapping: true,\n        tp$hash: Sk.builtin.none.none$,\n        tp$doc: \"set() -> new empty set object\\nset(iterable) -> new set object\\n\\nBuild an unordered collection of unique elements.\",\n        tp$init(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"set\", kwargs);\n            Sk.abstr.checkArgsLen(\"set\", args, 0, 1);\n            this.set$clear();\n            const iterable = args[0];\n            return iterable && this.set$update(iterable);\n        },\n        tp$new: Sk.generic.new,\n        $r() {\n            if (this.in$repr) {\n                return new Sk.builtin.str(Sk.abstr.typeName(this) + \"(...)\");\n            }\n            this.in$repr = true;\n            const ret = this.sk$asarray().map((x) => Sk.misceval.objectRepr(x));\n            this.in$repr = false;\n            if (Sk.__future__.python3) {\n                if (ret.length === 0) {\n                    return new Sk.builtin.str(Sk.abstr.typeName(this) + \"()\");\n                } else if (this.ob$type !== Sk.builtin.set) {\n                    // then we are a subclass of set\n                    return new Sk.builtin.str(\n                        Sk.abstr.typeName(this) + \"({\" + ret.join(\", \") + \"})\"\n                    );\n                } else {\n                    return new Sk.builtin.str(\"{\" + ret.join(\", \") + \"}\");\n                }\n            } else {\n                return new Sk.builtin.str(Sk.abstr.typeName(this) + \"([\" + ret.join(\", \") + \"])\");\n            }\n        },\n        tp$iter() {\n            return new set_iter_(this);\n        },\n        tp$richcompare(other, op) {\n            if (!Sk.builtin.checkAnySet(other)) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            switch (op) {\n                case \"NotEq\":\n                case \"Eq\":\n                    let res;\n                    if (this === other) {\n                        res = true;\n                    } else if (this.get$size() !== other.get$size()) {\n                        res = false;\n                    } else {\n                        res = Sk.misceval.isTrue(this.set$issubset(other));\n                    }\n                    return op === \"Eq\" ? res : !res;\n                case \"LtE\":\n                    return this === other || Sk.misceval.isTrue(this.set$issubset(other));\n                case \"GtE\":\n                    return this === other || Sk.misceval.isTrue(other.set$issubset(this));\n                case \"Lt\":\n                    return (\n                        this.get$size() < other.get$size() &&\n                        Sk.misceval.isTrue(this.set$issubset(other))\n                    );\n                case \"Gt\":\n                    return (\n                        this.get$size() > other.get$size() &&\n                        Sk.misceval.isTrue(other.set$issubset(this))\n                    );\n            }\n        },\n        // number slots\n        nb$subtract: numberSlot(function (other) {\n            return this.difference.$meth.call(this, other);\n        }),\n        nb$and: numberSlot(function (other) {\n            return this.intersection.$meth.call(this, other);\n        }),\n        nb$or: numberSlot(function (other) {\n            return this.union.$meth.call(this, other);\n        }),\n        nb$xor: numberSlot(function (other) {\n            return this.symmetric_difference.$meth.call(this, other);\n        }),\n        nb$inplace_subtract: numberSlot(function (other) {\n            if (other === this) {\n                other = other.set$copy();\n            }\n            return Sk.misceval.chain(this.difference_update.$meth.call(this, other), () => this);\n        }),\n        nb$inplace_and: numberSlot(function (other) {\n            return Sk.misceval.chain(this.intersection_update.$meth.call(this, other), () => this);\n        }),\n        nb$inplace_or: numberSlot(function (other) {\n            return Sk.misceval.chain(this.update.$meth.call(this, other), () => this);\n        }),\n        nb$inplace_xor: numberSlot(function (other) {\n            if (other === this) {\n                other = other.set$copy();\n            }\n            return Sk.misceval.chain(\n                this.symmetric_difference_update.$meth.call(this, other),\n                () => this\n            );\n        }),\n        // sequence or mapping slots\n        sq$length() {\n            return this.get$size();\n        },\n        sq$contains(entry) {\n            entry = entry_or_hashable_set(entry);\n            return this.v.sq$contains(entry);\n        },\n    },\n    methods: /**@lends {Sk.builtin.set.prototype}*/ {\n        add: {\n            $meth(item) {\n                this.set$add(item);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Add an element to a set.\\n\\nThis has no effect if the element is already present.\",\n        },\n        clear: {\n            $meth() {\n                this.set$clear();\n                return Sk.builtin.none.none$;\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Remove all elements from this set.\",\n        },\n        copy: {\n            $meth() {\n                return this.set$copy();\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Return a shallow copy of a set.\",\n        },\n        discard: {\n            $meth(entry) {\n                entry = entry_or_hashable_set(entry);\n                this.set$discard(entry);\n                return Sk.builtin.none.none$;\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Remove an element from a set if it is a member.\\n\\nIf the element is not a member, do nothing.\",\n        },\n        difference: {\n            $meth(...args) {\n                const result = this.set$copy();\n                return Sk.misceval.chain(\n                    Sk.misceval.iterArray(args, (arg) => result.set$difference_update(arg)),\n                    () => result\n                );\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Return the difference of two or more sets as a new set.\\n\\n(i.e. all elements that are in this set but not the others.)\",\n        },\n        difference_update: {\n            $meth(...args) {\n                return Sk.misceval.chain(\n                    Sk.misceval.iterArray(args, (arg) => this.set$difference_update(arg)),\n                    () => Sk.builtin.none.none$\n                );\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Remove all elements of another set from this set.\",\n        },\n        intersection: {\n            $meth(...args) {\n                return this.set$intersection_multi(...args);\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Return the intersection of two sets as a new set.\\n\\n(i.e. all elements that are in both sets.)\",\n        },\n        intersection_update: {\n            $meth(...args) {\n                return Sk.misceval.chain(this.set$intersection_multi(...args), (res) => {\n                    this.swap$bodies(res);\n                    return Sk.builtin.none.none$;\n                });\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Update a set with the intersection of itself and another.\",\n        },\n        isdisjoint: {\n            $meth(other) {\n                // requires all items in this to not be in other\n                return Sk.misceval.chain(\n                    Sk.misceval.iterFor(Sk.abstr.iter(other), (i) => {\n                        if (this.sq$contains(i)) {\n                            return new Sk.misceval.Break(Sk.builtin.bool.false$);\n                        }\n                    }),\n                    (res) => res || Sk.builtin.bool.true$\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Return True if two sets have a null intersection.\",\n        },\n        issubset: {\n            $meth(other) {\n                if (!Sk.builtin.checkAnySet(other)) {\n                    other = this.set$make_basetype(other);\n                }\n                return Sk.misceval.chain(other, (other_set) => this.set$issubset(other_set));\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Report whether another set contains this set.\",\n        },\n        issuperset: {\n            $meth(other) {\n                if (!Sk.builtin.checkAnySet(other)) {\n                    other = this.set$make_basetype(other);\n                }\n                return Sk.misceval.chain(other, (other_set) => other_set.set$issubset(this));\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Report whether this set contains another set.\",\n        },\n        pop: {\n            $meth() {\n                if (this.get$size() === 0) {\n                    throw new Sk.builtin.KeyError(\"pop from an empty set\");\n                }\n                const item = Sk.misceval.callsimArray(this.v.popitem, [this.v]);\n                return item.v[0];\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Remove and return an arbitrary set element.\\nRaises KeyError if the set is empty.\",\n        },\n        // __reduce__: {\n        //     $meth: methods.$__reduce__,\n        //     $flags:{},\n        //     $textsig: null,\n        //     $doc: \"Return state information for pickling.\" },\n        remove: {\n            $meth(entry) {\n                const tmp = entry_or_hashable_set(entry);\n                if (this.v.mp$lookup(tmp)) {\n                    this.v.mp$ass_subscript(tmp);\n                    return Sk.builtin.none.none$;\n                }\n                throw new Sk.builtin.KeyError(entry);\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Remove an element from a set; it must be a member.\\n\\nIf the element is not a member, raise a KeyError.\",\n        },\n        // __sizeof__: {\n        //     $meth: methods.$__sizeof__,\n        //     $flags:{},\n        //     $textsig: null,\n        //     $doc: \"S.__sizeof__() -> size of S in memory, in bytes\" },\n        symmetric_difference: {\n            $meth(other) {\n                let other_set;\n                return Sk.misceval.chain(\n                    this.set$make_basetype(other),\n                    (os) => {\n                        other_set = os;\n                        return other_set.set$symmetric_diff_update(this);\n                    },\n                    () => other_set\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Return the symmetric difference of two sets as a new set.\\n\\n(i.e. all elements that are in exactly one of the sets.)\",\n        },\n        symmetric_difference_update: {\n            $meth(other) {\n                if (!Sk.builtin.checkAnySet(other)) {\n                    other = this.set$make_basetype(other);\n                }\n                return Sk.misceval.chain(\n                    other,\n                    (other_set) => this.set$symmetric_diff_update(other_set),\n                    () => Sk.builtin.none.none$\n                );\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"Update a set with the symmetric difference of itself and another.\",\n        },\n        union: {\n            $meth(...args) {\n                const result = this.set$copy();\n                return Sk.misceval.chain(\n                    Sk.misceval.iterArray(args, (arg) => result.set$update(arg)),\n                    () => result\n                );\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Return the union of sets as a new set.\\n\\n(i.e. all elements that are in either set.)\",\n        },\n        update: {\n            $meth(...args) {\n                return Sk.misceval.chain(\n                    Sk.misceval.iterArray(args, (arg) => this.set$update(arg)),\n                    () => Sk.builtin.none.none$\n                );\n            },\n            $flags: { MinArgs: 0 },\n            $textsig: null,\n            $doc: \"Update a set with the union of itself and others.\",\n        },\n    },\n    classmethods: Sk.generic.classGetItem,\n    proto: /**@lends {Sk.builtin.set.prototype}*/ Object.assign(set_private_, {\n        sk$asarray() {\n            return this.v.sk$asarray();\n        },\n        get$size() {\n            // this method cannot be overriden by subclasses\n            return this.v.sq$length();\n        },\n        set$add(entry) {\n            this.v.mp$ass_subscript(entry, true);\n        },\n        set$make_basetype(other) {\n            return Sk.misceval.chain(\n                Sk.misceval.arrayFromIterable(other, true),\n                (S) => new this.sk$builtinBase(S)\n            );\n        },\n        set$discard(entry) {\n            return this.v.pop$item(entry);\n        },\n        set$clear() {\n            this.v = new Sk.builtin.dict([]);\n        },\n        set$copy() {\n            const setCopy = new this.sk$builtinBase();\n            setCopy.v = this.v.dict$copy();\n            return setCopy;\n        },\n        set$difference_update(other) {\n            return Sk.misceval.iterFor(Sk.abstr.iter(other), (entry) => {\n                this.set$discard(entry);\n            });\n        },\n        set$intersection(other) {\n            const res = new this.sk$builtinBase();\n            return Sk.misceval.chain(\n                Sk.misceval.iterFor(Sk.abstr.iter(other), (entry) => {\n                    if (this.sq$contains(entry)) {\n                        res.set$add(entry);\n                    }\n                }),\n                () => res\n            );\n        },\n        set$intersection_multi(...args) {\n            if (!args.length) {\n                return this.set$copy();\n            }\n            let result = this;\n            return Sk.misceval.chain(\n                Sk.misceval.iterArray(args, (arg) => {\n                    return Sk.misceval.chain(result.set$intersection(arg), (res) => {\n                        result = res;\n                    });\n                }),\n                () => result\n            );\n        },\n        set$issubset(other_set) {\n            const thisLength = this.get$size();\n            const otherLength = other_set.get$size();\n            if (thisLength > otherLength) {\n                // every item in this set can't be in other if it's shorter!\n                return Sk.builtin.bool.false$;\n            }\n            for (\n                let it = this.tp$iter(), i = it.tp$iternext();\n                i !== undefined;\n                i = it.tp$iternext()\n            ) {\n                if (!other_set.sq$contains(i)) {\n                    return Sk.builtin.bool.false$;\n                }\n            }\n            return Sk.builtin.bool.true$;\n        },\n        set$symmetric_diff_update(other) {\n            return Sk.misceval.iterFor(Sk.abstr.iter(other), (entry) => {\n                const discarded = this.set$discard(entry);\n                if (discarded === undefined) {\n                    this.set$add(entry);\n                }\n            });\n        },\n        set$update(other) {\n            return Sk.misceval.iterFor(Sk.abstr.iter(other), (entry) => {\n                this.set$add(entry);\n            });\n        },\n        swap$bodies(other) {\n            this.v = other.v;\n        },\n    }),\n});\n\nSk.exportSymbol(\"Sk.builtin.set\", Sk.builtin.set);\n\nconst set_proto = Sk.builtin.set.prototype;\n/**\n * @constructor\n * @param {Array.<Object>} S\n */\nSk.builtin.frozenset = Sk.abstr.buildNativeClass(\"frozenset\", {\n    constructor: function frozenset(S) {\n        // takes in an array of py objects\n        if (S === undefined) {\n            S = [];\n        } else if (!Array.isArray(S)) {\n            S = Sk.misceval.arrayFromIterable(S); // internal calls to constructor can't suspend;\n        }\n        Sk.asserts.assert(\n            this instanceof Sk.builtin.frozenset,\n            \"bad call to frozen set - must be called with 'new'\"\n        );\n        const L = [];\n        for (let i = 0; i < S.length; i++) {\n            L.push(S[i]);\n            L.push(true);\n        }\n        this.v = new Sk.builtin.dict(L);\n        this.in$repr = false;\n    },\n    slots: /**@lends {Sk.builtin.frozenset.prototype}*/ {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_number: true,\n        tp$as_sequence_or_mapping: true,\n        tp$doc: \"frozenset() -> empty frozenset object\\nfrozenset(iterable) -> frozenset object\\n\\nBuild an immutable unordered collection of unique elements.\",\n        tp$hash() {\n            // numbers taken from Cpython 2.7 hash function\n            let hash = 1927868237;\n            const entries = this.sk$asarray();\n            hash *= entries.length + 1;\n            for (let i = 0; i < entries.length; i++) {\n                const h = Sk.abstr.objectHash(entries[i]);\n                hash ^= (h ^ (h << 16) ^ 89869747) * 3644798167;\n            }\n            hash = hash * 69069 + 907133923;\n            return hash;\n        },\n        /**\n         * @param {Array} args\n         * @param {Array=} kwargs\n         * @ignore\n         */\n        tp$new(args, kwargs) {\n            if (this !== Sk.builtin.frozenset.prototype) {\n                return this.$subtype_new(args, kwargs);\n            }\n            Sk.abstr.checkNoKwargs(\"frozenset\", kwargs);\n            Sk.abstr.checkArgsLen(\"frozenset\", args, 0, 1);\n            const arg = args[0];\n            if (arg !== undefined && arg.ob$type === Sk.builtin.frozenset) {\n                return arg;\n            }\n            return Sk.misceval.chain(Sk.misceval.arrayFromIterable(arg, true), (S) => {\n                if (!S.length) {\n                    // in cpython frozenset() on an empty set returns the same object\n                    return Sk.builtin.frozenset.$emptyset;\n                }\n                return new Sk.builtin.frozenset(S);\n            });\n        },\n        $r: set_proto.$r,\n        tp$iter: set_proto.tp$iter,\n        tp$richcompare: set_proto.tp$richcompare,\n        // number slots\n        nb$subtract: set_proto.nb$subtract,\n        nb$and: set_proto.nb$and,\n        nb$or: set_proto.nb$or,\n        nb$xor: set_proto.nb$xor,\n        // as mapping\n        sq$length: set_proto.sq$length,\n        sq$contains: set_proto.sq$contains,\n    },\n    methods: /**@lends {Sk.builtin.frozenset.prototype}*/ {\n        copy: Object.assign({}, set_proto.copy.d$def, {\n            $meth() {\n                return this.constructor === this.sk$builtinBase\n                    ? this\n                    : new Sk.builtin.frozenset(this.sk$asarray());\n            },\n        }),\n        difference: set_proto.difference.d$def,\n        intersection: set_proto.intersection.d$def,\n        isdisjoint: set_proto.isdisjoint.d$def,\n        issubset: set_proto.issubset.d$def,\n        issuperset: set_proto.issuperset.d$def,\n        // __reduce__: set_proto.__reduce__,\n        // __sizeof__: set_proto.__sizeof__,\n        symmetric_difference: set_proto.symmetric_difference.d$def,\n        union: set_proto.union.d$def,\n    },\n    classmethods: Sk.generic.classGetItem,\n    proto: /**@lends {Sk.builtin.frozenset.prototype}*/ Object.assign(\n        {\n            $subtype_new(args, kwargs) {\n                const instance = new this.constructor();\n                // pass the args but ignore the kwargs for subtyping\n                return Sk.misceval.chain(\n                    Sk.builtin.frozenset.prototype.tp$new(args),\n                    (frozenset) => {\n                        instance.v = frozenset.v;\n                        return instance;\n                    }\n                );\n            },\n        },\n        set_private_\n    ),\n});\n\nSk.builtin.frozenset.$emptyset = Object.create(Sk.builtin.frozenset.prototype, {\n    v: { value: new Sk.builtin.dict([]), enumerable: true },\n    in$repr: { value: false, enumerable: true },\n});\n\nSk.exportSymbol(\"Sk.builtin.frozenset\", Sk.builtin.frozenset);\n\nfunction numberSlot(f) {\n    return function (other) {\n        if (!Sk.builtin.checkAnySet(other)) {\n            return Sk.builtin.NotImplemented.NotImplemented$;\n        }\n        return f.call(this, other);\n    };\n}\n\nfunction entry_or_hashable_set(entry) {\n    if (entry instanceof Sk.builtin.set && entry.tp$hash === Sk.builtin.none.none$) {\n        // cpython nuance\n        entry = new Sk.builtin.frozenset(Sk.misceval.arrayFromIterable(entry));\n    }\n    return entry;\n}\n\n/**\n * @constructor\n * @extends {Sk.builtin.object}\n * @param {Sk.builtin.set|Sk.builtin.frozenset} set or frozenset\n * @private\n */\nvar set_iter_ = Sk.abstr.buildIteratorClass(\"set_iterator\", {\n    constructor: function set_iter_(set) {\n        this.$index = 0;\n        this.$seq = set.sk$asarray();\n        this.$orig = set;\n    },\n    iternext: Sk.generic.iterNextWithArrayCheckSize,\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n", "Sk.builtin.print = function print(args, kwargs) {\n    /** @todo flush is allowed but has no effect */\n    let [sep, end, file] = Sk.abstr.copyKeywordsToNamedArgs(\n        \"print\",\n        [\"sep\", \"end\", \"file\", \"flush\"],\n        [],\n        kwargs\n    );\n\n    // check for sep; string or None\n    if (sep === undefined || Sk.builtin.checkNone(sep)) {\n        sep = \" \";\n    } else if (Sk.builtin.checkString(sep)) {\n        sep = sep.$jsstr();\n    } else {\n        throw new Sk.builtin.TypeError(\n            \"sep must be None or a string, not \" + Sk.abstr.typeName(sep)\n        );\n    }\n\n    // check for end; string or None\n    if (end === undefined || Sk.builtin.checkNone(end)) {\n        end = \"\\n\";\n    } else if (Sk.builtin.checkString(end)) {\n        end = end.$jsstr();\n    } else {\n        throw new Sk.builtin.TypeError(\n            \"end must be None or a string, not \" + Sk.abstr.typeName(end)\n        );\n    }\n\n    // check for file and get the file_write function if it exists\n    let file_write;\n    if (file !== undefined && !Sk.builtin.checkNone(file)) {\n        file_write = Sk.abstr.lookupSpecial(file, Sk.builtin.str.$write);\n        if (file_write === undefined) {\n            throw new Sk.builtin.AttributeError(\n                \"'\" + Sk.abstr.typeName(file) + \"' object has no attribute 'write'\"\n            );\n        }\n    }\n\n    // loop through outputs and create output string\n    const output = new Sk.builtin.str(\n        args.map((x) => new Sk.builtin.str(x).toString()).join(sep) + end\n    );\n\n    if (file_write !== undefined) {\n        // currently not tested, though it seems that we need to see how we should access the write function in a correct manner\n        Sk.misceval.callsimArray(file_write, [output]);\n    } else {\n        return Sk.misceval.chain(Sk.importModule(\"sys\", false, true), (sys) => {\n            file_write = Sk.abstr.lookupSpecial(sys.$d.stdout, Sk.builtin.str.$write);\n            return file_write && Sk.misceval.callsimOrSuspendArray(file_write, [output]);\n        });\n    }\n\n    return Sk.builtin.none.none$;\n};\n\n// add this flag so that if Sk.misceval.call(Sk.builtin.print) is used then it knows how to deal with args\nSk.builtin.print.co_fastcall = 1;\n", "/**\n * @constructor\n * @extends {Sk.builtin.object}\n */\nSk.builtin.module = Sk.abstr.buildNativeClass(\"module\", {\n    constructor: function module_() {\n        this.$d = {}; // set this now - we could subclass from Module so override sk$klass $d object\n    },\n    slots: {\n        tp$doc: \"Create a module object.\\n\\nThe name must be a string; the optional doc argument can have any type.\",\n        tp$getattr(pyName, canSuspend) {\n            let customGetAttr = this.$d[\"__getattr__\"];\n            if (customGetAttr) {\n                const ret = Sk.misceval.callsimArray(customGetAttr, [pyName]);\n                if (ret !== undefined) {\n                    return ret;\n                }\n            }\n            const jsMangled = pyName.$mangled;\n            const ret = this.$d[jsMangled];\n            if (ret !== undefined) {\n                return ret;\n            }\n            // technically this is the wrong way round but its seems performance wise better\n            // to just return the module elements before checking for descriptors\n            const descr = this.ob$type.$typeLookup(pyName);\n            if (descr !== undefined) {\n                const f = descr.tp$descr_get;\n                if (f) {\n                    return f.call(descr, this, this.ob$type, canSuspend);\n                }\n                return descr;\n            }\n            // ok we've failed to find anything check if there is __getattr__ defined as per pep 562\n            const getattr = this.$d.__getattr__;\n            if (getattr !== undefined) {\n                const res = Sk.misceval.tryCatch(\n                    () => Sk.misceval.callsimOrSuspendArray(getattr, [pyName]),\n                    (e) => {\n                        if (e instanceof Sk.builtin.AttributeError) {\n                            return;\n                        }\n                        throw e;\n                    }\n                );\n                return canSuspend ? res : Sk.misceval.retryOptionalSuspensionOrThrow(res);\n            }\n        },\n        tp$setattr: Sk.generic.setAttr,\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            const [name, doc] = Sk.abstr.copyKeywordsToNamedArgs(\n                \"module\",\n                [\"name\", \"doc\"],\n                args,\n                kwargs,\n                [Sk.builtin.none.none$]\n            );\n            Sk.builtin.pyCheckType(\"module\", \"string\", name);\n            this.init$dict(name, doc);\n        },\n        $r() {\n            let name = this.get$name();\n            if (name !== undefined) {\n                const module_reprf = this.get$mod_reprf();\n                if (module_reprf !== undefined) {\n                    return Sk.misceval.callsimOrSuspendArray(module_reprf, [this]);\n                }\n            }\n            name = name === undefined ? \"'?'\" : name;\n            let extra = this.from$file();\n            extra = extra === undefined ? this.empty_or$loader() : extra;\n            return new Sk.builtin.str(\"<module \" + name + extra + \">\");\n        },\n    },\n    getsets: {\n        __dict__: {\n            $get() {\n                // modules in skulpt have a $d as a js object so just return it as a mapping proxy;\n                // TODO we should really have a dict object\n                return new Sk.builtin.mappingproxy(this.$d);\n            },\n        },\n    },\n    methods: {\n        __dir__: {\n            $meth() {\n                // could be cleaner but this is inline with cpython's version\n                const dict = this.tp$getattr(Sk.builtin.str.$dict);\n                if (!Sk.builtin.checkMapping(dict)) {\n                    throw new Sk.builtin.TypeError(\"__dict__ is not a dictionary\");\n                }\n                const dirfunc = dict.mp$lookup(Sk.builtin.str.$dir);\n                if (dirfunc !== undefined) {\n                    return Sk.misceval.callsimOrSuspendArray(dirfunc, []);\n                } else {\n                    return new Sk.builtin.list(Sk.misceval.arrayFromIterable(dict));\n                }\n            },\n            $flags: { NoArgs: true },\n            $doc: \"__dir__() -> list\\nspecialized dir() implementation\",\n        },\n    },\n    proto: {\n        init$dict(name, doc) {\n            this.$d.__name__ = name;\n            this.$d.__doc__ = doc;\n            this.$d.__package__ = Sk.builtin.none.none$;\n            this.$d.__spec__ = Sk.builtin.none.none$;\n            this.$d.__loader__ = Sk.builtin.none.none$;\n        },\n        sk$attrError() {\n            let name = this.get$name();\n            name = name === undefined ? \"module\" : \"module \" + name;\n            if (this.$initializing) {\n                name = \"(most likely due to a circular import) partially initialized \" + name;\n            }\n            return name;\n        },\n        get$name() {\n            const name = this.tp$getattr(Sk.builtin.str.$name);\n            return name && Sk.misceval.objectRepr(name);\n        },\n        from$file() {\n            const file = this.tp$getattr(Sk.builtin.str.$file);\n            return file && \" from \" + Sk.misceval.objectRepr(file);\n        },\n        empty_or$loader() {\n            if (this.$js && this.$js.includes(\"$builtinmodule\")) {\n                return \" (built-in)\";\n            }\n            const loader = this.tp$getattr(Sk.builtin.str.$loader);\n            return loader === undefined || Sk.builtin.checkNone(loader)\n                ? \"\"\n                : \" (\" + Sk.misceval.objectRepr(loader) + \")\";\n        },\n        get$mod_reprf() {\n            const loader = this.tp$getattr(Sk.builtin.str.$loader);\n            return loader && loader.tp$getattr(this.str$mod_repr);\n        },\n        str$mod_repr: new Sk.builtin.str(\"module_repr\"),\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.module\", Sk.builtin.module);\n", "Sk.builtin.structseq_types = {};\n\nSk.builtin.make_structseq = function (\n    module,\n    name,\n    visible_fields,\n    hidden_fields = {},\n    doc = null\n) {\n    const nm = module + \".\" + name;\n    const flds = [];\n    const getsets = {};\n    Object.keys(visible_fields).forEach((key, i) => {\n        flds.push(key);\n        getsets[key] = {\n            $get() {\n                return this.v[i];\n            },\n            $doc: visible_fields[key],\n        };\n    });\n    const n_flds = flds.length;\n    let n_total_flds = n_flds;\n\n    Object.keys(hidden_fields).forEach((key, i) => {\n        getsets[key] = {\n            $get() {\n                return this.$hidden[i] || Sk.builtin.none.none$;\n            },\n            $doc: hidden_fields[key],\n        };\n        n_total_flds++;\n    });\n\n    /**\n     * @constructor\n     * @extends Sk.builtin.tuple\n     * @param {!Array<Object>|Object} arg\n     */\n    var structseq = Sk.abstr.buildNativeClass(nm, {\n        constructor: function structseq_constructor(v, hidden) {\n            Sk.asserts.assert(this instanceof structseq);\n            Sk.builtin.tuple.call(this, v);\n            this.$hidden = hidden || [];\n        },\n        base: Sk.builtin.tuple,\n        slots: {\n            tp$new(args, kwargs) {\n                Sk.abstr.checkOneArg(nm, args, kwargs);\n                const arg = Sk.misceval.arrayFromIterable(args[0]);\n                if (arg.length < n_flds) {\n                    throw new Sk.builtin.TypeError(\n                        nm +\n                            \"() takes an at least \" +\n                            n_flds +\n                            \"-sequence (\" +\n                            arg.length +\n                            \"-sequence given)\"\n                    );\n                } else if (arg.length > n_total_flds) {\n                    throw new Sk.builtin.TypeError(\n                        nm +\n                            \"() takes an at most \" +\n                            n_total_flds +\n                            \"-sequence (\" +\n                            arg.length +\n                            \"-sequence given)\"\n                    );\n                }\n                return new structseq(arg.slice(0, n_flds), arg.slice(n_flds));\n            },\n            tp$doc: doc ? doc : Sk.builtin.none.none$,\n            $r() {\n                var ret;\n                var i;\n                var bits;\n                if (this.v.length === 0) {\n                    return new Sk.builtin.str(nm + \"()\");\n                }\n                bits = [];\n                for (i = 0; i < flds.length; ++i) {\n                    bits[i] = flds[i] + \"=\" + Sk.misceval.objectRepr(this.v[i]);\n                }\n                ret = bits.join(\", \");\n                if (this.v.length === 1) {\n                    ret += \",\";\n                }\n                return new Sk.builtin.str(nm + \"(\" + ret + \")\");\n            },\n        },\n        methods: {\n            __reduce__: {\n                $meth() {\n                    throw new Sk.builtin.NotImplementedError(\"__reduce__ is not implemented\");\n                },\n                $flags: { NoArgs: true },\n            },\n        },\n        getsets: getsets,\n        proto: {\n            num_sequence_fields: new Sk.builtin.int_(n_flds),\n        },\n    });\n    return structseq;\n};\nSk.exportSymbol(\"Sk.builtin.make_structseq\", Sk.builtin.make_structseq);\n", "/**\n * @constructor\n * @param {Function} code javascript code object for the function\n * @param {Object} globals where this function was defined\n * @param {Object} args arguments to the original call (stored into locals for\n * the generator to reenter)\n * @param {Object=} closure dict of free variables\n * @param {Object=} closure2 another dict of free variables that will be\n * merged into 'closure'. there's 2 to simplify generated code (one is $free,\n * the other is $cell)\n *\n * co_varnames and co_name come from generated code, must access as dict.\n */\nSk.builtin.generator = Sk.abstr.buildIteratorClass(\"generator\", {\n    constructor: function generator(code, globals, args, closure, closure2) {\n        var k;\n        var i;\n        if (!code) {\n            return;\n        } // ctor hack\n\n        if (!(this instanceof Sk.builtin.generator)) {\n            throw new TypeError(\"bad internal call to generator, use 'new'\");\n        }\n\n        this.func_code = code;\n        this.func_globals = globals || null;\n        this.gi$running = false;\n        this.gi$resumeat = 0;\n        this.gi$sentvalue = Sk.builtin.none.none$;\n        this.gi$locals = {};\n        this.gi$cells = {};\n        if (args.length > 0) {\n            // store arguments into locals because they have to be maintained\n            // too. 'fast' var lookups are locals in generator functions.\n            for (i = 0; i < code.co_varnames.length; ++i) {\n                this.gi$locals[code.co_varnames[i]] = args[i];\n            }\n        }\n        if (closure2 !== undefined) {\n            // todo; confirm that modification here can't cause problems\n            for (k in closure2) {\n                closure[k] = closure2[k];\n            }\n        }\n        //print(JSON.stringify(closure));\n        this.func_closure = closure;\n    },\n    slots: {\n        $r() {\n            return new Sk.builtin.str(\"<generator object \" + this.func_code.co_name.v + \">\");\n        },\n    },\n    iternext(canSuspend, yielded) {\n        var ret;\n        var args;\n        var self = this;\n        if (this.gi$running) {\n            throw new Sk.builtin.ValueError(\"generator already executing\");\n        }\n        this[\"gi$running\"] = true;\n        if (yielded === undefined) {\n            yielded = Sk.builtin.none.none$;\n        }\n        this[\"gi$sentvalue\"] = yielded;\n\n        // note: functions expect 'this' to be globals to avoid having to\n        // slice/unshift onto the main args\n        args = [this];\n        if (this.func_closure) {\n            args.push(this.func_closure);\n        }\n        ret = this.func_code.apply(this.func_globals, args);\n        return (function finishIteration(ret) {\n            if (ret instanceof Sk.misceval.Suspension) {\n                if (canSuspend) {\n                    return new Sk.misceval.Suspension(finishIteration, ret);\n                } else {\n                    ret = Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n                }\n            }\n            //print(\"ret\", JSON.stringify(ret));\n            self[\"gi$running\"] = false;\n            Sk.asserts.assert(ret !== undefined);\n            if (Array.isArray(ret)) {\n                // returns a pair: resume target and yielded value\n                self[\"gi$resumeat\"] = ret[0];\n                ret = ret[1];\n            } else {\n                // todo; StopIteration\n                self.gi$ret = ret;\n                return undefined;\n            }\n            //print(\"returning:\", JSON.stringify(ret));\n            return ret;\n        })(ret);\n    },\n    methods: {\n        send: {\n            $meth(value) {\n                return Sk.misceval.chain(this.tp$iternext(true, value), (ret) => {\n                    if (ret === undefined) {\n                        const v = this.gi$ret;\n                        // this is a weird quirk - and only for printing purposes StopIteration(None) vs StopIteration()\n                        // .value ends up being None. But the repr prints the args we pass to StopIteration.\n                        // See tests in test_yield_from and search for StopIteration()\n                        throw v !== undefined && v !== Sk.builtin.none.none$\n                            ? new Sk.builtin.StopIteration(v)\n                            : new Sk.builtin.StopIteration();\n                    }\n                    return ret;\n                });\n            },\n            $flags: { OneArg: true },\n            $doc: \"send(arg) -> send 'arg' into generator,\\nreturn next yielded value or raise StopIteration.\",\n        },\n    },\n});\nSk.exportSymbol(\"Sk.builtin.generator\", Sk.builtin.generator);\n\n/**\n * Creates a generator with the specified next function and additional\n * instance data. Useful in Javascript-implemented modules to implement\n * the __iter__ method.\n */\nSk.builtin.makeGenerator = function (next, data) {\n    var key;\n    var gen = new Sk.builtin.generator(null, null, null);\n    gen.tp$iternext = next;\n\n    for (key in data) {\n        if (data.hasOwnProperty(key)) {\n            gen[key] = data[key];\n        }\n    }\n\n    return gen;\n};\nSk.exportSymbol(\"Sk.builtin.makeGenerator\", Sk.builtin.makeGenerator);\n", "var STDOUT_FILENO = 1;\nvar STDIN_FILENO = 0;\nvar STDERR_FILENO = 2;\n\n/**\n * @constructor\n * @param {Sk.builtin.str} name\n * @param {Sk.builtin.str} mode\n * @param {Object} buffering\n */\nSk.builtin.file = function (name, mode, buffering, encoding, errors, newline, closefd, opener) {\n    var i;\n    var elem;\n\n    if (!(this instanceof Sk.builtin.file)) {\n        return new Sk.builtin.file(name, mode, buffering);\n    }\n\n    this.mode = mode;\n    this.name = Sk.ffi.remapToJs(name);\n    this.buffering = Sk.ffi.remapToJs(buffering);\n    this.encoding = Sk.ffi.remapToJs(encoding);\n    this.errors = Sk.ffi.remapToJs(errors);\n    if (Sk.builtin.checkNone(newline)) {\n        this.newline = \"\\n\";\n    } else {\n        this.newline = Sk.ffi.remapToJs(newline);\n    }\n    this.closefd = Sk.ffi.remapToJs(closefd);\n    this.opener = Sk.ffi.remapToJs(opener);\n    this.closed = false;\n\n    if (this.name === \"/dev/stdout\") {\n        this.data$ = Sk.builtin.none.none$;\n        this.fileno = STDOUT_FILENO;\n    } else if (this.name === \"/dev/stdin\") {\n        this.fileno = STDIN_FILENO;\n    } else if (this.name === \"/dev/stderr\") {\n        this.fileno = STDERR_FILENO;\n    } else {\n        if (Sk.inBrowser) {\n            // todo:  Maybe provide a replaceable function for non-import files\n            this.fileno = 10;\n            this.data$ = Sk.inBrowser(this.name);\n        } else {\n            this.fileno = 11;\n            this.data$ = Sk.read(name.v);\n        }\n        this.lineList = splitLines(this.data$, this.newline, Sk.inBrowser);\n        this.currentLine = 0;\n    }\n    this.pos$ = 0;\n\n    // TODONEW: Is this necessary?\n    this.__class__ = Sk.builtin.file;\n\n    if (Sk.fileopen && this.fileno >= 10) {\n        Sk.fileopen(this);\n    }\n\n    return this;\n};\n\nfunction splitLines(text, newline, inBrowser) {\n    if (newline === \"\") {\n        newline = \"\\n\";\n    }\n    let lineList = text.split(newline);\n    // TODO: Find the reason why we needed this. It was part of CSV?\n    if (inBrowser && lineList.length) {\n        if (lineList[lineList.length - 1] === \"\") {\n            lineList = lineList.slice(0, -1);\n        }\n    }\n    for (let i = 0; i < lineList.length - 1; i += 1) {\n        lineList[i] = lineList[i] + newline;\n    }\n    return lineList;\n}\n\nSk.abstr.setUpInheritance(\"file\", Sk.builtin.file, Sk.builtin.object);\nSk.abstr.setUpBuiltinMro(Sk.builtin.file);\n\nSk.builtin.file.prototype[\"$r\"] = function () {\n    return new Sk.builtin.str(\n        \"<\" +\n            (this.closed ? \"closed\" : \"open\") +\n            \"file '\" +\n            this.name +\n            \"', mode '\" +\n            Sk.ffi.remapToJs(this.mode) +\n            \"'>\"\n    );\n};\n\nSk.builtin.file.prototype.tp$iter = function () {\n    var allLines = this.lineList;\n    var that = this;\n    //var currentLine = this.currentLine;\n\n    var ret = {\n        tp$iter: function () {\n            return ret;\n        },\n        $obj: this,\n        $index: this.currentLine,\n        $lines: allLines,\n        tp$iternext: function () {\n            if (that.currentLine >= ret.$lines.length) {\n                return undefined;\n            }\n            return new Sk.builtin.str(ret.$lines[that.currentLine++]);\n        },\n    };\n    return ret;\n};\n\nSk.abstr.setUpSlots(Sk.builtin.file);\n\nSk.builtin.file.prototype[\"__enter__\"] = new Sk.builtin.func(function __enter__(self) {\n    return self;\n});\n\nSk.builtin.file.prototype[\"__exit__\"] = new Sk.builtin.func(function __exit__(self) {\n    return Sk.misceval.callsimArray(Sk.builtin.file.prototype[\"close\"], [self]);\n});\n\nSk.builtin.file.prototype[\"close\"] = new Sk.builtin.func(function close(self) {\n    self.closed = true;\n    return Sk.builtin.none.none$;\n});\n\nSk.builtin.file.prototype[\"flush\"] = new Sk.builtin.func(function flush(self) {});\n\nSk.builtin.file.prototype[\"fileno\"] = new Sk.builtin.func(function fileno(self) {\n    return this.fileno;\n}); // > 0, not 1/2/3\n\nSk.builtin.file.prototype[\"isatty\"] = new Sk.builtin.func(function isatty(self) {\n    return false;\n});\n\nSk.builtin.file.prototype[\"read\"] = new Sk.builtin.func(function read(self, size) {\n    var ret;\n    var len = self.data$.length;\n    var l_size;\n    if (self.closed) {\n        throw new Sk.builtin.ValueError(\"I/O operation on closed file\");\n    }\n\n    if (size === undefined) {\n        l_size = len;\n    } else {\n        l_size = Sk.ffi.remapToJs(size);\n    }\n\n    ret = new Sk.builtin.str(self.data$.substr(self.pos$, l_size));\n    if (size === undefined) {\n        self.pos$ = len;\n    } else {\n        self.pos$ += Sk.ffi.remapToJs(size);\n    }\n    if (self.pos$ >= len) {\n        self.pos$ = len;\n    }\n\n    return ret;\n});\n\nSk.builtin.file.$readline = function (self, size, prompt) {\n    if (self.fileno === 0) {\n        var x, susp;\n\n        var lprompt = Sk.ffi.remapToJs(prompt);\n\n        lprompt = lprompt ? lprompt : \"\";\n\n        Sk.misceval.pauseTimer();\n        x = Sk.inputfun(lprompt);\n\n        if (x instanceof Promise || (x && typeof x.then === \"function\")) {\n            susp = new Sk.misceval.Suspension();\n\n            susp.resume = function () {\n                if (susp.data.error) {\n                    throw susp.data.error;\n                }\n\n                Sk.misceval.unpauseTimer();\n                return new Sk.builtin.str(susp.data.result);\n            };\n\n            susp.data = {\n                type: \"Sk.promise\",\n                promise: x,\n            };\n\n            return susp;\n        } else {\n            Sk.misceval.unpauseTimer();\n            return new Sk.builtin.str(x);\n        }\n    } else {\n        var line = \"\";\n        if (self.currentLine < self.lineList.length) {\n            line = self.lineList[self.currentLine];\n            self.currentLine++;\n        }\n        return new Sk.builtin.str(line);\n    }\n};\n\nSk.builtin.file.prototype[\"readline\"] = new Sk.builtin.func(function readline(self, size) {\n    return Sk.builtin.file.$readline(self, size, undefined);\n});\n\nSk.builtin.file.prototype[\"readlines\"] = new Sk.builtin.func(function readlines(self, sizehint) {\n    if (self.fileno === 0) {\n        return new Sk.builtin.NotImplementedError(\n            \"readlines isn't implemented because the web doesn't support Ctrl+D\"\n        );\n    }\n\n    var i;\n    var arr = [];\n    for (i = self.currentLine; i < self.lineList.length; i++) {\n        arr.push(new Sk.builtin.str(self.lineList[i]));\n    }\n    return new Sk.builtin.list(arr);\n});\n\nSk.builtin.file.prototype[\"seek\"] = new Sk.builtin.func(function seek(self, offset, whence) {\n    var l_offset = Sk.ffi.remapToJs(offset);\n\n    if (whence === undefined) {\n        whence = 0;\n    }\n    if (whence === 0) {\n        self.pos$ = l_offset;\n    } else if (whence == 1) {\n        self.pos$ = self.data$.length + l_offset;\n    } else if (whence == 2) {\n        self.pos$ = self.data$.length + l_offset;\n    }\n\n    return Sk.builtin.none.none$;\n});\n\nSk.builtin.file.prototype[\"tell\"] = new Sk.builtin.func(function tell(self) {\n    return Sk.ffi.remapToPy(self.pos$);\n});\n\nSk.builtin.file.prototype[\"truncate\"] = new Sk.builtin.func(function truncate(self, size) {\n    Sk.asserts.fail();\n});\n\nSk.builtin.file.prototype[\"write\"] = new Sk.builtin.func(function write(self, str) {\n    var mode = Sk.ffi.remapToJs(self.mode);\n    if (mode === \"w\" || mode === \"wb\" || mode === \"a\" || mode === \"ab\") {\n        if (Sk.filewrite) {\n            if (self.closed) {\n                throw new Sk.builtin.ValueError(\"I/O operation on closed file\");\n            }\n\n            if (self.fileno === 1) {\n                Sk.output(Sk.ffi.remapToJs(str));\n            } else {\n                Sk.filewrite(self, str);\n            }\n        } else {\n            if (self.fileno === 1) {\n                Sk.output(Sk.ffi.remapToJs(str));\n            } else {\n                Sk.asserts.fail();\n            }\n        }\n    } else {\n        throw new Sk.builtin.IOError(\"File not open for writing\");\n    }\n\n    return Sk.builtin.none.none$;\n});\n\nSk.exportSymbol(\"Sk.builtin.file\", Sk.builtin.file);\n", "/**\n * @namespace Sk.ffi\n *\n */\n\nSk.ffi = Sk.ffi || {};\n\n/**\n * maps from Javascript Object/Array/string to Python dict/list/str.\n *\n * only works on basic objects that are being used as storage, doesn't handle\n * functions, etc.\n */\nSk.ffi.remapToPy = function (obj) {\n    var k;\n    var kvs;\n    var i;\n    var arr;\n\n    if (obj === null || typeof obj === \"undefined\") {\n        return Sk.builtin.none.none$;\n    }\n\n    if (obj.ob$type) {\n        return obj;\n    }\n\n    if (obj instanceof Sk.misceval.Suspension) {\n        return obj;\n    }\n\n    if (Object.prototype.toString.call(obj) === \"[object Array]\") {\n        arr = [];\n        for (i = 0; i < obj.length; ++i) {\n            arr.push(Sk.ffi.remapToPy(obj[i]));\n        }\n        return new Sk.builtin.list(arr);\n    }\n\n    if (typeof obj === \"object\") {\n        kvs = [];\n        for (k in obj) {\n            kvs.push(Sk.ffi.remapToPy(k));\n            kvs.push(Sk.ffi.remapToPy(obj[k]));\n        }\n        return new Sk.builtin.dict(kvs);\n    }\n\n    if (typeof obj === \"string\") {\n        return new Sk.builtin.str(obj);\n    }\n\n    if (typeof obj === \"number\") {\n        return Sk.builtin.assk$(obj);\n    }\n\n    if (typeof obj === \"boolean\") {\n        return new Sk.builtin.bool(obj);\n    } else if (typeof obj === \"undefined\") {\n        return Sk.builtin.none.none$;\n    }\n\n    if (typeof obj === \"function\") {\n        return new Sk.builtin.func(obj);\n    }\n\n    Sk.asserts.fail(\"unhandled remap type \" + typeof obj);\n};\nSk.exportSymbol(\"Sk.ffi.remapToPy\", Sk.ffi.remapToPy);\n\n/**\n * Maps from Python dict/list/str/number to Javascript Object/Array/string/number.\n *\n * If obj is a\n *\n * @param obj {Object}  Any Python object (except a function)\n *\n */\nSk.ffi.remapToJs = function (obj) {\n    var i;\n    var kAsJs;\n    var ret;\n    if (obj instanceof Sk.builtin.dict) {\n        ret = {};\n        obj.$items().forEach(([key, val]) => {\n            kAsJs = Sk.ffi.remapToJs(key);\n            // todo; assert that this is a reasonble lhs?\n            ret[kAsJs] = Sk.ffi.remapToJs(val);\n        });\n        return ret;\n    } else if (obj instanceof Sk.builtin.list || obj instanceof Sk.builtin.tuple) {\n        ret = [];\n        for (i = 0; i < obj.v.length; ++i) {\n            ret.push(Sk.ffi.remapToJs(obj.v[i]));\n        }\n        return ret;\n    } else if (obj instanceof Sk.builtin.bool) {\n        return obj.v ? true : false;\n    } else if (obj instanceof Sk.builtin.int_) {\n        return Sk.builtin.asnum$(obj);\n    } else if (obj instanceof Sk.builtin.float_) {\n        return Sk.builtin.asnum$(obj);\n    } else if (obj instanceof Sk.builtin.lng) {\n        return Sk.builtin.asnum$(obj);\n    } else if (typeof obj === \"number\" || typeof obj === \"boolean\" || typeof obj === \"string\") {\n        return obj;\n    } else if (obj === undefined) {\n        return undefined;\n    } else {\n        return obj.v;\n    }\n};\nSk.exportSymbol(\"Sk.ffi.remapToJs\", Sk.ffi.remapToJs);\n\nSk.ffi.callback = function (fn) {\n    if (fn === undefined) {\n        return fn;\n    }\n    return function () {\n        return Sk.misceval.apply(\n            fn,\n            undefined,\n            undefined,\n            undefined,\n            Array.prototype.slice.call(arguments, 0)\n        );\n    };\n};\nSk.exportSymbol(\"Sk.ffi.callback\", Sk.ffi.callback);\n\nSk.ffi.stdwrap = function (type, towrap) {\n    var inst = new type();\n    inst[\"v\"] = towrap;\n    return inst;\n};\nSk.exportSymbol(\"Sk.ffi.stdwrap\", Sk.ffi.stdwrap);\n\n/**\n * for when the return type might be one of a variety of basic types.\n * number|string, etc.\n */\nSk.ffi.basicwrap = function (obj) {\n    if (obj instanceof Sk.builtin.int_) {\n        return Sk.builtin.asnum$(obj);\n    }\n    if (obj instanceof Sk.builtin.float_) {\n        return Sk.builtin.asnum$(obj);\n    }\n    if (obj instanceof Sk.builtin.lng) {\n        return Sk.builtin.asnum$(obj);\n    }\n    if (typeof obj === \"number\" || typeof obj === \"boolean\") {\n        return obj;\n    }\n    if (typeof obj === \"string\") {\n        return new Sk.builtin.str(obj);\n    }\n    Sk.asserts.fail(\"unexpected type for basicwrap\");\n};\nSk.exportSymbol(\"Sk.ffi.basicwrap\", Sk.ffi.basicwrap);\n\nSk.ffi.unwrapo = function (obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    return obj[\"v\"];\n};\nSk.exportSymbol(\"Sk.ffi.unwrapo\", Sk.ffi.unwrapo);\n\nSk.ffi.unwrapn = function (obj) {\n    if (obj === null) {\n        return null;\n    }\n    return obj[\"v\"];\n};\nSk.exportSymbol(\"Sk.ffi.unwrapn\", Sk.ffi.unwrapn);\n", "/**\n * @constructor\n * @param {number} start\n * @param {number} stop\n * @param {number} step\n * @param {Object} lst\n */\nSk.builtin.range_ = Sk.abstr.buildNativeClass(\"range\", {\n    constructor: function range(start, stop, step, lst) {\n        this.start = start;\n        this.stop = stop;\n        this.step = step;\n        this.v = lst;\n    },\n    slots: {\n        tp$getattr: Sk.generic.getAttr,\n        tp$as_sequence_or_mapping: true,\n        tp$doc: \"range(stop) -> range object\\nrange(start, stop[, step]) -> range object\\n\\nReturn an object that produces a sequence of integers from start (inclusive)\\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\\nThese are exactly the valid indices for a list of 4 elements.\\nWhen step is given, it specifies the increment (or decrement).\",\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"range\", kwargs);\n            Sk.abstr.checkArgsLen(\"range\", args, 1, 3);\n            return rangeFromPy(args[0], args[1], args[2]);\n        },\n        $r() {\n            let repr = \"range(\" + this.start + \", \" + this.stop;\n            if (this.step != 1) {\n                repr += \", \" + this.step;\n            }\n            repr += \")\";\n            return new Sk.builtin.str(repr);\n        },\n        tp$richcompare(w, op) {\n            if ((op !== \"Eq\" && op !== \"NotEq\") || w.ob$type !== Sk.builtin.range_) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            w = new Sk.builtin.list(w.v);\n            return new Sk.builtin.list(this.v).tp$richcompare(w, op);\n        },\n        tp$iter() {\n            return new range_iter_(this);\n        },\n        nb$bool() {\n            return this.v.length !== 0;\n        },\n        // sequence and mapping slots\n        sq$contains(item) {\n            const lst = this.v;\n            for (let i = 0; i < lst.length; i++) {\n                if (Sk.misceval.richCompareBool(item, lst[i], \"Eq\")) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        sq$length() {\n            return this.v.length;\n        },\n        mp$subscript(index) {\n            if (Sk.misceval.isIndex(index)) {\n                let i = Sk.misceval.asIndexSized(index);\n                if (i < 0) {\n                    i = this.v.length + i;\n                }\n                if (i < 0 || i >= this.v.length) {\n                    throw new Sk.builtin.IndexError(\"range object index out of range\");\n                }\n                return this.v[i];\n            } else if (index.constructor === Sk.builtin.slice) {\n                const ret = [];\n                const lst = this.v;\n                index.sssiter$(lst.length, (i) => {\n                    ret.push(lst[i]);\n                });\n                let { start, stop, step } = index.slice$indices(lst.length);\n                start = Sk.misceval.asIndex(lst[start]) || this.start;\n                stop = Sk.misceval.asIndex(lst[stop]) || this.stop;\n                if (typeof this.step === \"number\") {\n                    step = step * this.step;\n                } else {\n                    step = JSBI.multiply(this.step, JSBI.BigInt(step));\n                }\n                return new Sk.builtin.range_(start, stop, step, ret);\n            }\n            throw new Sk.builtin.TypeError(\n                \"range indices must be integers or slices, not \" + Sk.abstr.typeName(index)\n            );\n        },\n    },\n    getsets: {\n        start: {\n            $get() {\n                return new Sk.builtin.int_(this.start);\n            },\n        },\n        step: {\n            $get() {\n                return new Sk.builtin.int_(this.step);\n            },\n        },\n        stop: {\n            $get() {\n                return new Sk.builtin.int_(this.stop);\n            },\n        },\n    },\n    methods: {\n        __reversed__: {\n            $meth() {\n                return new reverserange_iter_(this);\n            },\n            $flags: { NoArgs: true },\n            $textsig: null,\n            $doc: \"Return a reverse iterator.\",\n        },\n        // __reduce__: {\n        //     $meth: methods.__reduce__,\n        //     $flags:{},\n        //     $textsig: null,\n        //     $doc: \"\" },\n        count: {\n            $meth(item) {\n                let count = 0;\n                for (let i = 0; i < this.v.length; i++) {\n                    if (Sk.misceval.richCompareBool(item, this.v[i], \"Eq\")) {\n                        count++;\n                    }\n                }\n                return new Sk.builtin.int_(count);\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"rangeobject.count(value) -> integer -- return number of occurrences of value\",\n        },\n        index: {\n            $meth(item) {\n                for (let i = 0; i < this.v.length; i++) {\n                    if (Sk.misceval.richCompareBool(item, this.v[i], \"Eq\")) {\n                        return new Sk.builtin.int_(i);\n                    }\n                }\n                throw new Sk.builtin.ValueError(Sk.misceval.objectRepr(item) + \"is not in range\");\n            },\n            $flags: { OneArg: true },\n            $textsig: null,\n            $doc: \"rangeobject.index(value, [start, [stop]]) -> integer -- return index of value.\\nRaise ValueError if the value is not present.\",\n        },\n    },\n    proto: {\n        sk$asarray() {\n            return this.v.slice(0);\n        },\n    },\n    flags: {\n        sk$unacceptableBase: true,\n    },\n});\n\nfunction rangeFromPy(start, stop, step) {\n    start = start === undefined ? start : Sk.misceval.asIndexOrThrow(start);\n    stop = stop === undefined ? stop : Sk.misceval.asIndexOrThrow(stop);\n    step = step === undefined ? step : Sk.misceval.asIndexOrThrow(step);\n    if (stop === undefined && step === undefined) {\n        stop = start;\n        start = 0;\n        step = 1;\n    } else if (step === undefined) {\n        step = 1;\n    } else if (step === 0) {\n        throw new Sk.builtin.ValueError(\"range() step argument must not be zero\");\n    }\n    const ret = [];\n    if (typeof start === \"number\" && typeof stop === \"number\" && typeof step === \"number\") {\n        if (step > 0) {\n            for (let i = start; i < stop; i += step) {\n                ret.push(new Sk.builtin.int_(i));\n            }\n        } else {\n            for (let i = start; i > stop; i += step) {\n                ret.push(new Sk.builtin.int_(i));\n            }\n        }\n    } else {\n        // This is going to be slow\n        let i;\n        start = i = JSBI.BigInt(start);\n        step = JSBI.BigInt(step);\n        stop = JSBI.BigInt(stop);\n        if (JSBI.greaterThan(step, JSBI.__ZERO)) {\n            while (JSBI.lessThan(i, stop)) {\n                ret.push(new Sk.builtin.int_(convertIfSafe(i)));\n                i = JSBI.add(i, step);\n            }\n        } else {\n            while (JSBI.greaterThan(i, stop)) {\n                ret.push(new Sk.builtin.int_(convertIfSafe(i)));\n                i = JSBI.add(i, step);\n            }\n        }\n        start = convertIfSafe(start);\n        step = convertIfSafe(step);\n        stop = convertIfSafe(stop);\n    }\n    return new Sk.builtin.range_(start, stop, step, ret);\n}\n\nvar range_iter_ = Sk.abstr.buildIteratorClass(\"range_iterator\", {\n    constructor: function range_iter_(range_obj) {\n        this.$index = 0;\n        this.$seq = range_obj.v;\n    },\n    iternext() {\n        return this.$seq[this.$index++];\n        // we could check that the index is not outside of range\n        // but it will still return undefined so no need?\n    },\n    methods: {\n        __length_hint__: Sk.generic.iterLengthHintWithArrayMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\nvar reverserange_iter_ = Sk.abstr.buildIteratorClass(\"range_reverseiterator\", {\n    constructor: function range_iter(range_obj) {\n        this.$seq = range_obj.v;\n        this.$index = this.$seq.length - 1;\n    },\n    iternext() {\n        return this.$seq[this.$index--];\n    },\n    methods: {\n        __length_hint__: Sk.generic.iterReverseLengthHintMethodDef,\n    },\n    flags: { sk$unacceptableBase: true },\n});\n\nfunction convertIfSafe(v) {\n    if (JSBI.lessThan(v, JSBI.__MAX_SAFE) && JSBI.greaterThan(v, JSBI.__MIN_SAFE)) {\n        return JSBI.toNumber(v);\n    }\n    return v;\n}\n\n/**\n *\n * @description\n * Python 2 implementations of range and xrange\n *\n * @param {*} start\n * @param {*} stop\n * @param {*} step\n * @ignore\n */\nSk.builtin.range = Sk.builtin.xrange = function range(start, stop, step) {\n    const ret = rangeFromPy(start, stop, step);\n    return new Sk.builtin.list(ret.v);\n};\n", "/**\n * @constructor\n * @param {pyObject} iterable\n * @param {number|string=} start\n * @extends Sk.builtin.object\n */\nSk.builtin.enumerate = Sk.abstr.buildIteratorClass(\"enumerate\", {\n    constructor: function enumerate(iterable, start) {\n        if (!(this instanceof Sk.builtin.enumerate)) {\n            throw TypeError(\"Failed to construct 'enumerate': Please use the 'new' operator\");\n        }\n        this.$iterable = iterable;\n        this.$index = start;\n        return this;\n    },\n    iternext(canSuspend) {\n        const ret = Sk.misceval.chain(this.$iterable.tp$iternext(canSuspend), (i) => {\n            if (i === undefined) {\n                return undefined;\n            }\n            return new Sk.builtin.tuple([new Sk.builtin.int_(this.$index++), i]);\n        });\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    slots: {\n        tp$doc: \"Return an enumerate object.\\n\\n  iterable\\n    an object supporting iteration\\n\\nThe enumerate object yields pairs containing a count (from start, which\\ndefaults to zero) and a value yielded by the iterable argument.\\n\\nenumerate is useful for obtaining an indexed list:\\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...\",\n        tp$new(args, kwargs) {\n            let [iterable, start] = Sk.abstr.copyKeywordsToNamedArgs(\n                \"enumerate\",\n                [\"iterable\", \"start\"],\n                args,\n                kwargs,\n                [new Sk.builtin.int_(0)]\n            );\n            iterable = Sk.abstr.iter(iterable);\n            start = Sk.misceval.asIndexOrThrow(start);\n            if (this === Sk.builtin.enumerate.prototype) {\n                return new Sk.builtin.enumerate(iterable, start);\n            } else {\n                const instance = new this.constructor();\n                Sk.builtin.enumerate.call(instance, iterable, start);\n                return instance;\n            }\n        },\n    },\n    classmethods: Sk.generic.classGetItem,\n});\nSk.exportSymbol(\"Sk.builtin.enumerate\", Sk.builtin.enumerate);\n", "/**\n * @constructor\n * @param {pyObject} func\n * @param {pyObject} iterable\n * @extends Sk.builtin.object\n */\nSk.builtin.filter_ = Sk.abstr.buildIteratorClass(\"filter\", {\n    constructor: function filter_(func, iterable) {\n        this.$func = func;\n        this.$iterable = iterable;\n    },\n    iternext(canSuspend) {\n        // iterate over iterable until we pass the predicate\n        // this.chcek$filter either returns the item or undefined\n        const ret = Sk.misceval.iterFor(this.$iterable, (i) =>\n            Sk.misceval.chain(this.check$filter(i), (i) =>\n                i ? new Sk.misceval.Break(i) : undefined\n            )\n        );\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    slots: {\n        tp$doc: \"Return an iterator yielding those items of iterable for which function(item)\\nis true. If function is None, return the items that are true.\",\n        tp$new(args, kwargs) {\n            let [func, iterable] = Sk.abstr.copyKeywordsToNamedArgs(\n                \"filter\",\n                [\"predicate\", \"iterable\"],\n                args,\n                kwargs,\n                []\n            );\n            func = Sk.builtin.checkNone(func) ? null : func;\n            iterable = Sk.abstr.iter(iterable);\n            // in theory you could subclass\n            if (this === Sk.builtin.filter_.prototype) {\n                return new Sk.builtin.filter_(func, iterable);\n            } else {\n                const instance = new this.constructor();\n                Sk.builtin.filter_.call(instance, func, iterable);\n                return instance;\n            }\n        },\n    },\n    proto: {\n        check$filter(item) {\n            let res;\n            if (this.$func === null) {\n                res = item;\n            } else {\n                res = Sk.misceval.callsimOrSuspendArray(this.$func, [item]);\n            }\n            return Sk.misceval.chain(res, (ret) => (Sk.misceval.isTrue(ret) ? item : undefined));\n        },\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.filter_\", Sk.builtin.filter_);\n", "/**\n * @constructor\n * @param {Sk.builtin.func} func\n * @param {Array} array of iterators\n * @extends Sk.builtin.object\n */\nSk.builtin.map_ = Sk.abstr.buildIteratorClass(\"map\", {\n    constructor: function map_(func, iters) {\n        this.$func = func;\n        this.$iters = iters;\n    },\n    iternext(canSuspend) {\n        const args = [];\n        const ret = Sk.misceval.chain(\n            Sk.misceval.iterArray(this.$iters, (it) =>\n                Sk.misceval.chain(it.tp$iternext(canSuspend), (i) => {\n                    if (i === undefined) {\n                        return new Sk.misceval.Break(true);\n                    }\n                    args.push(i);\n                })\n            ),\n            (endmap) => (endmap ? undefined : Sk.misceval.callsimOrSuspendArray(this.$func, args))\n        );\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    slots: {\n        tp$doc: \"map(func, *iterables) --> map object\\n\\nMake an iterator that computes the function using arguments from\\neach of the iterables.  Stops when the shortest iterable is exhausted.\",\n        tp$new(args, kwargs) {\n            if (this === Sk.builtin.map_.prototype) {\n                Sk.abstr.checkNoKwargs(\"map\", kwargs);\n            }\n            Sk.abstr.checkArgsLen(\"map\", args, 2);\n            const func = args[0];\n            const iters = [];\n            for (let i = 1; i < args.length; i++) {\n                iters.push(Sk.abstr.iter(args[i]));\n            }\n            if (this === Sk.builtin.map_.prototype) {\n                return new Sk.builtin.map_(func, iters);\n            } else {\n                const instance = new this.constructor();\n                Sk.builtin.map_.call(instance, func, iters);\n                return instance;\n            }\n        },\n    },\n});\n\nSk.exportSymbol(\"Sk.builtin.map_\", Sk.builtin.map_);\n", "/**\n * @constructor\n * @param {Object} seq\n * @extends Sk.builtin.object\n */\nSk.builtin.reversed = Sk.abstr.buildIteratorClass(\"reversed\", {\n    constructor: function reversed(seq) {\n        this.$idx = seq.sq$length() - 1;\n        this.$seq = seq;\n        return this;\n    },\n    iternext(canSuspend) {\n        if (this.$idx < 0) {\n            return undefined;\n        }\n        const ret = Sk.misceval.tryCatch(\n            () => Sk.abstr.objectGetItem(this.$seq, new Sk.builtin.int_(this.$idx--), canSuspend),\n            (e) => {\n                if (e instanceof Sk.builtin.IndexError) {\n                    this.$idx = -1;\n                    return undefined;\n                } else {\n                    throw e;\n                }\n            }\n        );\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    slots: {\n        tp$doc: \"Return a reverse iterator over the values of the given sequence.\",\n        tp$new(args, kwargs) {\n            if (this === Sk.builtin.reversed.prototype) {\n                Sk.abstr.checkNoKwargs(\"reversed\", kwargs);\n            }\n            Sk.abstr.checkArgsLen(\"reversed\", args, 1, 1);\n            let seq = args[0];\n            const special = Sk.abstr.lookupSpecial(seq, Sk.builtin.str.$reversed);\n            if (special !== undefined) {\n                return Sk.misceval.callsimArray(special, []);\n            } else if (\n                !Sk.builtin.checkSequence(seq) ||\n                Sk.abstr.lookupSpecial(seq, Sk.builtin.str.$len) === undefined\n            ) {\n                throw new Sk.builtin.TypeError(\n                    \"'\" + Sk.abstr.typeName(seq) + \"' object is not a sequence\"\n                );\n            }\n            if (this === Sk.builtin.reversed.prototype) {\n                return new Sk.builtin.reversed(seq);\n            } else {\n                const instance = new this.constructor();\n                Sk.builtin.reversed.call(instance, seq);\n                return instance;\n            }\n        },\n    },\n    methods: {\n        __length_hint__: {\n            $meth: function __length_hint__() {\n                return this.$idx >= 0 ? new Sk.builtin.int_(this.$idx) : new Sk.builtin.int_(0);\n            },\n            $flags: { NoArgs: true },\n        },\n    },\n});\n", "/**\n * @constructor\n * @param {Array} JS Array of iterator objects\n * @extends Sk.builtin.object\n */\nSk.builtin.zip_ = Sk.abstr.buildIteratorClass(\"zip\", {\n    constructor: function zip_(iters) {\n        this.$iters = iters;\n        if (iters.length === 0) {\n            this.tp$iternext = () => undefined;\n        }\n    },\n    iternext(canSuspend) {\n        const tup = [];\n        const ret = Sk.misceval.chain(\n            Sk.misceval.iterArray(this.$iters, (it) =>\n                Sk.misceval.chain(it.tp$iternext(canSuspend), (i) => {\n                    if (i === undefined) {\n                        return new Sk.misceval.Break(true);\n                    }\n                    tup.push(i);\n                })\n            ),\n            (endzip) => (endzip ? undefined : new Sk.builtin.tuple(tup))\n        );\n        return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n    },\n    slots: {\n        tp$doc: \"zip(iter1 [,iter2 [...]]) --> zip object\\n\\nReturn a zip object whose .__next__() method returns a tuple where\\nthe i-th element comes from the i-th iterable argument.  The .__next__()\\nmethod continues until the shortest iterable in the argument sequence\\nis exhausted and then it raises StopIteration.\",\n        tp$new(args, kwargs) {\n            if (this === Sk.builtin.zip_.prototype) {\n                Sk.abstr.checkNoKwargs(\"zip\", kwargs);\n            }\n            const iters = [];\n            for (let i = 0; i < args.length; i++) {\n                try {\n                    iters.push(Sk.abstr.iter(args[i]));\n                } catch (e) {\n                    if (e instanceof Sk.builtin.TypeError) {\n                        throw new Sk.builtin.TypeError(\n                            \"zip argument #\" + (i + 1) + \" must support iteration\"\n                        );\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n            if (this === Sk.builtin.zip_.prototype) {\n                return new Sk.builtin.zip_(iters);\n            } else {\n                const instance = new this.constructor();\n                Sk.builtin.zip_.call(instance, iters);\n                return instance;\n            }\n        },\n    },\n});\nSk.exportSymbol(\"Sk.builtin.zip_\", Sk.builtin.zip_);\n", "//\"\"\"Token constants (from somewhere).\"\"\"\n\nvar __all__ = [\"tok_name\", \"ISTERMINAL\", \"ISNONTERMINAL\", \"ISEOF\"];\n\n// #  This file is automatically generated; please don't muck it up!\n// #\n// #  To update the symbols in this file, 'cd' to the top directory of\n// #  the python source tree after building the interpreter and run:\n// #\n// #    ./python Lib/token.py\n\n// #--start constants--\nvar tokens = {\n    T_ENDMARKER: 0,\n    T_NAME: 1,\n    T_NUMBER: 2,\n    T_STRING: 3,\n    T_NEWLINE: 4,\n    T_INDENT: 5,\n    T_DEDENT: 6,\n    T_LPAR: 7,\n    T_RPAR: 8,\n    T_LSQB: 9,\n    T_RSQB: 10,\n    T_COLON: 11,\n    T_COMMA: 12,\n    T_SEMI: 13,\n    T_PLUS: 14,\n    T_MINUS: 15,\n    T_STAR: 16,\n    T_SLASH: 17,\n    T_VBAR: 18,\n    T_AMPER: 19,\n    T_LESS: 20,\n    T_GREATER: 21,\n    T_EQUAL: 22,\n    T_DOT: 23,\n    T_PERCENT: 24,\n    T_LBRACE: 25,\n    T_RBRACE: 26,\n    T_EQEQUAL: 27,\n    T_NOTEQUAL: 28,\n    T_LESSEQUAL: 29,\n    T_GREATEREQUAL: 30,\n    T_TILDE: 31,\n    T_CIRCUMFLEX: 32,\n    T_LEFTSHIFT: 33,\n    T_RIGHTSHIFT: 34,\n    T_DOUBLESTAR: 35,\n    T_PLUSEQUAL: 36,\n    T_MINEQUAL: 37,\n    T_STAREQUAL: 38,\n    T_SLASHEQUAL: 39,\n    T_PERCENTEQUAL: 40,\n    T_AMPEREQUAL: 41,\n    T_VBAREQUAL: 42,\n    T_CIRCUMFLEXEQUAL: 43,\n    T_LEFTSHIFTEQUAL: 44,\n    T_RIGHTSHIFTEQUAL: 45,\n    T_DOUBLESTAREQUAL: 46,\n    T_DOUBLESLASH: 47,\n    T_DOUBLESLASHEQUAL: 48,\n    T_AT: 49,\n    T_ATEQUAL: 50,\n    T_RARROW: 51,\n    T_ELLIPSIS: 52,\n    T_OP: 53,\n    T_AWAIT: 54,\n    T_ASYNC: 55,\n    T_ERRORTOKEN: 56,\n\n    //special cases\n    T_NT_OFFSET: 256,\n    T_N_TOKENS: 60,\n\n    //taken from tokenize.py\n    T_COMMENT: 57,\n    T_NL: 58,\n    T_ENCODING: 59,\n};\n// #--end constants--\n\nvar EXACT_TOKEN_TYPES = {\n    \"!=\": tokens.T_NOTEQUAL,\n    \"%\": tokens.T_PERCENT,\n    \"%=\": tokens.T_PERCENTEQUAL,\n    \"&\": tokens.T_AMPER,\n    \"&=\": tokens.T_AMPEREQUAL,\n    \"(\": tokens.T_LPAR,\n    \")\": tokens.T_RPAR,\n    \"*\": tokens.T_STAR,\n    \"**\": tokens.T_DOUBLESTAR,\n    \"**=\": tokens.T_DOUBLESTAREQUAL,\n    \"*=\": tokens.T_STAREQUAL,\n    \"+\": tokens.T_PLUS,\n    \"+=\": tokens.T_PLUSEQUAL,\n    \",\": tokens.T_COMMA,\n    \"-\": tokens.T_MINUS,\n    \"-=\": tokens.T_MINEQUAL,\n    \"->\": tokens.T_RARROW,\n    \".\": tokens.T_DOT,\n    \"...\": tokens.T_ELLIPSIS,\n    \"/\": tokens.T_SLASH,\n    \"//\": tokens.T_DOUBLESLASH,\n    \"//=\": tokens.T_DOUBLESLASHEQUAL,\n    \"/=\": tokens.T_SLASHEQUAL,\n    \":\": tokens.T_COLON,\n    // \":=\": tokens.T_COLONEQUAL, // currently not listed in tokens\n    \";\": tokens.T_SEMI,\n    \"<\": tokens.T_LESS,\n    \"<<\": tokens.T_LEFTSHIFT,\n    \"<<=\": tokens.T_LEFTSHIFTEQUAL,\n    \"<=\": tokens.T_LESSEQUAL,\n    \"=\": tokens.T_EQUAL,\n    \"==\": tokens.T_EQEQUAL,\n    \">\": tokens.T_GREATER,\n    \">=\": tokens.T_GREATEREQUAL,\n    \">>\": tokens.T_RIGHTSHIFT,\n    \">>=\": tokens.T_RIGHTSHIFTEQUAL,\n    \"@\": tokens.T_AT,\n    \"@=\": tokens.T_ATEQUAL,\n    \"[\": tokens.T_LSQB,\n    \"]\": tokens.T_RSQB,\n    \"^\": tokens.T_CIRCUMFLEX,\n    \"^=\": tokens.T_CIRCUMFLEXEQUAL,\n    \"{\": tokens.T_LBRACE,\n    \"|\": tokens.T_VBAR,\n    \"|=\": tokens.T_VBAREQUAL,\n    \"}\": tokens.T_RBRACE,\n    \"~\": tokens.T_TILDE,\n};\n\nvar tok_name = {};\n(function () {\n    for (var i in tokens) {\n        tok_name[tokens[i]] = i;\n    }\n})();\n\n__all__.concat(\n    Object.keys(tok_name).map(function (k) {\n        return tok_name[k];\n    })\n);\n\nfunction ISTERMINAL(x) {\n    return x < tokens.T_NT_OFFSET;\n}\n\nfunction ISNONTERMINAL(x) {\n    return x >= tokens.T_NT_OFFSET;\n}\n\nfunction ISEOF(x) {\n    return x == tokens.T_ENDMARKER;\n}\n\nSk.token = {};\nSk.token.tokens = tokens;\nSk.token.tok_name = tok_name;\nSk.token.EXACT_TOKEN_TYPES = EXACT_TOKEN_TYPES;\nSk.token.ISTERMINAL = ISTERMINAL;\nSk.token.ISNONTERMINAL = ISNONTERMINAL;\nSk.token.ISEOF = ISEOF;\n\nSk.exportSymbol(\"Sk.token\", Sk.token);\nSk.exportSymbol(\"Sk.token.tokens\", Sk.token.tokens);\nSk.exportSymbol(\"Sk.token.tok_name\", Sk.token.tok_name);\nSk.exportSymbol(\"Sk.token.EXACT_TOKEN_TYPES\");\nSk.exportSymbol(\"Sk.token.ISTERMINAL\", Sk.token.ISTERMINAL);\nSk.exportSymbol(\"Sk.token.ISNONTERMINAL\", Sk.token.ISNONTERMINAL);\nSk.exportSymbol(\"Sk.token.ISEOF\", Sk.token.ISEOF);\n", "/* From:\n    http://difnet.com.br/opensource/unicode_hack.js\n    It has been significantly modified.\n    Modifications are copyright 2014 Makyen and released under the MPL 2.0.\n        This Source Code Form is subject to the terms of the Mozilla Public\n        License, v. 2.0. If a copy of the MPL was not distributed with this\n        file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/\n/*! unicode_hack.js\n    Copyright (C) 2010-2012  Marcelo Gibson de Castro Gon\u00E7alves. All rights reserved.\n\n    Copying and distribution of this file, with or without modification,\n    are permitted in any medium without royalty provided the copyright\n    notice and this notice are preserved.  This file is offered as-is,\n    without any warranty.\n*/\n/*\nActual values adapted from https://github.com/slevithan/xregexp/blob/master/tools/output/categories.js\n*/\nconst Unicode = {\n    /* Strings to match Unicode characters in the BMP according to their Unicode category.\n       Extracted from Unicode specification, version 5.0.0, source:\n       http://unicode.org/versions/Unicode5.0.0/\n    */\n    /*\n        Abbr    Long                Description\n        Lu  Uppercase_Letter        an uppercase letter\n        Ll  Lowercase_Letter        a lowercase letter\n        Lt  Titlecase_Letter        a digraphic character, with first part uppercase\n        LC  Cased_Letter            Lu | Ll | Lt\n        Lm  Modifier_Letter         a modifier letter\n        Lo  Other_Letter            other letters, including syllables and ideographs\n        L   Letter                  Lu | Ll | Lt | Lm | Lo\n        Mn  Nonspacing_Mark         a nonspacing combining mark (zero advance width)\n        Mc  Spacing_Mark            a spacing combining mark (positive advance width)\n        Me  Enclosing_Mark          an enclosing combining mark\n        M   Mark                    Mn | Mc | Me\n        Nd  Decimal_Number          a decimal digit\n        Nl  Letter_Number           a letterlike numeric character\n        No  Other_Number            a numeric character of other type\n        N   Number                  Nd | Nl | No\n        Pc  Connector_Punctuation   a connecting punctuation mark, like a tie\n        Pd  Dash_Punctuation        a dash or hyphen punctuation mark\n        Ps  Open_Punctuation        an opening punctuation mark (of a pair)\n        Pe  Close_Punctuation       a closing punctuation mark (of a pair)\n        Pi  Initial_Punctuation     an initial quotation mark\n        Pf  Final_Punctuation       a final quotation mark\n        Po  Other_Punctuation       a punctuation mark of other type\n        P   Punctuation             Pc | Pd | Ps | Pe | Pi | Pf | Po\n        Sm  Math_Symbol             a symbol of mathematical use\n        Sc  Currency_Symbol         a currency sign\n        Sk  Modifier_Symbol         a non-letterlike modifier symbol\n        So  Other_Symbol            a symbol of other type\n        S   Symbol                  Sm | Sc | Sk | So\n        Zs  Space_Separator         a space character (of various non-zero widths)\n        Zl  Line_Separator          U+2028 LINE SEPARATOR only\n        Zp  Paragraph_Separator     U+2029 PARAGRAPH SEPARATOR only\n        Z   Separator               Zs | Zl | Zp\n        Cc  Control                 a C0 or C1 control code\n        Cf  Format                  a format control character\n        Cs  Surrogate               a surrogate code point\n        Co  Private_Use             a private-use character\n        Cn  Unassigned              a reserved unassigned code point or a noncharacter\n        C   Other                   Cc | Cf | Cs | Co | Cn\n    */\n    /* Alpha Sorted\n        Abbr    Long                Description\n        C   Other                   Cc | Cf | Cs | Co | Cn\n        Cc  Control                 a C0 or C1 control code\n        Cf  Format                  a format control character\n        Cn  Unassigned              a reserved unassigned code point or a noncharacter\n        Co  Private_Use             a private-use character\n        Cs  Surrogate               a surrogate code point\n        L   Letter                  Lu | Ll | Lt | Lm | Lo\n        LC  Cased_Letter            Lu | Ll | Lt\n        Ll  Lowercase_Letter        a lowercase letter\n        Lm  Modifier_Letter         a modifier letter\n        Lo  Other_Letter            other letters, including syllables and ideographs\n        Lt  Titlecase_Letter        a digraphic character, with first part uppercase\n        Lu  Uppercase_Letter        an uppercase letter\n        M   Mark                    Mn | Mc | Me\n        Mc  Spacing_Mark            a spacing combining mark (positive advance width)\n        Me  Enclosing_Mark          an enclosing combining mark\n        Mn  Nonspacing_Mark         a nonspacing combining mark (zero advance width)\n        N   Number                  Nd | Nl | No\n        Nd  Decimal_Number          a decimal digit\n        Nl  Letter_Number           a letterlike numeric character\n        No  Other_Number            a numeric character of other type\n        P   Punctuation             Pc | Pd | Ps | Pe | Pi | Pf | Po\n        Pc  Connector_Punctuation   a connecting punctuation mark, like a tie\n        Pd  Dash_Punctuation        a dash or hyphen punctuation mark\n        Pe  Close_Punctuation       a closing punctuation mark (of a pair)\n        Pf  Final_Punctuation       a final quotation mark\n        Pi  Initial_Punctuation     an initial quotation mark\n        Po  Other_Punctuation       a punctuation mark of other type\n        Ps  Open_Punctuation        an opening punctuation mark (of a pair)\n        S   Symbol                  Sm | Sc | Sk | So\n        Sc  Currency_Symbol         a currency sign\n        Sk  Modifier_Symbol         a non-letterlike modifier symbol\n        Sm  Math_Symbol             a symbol of mathematical use\n        So  Other_Symbol            a symbol of other type\n        Z   Separator               Zs | Zl | Zp\n        Zl  Line_Separator          U+2028 LINE SEPARATOR only\n        Zp  Paragraph_Separator     U+2029 PARAGRAPH SEPARATOR only\n        Zs  Space_Separator         a space character (of various non-zero widths)\n    */\n    Cc: \"\\\\0-\\\\x1F\\\\x7F-\\\\x9F\",\n    Cf: \"\\\\xAD\\\\u0600-\\\\u0605\\\\u061C\\\\u06DD\\\\u070F\\\\u08E2\\\\u180E\\\\u200B-\\\\u200F\\\\u202A-\\\\u202E\\\\u2060-\\\\u2064\\\\u2066-\\\\u206F\\\\uFEFF\\\\uFFF9-\\\\uFFFB\",\n    Co: \"\\\\uE000-\\\\uF8FF\",\n    Cs: \"\\\\uD800-\\\\uDFFF\",\n    Ll: \"a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F-\\\\u0293\\\\u0295-\\\\u02AF\\\\u0371\\\\u0373\\\\u0377\\\\u037B-\\\\u037D\\\\u0390\\\\u03AC-\\\\u03CE\\\\u03D0\\\\u03D1\\\\u03D5-\\\\u03D7\\\\u03D9\\\\u03DB\\\\u03DD\\\\u03DF\\\\u03E1\\\\u03E3\\\\u03E5\\\\u03E7\\\\u03E9\\\\u03EB\\\\u03ED\\\\u03EF-\\\\u03F3\\\\u03F5\\\\u03F8\\\\u03FB\\\\u03FC\\\\u0430-\\\\u045F\\\\u0461\\\\u0463\\\\u0465\\\\u0467\\\\u0469\\\\u046B\\\\u046D\\\\u046F\\\\u0471\\\\u0473\\\\u0475\\\\u0477\\\\u0479\\\\u047B\\\\u047D\\\\u047F\\\\u0481\\\\u048B\\\\u048D\\\\u048F\\\\u0491\\\\u0493\\\\u0495\\\\u0497\\\\u0499\\\\u049B\\\\u049D\\\\u049F\\\\u04A1\\\\u04A3\\\\u04A5\\\\u04A7\\\\u04A9\\\\u04AB\\\\u04AD\\\\u04AF\\\\u04B1\\\\u04B3\\\\u04B5\\\\u04B7\\\\u04B9\\\\u04BB\\\\u04BD\\\\u04BF\\\\u04C2\\\\u04C4\\\\u04C6\\\\u04C8\\\\u04CA\\\\u04CC\\\\u04CE\\\\u04CF\\\\u04D1\\\\u04D3\\\\u04D5\\\\u04D7\\\\u04D9\\\\u04DB\\\\u04DD\\\\u04DF\\\\u04E1\\\\u04E3\\\\u04E5\\\\u04E7\\\\u04E9\\\\u04EB\\\\u04ED\\\\u04EF\\\\u04F1\\\\u04F3\\\\u04F5\\\\u04F7\\\\u04F9\\\\u04FB\\\\u04FD\\\\u04FF\\\\u0501\\\\u0503\\\\u0505\\\\u0507\\\\u0509\\\\u050B\\\\u050D\\\\u050F\\\\u0511\\\\u0513\\\\u0515\\\\u0517\\\\u0519\\\\u051B\\\\u051D\\\\u051F\\\\u0521\\\\u0523\\\\u0525\\\\u0527\\\\u0529\\\\u052B\\\\u052D\\\\u052F\\\\u0560-\\\\u0588\\\\u10D0-\\\\u10FA\\\\u10FD-\\\\u10FF\\\\u13F8-\\\\u13FD\\\\u1C80-\\\\u1C88\\\\u1D00-\\\\u1D2B\\\\u1D6B-\\\\u1D77\\\\u1D79-\\\\u1D9A\\\\u1E01\\\\u1E03\\\\u1E05\\\\u1E07\\\\u1E09\\\\u1E0B\\\\u1E0D\\\\u1E0F\\\\u1E11\\\\u1E13\\\\u1E15\\\\u1E17\\\\u1E19\\\\u1E1B\\\\u1E1D\\\\u1E1F\\\\u1E21\\\\u1E23\\\\u1E25\\\\u1E27\\\\u1E29\\\\u1E2B\\\\u1E2D\\\\u1E2F\\\\u1E31\\\\u1E33\\\\u1E35\\\\u1E37\\\\u1E39\\\\u1E3B\\\\u1E3D\\\\u1E3F\\\\u1E41\\\\u1E43\\\\u1E45\\\\u1E47\\\\u1E49\\\\u1E4B\\\\u1E4D\\\\u1E4F\\\\u1E51\\\\u1E53\\\\u1E55\\\\u1E57\\\\u1E59\\\\u1E5B\\\\u1E5D\\\\u1E5F\\\\u1E61\\\\u1E63\\\\u1E65\\\\u1E67\\\\u1E69\\\\u1E6B\\\\u1E6D\\\\u1E6F\\\\u1E71\\\\u1E73\\\\u1E75\\\\u1E77\\\\u1E79\\\\u1E7B\\\\u1E7D\\\\u1E7F\\\\u1E81\\\\u1E83\\\\u1E85\\\\u1E87\\\\u1E89\\\\u1E8B\\\\u1E8D\\\\u1E8F\\\\u1E91\\\\u1E93\\\\u1E95-\\\\u1E9D\\\\u1E9F\\\\u1EA1\\\\u1EA3\\\\u1EA5\\\\u1EA7\\\\u1EA9\\\\u1EAB\\\\u1EAD\\\\u1EAF\\\\u1EB1\\\\u1EB3\\\\u1EB5\\\\u1EB7\\\\u1EB9\\\\u1EBB\\\\u1EBD\\\\u1EBF\\\\u1EC1\\\\u1EC3\\\\u1EC5\\\\u1EC7\\\\u1EC9\\\\u1ECB\\\\u1ECD\\\\u1ECF\\\\u1ED1\\\\u1ED3\\\\u1ED5\\\\u1ED7\\\\u1ED9\\\\u1EDB\\\\u1EDD\\\\u1EDF\\\\u1EE1\\\\u1EE3\\\\u1EE5\\\\u1EE7\\\\u1EE9\\\\u1EEB\\\\u1EED\\\\u1EEF\\\\u1EF1\\\\u1EF3\\\\u1EF5\\\\u1EF7\\\\u1EF9\\\\u1EFB\\\\u1EFD\\\\u1EFF-\\\\u1F07\\\\u1F10-\\\\u1F15\\\\u1F20-\\\\u1F27\\\\u1F30-\\\\u1F37\\\\u1F40-\\\\u1F45\\\\u1F50-\\\\u1F57\\\\u1F60-\\\\u1F67\\\\u1F70-\\\\u1F7D\\\\u1F80-\\\\u1F87\\\\u1F90-\\\\u1F97\\\\u1FA0-\\\\u1FA7\\\\u1FB0-\\\\u1FB4\\\\u1FB6\\\\u1FB7\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6\\\\u1FC7\\\\u1FD0-\\\\u1FD3\\\\u1FD6\\\\u1FD7\\\\u1FE0-\\\\u1FE7\\\\u1FF2-\\\\u1FF4\\\\u1FF6\\\\u1FF7\\\\u210A\\\\u210E\\\\u210F\\\\u2113\\\\u212F\\\\u2134\\\\u2139\\\\u213C\\\\u213D\\\\u2146-\\\\u2149\\\\u214E\\\\u2184\\\\u2C30-\\\\u2C5E\\\\u2C61\\\\u2C65\\\\u2C66\\\\u2C68\\\\u2C6A\\\\u2C6C\\\\u2C71\\\\u2C73\\\\u2C74\\\\u2C76-\\\\u2C7B\\\\u2C81\\\\u2C83\\\\u2C85\\\\u2C87\\\\u2C89\\\\u2C8B\\\\u2C8D\\\\u2C8F\\\\u2C91\\\\u2C93\\\\u2C95\\\\u2C97\\\\u2C99\\\\u2C9B\\\\u2C9D\\\\u2C9F\\\\u2CA1\\\\u2CA3\\\\u2CA5\\\\u2CA7\\\\u2CA9\\\\u2CAB\\\\u2CAD\\\\u2CAF\\\\u2CB1\\\\u2CB3\\\\u2CB5\\\\u2CB7\\\\u2CB9\\\\u2CBB\\\\u2CBD\\\\u2CBF\\\\u2CC1\\\\u2CC3\\\\u2CC5\\\\u2CC7\\\\u2CC9\\\\u2CCB\\\\u2CCD\\\\u2CCF\\\\u2CD1\\\\u2CD3\\\\u2CD5\\\\u2CD7\\\\u2CD9\\\\u2CDB\\\\u2CDD\\\\u2CDF\\\\u2CE1\\\\u2CE3\\\\u2CE4\\\\u2CEC\\\\u2CEE\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\uA641\\\\uA643\\\\uA645\\\\uA647\\\\uA649\\\\uA64B\\\\uA64D\\\\uA64F\\\\uA651\\\\uA653\\\\uA655\\\\uA657\\\\uA659\\\\uA65B\\\\uA65D\\\\uA65F\\\\uA661\\\\uA663\\\\uA665\\\\uA667\\\\uA669\\\\uA66B\\\\uA66D\\\\uA681\\\\uA683\\\\uA685\\\\uA687\\\\uA689\\\\uA68B\\\\uA68D\\\\uA68F\\\\uA691\\\\uA693\\\\uA695\\\\uA697\\\\uA699\\\\uA69B\\\\uA723\\\\uA725\\\\uA727\\\\uA729\\\\uA72B\\\\uA72D\\\\uA72F-\\\\uA731\\\\uA733\\\\uA735\\\\uA737\\\\uA739\\\\uA73B\\\\uA73D\\\\uA73F\\\\uA741\\\\uA743\\\\uA745\\\\uA747\\\\uA749\\\\uA74B\\\\uA74D\\\\uA74F\\\\uA751\\\\uA753\\\\uA755\\\\uA757\\\\uA759\\\\uA75B\\\\uA75D\\\\uA75F\\\\uA761\\\\uA763\\\\uA765\\\\uA767\\\\uA769\\\\uA76B\\\\uA76D\\\\uA76F\\\\uA771-\\\\uA778\\\\uA77A\\\\uA77C\\\\uA77F\\\\uA781\\\\uA783\\\\uA785\\\\uA787\\\\uA78C\\\\uA78E\\\\uA791\\\\uA793-\\\\uA795\\\\uA797\\\\uA799\\\\uA79B\\\\uA79D\\\\uA79F\\\\uA7A1\\\\uA7A3\\\\uA7A5\\\\uA7A7\\\\uA7A9\\\\uA7AF\\\\uA7B5\\\\uA7B7\\\\uA7B9\\\\uA7BB\\\\uA7BD\\\\uA7BF\\\\uA7C3\\\\uA7C8\\\\uA7CA\\\\uA7F6\\\\uA7FA\\\\uAB30-\\\\uAB5A\\\\uAB60-\\\\uAB68\\\\uAB70-\\\\uABBF\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFF41-\\\\uFF5A\",\n    Lm: \"\\\\u02B0-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0374\\\\u037A\\\\u0559\\\\u0640\\\\u06E5\\\\u06E6\\\\u07F4\\\\u07F5\\\\u07FA\\\\u081A\\\\u0824\\\\u0828\\\\u0971\\\\u0E46\\\\u0EC6\\\\u10FC\\\\u17D7\\\\u1843\\\\u1AA7\\\\u1C78-\\\\u1C7D\\\\u1D2C-\\\\u1D6A\\\\u1D78\\\\u1D9B-\\\\u1DBF\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2C7C\\\\u2C7D\\\\u2D6F\\\\u2E2F\\\\u3005\\\\u3031-\\\\u3035\\\\u303B\\\\u309D\\\\u309E\\\\u30FC-\\\\u30FE\\\\uA015\\\\uA4F8-\\\\uA4FD\\\\uA60C\\\\uA67F\\\\uA69C\\\\uA69D\\\\uA717-\\\\uA71F\\\\uA770\\\\uA788\\\\uA7F8\\\\uA7F9\\\\uA9CF\\\\uA9E6\\\\uAA70\\\\uAADD\\\\uAAF3\\\\uAAF4\\\\uAB5C-\\\\uAB5F\\\\uAB69\\\\uFF70\\\\uFF9E\\\\uFF9F\",\n    Lo: \"\\\\xAA\\\\xBA\\\\u01BB\\\\u01C0-\\\\u01C3\\\\u0294\\\\u05D0-\\\\u05EA\\\\u05EF-\\\\u05F2\\\\u0620-\\\\u063F\\\\u0641-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u0800-\\\\u0815\\\\u0840-\\\\u0858\\\\u0860-\\\\u086A\\\\u08A0-\\\\u08B4\\\\u08B6-\\\\u08C7\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0972-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u09FC\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0AF9\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58-\\\\u0C5A\\\\u0C60\\\\u0C61\\\\u0C80\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D04-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D54-\\\\u0D56\\\\u0D5F-\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E45\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E86-\\\\u0E8A\\\\u0E8C-\\\\u0EA3\\\\u0EA5\\\\u0EA7-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u1100-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16F1-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17DC\\\\u1820-\\\\u1842\\\\u1844-\\\\u1878\\\\u1880-\\\\u1884\\\\u1887-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C77\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF3\\\\u1CF5\\\\u1CF6\\\\u1CFA\\\\u2135-\\\\u2138\\\\u2D30-\\\\u2D67\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u3006\\\\u303C\\\\u3041-\\\\u3096\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FF\\\\u3105-\\\\u312F\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BF\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DBF\\\\u4E00-\\\\u9FFC\\\\uA000-\\\\uA014\\\\uA016-\\\\uA48C\\\\uA4D0-\\\\uA4F7\\\\uA500-\\\\uA60B\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA66E\\\\uA6A0-\\\\uA6E5\\\\uA78F\\\\uA7F7\\\\uA7FB-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA8FE\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9E0-\\\\uA9E4\\\\uA9E7-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA6F\\\\uAA71-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB\\\\uAADC\\\\uAAE0-\\\\uAAEA\\\\uAAF2\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF66-\\\\uFF6F\\\\uFF71-\\\\uFF9D\\\\uFFA0-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC\",\n    Lt: \"\\\\u01C5\\\\u01C8\\\\u01CB\\\\u01F2\\\\u1F88-\\\\u1F8F\\\\u1F98-\\\\u1F9F\\\\u1FA8-\\\\u1FAF\\\\u1FBC\\\\u1FCC\\\\u1FFC\",\n    Lu: \"A-Z\\\\xC0-\\\\xD6\\\\xD8-\\\\xDE\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010A\\\\u010C\\\\u010E\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011A\\\\u011C\\\\u011E\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012A\\\\u012C\\\\u012E\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013B\\\\u013D\\\\u013F\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014A\\\\u014C\\\\u014E\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015A\\\\u015C\\\\u015E\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016A\\\\u016C\\\\u016E\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017B\\\\u017D\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018B\\\\u018E-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019C\\\\u019D\\\\u019F\\\\u01A0\\\\u01A2\\\\u01A4\\\\u01A6\\\\u01A7\\\\u01A9\\\\u01AC\\\\u01AE\\\\u01AF\\\\u01B1-\\\\u01B3\\\\u01B5\\\\u01B7\\\\u01B8\\\\u01BC\\\\u01C4\\\\u01C7\\\\u01CA\\\\u01CD\\\\u01CF\\\\u01D1\\\\u01D3\\\\u01D5\\\\u01D7\\\\u01D9\\\\u01DB\\\\u01DE\\\\u01E0\\\\u01E2\\\\u01E4\\\\u01E6\\\\u01E8\\\\u01EA\\\\u01EC\\\\u01EE\\\\u01F1\\\\u01F4\\\\u01F6-\\\\u01F8\\\\u01FA\\\\u01FC\\\\u01FE\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020A\\\\u020C\\\\u020E\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021A\\\\u021C\\\\u021E\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022A\\\\u022C\\\\u022E\\\\u0230\\\\u0232\\\\u023A\\\\u023B\\\\u023D\\\\u023E\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024A\\\\u024C\\\\u024E\\\\u0370\\\\u0372\\\\u0376\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E\\\\u038F\\\\u0391-\\\\u03A1\\\\u03A3-\\\\u03AB\\\\u03CF\\\\u03D2-\\\\u03D4\\\\u03D8\\\\u03DA\\\\u03DC\\\\u03DE\\\\u03E0\\\\u03E2\\\\u03E4\\\\u03E6\\\\u03E8\\\\u03EA\\\\u03EC\\\\u03EE\\\\u03F4\\\\u03F7\\\\u03F9\\\\u03FA\\\\u03FD-\\\\u042F\\\\u0460\\\\u0462\\\\u0464\\\\u0466\\\\u0468\\\\u046A\\\\u046C\\\\u046E\\\\u0470\\\\u0472\\\\u0474\\\\u0476\\\\u0478\\\\u047A\\\\u047C\\\\u047E\\\\u0480\\\\u048A\\\\u048C\\\\u048E\\\\u0490\\\\u0492\\\\u0494\\\\u0496\\\\u0498\\\\u049A\\\\u049C\\\\u049E\\\\u04A0\\\\u04A2\\\\u04A4\\\\u04A6\\\\u04A8\\\\u04AA\\\\u04AC\\\\u04AE\\\\u04B0\\\\u04B2\\\\u04B4\\\\u04B6\\\\u04B8\\\\u04BA\\\\u04BC\\\\u04BE\\\\u04C0\\\\u04C1\\\\u04C3\\\\u04C5\\\\u04C7\\\\u04C9\\\\u04CB\\\\u04CD\\\\u04D0\\\\u04D2\\\\u04D4\\\\u04D6\\\\u04D8\\\\u04DA\\\\u04DC\\\\u04DE\\\\u04E0\\\\u04E2\\\\u04E4\\\\u04E6\\\\u04E8\\\\u04EA\\\\u04EC\\\\u04EE\\\\u04F0\\\\u04F2\\\\u04F4\\\\u04F6\\\\u04F8\\\\u04FA\\\\u04FC\\\\u04FE\\\\u0500\\\\u0502\\\\u0504\\\\u0506\\\\u0508\\\\u050A\\\\u050C\\\\u050E\\\\u0510\\\\u0512\\\\u0514\\\\u0516\\\\u0518\\\\u051A\\\\u051C\\\\u051E\\\\u0520\\\\u0522\\\\u0524\\\\u0526\\\\u0528\\\\u052A\\\\u052C\\\\u052E\\\\u0531-\\\\u0556\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u13A0-\\\\u13F5\\\\u1C90-\\\\u1CBA\\\\u1CBD-\\\\u1CBF\\\\u1E00\\\\u1E02\\\\u1E04\\\\u1E06\\\\u1E08\\\\u1E0A\\\\u1E0C\\\\u1E0E\\\\u1E10\\\\u1E12\\\\u1E14\\\\u1E16\\\\u1E18\\\\u1E1A\\\\u1E1C\\\\u1E1E\\\\u1E20\\\\u1E22\\\\u1E24\\\\u1E26\\\\u1E28\\\\u1E2A\\\\u1E2C\\\\u1E2E\\\\u1E30\\\\u1E32\\\\u1E34\\\\u1E36\\\\u1E38\\\\u1E3A\\\\u1E3C\\\\u1E3E\\\\u1E40\\\\u1E42\\\\u1E44\\\\u1E46\\\\u1E48\\\\u1E4A\\\\u1E4C\\\\u1E4E\\\\u1E50\\\\u1E52\\\\u1E54\\\\u1E56\\\\u1E58\\\\u1E5A\\\\u1E5C\\\\u1E5E\\\\u1E60\\\\u1E62\\\\u1E64\\\\u1E66\\\\u1E68\\\\u1E6A\\\\u1E6C\\\\u1E6E\\\\u1E70\\\\u1E72\\\\u1E74\\\\u1E76\\\\u1E78\\\\u1E7A\\\\u1E7C\\\\u1E7E\\\\u1E80\\\\u1E82\\\\u1E84\\\\u1E86\\\\u1E88\\\\u1E8A\\\\u1E8C\\\\u1E8E\\\\u1E90\\\\u1E92\\\\u1E94\\\\u1E9E\\\\u1EA0\\\\u1EA2\\\\u1EA4\\\\u1EA6\\\\u1EA8\\\\u1EAA\\\\u1EAC\\\\u1EAE\\\\u1EB0\\\\u1EB2\\\\u1EB4\\\\u1EB6\\\\u1EB8\\\\u1EBA\\\\u1EBC\\\\u1EBE\\\\u1EC0\\\\u1EC2\\\\u1EC4\\\\u1EC6\\\\u1EC8\\\\u1ECA\\\\u1ECC\\\\u1ECE\\\\u1ED0\\\\u1ED2\\\\u1ED4\\\\u1ED6\\\\u1ED8\\\\u1EDA\\\\u1EDC\\\\u1EDE\\\\u1EE0\\\\u1EE2\\\\u1EE4\\\\u1EE6\\\\u1EE8\\\\u1EEA\\\\u1EEC\\\\u1EEE\\\\u1EF0\\\\u1EF2\\\\u1EF4\\\\u1EF6\\\\u1EF8\\\\u1EFA\\\\u1EFC\\\\u1EFE\\\\u1F08-\\\\u1F0F\\\\u1F18-\\\\u1F1D\\\\u1F28-\\\\u1F2F\\\\u1F38-\\\\u1F3F\\\\u1F48-\\\\u1F4D\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F\\\\u1F68-\\\\u1F6F\\\\u1FB8-\\\\u1FBB\\\\u1FC8-\\\\u1FCB\\\\u1FD8-\\\\u1FDB\\\\u1FE8-\\\\u1FEC\\\\u1FF8-\\\\u1FFB\\\\u2102\\\\u2107\\\\u210B-\\\\u210D\\\\u2110-\\\\u2112\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u2130-\\\\u2133\\\\u213E\\\\u213F\\\\u2145\\\\u2183\\\\u2C00-\\\\u2C2E\\\\u2C60\\\\u2C62-\\\\u2C64\\\\u2C67\\\\u2C69\\\\u2C6B\\\\u2C6D-\\\\u2C70\\\\u2C72\\\\u2C75\\\\u2C7E-\\\\u2C80\\\\u2C82\\\\u2C84\\\\u2C86\\\\u2C88\\\\u2C8A\\\\u2C8C\\\\u2C8E\\\\u2C90\\\\u2C92\\\\u2C94\\\\u2C96\\\\u2C98\\\\u2C9A\\\\u2C9C\\\\u2C9E\\\\u2CA0\\\\u2CA2\\\\u2CA4\\\\u2CA6\\\\u2CA8\\\\u2CAA\\\\u2CAC\\\\u2CAE\\\\u2CB0\\\\u2CB2\\\\u2CB4\\\\u2CB6\\\\u2CB8\\\\u2CBA\\\\u2CBC\\\\u2CBE\\\\u2CC0\\\\u2CC2\\\\u2CC4\\\\u2CC6\\\\u2CC8\\\\u2CCA\\\\u2CCC\\\\u2CCE\\\\u2CD0\\\\u2CD2\\\\u2CD4\\\\u2CD6\\\\u2CD8\\\\u2CDA\\\\u2CDC\\\\u2CDE\\\\u2CE0\\\\u2CE2\\\\u2CEB\\\\u2CED\\\\u2CF2\\\\uA640\\\\uA642\\\\uA644\\\\uA646\\\\uA648\\\\uA64A\\\\uA64C\\\\uA64E\\\\uA650\\\\uA652\\\\uA654\\\\uA656\\\\uA658\\\\uA65A\\\\uA65C\\\\uA65E\\\\uA660\\\\uA662\\\\uA664\\\\uA666\\\\uA668\\\\uA66A\\\\uA66C\\\\uA680\\\\uA682\\\\uA684\\\\uA686\\\\uA688\\\\uA68A\\\\uA68C\\\\uA68E\\\\uA690\\\\uA692\\\\uA694\\\\uA696\\\\uA698\\\\uA69A\\\\uA722\\\\uA724\\\\uA726\\\\uA728\\\\uA72A\\\\uA72C\\\\uA72E\\\\uA732\\\\uA734\\\\uA736\\\\uA738\\\\uA73A\\\\uA73C\\\\uA73E\\\\uA740\\\\uA742\\\\uA744\\\\uA746\\\\uA748\\\\uA74A\\\\uA74C\\\\uA74E\\\\uA750\\\\uA752\\\\uA754\\\\uA756\\\\uA758\\\\uA75A\\\\uA75C\\\\uA75E\\\\uA760\\\\uA762\\\\uA764\\\\uA766\\\\uA768\\\\uA76A\\\\uA76C\\\\uA76E\\\\uA779\\\\uA77B\\\\uA77D\\\\uA77E\\\\uA780\\\\uA782\\\\uA784\\\\uA786\\\\uA78B\\\\uA78D\\\\uA790\\\\uA792\\\\uA796\\\\uA798\\\\uA79A\\\\uA79C\\\\uA79E\\\\uA7A0\\\\uA7A2\\\\uA7A4\\\\uA7A6\\\\uA7A8\\\\uA7AA-\\\\uA7AE\\\\uA7B0-\\\\uA7B4\\\\uA7B6\\\\uA7B8\\\\uA7BA\\\\uA7BC\\\\uA7BE\\\\uA7C2\\\\uA7C4-\\\\uA7C7\\\\uA7C9\\\\uA7F5\\\\uFF21-\\\\uFF3A\",\n    M: \"\\\\u0300-\\\\u036F\\\\u0483-\\\\u0489\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065F\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u07FD\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u08D3-\\\\u08E1\\\\u08E3-\\\\u0903\\\\u093A-\\\\u093C\\\\u093E-\\\\u094F\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0981-\\\\u0983\\\\u09BC\\\\u09BE-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CD\\\\u09D7\\\\u09E2\\\\u09E3\\\\u09FE\\\\u0A01-\\\\u0A03\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0ABC\\\\u0ABE-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0AFA-\\\\u0AFF\\\\u0B01-\\\\u0B03\\\\u0B3C\\\\u0B3E-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B55-\\\\u0B57\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD7\\\\u0C00-\\\\u0C04\\\\u0C3E-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0C81-\\\\u0C83\\\\u0CBC\\\\u0CBE-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CE2\\\\u0CE3\\\\u0D00-\\\\u0D03\\\\u0D3B\\\\u0D3C\\\\u0D3E-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4D\\\\u0D57\\\\u0D62\\\\u0D63\\\\u0D81-\\\\u0D83\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E\\\\u0F3F\\\\u0F71-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102B-\\\\u103E\\\\u1056-\\\\u1059\\\\u105E-\\\\u1060\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1071-\\\\u1074\\\\u1082-\\\\u108D\\\\u108F\\\\u109A-\\\\u109D\\\\u135D-\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B4-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u1885\\\\u1886\\\\u18A9\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1A17-\\\\u1A1B\\\\u1A55-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F\\\\u1AB0-\\\\u1AC0\\\\u1B00-\\\\u1B04\\\\u1B34-\\\\u1B44\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1B82\\\\u1BA1-\\\\u1BAD\\\\u1BE6-\\\\u1BF3\\\\u1C24-\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE8\\\\u1CED\\\\u1CF4\\\\u1CF7-\\\\u1CF9\\\\u1DC0-\\\\u1DF9\\\\u1DFB-\\\\u1DFF\\\\u20D0-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F-\\\\uA672\\\\uA674-\\\\uA67D\\\\uA69E\\\\uA69F\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA823-\\\\uA827\\\\uA82C\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C5\\\\uA8E0-\\\\uA8F1\\\\uA8FF\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA953\\\\uA980-\\\\uA983\\\\uA9B3-\\\\uA9C0\\\\uA9E5\\\\uAA29-\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAA4D\\\\uAA7B-\\\\uAA7D\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uAAEB-\\\\uAAEF\\\\uAAF5\\\\uAAF6\\\\uABE3-\\\\uABEA\\\\uABEC\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2F\",\n    Mc: \"\\\\u0903\\\\u093B\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u094F\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u1A19\\\\u1A1A\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1BE7\\\\u1BEA-\\\\u1BEC\\\\u1BEE\\\\u1BF2\\\\u1BF3\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF7\\\\u302E\\\\u302F\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BE-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uAA7D\\\\uAAEB\\\\uAAEE\\\\uAAEF\\\\uAAF5\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC\",\n    Me: \"\\\\u0488\\\\u0489\\\\u1ABE\\\\u20DD-\\\\u20E0\\\\u20E2-\\\\u20E4\\\\uA670-\\\\uA672\",\n    Mn: \"\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065F\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u07FD\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u08D3-\\\\u08E1\\\\u08E3-\\\\u0902\\\\u093A\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u09FE\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0AFA-\\\\u0AFF\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B55\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C00\\\\u0C04\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0C81\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D00\\\\u0D01\\\\u0D3B\\\\u0D3C\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0D81\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135D-\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B4\\\\u17B5\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u1885\\\\u1886\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A1B\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1AB0-\\\\u1ABD\\\\u1ABF\\\\u1AC0\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1BAB-\\\\u1BAD\\\\u1BE6\\\\u1BE8\\\\u1BE9\\\\u1BED\\\\u1BEF-\\\\u1BF1\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1CF4\\\\u1CF8\\\\u1CF9\\\\u1DC0-\\\\u1DF9\\\\u1DFB-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302D\\\\u3099\\\\u309A\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA69E\\\\uA69F\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA82C\\\\uA8C4\\\\uA8C5\\\\uA8E0-\\\\uA8F1\\\\uA8FF\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uA9BD\\\\uA9E5\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAA7C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uAAEC\\\\uAAED\\\\uAAF6\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2F\",\n    Nd: \"0-9\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0DE6-\\\\u0DEF\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uA9F0-\\\\uA9F9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19\",\n    Nl: \"\\\\u16EE-\\\\u16F0\\\\u2160-\\\\u2182\\\\u2185-\\\\u2188\\\\u3007\\\\u3021-\\\\u3029\\\\u3038-\\\\u303A\\\\uA6E6-\\\\uA6EF\",\n    No: \"\\\\xB2\\\\xB3\\\\xB9\\\\xBC-\\\\xBE\\\\u09F4-\\\\u09F9\\\\u0B72-\\\\u0B77\\\\u0BF0-\\\\u0BF2\\\\u0C78-\\\\u0C7E\\\\u0D58-\\\\u0D5E\\\\u0D70-\\\\u0D78\\\\u0F2A-\\\\u0F33\\\\u1369-\\\\u137C\\\\u17F0-\\\\u17F9\\\\u19DA\\\\u2070\\\\u2074-\\\\u2079\\\\u2080-\\\\u2089\\\\u2150-\\\\u215F\\\\u2189\\\\u2460-\\\\u249B\\\\u24EA-\\\\u24FF\\\\u2776-\\\\u2793\\\\u2CFD\\\\u3192-\\\\u3195\\\\u3220-\\\\u3229\\\\u3248-\\\\u324F\\\\u3251-\\\\u325F\\\\u3280-\\\\u3289\\\\u32B1-\\\\u32BF\\\\uA830-\\\\uA835\",\n    Pc: \"_\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F\",\n    Pd: \"\\\\-\\\\u058A\\\\u05BE\\\\u1400\\\\u1806\\\\u2010-\\\\u2015\\\\u2E17\\\\u2E1A\\\\u2E3A\\\\u2E3B\\\\u2E40\\\\u301C\\\\u3030\\\\u30A0\\\\uFE31\\\\uFE32\\\\uFE58\\\\uFE63\\\\uFF0D\",\n    Pe: \"\\\\)\\\\]\\\\}\\\\u0F3B\\\\u0F3D\\\\u169C\\\\u2046\\\\u207E\\\\u208E\\\\u2309\\\\u230B\\\\u232A\\\\u2769\\\\u276B\\\\u276D\\\\u276F\\\\u2771\\\\u2773\\\\u2775\\\\u27C6\\\\u27E7\\\\u27E9\\\\u27EB\\\\u27ED\\\\u27EF\\\\u2984\\\\u2986\\\\u2988\\\\u298A\\\\u298C\\\\u298E\\\\u2990\\\\u2992\\\\u2994\\\\u2996\\\\u2998\\\\u29D9\\\\u29DB\\\\u29FD\\\\u2E23\\\\u2E25\\\\u2E27\\\\u2E29\\\\u3009\\\\u300B\\\\u300D\\\\u300F\\\\u3011\\\\u3015\\\\u3017\\\\u3019\\\\u301B\\\\u301E\\\\u301F\\\\uFD3E\\\\uFE18\\\\uFE36\\\\uFE38\\\\uFE3A\\\\uFE3C\\\\uFE3E\\\\uFE40\\\\uFE42\\\\uFE44\\\\uFE48\\\\uFE5A\\\\uFE5C\\\\uFE5E\\\\uFF09\\\\uFF3D\\\\uFF5D\\\\uFF60\\\\uFF63\",\n    Pf: \"\\\\xBB\\\\u2019\\\\u201D\\\\u203A\\\\u2E03\\\\u2E05\\\\u2E0A\\\\u2E0D\\\\u2E1D\\\\u2E21\",\n    Pi: \"\\\\xAB\\\\u2018\\\\u201B\\\\u201C\\\\u201F\\\\u2039\\\\u2E02\\\\u2E04\\\\u2E09\\\\u2E0C\\\\u2E1C\\\\u2E20\",\n    Po: \"!-#%-'\\\\*,\\\\.\\\\/:;\\\\?@\\\\xA1\\\\xA7\\\\xB6\\\\xB7\\\\xBF\\\\u037E\\\\u0387\\\\u055A-\\\\u055F\\\\u0589\\\\u05C0\\\\u05C3\\\\u05C6\\\\u05F3\\\\u05F4\\\\u0609\\\\u060A\\\\u060C\\\\u060D\\\\u061B\\\\u061E\\\\u061F\\\\u066A-\\\\u066D\\\\u06D4\\\\u0700-\\\\u070D\\\\u07F7-\\\\u07F9\\\\u0830-\\\\u083E\\\\u085E\\\\u0964\\\\u0965\\\\u0970\\\\u09FD\\\\u0A76\\\\u0AF0\\\\u0C77\\\\u0C84\\\\u0DF4\\\\u0E4F\\\\u0E5A\\\\u0E5B\\\\u0F04-\\\\u0F12\\\\u0F14\\\\u0F85\\\\u0FD0-\\\\u0FD4\\\\u0FD9\\\\u0FDA\\\\u104A-\\\\u104F\\\\u10FB\\\\u1360-\\\\u1368\\\\u166E\\\\u16EB-\\\\u16ED\\\\u1735\\\\u1736\\\\u17D4-\\\\u17D6\\\\u17D8-\\\\u17DA\\\\u1800-\\\\u1805\\\\u1807-\\\\u180A\\\\u1944\\\\u1945\\\\u1A1E\\\\u1A1F\\\\u1AA0-\\\\u1AA6\\\\u1AA8-\\\\u1AAD\\\\u1B5A-\\\\u1B60\\\\u1BFC-\\\\u1BFF\\\\u1C3B-\\\\u1C3F\\\\u1C7E\\\\u1C7F\\\\u1CC0-\\\\u1CC7\\\\u1CD3\\\\u2016\\\\u2017\\\\u2020-\\\\u2027\\\\u2030-\\\\u2038\\\\u203B-\\\\u203E\\\\u2041-\\\\u2043\\\\u2047-\\\\u2051\\\\u2053\\\\u2055-\\\\u205E\\\\u2CF9-\\\\u2CFC\\\\u2CFE\\\\u2CFF\\\\u2D70\\\\u2E00\\\\u2E01\\\\u2E06-\\\\u2E08\\\\u2E0B\\\\u2E0E-\\\\u2E16\\\\u2E18\\\\u2E19\\\\u2E1B\\\\u2E1E\\\\u2E1F\\\\u2E2A-\\\\u2E2E\\\\u2E30-\\\\u2E39\\\\u2E3C-\\\\u2E3F\\\\u2E41\\\\u2E43-\\\\u2E4F\\\\u2E52\\\\u3001-\\\\u3003\\\\u303D\\\\u30FB\\\\uA4FE\\\\uA4FF\\\\uA60D-\\\\uA60F\\\\uA673\\\\uA67E\\\\uA6F2-\\\\uA6F7\\\\uA874-\\\\uA877\\\\uA8CE\\\\uA8CF\\\\uA8F8-\\\\uA8FA\\\\uA8FC\\\\uA92E\\\\uA92F\\\\uA95F\\\\uA9C1-\\\\uA9CD\\\\uA9DE\\\\uA9DF\\\\uAA5C-\\\\uAA5F\\\\uAADE\\\\uAADF\\\\uAAF0\\\\uAAF1\\\\uABEB\\\\uFE10-\\\\uFE16\\\\uFE19\\\\uFE30\\\\uFE45\\\\uFE46\\\\uFE49-\\\\uFE4C\\\\uFE50-\\\\uFE52\\\\uFE54-\\\\uFE57\\\\uFE5F-\\\\uFE61\\\\uFE68\\\\uFE6A\\\\uFE6B\\\\uFF01-\\\\uFF03\\\\uFF05-\\\\uFF07\\\\uFF0A\\\\uFF0C\\\\uFF0E\\\\uFF0F\\\\uFF1A\\\\uFF1B\\\\uFF1F\\\\uFF20\\\\uFF3C\\\\uFF61\\\\uFF64\\\\uFF65\",\n    Ps: \"\\\\(\\\\[\\\\{\\\\u0F3A\\\\u0F3C\\\\u169B\\\\u201A\\\\u201E\\\\u2045\\\\u207D\\\\u208D\\\\u2308\\\\u230A\\\\u2329\\\\u2768\\\\u276A\\\\u276C\\\\u276E\\\\u2770\\\\u2772\\\\u2774\\\\u27C5\\\\u27E6\\\\u27E8\\\\u27EA\\\\u27EC\\\\u27EE\\\\u2983\\\\u2985\\\\u2987\\\\u2989\\\\u298B\\\\u298D\\\\u298F\\\\u2991\\\\u2993\\\\u2995\\\\u2997\\\\u29D8\\\\u29DA\\\\u29FC\\\\u2E22\\\\u2E24\\\\u2E26\\\\u2E28\\\\u2E42\\\\u3008\\\\u300A\\\\u300C\\\\u300E\\\\u3010\\\\u3014\\\\u3016\\\\u3018\\\\u301A\\\\u301D\\\\uFD3F\\\\uFE17\\\\uFE35\\\\uFE37\\\\uFE39\\\\uFE3B\\\\uFE3D\\\\uFE3F\\\\uFE41\\\\uFE43\\\\uFE47\\\\uFE59\\\\uFE5B\\\\uFE5D\\\\uFF08\\\\uFF3B\\\\uFF5B\\\\uFF5F\\\\uFF62\",\n    Sc: \"\\\\$\\\\xA2-\\\\xA5\\\\u058F\\\\u060B\\\\u07FE\\\\u07FF\\\\u09F2\\\\u09F3\\\\u09FB\\\\u0AF1\\\\u0BF9\\\\u0E3F\\\\u17DB\\\\u20A0-\\\\u20BF\\\\uA838\\\\uFDFC\\\\uFE69\\\\uFF04\\\\uFFE0\\\\uFFE1\\\\uFFE5\\\\uFFE6\",\n    Sk: \"\\\\^`\\\\xA8\\\\xAF\\\\xB4\\\\xB8\\\\u02C2-\\\\u02C5\\\\u02D2-\\\\u02DF\\\\u02E5-\\\\u02EB\\\\u02ED\\\\u02EF-\\\\u02FF\\\\u0375\\\\u0384\\\\u0385\\\\u1FBD\\\\u1FBF-\\\\u1FC1\\\\u1FCD-\\\\u1FCF\\\\u1FDD-\\\\u1FDF\\\\u1FED-\\\\u1FEF\\\\u1FFD\\\\u1FFE\\\\u309B\\\\u309C\\\\uA700-\\\\uA716\\\\uA720\\\\uA721\\\\uA789\\\\uA78A\\\\uAB5B\\\\uAB6A\\\\uAB6B\\\\uFBB2-\\\\uFBC1\\\\uFF3E\\\\uFF40\\\\uFFE3\",\n    Sm: \"\\\\+<->\\\\|~\\\\xAC\\\\xB1\\\\xD7\\\\xF7\\\\u03F6\\\\u0606-\\\\u0608\\\\u2044\\\\u2052\\\\u207A-\\\\u207C\\\\u208A-\\\\u208C\\\\u2118\\\\u2140-\\\\u2144\\\\u214B\\\\u2190-\\\\u2194\\\\u219A\\\\u219B\\\\u21A0\\\\u21A3\\\\u21A6\\\\u21AE\\\\u21CE\\\\u21CF\\\\u21D2\\\\u21D4\\\\u21F4-\\\\u22FF\\\\u2320\\\\u2321\\\\u237C\\\\u239B-\\\\u23B3\\\\u23DC-\\\\u23E1\\\\u25B7\\\\u25C1\\\\u25F8-\\\\u25FF\\\\u266F\\\\u27C0-\\\\u27C4\\\\u27C7-\\\\u27E5\\\\u27F0-\\\\u27FF\\\\u2900-\\\\u2982\\\\u2999-\\\\u29D7\\\\u29DC-\\\\u29FB\\\\u29FE-\\\\u2AFF\\\\u2B30-\\\\u2B44\\\\u2B47-\\\\u2B4C\\\\uFB29\\\\uFE62\\\\uFE64-\\\\uFE66\\\\uFF0B\\\\uFF1C-\\\\uFF1E\\\\uFF5C\\\\uFF5E\\\\uFFE2\\\\uFFE9-\\\\uFFEC\",\n    So: \"\\\\xA6\\\\xA9\\\\xAE\\\\xB0\\\\u0482\\\\u058D\\\\u058E\\\\u060E\\\\u060F\\\\u06DE\\\\u06E9\\\\u06FD\\\\u06FE\\\\u07F6\\\\u09FA\\\\u0B70\\\\u0BF3-\\\\u0BF8\\\\u0BFA\\\\u0C7F\\\\u0D4F\\\\u0D79\\\\u0F01-\\\\u0F03\\\\u0F13\\\\u0F15-\\\\u0F17\\\\u0F1A-\\\\u0F1F\\\\u0F34\\\\u0F36\\\\u0F38\\\\u0FBE-\\\\u0FC5\\\\u0FC7-\\\\u0FCC\\\\u0FCE\\\\u0FCF\\\\u0FD5-\\\\u0FD8\\\\u109E\\\\u109F\\\\u1390-\\\\u1399\\\\u166D\\\\u1940\\\\u19DE-\\\\u19FF\\\\u1B61-\\\\u1B6A\\\\u1B74-\\\\u1B7C\\\\u2100\\\\u2101\\\\u2103-\\\\u2106\\\\u2108\\\\u2109\\\\u2114\\\\u2116\\\\u2117\\\\u211E-\\\\u2123\\\\u2125\\\\u2127\\\\u2129\\\\u212E\\\\u213A\\\\u213B\\\\u214A\\\\u214C\\\\u214D\\\\u214F\\\\u218A\\\\u218B\\\\u2195-\\\\u2199\\\\u219C-\\\\u219F\\\\u21A1\\\\u21A2\\\\u21A4\\\\u21A5\\\\u21A7-\\\\u21AD\\\\u21AF-\\\\u21CD\\\\u21D0\\\\u21D1\\\\u21D3\\\\u21D5-\\\\u21F3\\\\u2300-\\\\u2307\\\\u230C-\\\\u231F\\\\u2322-\\\\u2328\\\\u232B-\\\\u237B\\\\u237D-\\\\u239A\\\\u23B4-\\\\u23DB\\\\u23E2-\\\\u2426\\\\u2440-\\\\u244A\\\\u249C-\\\\u24E9\\\\u2500-\\\\u25B6\\\\u25B8-\\\\u25C0\\\\u25C2-\\\\u25F7\\\\u2600-\\\\u266E\\\\u2670-\\\\u2767\\\\u2794-\\\\u27BF\\\\u2800-\\\\u28FF\\\\u2B00-\\\\u2B2F\\\\u2B45\\\\u2B46\\\\u2B4D-\\\\u2B73\\\\u2B76-\\\\u2B95\\\\u2B97-\\\\u2BFF\\\\u2CE5-\\\\u2CEA\\\\u2E50\\\\u2E51\\\\u2E80-\\\\u2E99\\\\u2E9B-\\\\u2EF3\\\\u2F00-\\\\u2FD5\\\\u2FF0-\\\\u2FFB\\\\u3004\\\\u3012\\\\u3013\\\\u3020\\\\u3036\\\\u3037\\\\u303E\\\\u303F\\\\u3190\\\\u3191\\\\u3196-\\\\u319F\\\\u31C0-\\\\u31E3\\\\u3200-\\\\u321E\\\\u322A-\\\\u3247\\\\u3250\\\\u3260-\\\\u327F\\\\u328A-\\\\u32B0\\\\u32C0-\\\\u33FF\\\\u4DC0-\\\\u4DFF\\\\uA490-\\\\uA4C6\\\\uA828-\\\\uA82B\\\\uA836\\\\uA837\\\\uA839\\\\uAA77-\\\\uAA79\\\\uFDFD\\\\uFFE4\\\\uFFE8\\\\uFFED\\\\uFFEE\\\\uFFFC\\\\uFFFD\",\n    Zl: \"\\\\u2028\",\n    Zp: \"\\\\u2029\",\n    Zs: \" \\\\xA0\\\\u1680\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000\",\n};\n\nUnicode.C = Unicode.Cc + Unicode.Cf + Unicode.Cs + Unicode.Co;\n//+ Unicode.Cn ; //This is not defined.\n\nUnicode.L =\n    Unicode.Lu +\n    Unicode.Ll +\n    Unicode.Lt +\n    Unicode.Lm +\n    Unicode.Mn + //Added 2014-05-29 due to some letters in names not being recognized.\n    //This is where accent marks are individually combined instead of using an explicit character.\n    Unicode.Lo;\n\nUnicode.LC = Unicode.Lu + Unicode.Ll + Unicode.Lt;\n\nUnicode.M = Unicode.Mn + Unicode.Mc + Unicode.Me;\n\nUnicode.N = Unicode.Nd + Unicode.Nl + Unicode.No;\n\nUnicode.P =\n    Unicode.Pc + Unicode.Pd + Unicode.Ps + Unicode.Pe + Unicode.Pi + Unicode.Pf + Unicode.Po;\n\nUnicode.S = Unicode.Sm + Unicode.Sc + Unicode.Sk + Unicode.So;\n\nUnicode.Z = Unicode.Zs + Unicode.Zl + Unicode.Zp;\n\n//Not in Unicode spec:\nUnicode.w = \"_\" + Unicode.L + Unicode.N;\n\n//A Unicode based word boundry built with non-capturing parentheses\nUnicode.b =\n    \"(?:[\" +\n    Unicode.w +\n    \"](?:[^\" +\n    Unicode.w +\n    \"]|$)\" +\n    \"|(?:^|[^\" +\n    Unicode.w +\n    \"])[\" +\n    Unicode.w +\n    \"]\" +\n    \")\";\n\n//A Unicode based word boundry build with non-capturing parentheses\nUnicode.bOut = \"(?=[^\" + Unicode.w + \"]|$)\";\n\n//A Unicode based word boundry build with non-capturing parentheses\n//JavaScript does not have a non-consuming look-behind.\n//This makes a direct replacement for \\b not possible as we may consume\n// part of the string to make this test.\nUnicode.bIn = \"(?:^|[^\" + Unicode.w + \"])\";\n\n//A possible work-around is to use a capture and replace it.\nUnicode.bInCapture = \"(?:^|([^\" + Unicode.w + \"]))\";\n\n//A Unicode based non-word boundry build with non-capturing parentheses\nUnicode.B =\n    \"(?:[\" + Unicode.w + \"][\" + Unicode.w + \"]\" + \"|[^\" + Unicode.w + \"][^\" + Unicode.w + \"]\" + \")\";\n\nUnicode.d = Unicode.N;\n\nexport default Unicode;\n", "import Unicode from \"../support/polyfills/Unicode\";\n\nvar tokens = Sk.token.tokens;\n\nconst TokenError = Sk.builtin.SyntaxError;\nconst IndentationError = Sk.builtin.IndentationError;\n\n/**\n *\n * @constructor\n * @param {number} type\n * @param {string} string\n * @param {Array<number>} start\n * @param {Array<number>} end\n * @param {string} line\n */\nfunction TokenInfo(type, string, start, end, line) {\n    this.type = type;\n    this.string = string;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n}\n\nTokenInfo.prototype.exact_type = function () {\n    if (this.type == tokens.T_OP && this.string in Sk.token.EXACT_TOKEN_TYPES) {\n        return Sk.token.EXACT_TOKEN_TYPES[this.string];\n    } else {\n        return this.type;\n    }\n};\n\n/** @param {...*} x */\nfunction group(x) {\n    var args = Array.prototype.slice.call(arguments);\n    return \"(\" + args.join(\"|\") + \")\";\n}\n\n/** @param {...*} x */\nfunction any(x) {\n    return group.apply(null, arguments) + \"*\";\n}\n\n/** @param {...*} x */\nfunction maybe(x) {\n    return group.apply(null, arguments) + \"?\";\n}\n\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\nfunction regexEscape(string) {\n    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, \"\\\\$&\") : string;\n}\n\n/**\n * Iterable contains\n * @template T\n * @param {T} a\n * @param {T} obj\n */\nfunction contains(a, obj) {\n    var i = a.length;\n    while (i--) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction rstrip(input, what) {\n    var i;\n    for (i = input.length; i > 0; --i) {\n        if (what.indexOf(input.charAt(i - 1)) === -1) {\n            break;\n        }\n    }\n    return input.substring(0, i);\n}\n\nconst { Lu, Ll, Lt, Lm, Lo, Nl, Mn, Mc, Nd, Pc } = Unicode;\nconst the_underscore = \"_\";\nconst Other_ID_Start = \"\\\\u1885-\\\\u1886\\\\u2118\\\\u212E\\\\u309B-\\\\u309C\";\nconst Other_ID_Continue = \"\\\\u00B7\\\\u0387\\\\u1369-\\\\u1371\\\\u19DA\";\nconst id_start = Lu + Ll + Lt + Lm + Lo + Nl + the_underscore + Other_ID_Start;\nconst id_continue = id_start + Mn + Mc + Nd + Pc + Other_ID_Continue;\n\nconst IDENTIFIER = \"[\" + id_start + \"]+[\" + id_continue + \"]*\";\nconst IS_IDENTIFIER_REGEX = new RegExp(\"^\" + IDENTIFIER + \"$\");\n\n/**\n * test if string is an identifier\n *\n * @param {str} string\n * @returns {boolean}\n */\nfunction isidentifier(str) {\n    var normalized = str.normalize(\"NFKC\");\n    return IS_IDENTIFIER_REGEX.test(normalized);\n}\n\nSk.token.isIdentifier = isidentifier;\n\n/* we have to use string and ctor to be able to build patterns up. + on /.../\n * does something strange.\n * Note: we use unicode matching for names (\"\\w\") but ascii matching for\n * number literals.\n *\n * I don't know if the comment above is still actually correct */\nvar Whitespace = \"[ \\\\f\\\\t]*\";\nvar Comment_ = \"#[^\\\\r\\\\n]*\";\nvar Ignore = Whitespace + any(\"\\\\\\\\\\\\r?\\\\n\" + Whitespace) + maybe(Comment_);\nvar Name = IDENTIFIER; // this differs form tokenize.py (\\w+) which isn't valid for python identifiers\n\nvar Exponent = \"[eE][-+]?[0-9](?:_?[0-9])*\";\nvar Pointfloat =\n    group(\"[0-9](?:_?[0-9])*\\\\.(?:[0-9](?:_?[0-9])*)?\", \"\\\\.[0-9](?:_?[0-9])*\") + maybe(Exponent);\nvar Expfloat = \"[0-9](?:_?[0-9])*\" + Exponent;\nvar Floatnumber = group(Pointfloat, Expfloat);\nvar Imagnumber = group(\"[0-9](?:_?[0-9])*[jJ]\", Floatnumber + \"[jJ]\");\n\n// Return the empty string, plus all of the valid string prefixes.\nfunction _all_string_prefixes() {\n    return [\n        \"\",\n        \"FR\",\n        \"RF\",\n        \"Br\",\n        \"BR\",\n        \"Fr\",\n        \"r\",\n        \"B\",\n        \"R\",\n        \"b\",\n        \"bR\",\n        \"f\",\n        \"rb\",\n        \"rB\",\n        \"F\",\n        \"Rf\",\n        \"U\",\n        \"rF\",\n        \"u\",\n        \"RB\",\n        \"br\",\n        \"fR\",\n        \"fr\",\n        \"rf\",\n        \"Rb\",\n    ];\n}\n\n// Note that since _all_string_prefixes includes the empty string,\n//  StringPrefix can be the empty string (making it optional).\nvar StringPrefix = group.apply(null, _all_string_prefixes());\n\n// these regexes differ from python because .exec doesn't do the\n// same thing as .match in python. It's more like .search.\n// .match matches from the start of the string.\n// to get the same behaviour we can add a ^ to the start of the\n// regex\n// Tail end of ' string.\nvar Single = \"^[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'\";\n// Tail end of \" string.\nvar Double = '^[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\"';\n// Tail end of ''' string.\nvar Single3 = \"^[^'\\\\\\\\]*(?:(?:\\\\\\\\.|'(?!''))[^'\\\\\\\\]*)*'''\";\n// Tail end of \"\"\" string.\nvar Double3 = '^[^\"\\\\\\\\]*(?:(?:\\\\\\\\.|\"(?!\"\"))[^\"\\\\\\\\]*)*\"\"\"';\nvar Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"');\n// Single-line ' or \" string.\nvar String_ = group(\n    StringPrefix + \"'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*'\",\n    StringPrefix + '\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*\"'\n);\n\n// Sorting in reverse order puts the long operators before their prefixes.\n// Otherwise if = came before ==, == would get recognized as two instances\n// of =.\nvar EXACT_TOKENS_SORTED;\nvar Special;\nvar Funny;\n\nfunction setupTokens(py3) {\n    // recompute the above two lines\n    // <> should be included in py2 mode\n    if (py3) {\n        delete Sk.token.EXACT_TOKEN_TYPES[\"<>\"];\n    } else {\n        Sk.token.EXACT_TOKEN_TYPES[\"<>\"] = Sk.token.tokens.T_NOTEQUAL;\n    }\n    EXACT_TOKENS_SORTED = Object.keys(Sk.token.EXACT_TOKEN_TYPES).sort();\n    Special = group.apply(\n        this,\n        EXACT_TOKENS_SORTED.reverse().map(function (t) {\n            return regexEscape(t);\n        })\n    );\n    Funny = group(\"\\\\r?\\\\n\", Special);\n}\nsetupTokens(true);\n\nSk.token.setupTokens = setupTokens;\n\n// these aren't actually used\n// var PlainToken = group(Number_, Funny, String_, Name);\n// var Token = Ignore + PlainToken;\n\n// First (or only) line of ' or \" string.\nvar ContStr = group(\n    StringPrefix + \"'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*\" + group(\"'\", \"\\\\\\\\\\\\r?\\\\n\"),\n    StringPrefix + '\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*' + group('\"', \"\\\\\\\\\\\\r?\\\\n\")\n);\nvar PseudoExtras = group(\"\\\\\\\\\\\\r?\\\\n|$\", Comment_, Triple);\n\n// For a given string prefix plus quotes, endpats maps it to a regex\n//  to match the remainder of that string. _prefix can be empty, for\n//  a normal single or triple quoted string (with no prefix).\nvar endpats = {};\nvar prefixes = _all_string_prefixes();\nfor (let _prefix of prefixes) {\n    endpats[_prefix + \"'\"] = RegExp(Single);\n    endpats[_prefix + '\"'] = RegExp(Double);\n    endpats[_prefix + \"'''\"] = RegExp(Single3);\n    endpats[_prefix + '\"\"\"'] = RegExp(Double3);\n}\n\n// A set of all of the single and triple quoted string prefixes,\n//  including the opening quotes.\nlet single_quoted = [];\nlet triple_quoted = [];\nfor (let t of prefixes) {\n    single_quoted.push(t + '\"');\n    single_quoted.push(t + \"'\");\n    triple_quoted.push(t + '\"\"\"');\n    triple_quoted.push(t + \"'''\");\n}\n\nvar tabsize = 8;\n\nvar PseudoTokenRegex;\n\nfunction _setupTokenRegexes() {\n    // we make these regexes here because they can\n    // be changed by the configuration.\n    var LSuffix = !Sk.__future__.python3 ? \"(?:L?)\" : \"\";\n    var Hexnumber = \"0[xX](?:_?[0-9a-fA-F])+\" + LSuffix;\n    var Binnumber = \"0[bB](?:_?[01])+\" + LSuffix;\n    var Octnumber = \"0([oO])(?:_?[0-7])+\" + LSuffix;\n    var SilentOctnumber = \"0([oO]?)(?:_?[0-7])+\" + LSuffix;\n    var Decnumber = \"(?:0(?:_?0)*|[1-9](?:_?[0-9])*)\" + LSuffix;\n    var Intnumber = group(\n        Hexnumber,\n        Binnumber,\n        Sk.__future__.silent_octal_literal ? SilentOctnumber : Octnumber,\n        Decnumber\n    );\n    var Number_ = group(Imagnumber, Floatnumber, Intnumber);\n    var PseudoToken = Whitespace + group(PseudoExtras, Number_, Funny, ContStr, Name);\n\n    PseudoTokenRegex = new RegExp(PseudoToken);\n}\n\nSk._setupTokenRegexes = _setupTokenRegexes;\n\nSk.exportSymbol(\"Sk._setupTokenRegexes\", Sk._setupTokenRegexes);\n\n/**\n * internal tokenize function\n *\n * @param {function(): string} readline\n * @param {string} encoding\n * @param {function(TokenInfo): void} yield_\n */\nfunction _tokenize(readline, encoding, yield_, filename) {\n    var lnum = 0,\n        parenlev = 0,\n        continued = 0,\n        numchars = \"0123456789\",\n        contstr = \"\",\n        needcont = 0,\n        contline = null,\n        indents = [0],\n        spos = [0, 0],\n        epos = [0, 0],\n        capos = null,\n        endprog = undefined,\n        strstart = undefined,\n        end = undefined,\n        pseudomatch = undefined;\n\n    if (encoding !== undefined) {\n        if (encoding == \"utf-8-sig\") {\n            // BOM will already have been stripped.\n            encoding = \"utf-8\";\n        }\n\n        yield_(new TokenInfo(tokens.T_ENCODING, encoding, [0, 0], [0, 0], \"\"));\n    }\n\n    var last_line = \"\";\n    var line = \"\";\n    while (true) {\n        // loop over lines in stream\n        try {\n            // We capture the value of the line variable here because\n            // readline uses the empty string '' to signal end of input,\n            // hence `line` itself will always be overwritten at the end\n            // of this loop.\n            last_line = line;\n            line = readline();\n        } catch (Exception) {\n            line = \"\";\n        }\n\n        // lets pretend this doesn't exist for now.\n        // if encoding is not None:\n        //     line = line.decode(encoding)\n        lnum += 1;\n        var pos = 0;\n        var max = line.length;\n\n        if (contstr) {\n            // continued string\n            if (!line) {\n                //throw new TokenError(\"EOF in multi-line string\", strstart);\n                throw new TokenError(\n                    \"EOF in multi-line string\",\n                    filename,\n                    last_line,\n                    ...spos,\n                    ...epos\n                );\n            }\n            endprog.lastIndex = 0;\n            var endmatch = endprog.exec(line);\n            if (endmatch) {\n                pos = end = endmatch[0].length;\n                yield_(\n                    new TokenInfo(\n                        tokens.T_STRING,\n                        contstr + line.substring(0, end),\n                        strstart,\n                        [lnum, end],\n                        contline + line\n                    )\n                );\n                contstr = \"\";\n                needcont = 0;\n                contline = null;\n            } else if (\n                needcont &&\n                line.substring(line.length - 2) !== \"\\\\\\n\" &&\n                line.substring(line.length - 3) !== \"\\\\\\r\\n\"\n            ) {\n                yield_(\n                    new TokenInfo(\n                        tokens.T_ERRORTOKEN,\n                        contstr + line,\n                        strstart,\n                        [lnum, line.length],\n                        contline\n                    )\n                );\n                contstr = \"\";\n                contline = null;\n                continue;\n            } else {\n                contstr = contstr + line;\n                contline = contline + line;\n                continue;\n            }\n        } else if (parenlev == 0 && !continued) {\n            // new statement\n            if (!line) {\n                break;\n            }\n            var column = 0;\n            while (pos < max) {\n                // measure leading whitespace\n                if (line[pos] == \" \") {\n                    column += 1;\n                } else if (line[pos] == \"\\t\") {\n                    column = Math.floor(column / tabsize + 1) * tabsize;\n                } else if (line[pos] == \"\\f\") {\n                    column = 0;\n                } else {\n                    break;\n                }\n                pos += 1;\n            }\n\n            if (pos == max) {\n                break;\n            }\n\n            if (contains(\"#\\r\\n\", line[pos])) {\n                // skip comments or blank lines\n                if (line[pos] == \"#\") {\n                    var comment_token = rstrip(line.substring(pos), \"\\r\\n\");\n                    yield_(\n                        new TokenInfo(\n                            tokens.T_COMMENT,\n                            comment_token,\n                            [lnum, pos],\n                            [lnum, pos + comment_token.length],\n                            line\n                        )\n                    );\n                    pos += comment_token.length;\n                }\n\n                yield_(\n                    new TokenInfo(\n                        tokens.T_NL,\n                        line.substring(pos),\n                        [lnum, pos],\n                        [lnum, line.length],\n                        line\n                    )\n                );\n                continue;\n            }\n\n            if (column > indents[indents.length - 1]) {\n                // count indents or dedents\n                indents.push(column);\n                yield_(\n                    new TokenInfo(\n                        tokens.T_INDENT,\n                        line.substring(pos),\n                        [lnum, 0],\n                        [lnum, pos],\n                        line\n                    )\n                );\n            }\n\n            while (column < indents[indents.length - 1]) {\n                if (!contains(indents, column)) {\n                    throw new IndentationError(\n                        \"unindent does not match any outer indentation level\",\n                        filename,\n                        spos[0],\n                        ...spos,\n                        ...epos\n                    ); //[\"<tokenize>\", lnum, pos, line]);\n                }\n\n                indents = indents.slice(0, -1);\n\n                yield_(new TokenInfo(tokens.T_DEDENT, \"\", [lnum, pos], [lnum, pos], line));\n            }\n        } else {\n            // continued statement\n            if (!line) {\n                //throw new TokenError(\"EOF in multi-line statement\", [lnum, 0]);\n                throw new TokenError(\n                    \"EOF in multi-line statement\",\n                    filename,\n                    last_line,\n                    ...spos,\n                    ...epos\n                );\n            }\n            continued = 0;\n        }\n\n        while (pos < max) {\n            //console.log(\"pos:\"+pos+\":\"+max);\n            // js regexes don't return any info about matches, other than the\n            // content. we'd like to put a \\w+ before pseudomatch, but then we\n            // can't get any data\n            capos = line.charAt(pos);\n            while (capos === \" \" || capos === \"\\f\" || capos === \"\\t\") {\n                pos += 1;\n                capos = line.charAt(pos);\n            }\n\n            pseudomatch = PseudoTokenRegex.exec(line.substring(pos));\n            if (pseudomatch) {\n                // scan for tokens\n                var start = pos;\n                var end = start + pseudomatch[1].length;\n                spos = [lnum, start];\n                epos = [lnum, end];\n                var pos = end;\n                if (start == end) {\n                    continue;\n                }\n\n                var token = line.substring(start, end);\n                var initial = line[start];\n                //console.log(\"token:\",token, \"initial:\",initial, start, end);\n                if (\n                    contains(numchars, initial) || // ordinary number\n                    (initial == \".\" && token != \".\" && token != \"...\")\n                ) {\n                    yield_(new TokenInfo(tokens.T_NUMBER, token, spos, epos, line));\n                } else if (contains(\"\\r\\n\", initial)) {\n                    if (parenlev > 0) {\n                        yield_(new TokenInfo(tokens.T_NL, token, spos, epos, line));\n                    } else {\n                        yield_(new TokenInfo(tokens.T_NEWLINE, token, spos, epos, line));\n                    }\n                } else if (initial == \"#\") {\n                    //assert not token.endswith(\"\\n\")\n                    yield_(new TokenInfo(tokens.T_COMMENT, token, spos, epos, line));\n                } else if (contains(triple_quoted, token)) {\n                    endprog = endpats[token];\n                    endmatch = endprog.exec(line.substring(pos));\n                    if (endmatch) {\n                        // all on one line\n                        pos = endmatch[0].length + pos;\n                        token = line.substring(start, pos);\n                        yield_(new TokenInfo(tokens.T_STRING, token, spos, [lnum, pos], line));\n                    } else {\n                        strstart = [lnum, start]; // multiple lines\n                        contstr = line.substring(start);\n                        contline = line;\n                        break;\n                    }\n                    // Check up to the first 3 chars of the token to see if\n                    //  they're in the single_quoted set. If so, they start\n                    //  a string.\n                    // We're using the first 3, because we're looking for\n                    //  \"rb'\" (for example) at the start of the token. If\n                    //  we switch to longer prefixes, this needs to be\n                    //  adjusted.\n                    // Note that initial == token[:1].\n                    // Also note that single quote checking must come after\n                    //  triple quote checking (above).\n                } else if (\n                    contains(single_quoted, initial) ||\n                    contains(single_quoted, token.substring(0, 2)) ||\n                    contains(single_quoted, token.substring(0, 3))\n                ) {\n                    if (token[token.length - 1] == \"\\n\") {\n                        // continued string\n                        strstart = [lnum, start];\n                        // Again, using the first 3 chars of the\n                        //  token. This is looking for the matching end\n                        //  regex for the correct type of quote\n                        //  character. So it's really looking for\n                        //  endpats[\"'\"] or endpats['\"'], by trying to\n                        //  skip string prefix characters, if any.\n                        endprog = endpats[initial] || endpats[token[1]] || endpats[token[2]];\n                        contstr = line.substring(start);\n                        needcont = 1;\n                        contline = line;\n                        break;\n                    } else {\n                        // ordinary string\n                        yield_(new TokenInfo(tokens.T_STRING, token, spos, epos, line));\n                    }\n                } else if (isidentifier(initial)) {\n                    // ordinary name\n                    yield_(new TokenInfo(tokens.T_NAME, token, spos, epos, line));\n                } else if (initial == \"\\\\\") {\n                    // continued stmt\n                    continued = 1;\n                } else {\n                    if (contains(\"([{\", initial)) {\n                        parenlev += 1;\n                    } else if (contains(\")]}\", initial)) {\n                        parenlev -= 1;\n                    }\n                    yield_(new TokenInfo(tokens.T_OP, token, spos, epos, line));\n                }\n            } else {\n                yield_(\n                    new TokenInfo(\n                        tokens.T_ERRORTOKEN,\n                        line[pos],\n                        [lnum, pos],\n                        [lnum, pos + 1],\n                        line\n                    )\n                );\n                pos += 1;\n            }\n        }\n    }\n\n    // Add an implicit NEWLINE if the input doesn't end in one\n    if (last_line && !contains(\"\\r\\n\", last_line[last_line.length - 1])) {\n        yield_(\n            new TokenInfo(\n                tokens.T_NEWLINE,\n                \"\",\n                [lnum - 1, last_line.length],\n                [lnum - 1, last_line.length + 1],\n                \"\"\n            )\n        );\n    }\n    for (var i in indents.slice(1)) {\n        // pop remaining indent levels\n        yield_(new TokenInfo(tokens.T_DEDENT, \"\", [lnum, 0], [lnum, 0], \"\"));\n    }\n\n    yield_(new TokenInfo(tokens.T_ENDMARKER, \"\", [lnum, 0], [lnum, 0], \"\"));\n}\n\nSk._tokenize = _tokenize;\n// we use this in ast\nSk._tokenize.Floatnumber = Floatnumber;\n\nSk.exportSymbol(\"Sk._tokenize\", Sk._tokenize);\n", "// generated by pgen/main.py\nSk.OpMap = {\n\"(\": Sk.token.tokens.T_LPAR,\n\")\": Sk.token.tokens.T_RPAR,\n\"[\": Sk.token.tokens.T_LSQB,\n\"]\": Sk.token.tokens.T_RSQB,\n\":\": Sk.token.tokens.T_COLON,\n\",\": Sk.token.tokens.T_COMMA,\n\";\": Sk.token.tokens.T_SEMI,\n\"+\": Sk.token.tokens.T_PLUS,\n\"-\": Sk.token.tokens.T_MINUS,\n\"*\": Sk.token.tokens.T_STAR,\n\"/\": Sk.token.tokens.T_SLASH,\n\"|\": Sk.token.tokens.T_VBAR,\n\"&\": Sk.token.tokens.T_AMPER,\n\"<\": Sk.token.tokens.T_LESS,\n\">\": Sk.token.tokens.T_GREATER,\n\"=\": Sk.token.tokens.T_EQUAL,\n\".\": Sk.token.tokens.T_DOT,\n\"%\": Sk.token.tokens.T_PERCENT,\n\"`\": Sk.token.tokens.T_BACKQUOTE,\n\"{\": Sk.token.tokens.T_LBRACE,\n\"}\": Sk.token.tokens.T_RBRACE,\n\"@\": Sk.token.tokens.T_AT,\n\"@=\": Sk.token.tokens.T_ATEQUAL,\n\"==\": Sk.token.tokens.T_EQEQUAL,\n\"!=\": Sk.token.tokens.T_NOTEQUAL,\n\"<>\": Sk.token.tokens.T_NOTEQUAL,\n\"<=\": Sk.token.tokens.T_LESSEQUAL,\n\">=\": Sk.token.tokens.T_GREATEREQUAL,\n\"~\": Sk.token.tokens.T_TILDE,\n\"^\": Sk.token.tokens.T_CIRCUMFLEX,\n\"<<\": Sk.token.tokens.T_LEFTSHIFT,\n\">>\": Sk.token.tokens.T_RIGHTSHIFT,\n\"**\": Sk.token.tokens.T_DOUBLESTAR,\n\"+=\": Sk.token.tokens.T_PLUSEQUAL,\n\"-=\": Sk.token.tokens.T_MINEQUAL,\n\"*=\": Sk.token.tokens.T_STAREQUAL,\n\"/=\": Sk.token.tokens.T_SLASHEQUAL,\n\"%=\": Sk.token.tokens.T_PERCENTEQUAL,\n\"&=\": Sk.token.tokens.T_AMPEREQUAL,\n\"|=\": Sk.token.tokens.T_VBAREQUAL,\n\"^=\": Sk.token.tokens.T_CIRCUMFLEXEQUAL,\n\"<<=\": Sk.token.tokens.T_LEFTSHIFTEQUAL,\n\">>=\": Sk.token.tokens.T_RIGHTSHIFTEQUAL,\n\"**=\": Sk.token.tokens.T_DOUBLESTAREQUAL,\n\"//\": Sk.token.tokens.T_DOUBLESLASH,\n\"//=\": Sk.token.tokens.T_DOUBLESLASHEQUAL,\n\"->\": Sk.token.tokens.T_RARROW,\n\"...\": Sk.token.tokens.T_ELLIPSIS\n};\nSk.ParseTables = {\nsym:\n{and_expr: 257,\n and_test: 258,\n annassign: 259,\n arglist: 260,\n argument: 261,\n arith_expr: 262,\n assert_stmt: 263,\n async_funcdef: 264,\n async_stmt: 265,\n atom: 266,\n atom_expr: 267,\n augassign: 268,\n break_stmt: 269,\n classdef: 270,\n comp_for: 271,\n comp_if: 272,\n comp_iter: 273,\n comp_op: 274,\n comparison: 275,\n compound_stmt: 276,\n continue_stmt: 277,\n debugger_stmt: 278,\n decorated: 279,\n decorator: 280,\n decorators: 281,\n del_stmt: 282,\n dictorsetmaker: 283,\n dotted_as_name: 284,\n dotted_as_names: 285,\n dotted_name: 286,\n encoding_decl: 287,\n eval_input: 288,\n except_clause: 289,\n expr: 290,\n expr_stmt: 291,\n exprlist: 292,\n factor: 293,\n file_input: 294,\n flow_stmt: 295,\n for_stmt: 296,\n funcdef: 297,\n global_stmt: 298,\n if_stmt: 299,\n import_as_name: 300,\n import_as_names: 301,\n import_from: 302,\n import_name: 303,\n import_stmt: 304,\n lambdef: 305,\n lambdef_nocond: 306,\n nonlocal_stmt: 307,\n not_test: 308,\n or_test: 309,\n parameters: 310,\n pass_stmt: 311,\n power: 312,\n print_stmt: 313,\n raise_stmt: 314,\n return_stmt: 315,\n shift_expr: 316,\n simple_stmt: 317,\n single_input: 256,\n sliceop: 318,\n small_stmt: 319,\n star_expr: 320,\n stmt: 321,\n subscript: 322,\n subscriptlist: 323,\n suite: 324,\n term: 325,\n test: 326,\n test_nocond: 327,\n testlist: 328,\n testlist_comp: 329,\n testlist_star_expr: 330,\n tfpdef: 331,\n trailer: 332,\n try_stmt: 333,\n typedargslist: 334,\n varargslist: 335,\n vfpdef: 336,\n while_stmt: 337,\n with_item: 338,\n with_stmt: 339,\n xor_expr: 340,\n yield_arg: 341,\n yield_expr: 342,\n yield_stmt: 343},\nnumber2symbol:\n{256: 'single_input',\n 257: 'and_expr',\n 258: 'and_test',\n 259: 'annassign',\n 260: 'arglist',\n 261: 'argument',\n 262: 'arith_expr',\n 263: 'assert_stmt',\n 264: 'async_funcdef',\n 265: 'async_stmt',\n 266: 'atom',\n 267: 'atom_expr',\n 268: 'augassign',\n 269: 'break_stmt',\n 270: 'classdef',\n 271: 'comp_for',\n 272: 'comp_if',\n 273: 'comp_iter',\n 274: 'comp_op',\n 275: 'comparison',\n 276: 'compound_stmt',\n 277: 'continue_stmt',\n 278: 'debugger_stmt',\n 279: 'decorated',\n 280: 'decorator',\n 281: 'decorators',\n 282: 'del_stmt',\n 283: 'dictorsetmaker',\n 284: 'dotted_as_name',\n 285: 'dotted_as_names',\n 286: 'dotted_name',\n 287: 'encoding_decl',\n 288: 'eval_input',\n 289: 'except_clause',\n 290: 'expr',\n 291: 'expr_stmt',\n 292: 'exprlist',\n 293: 'factor',\n 294: 'file_input',\n 295: 'flow_stmt',\n 296: 'for_stmt',\n 297: 'funcdef',\n 298: 'global_stmt',\n 299: 'if_stmt',\n 300: 'import_as_name',\n 301: 'import_as_names',\n 302: 'import_from',\n 303: 'import_name',\n 304: 'import_stmt',\n 305: 'lambdef',\n 306: 'lambdef_nocond',\n 307: 'nonlocal_stmt',\n 308: 'not_test',\n 309: 'or_test',\n 310: 'parameters',\n 311: 'pass_stmt',\n 312: 'power',\n 313: 'print_stmt',\n 314: 'raise_stmt',\n 315: 'return_stmt',\n 316: 'shift_expr',\n 317: 'simple_stmt',\n 318: 'sliceop',\n 319: 'small_stmt',\n 320: 'star_expr',\n 321: 'stmt',\n 322: 'subscript',\n 323: 'subscriptlist',\n 324: 'suite',\n 325: 'term',\n 326: 'test',\n 327: 'test_nocond',\n 328: 'testlist',\n 329: 'testlist_comp',\n 330: 'testlist_star_expr',\n 331: 'tfpdef',\n 332: 'trailer',\n 333: 'try_stmt',\n 334: 'typedargslist',\n 335: 'varargslist',\n 336: 'vfpdef',\n 337: 'while_stmt',\n 338: 'with_item',\n 339: 'with_stmt',\n 340: 'xor_expr',\n 341: 'yield_arg',\n 342: 'yield_expr',\n 343: 'yield_stmt'},\ndfas:\n{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],\n       {2: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        41: 1,\n        42: 1,\n        43: 1}],\n 257: [[[[44, 1]], [[45, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 258: [[[[46, 1]], [[47, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 259: [[[[48, 1]], [[49, 2]], [[50, 3], [0, 2]], [[49, 4]], [[0, 4]]],\n       {48: 1}],\n 260: [[[[51, 1]], [[52, 2], [0, 1]], [[51, 1], [0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1,\n        53: 1}],\n 261: [[[[49, 1], [15, 2], [53, 2]],\n        [[50, 2], [54, 3], [0, 1]],\n        [[49, 3]],\n        [[0, 3]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1,\n        53: 1}],\n 262: [[[[55, 1]], [[30, 0], [43, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 263: [[[[24, 1]], [[49, 2]], [[52, 3], [0, 2]], [[49, 4]], [[0, 4]]],\n       {24: 1}],\n 264: [[[[10, 1]], [[56, 2]], [[0, 2]]], {10: 1}],\n 265: [[[[10, 1]], [[57, 2], [56, 2], [58, 2]], [[0, 2]]], {10: 1}],\n 266: [[[[6, 1],\n         [25, 1],\n         [33, 1],\n         [9, 1],\n         [11, 1],\n         [12, 2],\n         [35, 3],\n         [38, 4],\n         [19, 1],\n         [7, 5]],\n        [[0, 1]],\n        [[59, 1], [60, 6]],\n        [[61, 1], [62, 7], [63, 7]],\n        [[64, 1], [63, 8]],\n        [[7, 5], [0, 5]],\n        [[59, 1]],\n        [[61, 1]],\n        [[64, 1]]],\n       {6: 1, 7: 1, 9: 1, 11: 1, 12: 1, 19: 1, 25: 1, 33: 1, 35: 1, 38: 1}],\n 267: [[[[29, 1], [65, 2]], [[65, 2]], [[66, 2], [0, 2]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        25: 1,\n        29: 1,\n        33: 1,\n        35: 1,\n        38: 1}],\n 268: [[[[67, 1],\n         [68, 1],\n         [69, 1],\n         [70, 1],\n         [71, 1],\n         [72, 1],\n         [73, 1],\n         [74, 1],\n         [75, 1],\n         [76, 1],\n         [77, 1],\n         [78, 1],\n         [79, 1]],\n        [[0, 1]]],\n       {67: 1,\n        68: 1,\n        69: 1,\n        70: 1,\n        71: 1,\n        72: 1,\n        73: 1,\n        74: 1,\n        75: 1,\n        76: 1,\n        77: 1,\n        78: 1,\n        79: 1}],\n 269: [[[[39, 1]], [[0, 1]]], {39: 1}],\n 270: [[[[13, 1]],\n        [[25, 2]],\n        [[48, 3], [35, 4]],\n        [[80, 5]],\n        [[61, 6], [81, 7]],\n        [[0, 5]],\n        [[48, 3]],\n        [[61, 6]]],\n       {13: 1}],\n 271: [[[[10, 1], [34, 2]],\n        [[34, 2]],\n        [[82, 3]],\n        [[83, 4]],\n        [[84, 5]],\n        [[85, 6], [0, 5]],\n        [[0, 6]]],\n       {10: 1, 34: 1}],\n 272: [[[[37, 1]], [[86, 2]], [[85, 3], [0, 2]], [[0, 3]]], {37: 1}],\n 273: [[[[87, 1], [54, 1]], [[0, 1]]], {10: 1, 34: 1, 37: 1}],\n 274: [[[[88, 1],\n         [89, 1],\n         [8, 2],\n         [90, 1],\n         [88, 1],\n         [83, 1],\n         [91, 1],\n         [92, 3],\n         [93, 1],\n         [94, 1]],\n        [[0, 1]],\n        [[83, 1]],\n        [[8, 1], [0, 3]]],\n       {8: 1, 83: 1, 88: 1, 89: 1, 90: 1, 91: 1, 92: 1, 93: 1, 94: 1}],\n 275: [[[[95, 1]], [[96, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 276: [[[[97, 1],\n         [98, 1],\n         [58, 1],\n         [99, 1],\n         [57, 1],\n         [100, 1],\n         [56, 1],\n         [101, 1],\n         [102, 1]],\n        [[0, 1]]],\n       {4: 1, 10: 1, 13: 1, 20: 1, 21: 1, 34: 1, 37: 1, 41: 1, 42: 1}],\n 277: [[[[40, 1]], [[0, 1]]], {40: 1}],\n 278: [[[[17, 1]], [[0, 1]]], {17: 1}],\n 279: [[[[103, 1]], [[56, 2], [104, 2], [99, 2]], [[0, 2]]], {41: 1}],\n 280: [[[[41, 1]],\n        [[105, 2]],\n        [[2, 4], [35, 3]],\n        [[61, 5], [81, 6]],\n        [[0, 4]],\n        [[2, 4]],\n        [[61, 5]]],\n       {41: 1}],\n 281: [[[[106, 1]], [[106, 1], [0, 1]]], {41: 1}],\n 282: [[[[27, 1]], [[82, 2]], [[0, 2]]], {27: 1}],\n 283: [[[[49, 1], [107, 2], [53, 3]],\n        [[48, 4], [54, 5], [52, 6], [0, 1]],\n        [[54, 5], [52, 6], [0, 2]],\n        [[95, 7]],\n        [[49, 7]],\n        [[0, 5]],\n        [[49, 8], [107, 8], [0, 6]],\n        [[54, 5], [52, 9], [0, 7]],\n        [[52, 6], [0, 8]],\n        [[49, 10], [53, 11], [0, 9]],\n        [[48, 12]],\n        [[95, 13]],\n        [[49, 13]],\n        [[52, 9], [0, 13]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1,\n        53: 1}],\n 284: [[[[105, 1]], [[108, 2], [0, 1]], [[25, 3]], [[0, 3]]], {25: 1}],\n 285: [[[[109, 1]], [[52, 0], [0, 1]]], {25: 1}],\n 286: [[[[25, 1]], [[110, 0], [0, 1]]], {25: 1}],\n 287: [[[[25, 1]], [[0, 1]]], {25: 1}],\n 288: [[[[111, 1]], [[2, 1], [112, 2]], [[0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 289: [[[[113, 1]],\n        [[49, 2], [0, 1]],\n        [[108, 3], [52, 3], [0, 2]],\n        [[49, 4]],\n        [[0, 4]]],\n       {113: 1}],\n 290: [[[[114, 1]], [[115, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 291: [[[[116, 1]],\n        [[117, 2], [50, 3], [118, 4], [0, 1]],\n        [[111, 4], [62, 4]],\n        [[116, 5], [62, 5]],\n        [[0, 4]],\n        [[50, 3], [0, 5]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 292: [[[[95, 1], [107, 1]], [[52, 2], [0, 1]], [[95, 1], [107, 1], [0, 2]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 293: [[[[119, 2], [30, 1], [22, 1], [43, 1]], [[120, 2]], [[0, 2]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 294: [[[[2, 0], [112, 1], [121, 0]], [[0, 1]]],\n       {2: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        41: 1,\n        42: 1,\n        43: 1,\n        112: 1}],\n 295: [[[[122, 1], [123, 1], [124, 1], [125, 1], [126, 1]], [[0, 1]]],\n       {5: 1, 23: 1, 31: 1, 39: 1, 40: 1}],\n 296: [[[[34, 1]],\n        [[82, 2]],\n        [[83, 3]],\n        [[111, 4]],\n        [[48, 5]],\n        [[80, 6]],\n        [[127, 7], [0, 6]],\n        [[48, 8]],\n        [[80, 9]],\n        [[0, 9]]],\n       {34: 1}],\n 297: [[[[4, 1]],\n        [[25, 2]],\n        [[128, 3]],\n        [[48, 4], [129, 5]],\n        [[80, 6]],\n        [[49, 7]],\n        [[0, 6]],\n        [[48, 4]]],\n       {4: 1}],\n 298: [[[[26, 1]], [[25, 2]], [[52, 1], [0, 2]]], {26: 1}],\n 299: [[[[37, 1]],\n        [[49, 2]],\n        [[48, 3]],\n        [[80, 4]],\n        [[127, 5], [130, 1], [0, 4]],\n        [[48, 6]],\n        [[80, 7]],\n        [[0, 7]]],\n       {37: 1}],\n 300: [[[[25, 1]], [[108, 2], [0, 1]], [[25, 3]], [[0, 3]]], {25: 1}],\n 301: [[[[131, 1]], [[52, 2], [0, 1]], [[131, 1], [0, 2]]], {25: 1}],\n 302: [[[[36, 1]],\n        [[105, 2], [19, 3], [110, 3]],\n        [[32, 4]],\n        [[105, 2], [19, 3], [32, 4], [110, 3]],\n        [[132, 5], [15, 5], [35, 6]],\n        [[0, 5]],\n        [[132, 7]],\n        [[61, 5]]],\n       {36: 1}],\n 303: [[[[32, 1]], [[133, 2]], [[0, 2]]], {32: 1}],\n 304: [[[[134, 1], [135, 1]], [[0, 1]]], {32: 1, 36: 1}],\n 305: [[[[14, 1]], [[48, 2], [136, 3]], [[49, 4]], [[48, 2]], [[0, 4]]],\n       {14: 1}],\n 306: [[[[14, 1]], [[48, 2], [136, 3]], [[86, 4]], [[48, 2]], [[0, 4]]],\n       {14: 1}],\n 307: [[[[18, 1]], [[25, 2]], [[52, 1], [0, 2]]], {18: 1}],\n 308: [[[[8, 1], [137, 2]], [[46, 2]], [[0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 309: [[[[138, 1]], [[139, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 310: [[[[35, 1]], [[61, 2], [140, 3]], [[0, 2]], [[61, 2]]], {35: 1}],\n 311: [[[[28, 1]], [[0, 1]]], {28: 1}],\n 312: [[[[141, 1]], [[53, 2], [0, 1]], [[120, 3]], [[0, 3]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        25: 1,\n        29: 1,\n        33: 1,\n        35: 1,\n        38: 1}],\n 313: [[[[16, 1]],\n        [[49, 2], [142, 3], [0, 1]],\n        [[52, 4], [0, 2]],\n        [[49, 5]],\n        [[49, 2], [0, 4]],\n        [[52, 6], [0, 5]],\n        [[49, 7]],\n        [[52, 8], [0, 7]],\n        [[49, 7], [0, 8]]],\n       {16: 1}],\n 314: [[[[5, 1]],\n        [[49, 2], [0, 1]],\n        [[36, 3], [52, 3], [0, 2]],\n        [[49, 4]],\n        [[52, 5], [0, 4]],\n        [[49, 6]],\n        [[0, 6]]],\n       {5: 1}],\n 315: [[[[23, 1]], [[111, 2], [0, 1]], [[0, 2]]], {23: 1}],\n 316: [[[[143, 1]], [[144, 0], [142, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 317: [[[[145, 1]], [[2, 2], [146, 3]], [[0, 2]], [[145, 1], [2, 2]]],\n       {5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        35: 1,\n        36: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        43: 1}],\n 318: [[[[48, 1]], [[49, 2], [0, 1]], [[0, 2]]], {48: 1}],\n 319: [[[[147, 1],\n         [148, 1],\n         [149, 1],\n         [150, 1],\n         [151, 1],\n         [152, 1],\n         [153, 1],\n         [154, 1],\n         [155, 1],\n         [156, 1]],\n        [[0, 1]]],\n       {5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        35: 1,\n        36: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        43: 1}],\n 320: [[[[15, 1]], [[95, 2]], [[0, 2]]], {15: 1}],\n 321: [[[[1, 1], [3, 1]], [[0, 1]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        41: 1,\n        42: 1,\n        43: 1}],\n 322: [[[[49, 1], [48, 2]],\n        [[48, 2], [0, 1]],\n        [[49, 3], [157, 4], [0, 2]],\n        [[157, 4], [0, 3]],\n        [[0, 4]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1,\n        48: 1}],\n 323: [[[[158, 1]], [[52, 2], [0, 1]], [[158, 1], [0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1,\n        48: 1}],\n 324: [[[[1, 1], [2, 2]],\n        [[0, 1]],\n        [[159, 3]],\n        [[121, 4]],\n        [[160, 1], [121, 4]]],\n       {2: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        35: 1,\n        36: 1,\n        38: 1,\n        39: 1,\n        40: 1,\n        43: 1}],\n 325: [[[[120, 1]], [[161, 0], [15, 0], [162, 0], [41, 0], [163, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 326: [[[[84, 1], [164, 2]],\n        [[37, 3], [0, 1]],\n        [[0, 2]],\n        [[84, 4]],\n        [[127, 5]],\n        [[49, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 327: [[[[165, 1], [84, 1]], [[0, 1]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 328: [[[[49, 1]], [[52, 2], [0, 1]], [[49, 1], [0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 329: [[[[49, 1], [107, 1]],\n        [[54, 2], [52, 3], [0, 1]],\n        [[0, 2]],\n        [[49, 4], [107, 4], [0, 3]],\n        [[52, 3], [0, 4]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 330: [[[[49, 1], [107, 1]], [[52, 2], [0, 1]], [[49, 1], [107, 1], [0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        15: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 331: [[[[25, 1]], [[48, 2], [0, 1]], [[49, 3]], [[0, 3]]], {25: 1}],\n 332: [[[[35, 1], [110, 2], [38, 3]],\n        [[61, 4], [81, 5]],\n        [[25, 4]],\n        [[166, 6]],\n        [[0, 4]],\n        [[61, 4]],\n        [[64, 4]]],\n       {35: 1, 38: 1, 110: 1}],\n 333: [[[[20, 1]],\n        [[48, 2]],\n        [[80, 3]],\n        [[167, 4], [168, 5]],\n        [[48, 6]],\n        [[48, 7]],\n        [[80, 8]],\n        [[80, 9]],\n        [[167, 4], [127, 10], [168, 5], [0, 8]],\n        [[0, 9]],\n        [[48, 11]],\n        [[80, 12]],\n        [[168, 5], [0, 12]]],\n       {20: 1}],\n 334: [[[[15, 1], [169, 2], [53, 3]],\n        [[169, 4], [52, 5], [0, 1]],\n        [[50, 6], [52, 7], [0, 2]],\n        [[169, 8]],\n        [[52, 5], [0, 4]],\n        [[169, 9], [53, 3], [0, 5]],\n        [[49, 10]],\n        [[15, 11], [169, 2], [53, 3], [0, 7]],\n        [[52, 12], [0, 8]],\n        [[50, 13], [52, 5], [0, 9]],\n        [[52, 7], [0, 10]],\n        [[169, 14], [52, 15], [0, 11]],\n        [[0, 12]],\n        [[49, 4]],\n        [[52, 15], [0, 14]],\n        [[169, 16], [53, 3], [0, 15]],\n        [[50, 17], [52, 15], [0, 16]],\n        [[49, 14]]],\n       {15: 1, 25: 1, 53: 1}],\n 335: [[[[15, 1], [53, 2], [170, 3]],\n        [[170, 5], [52, 4], [0, 1]],\n        [[170, 6]],\n        [[50, 7], [52, 8], [0, 3]],\n        [[53, 2], [170, 9], [0, 4]],\n        [[52, 4], [0, 5]],\n        [[52, 10], [0, 6]],\n        [[49, 11]],\n        [[15, 12], [53, 2], [170, 3], [0, 8]],\n        [[50, 13], [52, 4], [0, 9]],\n        [[0, 10]],\n        [[52, 8], [0, 11]],\n        [[52, 15], [170, 14], [0, 12]],\n        [[49, 5]],\n        [[52, 15], [0, 14]],\n        [[53, 2], [170, 16], [0, 15]],\n        [[50, 17], [52, 15], [0, 16]],\n        [[49, 14]]],\n       {15: 1, 25: 1, 53: 1}],\n 336: [[[[25, 1]], [[0, 1]]], {25: 1}],\n 337: [[[[21, 1]],\n        [[49, 2]],\n        [[48, 3]],\n        [[80, 4]],\n        [[127, 5], [0, 4]],\n        [[48, 6]],\n        [[80, 7]],\n        [[0, 7]]],\n       {21: 1}],\n 338: [[[[49, 1]], [[108, 2], [0, 1]], [[95, 3]], [[0, 3]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 339: [[[[42, 1]], [[171, 2]], [[48, 3], [52, 1]], [[80, 4]], [[0, 4]]],\n       {42: 1}],\n 340: [[[[172, 1]], [[173, 0], [0, 1]]],\n       {6: 1,\n        7: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        38: 1,\n        43: 1}],\n 341: [[[[111, 2], [36, 1]], [[49, 2]], [[0, 2]]],\n       {6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        11: 1,\n        12: 1,\n        14: 1,\n        19: 1,\n        22: 1,\n        25: 1,\n        29: 1,\n        30: 1,\n        33: 1,\n        35: 1,\n        36: 1,\n        38: 1,\n        43: 1}],\n 342: [[[[31, 1]], [[174, 2], [0, 1]], [[0, 2]]], {31: 1}],\n 343: [[[[62, 1]], [[0, 1]]], {31: 1}]},\nstates:\n[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],\n [[[44, 1]], [[45, 0], [0, 1]]],\n [[[46, 1]], [[47, 0], [0, 1]]],\n [[[48, 1]], [[49, 2]], [[50, 3], [0, 2]], [[49, 4]], [[0, 4]]],\n [[[51, 1]], [[52, 2], [0, 1]], [[51, 1], [0, 2]]],\n [[[49, 1], [15, 2], [53, 2]],\n  [[50, 2], [54, 3], [0, 1]],\n  [[49, 3]],\n  [[0, 3]]],\n [[[55, 1]], [[30, 0], [43, 0], [0, 1]]],\n [[[24, 1]], [[49, 2]], [[52, 3], [0, 2]], [[49, 4]], [[0, 4]]],\n [[[10, 1]], [[56, 2]], [[0, 2]]],\n [[[10, 1]], [[57, 2], [56, 2], [58, 2]], [[0, 2]]],\n [[[6, 1],\n   [25, 1],\n   [33, 1],\n   [9, 1],\n   [11, 1],\n   [12, 2],\n   [35, 3],\n   [38, 4],\n   [19, 1],\n   [7, 5]],\n  [[0, 1]],\n  [[59, 1], [60, 6]],\n  [[61, 1], [62, 7], [63, 7]],\n  [[64, 1], [63, 8]],\n  [[7, 5], [0, 5]],\n  [[59, 1]],\n  [[61, 1]],\n  [[64, 1]]],\n [[[29, 1], [65, 2]], [[65, 2]], [[66, 2], [0, 2]]],\n [[[67, 1],\n   [68, 1],\n   [69, 1],\n   [70, 1],\n   [71, 1],\n   [72, 1],\n   [73, 1],\n   [74, 1],\n   [75, 1],\n   [76, 1],\n   [77, 1],\n   [78, 1],\n   [79, 1]],\n  [[0, 1]]],\n [[[39, 1]], [[0, 1]]],\n [[[13, 1]],\n  [[25, 2]],\n  [[48, 3], [35, 4]],\n  [[80, 5]],\n  [[61, 6], [81, 7]],\n  [[0, 5]],\n  [[48, 3]],\n  [[61, 6]]],\n [[[10, 1], [34, 2]],\n  [[34, 2]],\n  [[82, 3]],\n  [[83, 4]],\n  [[84, 5]],\n  [[85, 6], [0, 5]],\n  [[0, 6]]],\n [[[37, 1]], [[86, 2]], [[85, 3], [0, 2]], [[0, 3]]],\n [[[87, 1], [54, 1]], [[0, 1]]],\n [[[88, 1],\n   [89, 1],\n   [8, 2],\n   [90, 1],\n   [88, 1],\n   [83, 1],\n   [91, 1],\n   [92, 3],\n   [93, 1],\n   [94, 1]],\n  [[0, 1]],\n  [[83, 1]],\n  [[8, 1], [0, 3]]],\n [[[95, 1]], [[96, 0], [0, 1]]],\n [[[97, 1],\n   [98, 1],\n   [58, 1],\n   [99, 1],\n   [57, 1],\n   [100, 1],\n   [56, 1],\n   [101, 1],\n   [102, 1]],\n  [[0, 1]]],\n [[[40, 1]], [[0, 1]]],\n [[[17, 1]], [[0, 1]]],\n [[[103, 1]], [[56, 2], [104, 2], [99, 2]], [[0, 2]]],\n [[[41, 1]],\n  [[105, 2]],\n  [[2, 4], [35, 3]],\n  [[61, 5], [81, 6]],\n  [[0, 4]],\n  [[2, 4]],\n  [[61, 5]]],\n [[[106, 1]], [[106, 1], [0, 1]]],\n [[[27, 1]], [[82, 2]], [[0, 2]]],\n [[[49, 1], [107, 2], [53, 3]],\n  [[48, 4], [54, 5], [52, 6], [0, 1]],\n  [[54, 5], [52, 6], [0, 2]],\n  [[95, 7]],\n  [[49, 7]],\n  [[0, 5]],\n  [[49, 8], [107, 8], [0, 6]],\n  [[54, 5], [52, 9], [0, 7]],\n  [[52, 6], [0, 8]],\n  [[49, 10], [53, 11], [0, 9]],\n  [[48, 12]],\n  [[95, 13]],\n  [[49, 13]],\n  [[52, 9], [0, 13]]],\n [[[105, 1]], [[108, 2], [0, 1]], [[25, 3]], [[0, 3]]],\n [[[109, 1]], [[52, 0], [0, 1]]],\n [[[25, 1]], [[110, 0], [0, 1]]],\n [[[25, 1]], [[0, 1]]],\n [[[111, 1]], [[2, 1], [112, 2]], [[0, 2]]],\n [[[113, 1]],\n  [[49, 2], [0, 1]],\n  [[108, 3], [52, 3], [0, 2]],\n  [[49, 4]],\n  [[0, 4]]],\n [[[114, 1]], [[115, 0], [0, 1]]],\n [[[116, 1]],\n  [[117, 2], [50, 3], [118, 4], [0, 1]],\n  [[111, 4], [62, 4]],\n  [[116, 5], [62, 5]],\n  [[0, 4]],\n  [[50, 3], [0, 5]]],\n [[[95, 1], [107, 1]], [[52, 2], [0, 1]], [[95, 1], [107, 1], [0, 2]]],\n [[[119, 2], [30, 1], [22, 1], [43, 1]], [[120, 2]], [[0, 2]]],\n [[[2, 0], [112, 1], [121, 0]], [[0, 1]]],\n [[[122, 1], [123, 1], [124, 1], [125, 1], [126, 1]], [[0, 1]]],\n [[[34, 1]],\n  [[82, 2]],\n  [[83, 3]],\n  [[111, 4]],\n  [[48, 5]],\n  [[80, 6]],\n  [[127, 7], [0, 6]],\n  [[48, 8]],\n  [[80, 9]],\n  [[0, 9]]],\n [[[4, 1]],\n  [[25, 2]],\n  [[128, 3]],\n  [[48, 4], [129, 5]],\n  [[80, 6]],\n  [[49, 7]],\n  [[0, 6]],\n  [[48, 4]]],\n [[[26, 1]], [[25, 2]], [[52, 1], [0, 2]]],\n [[[37, 1]],\n  [[49, 2]],\n  [[48, 3]],\n  [[80, 4]],\n  [[127, 5], [130, 1], [0, 4]],\n  [[48, 6]],\n  [[80, 7]],\n  [[0, 7]]],\n [[[25, 1]], [[108, 2], [0, 1]], [[25, 3]], [[0, 3]]],\n [[[131, 1]], [[52, 2], [0, 1]], [[131, 1], [0, 2]]],\n [[[36, 1]],\n  [[105, 2], [19, 3], [110, 3]],\n  [[32, 4]],\n  [[105, 2], [19, 3], [32, 4], [110, 3]],\n  [[132, 5], [15, 5], [35, 6]],\n  [[0, 5]],\n  [[132, 7]],\n  [[61, 5]]],\n [[[32, 1]], [[133, 2]], [[0, 2]]],\n [[[134, 1], [135, 1]], [[0, 1]]],\n [[[14, 1]], [[48, 2], [136, 3]], [[49, 4]], [[48, 2]], [[0, 4]]],\n [[[14, 1]], [[48, 2], [136, 3]], [[86, 4]], [[48, 2]], [[0, 4]]],\n [[[18, 1]], [[25, 2]], [[52, 1], [0, 2]]],\n [[[8, 1], [137, 2]], [[46, 2]], [[0, 2]]],\n [[[138, 1]], [[139, 0], [0, 1]]],\n [[[35, 1]], [[61, 2], [140, 3]], [[0, 2]], [[61, 2]]],\n [[[28, 1]], [[0, 1]]],\n [[[141, 1]], [[53, 2], [0, 1]], [[120, 3]], [[0, 3]]],\n [[[16, 1]],\n  [[49, 2], [142, 3], [0, 1]],\n  [[52, 4], [0, 2]],\n  [[49, 5]],\n  [[49, 2], [0, 4]],\n  [[52, 6], [0, 5]],\n  [[49, 7]],\n  [[52, 8], [0, 7]],\n  [[49, 7], [0, 8]]],\n [[[5, 1]],\n  [[49, 2], [0, 1]],\n  [[36, 3], [52, 3], [0, 2]],\n  [[49, 4]],\n  [[52, 5], [0, 4]],\n  [[49, 6]],\n  [[0, 6]]],\n [[[23, 1]], [[111, 2], [0, 1]], [[0, 2]]],\n [[[143, 1]], [[144, 0], [142, 0], [0, 1]]],\n [[[145, 1]], [[2, 2], [146, 3]], [[0, 2]], [[145, 1], [2, 2]]],\n [[[48, 1]], [[49, 2], [0, 1]], [[0, 2]]],\n [[[147, 1],\n   [148, 1],\n   [149, 1],\n   [150, 1],\n   [151, 1],\n   [152, 1],\n   [153, 1],\n   [154, 1],\n   [155, 1],\n   [156, 1]],\n  [[0, 1]]],\n [[[15, 1]], [[95, 2]], [[0, 2]]],\n [[[1, 1], [3, 1]], [[0, 1]]],\n [[[49, 1], [48, 2]],\n  [[48, 2], [0, 1]],\n  [[49, 3], [157, 4], [0, 2]],\n  [[157, 4], [0, 3]],\n  [[0, 4]]],\n [[[158, 1]], [[52, 2], [0, 1]], [[158, 1], [0, 2]]],\n [[[1, 1], [2, 2]], [[0, 1]], [[159, 3]], [[121, 4]], [[160, 1], [121, 4]]],\n [[[120, 1]], [[161, 0], [15, 0], [162, 0], [41, 0], [163, 0], [0, 1]]],\n [[[84, 1], [164, 2]],\n  [[37, 3], [0, 1]],\n  [[0, 2]],\n  [[84, 4]],\n  [[127, 5]],\n  [[49, 2]]],\n [[[165, 1], [84, 1]], [[0, 1]]],\n [[[49, 1]], [[52, 2], [0, 1]], [[49, 1], [0, 2]]],\n [[[49, 1], [107, 1]],\n  [[54, 2], [52, 3], [0, 1]],\n  [[0, 2]],\n  [[49, 4], [107, 4], [0, 3]],\n  [[52, 3], [0, 4]]],\n [[[49, 1], [107, 1]], [[52, 2], [0, 1]], [[49, 1], [107, 1], [0, 2]]],\n [[[25, 1]], [[48, 2], [0, 1]], [[49, 3]], [[0, 3]]],\n [[[35, 1], [110, 2], [38, 3]],\n  [[61, 4], [81, 5]],\n  [[25, 4]],\n  [[166, 6]],\n  [[0, 4]],\n  [[61, 4]],\n  [[64, 4]]],\n [[[20, 1]],\n  [[48, 2]],\n  [[80, 3]],\n  [[167, 4], [168, 5]],\n  [[48, 6]],\n  [[48, 7]],\n  [[80, 8]],\n  [[80, 9]],\n  [[167, 4], [127, 10], [168, 5], [0, 8]],\n  [[0, 9]],\n  [[48, 11]],\n  [[80, 12]],\n  [[168, 5], [0, 12]]],\n [[[15, 1], [169, 2], [53, 3]],\n  [[169, 4], [52, 5], [0, 1]],\n  [[50, 6], [52, 7], [0, 2]],\n  [[169, 8]],\n  [[52, 5], [0, 4]],\n  [[169, 9], [53, 3], [0, 5]],\n  [[49, 10]],\n  [[15, 11], [169, 2], [53, 3], [0, 7]],\n  [[52, 12], [0, 8]],\n  [[50, 13], [52, 5], [0, 9]],\n  [[52, 7], [0, 10]],\n  [[169, 14], [52, 15], [0, 11]],\n  [[0, 12]],\n  [[49, 4]],\n  [[52, 15], [0, 14]],\n  [[169, 16], [53, 3], [0, 15]],\n  [[50, 17], [52, 15], [0, 16]],\n  [[49, 14]]],\n [[[15, 1], [53, 2], [170, 3]],\n  [[170, 5], [52, 4], [0, 1]],\n  [[170, 6]],\n  [[50, 7], [52, 8], [0, 3]],\n  [[53, 2], [170, 9], [0, 4]],\n  [[52, 4], [0, 5]],\n  [[52, 10], [0, 6]],\n  [[49, 11]],\n  [[15, 12], [53, 2], [170, 3], [0, 8]],\n  [[50, 13], [52, 4], [0, 9]],\n  [[0, 10]],\n  [[52, 8], [0, 11]],\n  [[52, 15], [170, 14], [0, 12]],\n  [[49, 5]],\n  [[52, 15], [0, 14]],\n  [[53, 2], [170, 16], [0, 15]],\n  [[50, 17], [52, 15], [0, 16]],\n  [[49, 14]]],\n [[[25, 1]], [[0, 1]]],\n [[[21, 1]],\n  [[49, 2]],\n  [[48, 3]],\n  [[80, 4]],\n  [[127, 5], [0, 4]],\n  [[48, 6]],\n  [[80, 7]],\n  [[0, 7]]],\n [[[49, 1]], [[108, 2], [0, 1]], [[95, 3]], [[0, 3]]],\n [[[42, 1]], [[171, 2]], [[48, 3], [52, 1]], [[80, 4]], [[0, 4]]],\n [[[172, 1]], [[173, 0], [0, 1]]],\n [[[111, 2], [36, 1]], [[49, 2]], [[0, 2]]],\n [[[31, 1]], [[174, 2], [0, 1]], [[0, 2]]],\n [[[62, 1]], [[0, 1]]]],\nlabels:\n[[0, 'EMPTY'],\n [317, null],\n [4, null],\n [276, null],\n [1, 'def'],\n [1, 'raise'],\n [1, 'True'],\n [3, null],\n [1, 'not'],\n [1, 'null'],\n [55, null],\n [2, null],\n [25, null],\n [1, 'class'],\n [1, 'lambda'],\n [16, null],\n [1, 'print'],\n [1, 'debugger'],\n [1, 'nonlocal'],\n [52, null],\n [1, 'try'],\n [1, 'while'],\n [31, null],\n [1, 'return'],\n [1, 'assert'],\n [1, null],\n [1, 'global'],\n [1, 'del'],\n [1, 'pass'],\n [54, null],\n [15, null],\n [1, 'yield'],\n [1, 'import'],\n [1, 'False'],\n [1, 'for'],\n [7, null],\n [1, 'from'],\n [1, 'if'],\n [9, null],\n [1, 'break'],\n [1, 'continue'],\n [49, null],\n [1, 'with'],\n [14, null],\n [316, null],\n [19, null],\n [308, null],\n [1, 'and'],\n [11, null],\n [326, null],\n [22, null],\n [261, null],\n [12, null],\n [35, null],\n [271, null],\n [325, null],\n [297, null],\n [339, null],\n [296, null],\n [26, null],\n [283, null],\n [8, null],\n [342, null],\n [329, null],\n [10, null],\n [266, null],\n [332, null],\n [45, null],\n [38, null],\n [40, null],\n [50, null],\n [46, null],\n [41, null],\n [42, null],\n [36, null],\n [43, null],\n [48, null],\n [44, null],\n [37, null],\n [39, null],\n [324, null],\n [260, null],\n [292, null],\n [1, 'in'],\n [309, null],\n [273, null],\n [327, null],\n [272, null],\n [28, null],\n [21, null],\n [27, null],\n [29, null],\n [1, 'is'],\n [30, null],\n [20, null],\n [290, null],\n [274, null],\n [333, null],\n [299, null],\n [270, null],\n [337, null],\n [279, null],\n [265, null],\n [281, null],\n [264, null],\n [286, null],\n [280, null],\n [320, null],\n [1, 'as'],\n [284, null],\n [23, null],\n [328, null],\n [0, null],\n [1, 'except'],\n [340, null],\n [18, null],\n [330, null],\n [268, null],\n [259, null],\n [312, null],\n [293, null],\n [321, null],\n [269, null],\n [277, null],\n [314, null],\n [315, null],\n [343, null],\n [1, 'else'],\n [310, null],\n [51, null],\n [1, 'elif'],\n [300, null],\n [301, null],\n [285, null],\n [303, null],\n [302, null],\n [335, null],\n [275, null],\n [258, null],\n [1, 'or'],\n [334, null],\n [267, null],\n [34, null],\n [262, null],\n [33, null],\n [319, null],\n [13, null],\n [295, null],\n [263, null],\n [291, null],\n [311, null],\n [307, null],\n [313, null],\n [282, null],\n [298, null],\n [304, null],\n [278, null],\n [318, null],\n [322, null],\n [5, null],\n [6, null],\n [47, null],\n [17, null],\n [24, null],\n [305, null],\n [306, null],\n [323, null],\n [289, null],\n [1, 'finally'],\n [331, null],\n [336, null],\n [338, null],\n [257, null],\n [32, null],\n [341, null]],\nkeywords:\n{'False': 33,\n 'null': 9,\n 'True': 6,\n 'and': 47,\n 'as': 108,\n 'assert': 24,\n 'break': 39,\n 'class': 13,\n 'continue': 40,\n 'debugger': 17,\n 'def': 4,\n 'del': 27,\n 'elif': 130,\n 'else': 127,\n 'except': 113,\n 'finally': 168,\n 'for': 34,\n 'from': 36,\n 'global': 26,\n 'if': 37,\n 'import': 32,\n 'in': 83,\n 'is': 92,\n 'lambda': 14,\n 'nonlocal': 18,\n 'not': 8,\n 'or': 139,\n 'pass': 28,\n 'print': 16,\n 'raise': 5,\n 'return': 23,\n 'try': 20,\n 'while': 21,\n 'with': 42,\n 'yield': 31},\ntokens:\n{0: 112,\n 1: 25,\n 2: 11,\n 3: 7,\n 4: 2,\n 5: 159,\n 6: 160,\n 7: 35,\n 8: 61,\n 9: 38,\n 10: 64,\n 11: 48,\n 12: 52,\n 13: 146,\n 14: 43,\n 15: 30,\n 16: 15,\n 17: 162,\n 18: 115,\n 19: 45,\n 20: 94,\n 21: 89,\n 22: 50,\n 23: 110,\n 24: 163,\n 25: 12,\n 26: 59,\n 27: 90,\n 28: 88,\n 29: 91,\n 30: 93,\n 31: 22,\n 32: 173,\n 33: 144,\n 34: 142,\n 35: 53,\n 36: 74,\n 37: 78,\n 38: 68,\n 39: 79,\n 40: 69,\n 41: 72,\n 42: 73,\n 43: 75,\n 44: 77,\n 45: 67,\n 46: 71,\n 47: 161,\n 48: 76,\n 49: 41,\n 50: 70,\n 51: 129,\n 52: 19,\n 54: 29,\n 55: 10},\nstart: 256\n};\n", "// low level parser to a concrete syntax tree, derived from cpython's lib2to3\n\n/**\n *\n * @constructor\n * @param {Object} grammar\n *\n * p = new Parser(grammar);\n * p.setup([start]);\n * foreach input token:\n *     if p.addtoken(...):\n *         break\n * root = p.rootnode\n *\n * can throw SyntaxError\n */\nfunction Parser(filename, grammar) {\n    this.filename = filename;\n    this.grammar = grammar;\n    this.comments = {};\n    this.p_flags = 0;\n    return this;\n}\n\n// all possible parser flags\nParser.FUTURE_PRINT_FUNCTION = \"print_function\";\nParser.FUTURE_UNICODE_LITERALS = \"unicode_literals\";\nParser.FUTURE_DIVISION = \"division\";\nParser.FUTURE_ABSOLUTE_IMPORT = \"absolute_import\";\nParser.FUTURE_WITH_STATEMENT = \"with_statement\";\nParser.FUTURE_NESTED_SCOPES = \"nested_scopes\";\nParser.FUTURE_GENERATORS = \"generators\";\nParser.CO_FUTURE_PRINT_FUNCTION = 0x10000;\nParser.CO_FUTURE_UNICODE_LITERALS = 0x20000;\nParser.CO_FUTURE_DIVISON = 0x2000;\nParser.CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;\nParser.CO_FUTURE_WITH_STATEMENT = 0x8000;\n\nParser.prototype.setup = function (start) {\n    var stackentry;\n    var newnode;\n    start = start || this.grammar.start;\n    //print(\"START:\"+start);\n\n    newnode = {\n        type: start,\n        value: null,\n        context: null,\n        children: [],\n    };\n    stackentry = {\n        dfa: this.grammar.dfas[start],\n        state: 0,\n        node: newnode,\n    };\n    this.stack = [stackentry];\n    this.used_names = {};\n    Sk._setupTokenRegexes();\n};\n\nfunction findInDfa(a, obj) {\n    var i = a.length;\n    while (i--) {\n        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Add a comment\nParser.prototype.addcomment = function (value, start, end, line) {\n    this.comments[start] = value;\n};\n\n// Add a token; return true if we're done\nParser.prototype.addtoken = function (type, value, context) {\n    var errline;\n    var itsfirst;\n    var itsdfa;\n    var state;\n    var v;\n    var t;\n    var newstate;\n    var i;\n    var a;\n    var arcs;\n    var first;\n    var states;\n    var tp;\n    var ilabel = this.classify(type, value, context);\n    //print(\"ilabel:\"+ilabel);\n\n    OUTERWHILE: while (true) {\n        tp = this.stack[this.stack.length - 1];\n        states = tp.dfa[0];\n        first = tp.dfa[1];\n        arcs = states[tp.state];\n\n        // look for a state with this label\n        for (a = 0; a < arcs.length; ++a) {\n            i = arcs[a][0];\n            newstate = arcs[a][1];\n            t = this.grammar.labels[i][0];\n            v = this.grammar.labels[i][1];\n            if (ilabel === i) {\n                // look it up in the list of labels\n                Sk.asserts.assert(t < 256);\n                // shift a token; we're done with it\n                this.shift(type, value, newstate, context);\n                // pop while we are in an accept-only state\n                state = newstate;\n                //print(\"before:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\n                /* jshint ignore:start */\n                while (\n                    states[state].length === 1 &&\n                    states[state][0][0] === 0 &&\n                    states[state][0][1] === state\n                ) {\n                    // states[state] == [(0, state)])\n                    this.pop();\n                    //print(\"in after pop:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\n                    if (this.stack.length === 0) {\n                        // done!\n                        return true;\n                    }\n                    tp = this.stack[this.stack.length - 1];\n                    state = tp.state;\n                    states = tp.dfa[0];\n                    first = tp.dfa[1];\n                    //print(JSON.stringify(states), JSON.stringify(first));\n                    //print(\"bottom:\"+JSON.stringify(states[state]) + \":state:\"+state+\":\"+JSON.stringify(states[state]));\n                }\n                /* jshint ignore:end */\n                // done with this token\n                //print(\"DONE, return false\");\n                return false;\n            } else if (t >= 256) {\n                itsdfa = this.grammar.dfas[t];\n                itsfirst = itsdfa[1];\n                if (itsfirst.hasOwnProperty(ilabel)) {\n                    // push a symbol\n                    this.push(t, this.grammar.dfas[t], newstate, context);\n                    continue OUTERWHILE;\n                }\n            }\n        }\n\n        //print(\"findInDfa: \" + JSON.stringify(arcs)+\" vs. \" + tp.state);\n        if (findInDfa(arcs, [0, tp.state])) {\n            // an accepting state, pop it and try something else\n            //print(\"WAA\");\n            this.pop();\n            if (this.stack.length === 0) {\n                throw new Sk.builtin.SyntaxError(\n                    \"too much input\",\n                    this.filename,\n                    ...flatten_context(context)\n                );\n            }\n        } else {\n            // no transition\n            throw new Sk.builtin.SyntaxError(\n                \"bad input\",\n                this.filename,\n                ...flatten_context(context)\n            );\n        }\n    }\n};\n\nfunction flatten_context(context) {\n    return [context[2], context[0][0], context[0][1], context[1][0], context[1][1]];\n}\n\n// turn a token into a label\nParser.prototype.classify = function (type, value, context) {\n    var ilabel;\n    if (type === Sk.token.tokens.T_NAME) {\n        this.used_names[value] = true;\n        ilabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];\n\n        /* Check for handling print as a builtin function */\n        if (\n            value === \"print\" &&\n            (this.p_flags & Parser.CO_FUTURE_PRINT_FUNCTION ||\n                Sk.__future__.print_function === true)\n        ) {\n            ilabel = false; // ilabel determines if the value is a keyword\n        }\n\n        if (ilabel) {\n            //print(\"is keyword\");\n            return ilabel;\n        }\n    }\n    ilabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];\n    if (!ilabel) {\n        // throw new Sk.builtin.SyntaxError(\"bad token\", type, value, context);\n        // Questionable modification to put line number in position 2\n        // like everywhere else and filename in position 1.\n        let descr = \"#\" + type;\n        for (let i in Sk.token.tokens) {\n            if (Sk.token.tokens[i] == type) {\n                descr = i;\n                break;\n            }\n        }\n\n        throw new Sk.builtin.SyntaxError(\n            \"bad token \" + descr,\n            this.filename,\n            ...flatten_context(context)\n        );\n    }\n    return ilabel;\n};\n\n// shift a token\nParser.prototype.shift = function (type, value, newstate, context) {\n    var dfa = this.stack[this.stack.length - 1].dfa;\n    var state = this.stack[this.stack.length - 1].state;\n    var node = this.stack[this.stack.length - 1].node;\n    //print(\"context\", context);\n    var newnode = {\n        type: type,\n        value: value,\n        lineno: context[0][0],\n        col_offset: context[0][1],\n        end_lineno: context[1][0],\n        end_col_offset: context[1][1],\n        children: null,\n    };\n    if (newnode) {\n        node.children.push(newnode);\n    }\n    this.stack[this.stack.length - 1] = {\n        dfa: dfa,\n        state: newstate,\n        node: node,\n    };\n};\n\n// push a nonterminal\nParser.prototype.push = function (type, newdfa, newstate, context) {\n    var dfa = this.stack[this.stack.length - 1].dfa;\n    var node = this.stack[this.stack.length - 1].node;\n    var newnode = {\n        type: type,\n        value: null,\n        lineno: context[0][0],\n        col_offset: context[0][1],\n        end_lineno: context[1][0],\n        end_col_offset: context[1][1],\n        children: [],\n    };\n    this.stack[this.stack.length - 1] = {\n        dfa: dfa,\n        state: newstate,\n        node: node,\n    };\n    this.stack.push({\n        dfa: newdfa,\n        state: 0,\n        node: newnode,\n    });\n};\n\n//var ac = 0;\n//var bc = 0;\n\n// pop a nonterminal\nParser.prototype.pop = function () {\n    var node;\n    var pop = this.stack.pop();\n    var newnode = pop.node;\n    //print(\"POP\");\n    if (newnode) {\n        //print(\"A\", ac++, newnode.type);\n        //print(\"stacklen:\"+this.stack.length);\n        if (this.stack.length !== 0) {\n            //print(\"B\", bc++);\n            node = this.stack[this.stack.length - 1].node;\n            node.children.push(newnode);\n        } else {\n            //print(\"C\");\n            this.rootnode = newnode;\n            this.rootnode.used_names = this.used_names;\n        }\n    }\n};\n\n/**\n * parser for interactive input. returns a function that should be called with\n * lines of input as they are entered. the function will return false\n * until the input is complete, when it will return the rootnode of the parse.\n *\n * @param {string} filename\n * @param {string=} style root of parse tree (optional)\n */\nfunction makeParser(filename, style) {\n    if (style === undefined) {\n        style = \"file_input\";\n    }\n    var p = new Parser(filename, Sk.ParseTables);\n    // for closure's benefit\n    if (style === \"file_input\") {\n        p.setup(Sk.ParseTables.sym.file_input);\n    } else {\n        Sk.asserts.fail(\"todo;\");\n    }\n    return p;\n}\n\nSk.parse = function parse(filename, input) {\n    var T_COMMENT = Sk.token.tokens.T_COMMENT;\n    var T_NL = Sk.token.tokens.T_NL;\n    var T_OP = Sk.token.tokens.T_OP;\n    var T_ENDMARKER = Sk.token.tokens.T_ENDMARKER;\n    var T_ENCODING = Sk.token.tokens.T_ENCODING;\n\n    var endmarker_seen = false;\n    var parser = makeParser(filename);\n    var totalLines = 0;\n\n    /**\n     * takes a string splits it on '\\n' and returns a function that returns\n     * @param {Array<string>} input\n     * @returns {function(): string}\n     */\n    function readline(input) {\n        let lines = input.split(\"\\n\");\n        Sk.parse.linecache[filename] = lines.slice();\n        lines = lines.reverse();\n        totalLines = lines.length;\n\n        return function () {\n            if (lines.length === 0) {\n                throw new Sk.builtin.Exception(\"EOF\");\n            }\n\n            return lines.pop() + \"\\n\";\n        };\n    }\n\n    Sk._tokenize(\n        readline(input),\n        \"utf-8\",\n        function (tokenInfo) {\n            var s_lineno = tokenInfo.start[0];\n            var s_column = tokenInfo.start[1];\n            var type = null;\n            var prefix, lineno, column;\n\n            /* I don't know\n         if (s_lineno !== lineno && s_column !== column)\n         {\n         // todo; update prefix and line/col\n         }\n         */\n\n            if (\n                tokenInfo.type === T_COMMENT ||\n                tokenInfo.type === T_NL ||\n                tokenInfo.type === T_ENCODING\n            ) {\n                prefix += tokenInfo.value;\n                lineno = tokenInfo.end[0];\n                column = tokenInfo.end[1];\n                if (tokenInfo.string[tokenInfo.string.length - 1] === \"\\n\") {\n                    lineno += 1;\n                    column = 0;\n                }\n\n                if (tokenInfo.type === T_COMMENT) {\n                    parser.addcomment(\n                        tokenInfo.string,\n                        tokenInfo.start,\n                        tokenInfo.end,\n                        tokenInfo.line\n                    );\n                }\n            } else {\n                if (tokenInfo.type === T_OP) {\n                    type = Sk.OpMap[tokenInfo.string];\n                }\n\n                parser.addtoken(type || tokenInfo.type, tokenInfo.string, [\n                    tokenInfo.start,\n                    tokenInfo.end,\n                    tokenInfo.line,\n                ]);\n\n                if (tokenInfo.type === T_ENDMARKER) {\n                    endmarker_seen = true;\n                }\n            }\n        },\n        filename\n    );\n\n    if (!endmarker_seen) {\n        throw new Sk.builtin.SyntaxError(\n            \"incomplete input\",\n            this.filename,\n            \"\",\n            0,\n            0,\n            totalLines,\n            0\n        );\n    }\n\n    /**\n     * Small adjustments here in order to return th flags and the cst\n     */\n    var result = { cst: parser.rootnode, flags: parser.p_flags, comments: parser.comments };\n    return result;\n};\n\nSk.parse.linecache = {};\n\nSk.parseTreeDump = function parseTreeDump(n, indent) {\n    //return JSON.stringify(n, null, 2);\n    var i;\n    var ret;\n    indent = indent || \"\";\n    ret = \"\";\n    ret += indent;\n    if (n.type >= 256) {\n        // non-term\n        ret += Sk.ParseTables.number2symbol[n.type] + \"\\n\";\n        for (i = 0; i < n.children.length; ++i) {\n            ret += Sk.parseTreeDump(n.children[i], indent + \"  \");\n        }\n    } else {\n        ret += Sk.token.tok_name[n.type] + \": \" + new Sk.builtin.str(n.value)[\"$r\"]().v + \"\\n\";\n    }\n    return ret;\n};\n\nSk.exportSymbol(\"Sk.Parser\", Parser);\nSk.exportSymbol(\"Sk.parse\", Sk.parse);\nSk.exportSymbol(\"Sk.parseTreeDump\", Sk.parseTreeDump);\nSk.exportSymbol(\"Sk.parse.linecache\", Sk.parse.linecache);\n", "/* File automatically generated by asdl_js.py. */\n\n/* Object that holds all nodes */\nSk.astnodes = {};\n\n/* ----- expr_context ----- */\n/** @constructor */\nSk.astnodes.Load = function Load() {}\n/** @constructor */\nSk.astnodes.Store = function Store() {}\n/** @constructor */\nSk.astnodes.Del = function Del() {}\n/** @constructor */\nSk.astnodes.AugLoad = function AugLoad() {}\n/** @constructor */\nSk.astnodes.AugStore = function AugStore() {}\n/** @constructor */\nSk.astnodes.Param = function Param() {}\n\n/* ----- boolop ----- */\n/** @constructor */\nSk.astnodes.And = function And() {}\n/** @constructor */\nSk.astnodes.Or = function Or() {}\n\n/* ----- operator ----- */\n/** @constructor */\nSk.astnodes.Add = function Add() {}\n/** @constructor */\nSk.astnodes.Sub = function Sub() {}\n/** @constructor */\nSk.astnodes.Mult = function Mult() {}\n/** @constructor */\nSk.astnodes.MatMult = function MatMult() {}\n/** @constructor */\nSk.astnodes.Div = function Div() {}\n/** @constructor */\nSk.astnodes.Mod = function Mod() {}\n/** @constructor */\nSk.astnodes.Pow = function Pow() {}\n/** @constructor */\nSk.astnodes.LShift = function LShift() {}\n/** @constructor */\nSk.astnodes.RShift = function RShift() {}\n/** @constructor */\nSk.astnodes.BitOr = function BitOr() {}\n/** @constructor */\nSk.astnodes.BitXor = function BitXor() {}\n/** @constructor */\nSk.astnodes.BitAnd = function BitAnd() {}\n/** @constructor */\nSk.astnodes.FloorDiv = function FloorDiv() {}\n\n/* ----- unaryop ----- */\n/** @constructor */\nSk.astnodes.Invert = function Invert() {}\n/** @constructor */\nSk.astnodes.Not = function Not() {}\n/** @constructor */\nSk.astnodes.UAdd = function UAdd() {}\n/** @constructor */\nSk.astnodes.USub = function USub() {}\n\n/* ----- cmpop ----- */\n/** @constructor */\nSk.astnodes.Eq = function Eq() {}\n/** @constructor */\nSk.astnodes.NotEq = function NotEq() {}\n/** @constructor */\nSk.astnodes.Lt = function Lt() {}\n/** @constructor */\nSk.astnodes.LtE = function LtE() {}\n/** @constructor */\nSk.astnodes.Gt = function Gt() {}\n/** @constructor */\nSk.astnodes.GtE = function GtE() {}\n/** @constructor */\nSk.astnodes.Is = function Is() {}\n/** @constructor */\nSk.astnodes.IsNot = function IsNot() {}\n/** @constructor */\nSk.astnodes.In = function In() {}\n/** @constructor */\nSk.astnodes.NotIn = function NotIn() {}\n\n\n\n\n\n\n\n/* ---------------------- */\n/* constructors for nodes */\n/* ---------------------- */\n\n\n\n\n\n/** @constructor */\nSk.astnodes.Module = function Module(/* {asdl_seq *} */ body, /* {string} */\n                                          docstring)\n{\n    this.body = body;\n    this.docstring = docstring;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Interactive = function Interactive(/* {asdl_seq *} */ body)\n{\n    this.body = body;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Expression = function Expression(/* {expr_ty} */ body)\n{\n    this.body = body;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Suite = function Suite(/* {asdl_seq *} */ body)\n{\n    this.body = body;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.FunctionDef = function FunctionDef(/* {identifier} */ name, /*\n                                                    {arguments__ty} */ args, /*\n                                                    {asdl_seq *} */ body, /*\n                                                    {asdl_seq *} */\n                                                    decorator_list, /*\n                                                    {expr_ty} */ returns, /*\n                                                    {string} */ docstring, /*\n                                                    {int} */ lineno, /* {int}\n                                                    */ col_offset, /* {int} */\n                                                    end_lineno, /* {int} */\n                                                    end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.name = name;\n    this.args = args;\n    this.body = body;\n    this.decorator_list = decorator_list;\n    this.returns = returns;\n    this.docstring = docstring;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.AsyncFunctionDef = function AsyncFunctionDef(/* {identifier} */\n                                                              name, /*\n                                                              {arguments__ty}\n                                                              */ args, /*\n                                                              {asdl_seq *} */\n                                                              body, /*\n                                                              {asdl_seq *} */\n                                                              decorator_list,\n                                                              /* {expr_ty} */\n                                                              returns, /*\n                                                              {string} */\n                                                              docstring, /*\n                                                              {int} */ lineno,\n                                                              /* {int} */\n                                                              col_offset, /*\n                                                              {int} */\n                                                              end_lineno, /*\n                                                              {int} */\n                                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.name = name;\n    this.args = args;\n    this.body = body;\n    this.decorator_list = decorator_list;\n    this.returns = returns;\n    this.docstring = docstring;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.ClassDef = function ClassDef(/* {identifier} */ name, /* {asdl_seq\n                                              *} */ bases, /* {asdl_seq *} */\n                                              keywords, /* {asdl_seq *} */\n                                              body, /* {asdl_seq *} */\n                                              decorator_list, /* {string} */\n                                              docstring, /* {int} */ lineno, /*\n                                              {int} */ col_offset, /* {int} */\n                                              end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.name = name;\n    this.bases = bases;\n    this.keywords = keywords;\n    this.body = body;\n    this.decorator_list = decorator_list;\n    this.docstring = docstring;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Return = function Return(/* {expr_ty} */ value, /* {int} */ lineno,\n                                          /* {int} */ col_offset, /* {int} */\n                                          end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Delete = function Delete(/* {asdl_seq *} */ targets, /* {int} */\n                                          lineno, /* {int} */ col_offset, /*\n                                          {int} */ end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.targets = targets;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Assign = function Assign(/* {asdl_seq *} */ targets, /* {expr_ty}\n                                          */ value, /* {int} */ lineno, /*\n                                          {int} */ col_offset, /* {int} */\n                                          end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.targets = targets;\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.AugAssign = function AugAssign(/* {expr_ty} */ target, /*\n                                                {operator_ty} */ op, /*\n                                                {expr_ty} */ value, /* {int} */\n                                                lineno, /* {int} */ col_offset,\n                                                /* {int} */ end_lineno, /*\n                                                {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.target = target;\n    this.op = op;\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.AnnAssign = function AnnAssign(/* {expr_ty} */ target, /* {expr_ty}\n                                                */ annotation, /* {expr_ty} */\n                                                value, /* {int} */ simple, /*\n                                                {int} */ lineno, /* {int} */\n                                                col_offset, /* {int} */\n                                                end_lineno, /* {int} */\n                                                end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.target = target;\n    this.annotation = annotation;\n    this.value = value;\n    this.simple = simple;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.For = function For(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*\n                                    {asdl_seq *} */ body, /* {asdl_seq *} */\n                                    orelse, /* {int} */ lineno, /* {int} */\n                                    col_offset, /* {int} */ end_lineno, /*\n                                    {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.target = target;\n    this.iter = iter;\n    this.body = body;\n    this.orelse = orelse;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.AsyncFor = function AsyncFor(/* {expr_ty} */ target, /* {expr_ty}\n                                              */ iter, /* {asdl_seq *} */ body,\n                                              /* {asdl_seq *} */ orelse, /*\n                                              {int} */ lineno, /* {int} */\n                                              col_offset, /* {int} */\n                                              end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.target = target;\n    this.iter = iter;\n    this.body = body;\n    this.orelse = orelse;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.While = function While(/* {expr_ty} */ test, /* {asdl_seq *} */\n                                        body, /* {asdl_seq *} */ orelse, /*\n                                        {int} */ lineno, /* {int} */\n                                        col_offset, /* {int} */ end_lineno, /*\n                                        {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.test = test;\n    this.body = body;\n    this.orelse = orelse;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.If = function If(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /*\n                                  {asdl_seq *} */ orelse, /* {int} */ lineno,\n                                  /* {int} */ col_offset, /* {int} */\n                                  end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.test = test;\n    this.body = body;\n    this.orelse = orelse;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.With = function With(/* {asdl_seq *} */ items, /* {asdl_seq *} */\n                                      body, /* {int} */ lineno, /* {int} */\n                                      col_offset, /* {int} */ end_lineno, /*\n                                      {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.items = items;\n    this.body = body;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.AsyncWith = function AsyncWith(/* {asdl_seq *} */ items, /*\n                                                {asdl_seq *} */ body, /* {int}\n                                                */ lineno, /* {int} */\n                                                col_offset, /* {int} */\n                                                end_lineno, /* {int} */\n                                                end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.items = items;\n    this.body = body;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Raise = function Raise(/* {expr_ty} */ exc, /* {expr_ty} */ cause,\n                                        /* {expr_ty} */ inst, /* {expr_ty} */\n                                        tback, /* {int} */ lineno, /* {int} */\n                                        col_offset, /* {int} */ end_lineno, /*\n                                        {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.exc = exc;\n    this.cause = cause;\n    this.inst = inst;\n    this.tback = tback;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Try = function Try(/* {asdl_seq *} */ body, /* {asdl_seq *} */\n                                    handlers, /* {asdl_seq *} */ orelse, /*\n                                    {asdl_seq *} */ finalbody, /* {int} */\n                                    lineno, /* {int} */ col_offset, /* {int} */\n                                    end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.body = body;\n    this.handlers = handlers;\n    this.orelse = orelse;\n    this.finalbody = finalbody;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Assert = function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg,\n                                          /* {int} */ lineno, /* {int} */\n                                          col_offset, /* {int} */ end_lineno,\n                                          /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.test = test;\n    this.msg = msg;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Import = function Import(/* {asdl_seq *} */ names, /* {int} */\n                                          lineno, /* {int} */ col_offset, /*\n                                          {int} */ end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.names = names;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.ImportFrom = function ImportFrom(/* {identifier} */ module, /*\n                                                  {asdl_seq *} */ names, /*\n                                                  {int} */ level, /* {int} */\n                                                  lineno, /* {int} */\n                                                  col_offset, /* {int} */\n                                                  end_lineno, /* {int} */\n                                                  end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.module = module;\n    this.names = names;\n    this.level = level;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Global = function Global(/* {asdl_seq *} */ names, /* {int} */\n                                          lineno, /* {int} */ col_offset, /*\n                                          {int} */ end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.names = names;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Nonlocal = function Nonlocal(/* {asdl_seq *} */ names, /* {int} */\n                                              lineno, /* {int} */ col_offset,\n                                              /* {int} */ end_lineno, /* {int}\n                                              */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.names = names;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Expr = function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /*\n                                      {int} */ col_offset, /* {int} */\n                                      end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Pass = function Pass(/* {int} */ lineno, /* {int} */ col_offset, /*\n                                      {int} */ end_lineno, /* {int} */\n                                      end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Break = function Break(/* {int} */ lineno, /* {int} */ col_offset,\n                                        /* {int} */ end_lineno, /* {int} */\n                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Continue = function Continue(/* {int} */ lineno, /* {int} */\n                                              col_offset, /* {int} */\n                                              end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Print = function Print(/* {expr_ty} */ dest, /* {asdl_seq *} */\n                                        values, /* {int} */ nl, /* {int} */\n                                        lineno, /* {int} */ col_offset, /*\n                                        {int} */ end_lineno, /* {int} */\n                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.dest = dest;\n    this.values = values;\n    this.nl = nl;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Debugger = function Debugger(/* {int} */ lineno, /* {int} */\n                                              col_offset, /* {int} */\n                                              end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.BoolOp = function BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */\n                                          values, /* {int} */ lineno, /* {int}\n                                          */ col_offset, /* {int} */\n                                          end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.op = op;\n    this.values = values;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.BinOp = function BinOp(/* {expr_ty} */ left, /* {operator_ty} */\n                                        op, /* {expr_ty} */ right, /* {int} */\n                                        lineno, /* {int} */ col_offset, /*\n                                        {int} */ end_lineno, /* {int} */\n                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.left = left;\n    this.op = op;\n    this.right = right;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.UnaryOp = function UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */\n                                            operand, /* {int} */ lineno, /*\n                                            {int} */ col_offset, /* {int} */\n                                            end_lineno, /* {int} */\n                                            end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.op = op;\n    this.operand = operand;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Lambda = function Lambda(/* {arguments__ty} */ args, /* {expr_ty}\n                                          */ body, /* {int} */ lineno, /* {int}\n                                          */ col_offset, /* {int} */\n                                          end_lineno, /* {int} */\n                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.args = args;\n    this.body = body;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.IfExp = function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body,\n                                        /* {expr_ty} */ orelse, /* {int} */\n                                        lineno, /* {int} */ col_offset, /*\n                                        {int} */ end_lineno, /* {int} */\n                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.test = test;\n    this.body = body;\n    this.orelse = orelse;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Dict = function Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */\n                                      values, /* {int} */ lineno, /* {int} */\n                                      col_offset, /* {int} */ end_lineno, /*\n                                      {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.keys = keys;\n    this.values = values;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Set = function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /*\n                                    {int} */ col_offset, /* {int} */\n                                    end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elts = elts;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.ListComp = function ListComp(/* {expr_ty} */ elt, /* {asdl_seq *}\n                                              */ generators, /* {int} */\n                                              lineno, /* {int} */ col_offset,\n                                              /* {int} */ end_lineno, /* {int}\n                                              */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elt = elt;\n    this.generators = generators;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.SetComp = function SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */\n                                            generators, /* {int} */ lineno, /*\n                                            {int} */ col_offset, /* {int} */\n                                            end_lineno, /* {int} */\n                                            end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elt = elt;\n    this.generators = generators;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.DictComp = function DictComp(/* {expr_ty} */ key, /* {expr_ty} */\n                                              value, /* {asdl_seq *} */\n                                              generators, /* {int} */ lineno,\n                                              /* {int} */ col_offset, /* {int}\n                                              */ end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.key = key;\n    this.value = value;\n    this.generators = generators;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.GeneratorExp = function GeneratorExp(/* {expr_ty} */ elt, /*\n                                                      {asdl_seq *} */\n                                                      generators, /* {int} */\n                                                      lineno, /* {int} */\n                                                      col_offset, /* {int} */\n                                                      end_lineno, /* {int} */\n                                                      end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elt = elt;\n    this.generators = generators;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Await = function Await(/* {expr_ty} */ value, /* {int} */ lineno,\n                                        /* {int} */ col_offset, /* {int} */\n                                        end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Yield = function Yield(/* {expr_ty} */ value, /* {int} */ lineno,\n                                        /* {int} */ col_offset, /* {int} */\n                                        end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.YieldFrom = function YieldFrom(/* {expr_ty} */ value, /* {int} */\n                                                lineno, /* {int} */ col_offset,\n                                                /* {int} */ end_lineno, /*\n                                                {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Compare = function Compare(/* {expr_ty} */ left, /* {asdl_int_seq\n                                            *} */ ops, /* {asdl_seq *} */\n                                            comparators, /* {int} */ lineno, /*\n                                            {int} */ col_offset, /* {int} */\n                                            end_lineno, /* {int} */\n                                            end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.left = left;\n    this.ops = ops;\n    this.comparators = comparators;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Call = function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args,\n                                      /* {asdl_seq *} */ keywords, /* {int} */\n                                      lineno, /* {int} */ col_offset, /* {int}\n                                      */ end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.func = func;\n    this.args = args;\n    this.keywords = keywords;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Num = function Num(/* {object} */ n, /* {int} */ lineno, /* {int}\n                                    */ col_offset, /* {int} */ end_lineno, /*\n                                    {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.n = n;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Str = function Str(/* {string} */ s, /* {int} */ lineno, /* {int}\n                                    */ col_offset, /* {int} */ end_lineno, /*\n                                    {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.s = s;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.FormattedValue = function FormattedValue(/* {expr_ty} */ value, /*\n                                                          {int} */ conversion,\n                                                          /* {expr_ty} */\n                                                          format_spec, /* {int}\n                                                          */ lineno, /* {int}\n                                                          */ col_offset, /*\n                                                          {int} */ end_lineno,\n                                                          /* {int} */\n                                                          end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.conversion = conversion;\n    this.format_spec = format_spec;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.JoinedStr = function JoinedStr(/* {asdl_seq *} */ values, /* {int}\n                                                */ lineno, /* {int} */\n                                                col_offset, /* {int} */\n                                                end_lineno, /* {int} */\n                                                end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.values = values;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Bytes = function Bytes(/* {bytes} */ s, /* {int} */ lineno, /*\n                                        {int} */ col_offset, /* {int} */\n                                        end_lineno, /* {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.s = s;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.NameConstant = function NameConstant(/* {singleton} */ value, /*\n                                                      {int} */ lineno, /* {int}\n                                                      */ col_offset, /* {int}\n                                                      */ end_lineno, /* {int}\n                                                      */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Ellipsis = function Ellipsis(/* {int} */ lineno, /* {int} */\n                                              col_offset, /* {int} */\n                                              end_lineno, /* {int} */\n                                              end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Constant = function Constant(/* {constant} */ value, /* {int} */\n                                              lineno, /* {int} */ col_offset,\n                                              /* {int} */ end_lineno, /* {int}\n                                              */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Attribute = function Attribute(/* {expr_ty} */ value, /*\n                                                {identifier} */ attr, /*\n                                                {expr_context_ty} */ ctx, /*\n                                                {int} */ lineno, /* {int} */\n                                                col_offset, /* {int} */\n                                                end_lineno, /* {int} */\n                                                end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.attr = attr;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Subscript = function Subscript(/* {expr_ty} */ value, /* {slice_ty}\n                                                */ slice, /* {expr_context_ty}\n                                                */ ctx, /* {int} */ lineno, /*\n                                                {int} */ col_offset, /* {int}\n                                                */ end_lineno, /* {int} */\n                                                end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.slice = slice;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Starred = function Starred(/* {expr_ty} */ value, /*\n                                            {expr_context_ty} */ ctx, /* {int}\n                                            */ lineno, /* {int} */ col_offset,\n                                            /* {int} */ end_lineno, /* {int} */\n                                            end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.value = value;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Name = function Name(/* {identifier} */ id, /* {expr_context_ty} */\n                                      ctx, /* {int} */ lineno, /* {int} */\n                                      col_offset, /* {int} */ end_lineno, /*\n                                      {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.id = id;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.List = function List(/* {asdl_seq *} */ elts, /* {expr_context_ty}\n                                      */ ctx, /* {int} */ lineno, /* {int} */\n                                      col_offset, /* {int} */ end_lineno, /*\n                                      {int} */ end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elts = elts;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Tuple = function Tuple(/* {asdl_seq *} */ elts, /*\n                                        {expr_context_ty} */ ctx, /* {int} */\n                                        lineno, /* {int} */ col_offset, /*\n                                        {int} */ end_lineno, /* {int} */\n                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.elts = elts;\n    this.ctx = ctx;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Slice = function Slice(/* {expr_ty} */ lower, /* {expr_ty} */\n                                        upper, /* {expr_ty} */ step)\n{\n    this.lower = lower;\n    this.upper = upper;\n    this.step = step;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.ExtSlice = function ExtSlice(/* {asdl_seq *} */ dims)\n{\n    this.dims = dims;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.Index = function Index(/* {expr_ty} */ value)\n{\n    this.value = value;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.comprehension = function comprehension(/* {expr_ty} */ target, /*\n                                                        {expr_ty} */ iter, /*\n                                                        {asdl_seq *} */ ifs, /*\n                                                        {int} */ is_async)\n{\n    this.target = target;\n    this.iter = iter;\n    this.ifs = ifs;\n    this.is_async = is_async;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.ExceptHandler = function ExceptHandler(/* {expr_ty} */ type, /*\n                                                        {identifier} */ name,\n                                                        /* {asdl_seq *} */\n                                                        body, /* {int} */\n                                                        lineno, /* {int} */\n                                                        col_offset, /* {int} */\n                                                        end_lineno, /* {int} */\n                                                        end_col_offset)\n{\n    Sk.asserts.assert(lineno !== null && lineno !== undefined);\n    Sk.asserts.assert(col_offset !== null && col_offset !== undefined);\n    Sk.asserts.assert(end_lineno !== null && end_lineno !== undefined);\n    Sk.asserts.assert(end_col_offset !== null && end_col_offset !== undefined);\n    this.type = type;\n    this.name = name;\n    this.body = body;\n    this.lineno = lineno;\n    this.col_offset = col_offset;\n    this.end_lineno = end_lineno;\n    this.end_col_offset = end_col_offset;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.arguments_ = function arguments_(/* {asdl_seq *} */ args, /*\n                                                  {arg_ty} */ vararg, /*\n                                                  {asdl_seq *} */ kwonlyargs,\n                                                  /* {asdl_seq *} */\n                                                  kw_defaults, /* {arg_ty} */\n                                                  kwarg, /* {asdl_seq *} */\n                                                  defaults)\n{\n    this.args = args;\n    this.vararg = vararg;\n    this.kwonlyargs = kwonlyargs;\n    this.kw_defaults = kw_defaults;\n    this.kwarg = kwarg;\n    this.defaults = defaults;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.arg = function arg(/* {identifier} */ arg, /* {expr_ty} */\n                                    annotation)\n{\n    this.arg = arg;\n    this.annotation = annotation;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.keyword = function keyword(/* {identifier} */ arg, /* {expr_ty} */\n                                            value)\n{\n    this.arg = arg;\n    this.value = value;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.alias = function alias(/* {identifier} */ name, /* {identifier} */\n                                        asname)\n{\n    this.name = name;\n    this.asname = asname;\n    return this;\n}\n\n/** @constructor */\nSk.astnodes.withitem = function withitem(/* {expr_ty} */ context_expr, /*\n                                              {expr_ty} */ optional_vars)\n{\n    this.context_expr = context_expr;\n    this.optional_vars = optional_vars;\n    return this;\n}\n\n\nSk.astnodes.Module.prototype._astname = \"Module\";\nSk.astnodes.Module.prototype._fields = [\n    \"body\", function(n) { return n.body; },\n    \"docstring\", function(n) { return n.docstring; }\n];\nSk.astnodes.Interactive.prototype._astname = \"Interactive\";\nSk.astnodes.Interactive.prototype._fields = [\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.Expression.prototype._astname = \"Expression\";\nSk.astnodes.Expression.prototype._fields = [\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.Suite.prototype._astname = \"Suite\";\nSk.astnodes.Suite.prototype._fields = [\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.FunctionDef.prototype._astname = \"FunctionDef\";\nSk.astnodes.FunctionDef.prototype._fields = [\n    \"name\", function(n) { return n.name; },\n    \"args\", function(n) { return n.args; },\n    \"body\", function(n) { return n.body; },\n    \"decorator_list\", function(n) { return n.decorator_list; },\n    \"returns\", function(n) { return n.returns; },\n    \"docstring\", function(n) { return n.docstring; }\n];\nSk.astnodes.AsyncFunctionDef.prototype._astname = \"AsyncFunctionDef\";\nSk.astnodes.AsyncFunctionDef.prototype._fields = [\n    \"name\", function(n) { return n.name; },\n    \"args\", function(n) { return n.args; },\n    \"body\", function(n) { return n.body; },\n    \"decorator_list\", function(n) { return n.decorator_list; },\n    \"returns\", function(n) { return n.returns; },\n    \"docstring\", function(n) { return n.docstring; }\n];\nSk.astnodes.ClassDef.prototype._astname = \"ClassDef\";\nSk.astnodes.ClassDef.prototype._fields = [\n    \"name\", function(n) { return n.name; },\n    \"bases\", function(n) { return n.bases; },\n    \"keywords\", function(n) { return n.keywords; },\n    \"body\", function(n) { return n.body; },\n    \"decorator_list\", function(n) { return n.decorator_list; },\n    \"docstring\", function(n) { return n.docstring; }\n];\nSk.astnodes.Return.prototype._astname = \"Return\";\nSk.astnodes.Return.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Delete.prototype._astname = \"Delete\";\nSk.astnodes.Delete.prototype._fields = [\n    \"targets\", function(n) { return n.targets; }\n];\nSk.astnodes.Assign.prototype._astname = \"Assign\";\nSk.astnodes.Assign.prototype._fields = [\n    \"targets\", function(n) { return n.targets; },\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.AugAssign.prototype._astname = \"AugAssign\";\nSk.astnodes.AugAssign.prototype._fields = [\n    \"target\", function(n) { return n.target; },\n    \"op\", function(n) { return n.op; },\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.AnnAssign.prototype._astname = \"AnnAssign\";\nSk.astnodes.AnnAssign.prototype._fields = [\n    \"target\", function(n) { return n.target; },\n    \"annotation\", function(n) { return n.annotation; },\n    \"value\", function(n) { return n.value; },\n    \"simple\", function(n) { return n.simple; }\n];\nSk.astnodes.For.prototype._astname = \"For\";\nSk.astnodes.For.prototype._fields = [\n    \"target\", function(n) { return n.target; },\n    \"iter\", function(n) { return n.iter; },\n    \"body\", function(n) { return n.body; },\n    \"orelse\", function(n) { return n.orelse; }\n];\nSk.astnodes.AsyncFor.prototype._astname = \"AsyncFor\";\nSk.astnodes.AsyncFor.prototype._fields = [\n    \"target\", function(n) { return n.target; },\n    \"iter\", function(n) { return n.iter; },\n    \"body\", function(n) { return n.body; },\n    \"orelse\", function(n) { return n.orelse; }\n];\nSk.astnodes.While.prototype._astname = \"While\";\nSk.astnodes.While.prototype._fields = [\n    \"test\", function(n) { return n.test; },\n    \"body\", function(n) { return n.body; },\n    \"orelse\", function(n) { return n.orelse; }\n];\nSk.astnodes.If.prototype._astname = \"If\";\nSk.astnodes.If.prototype._fields = [\n    \"test\", function(n) { return n.test; },\n    \"body\", function(n) { return n.body; },\n    \"orelse\", function(n) { return n.orelse; }\n];\nSk.astnodes.With.prototype._astname = \"With\";\nSk.astnodes.With.prototype._fields = [\n    \"items\", function(n) { return n.items; },\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.AsyncWith.prototype._astname = \"AsyncWith\";\nSk.astnodes.AsyncWith.prototype._fields = [\n    \"items\", function(n) { return n.items; },\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.Raise.prototype._astname = \"Raise\";\nSk.astnodes.Raise.prototype._fields = [\n    \"exc\", function(n) { return n.exc; },\n    \"cause\", function(n) { return n.cause; },\n    \"inst\", function(n) { return n.inst; },\n    \"tback\", function(n) { return n.tback; }\n];\nSk.astnodes.Try.prototype._astname = \"Try\";\nSk.astnodes.Try.prototype._fields = [\n    \"body\", function(n) { return n.body; },\n    \"handlers\", function(n) { return n.handlers; },\n    \"orelse\", function(n) { return n.orelse; },\n    \"finalbody\", function(n) { return n.finalbody; }\n];\nSk.astnodes.Assert.prototype._astname = \"Assert\";\nSk.astnodes.Assert.prototype._fields = [\n    \"test\", function(n) { return n.test; },\n    \"msg\", function(n) { return n.msg; }\n];\nSk.astnodes.Import.prototype._astname = \"Import\";\nSk.astnodes.Import.prototype._fields = [\n    \"names\", function(n) { return n.names; }\n];\nSk.astnodes.ImportFrom.prototype._astname = \"ImportFrom\";\nSk.astnodes.ImportFrom.prototype._fields = [\n    \"module\", function(n) { return n.module; },\n    \"names\", function(n) { return n.names; },\n    \"level\", function(n) { return n.level; }\n];\nSk.astnodes.Global.prototype._astname = \"Global\";\nSk.astnodes.Global.prototype._fields = [\n    \"names\", function(n) { return n.names; }\n];\nSk.astnodes.Nonlocal.prototype._astname = \"Nonlocal\";\nSk.astnodes.Nonlocal.prototype._fields = [\n    \"names\", function(n) { return n.names; }\n];\nSk.astnodes.Expr.prototype._astname = \"Expr\";\nSk.astnodes.Expr.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Pass.prototype._astname = \"Pass\";\nSk.astnodes.Pass.prototype._fields = [\n];\nSk.astnodes.Break.prototype._astname = \"Break\";\nSk.astnodes.Break.prototype._fields = [\n];\nSk.astnodes.Continue.prototype._astname = \"Continue\";\nSk.astnodes.Continue.prototype._fields = [\n];\nSk.astnodes.Print.prototype._astname = \"Print\";\nSk.astnodes.Print.prototype._fields = [\n    \"dest\", function(n) { return n.dest; },\n    \"values\", function(n) { return n.values; },\n    \"nl\", function(n) { return n.nl; }\n];\nSk.astnodes.Debugger.prototype._astname = \"Debugger\";\nSk.astnodes.Debugger.prototype._fields = [\n];\nSk.astnodes.BoolOp.prototype._astname = \"BoolOp\";\nSk.astnodes.BoolOp.prototype._fields = [\n    \"op\", function(n) { return n.op; },\n    \"values\", function(n) { return n.values; }\n];\nSk.astnodes.BinOp.prototype._astname = \"BinOp\";\nSk.astnodes.BinOp.prototype._fields = [\n    \"left\", function(n) { return n.left; },\n    \"op\", function(n) { return n.op; },\n    \"right\", function(n) { return n.right; }\n];\nSk.astnodes.UnaryOp.prototype._astname = \"UnaryOp\";\nSk.astnodes.UnaryOp.prototype._fields = [\n    \"op\", function(n) { return n.op; },\n    \"operand\", function(n) { return n.operand; }\n];\nSk.astnodes.Lambda.prototype._astname = \"Lambda\";\nSk.astnodes.Lambda.prototype._fields = [\n    \"args\", function(n) { return n.args; },\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.IfExp.prototype._astname = \"IfExp\";\nSk.astnodes.IfExp.prototype._fields = [\n    \"test\", function(n) { return n.test; },\n    \"body\", function(n) { return n.body; },\n    \"orelse\", function(n) { return n.orelse; }\n];\nSk.astnodes.Dict.prototype._astname = \"Dict\";\nSk.astnodes.Dict.prototype._fields = [\n    \"keys\", function(n) { return n.keys; },\n    \"values\", function(n) { return n.values; }\n];\nSk.astnodes.Set.prototype._astname = \"Set\";\nSk.astnodes.Set.prototype._fields = [\n    \"elts\", function(n) { return n.elts; }\n];\nSk.astnodes.ListComp.prototype._astname = \"ListComp\";\nSk.astnodes.ListComp.prototype._fields = [\n    \"elt\", function(n) { return n.elt; },\n    \"generators\", function(n) { return n.generators; }\n];\nSk.astnodes.SetComp.prototype._astname = \"SetComp\";\nSk.astnodes.SetComp.prototype._fields = [\n    \"elt\", function(n) { return n.elt; },\n    \"generators\", function(n) { return n.generators; }\n];\nSk.astnodes.DictComp.prototype._astname = \"DictComp\";\nSk.astnodes.DictComp.prototype._fields = [\n    \"key\", function(n) { return n.key; },\n    \"value\", function(n) { return n.value; },\n    \"generators\", function(n) { return n.generators; }\n];\nSk.astnodes.GeneratorExp.prototype._astname = \"GeneratorExp\";\nSk.astnodes.GeneratorExp.prototype._fields = [\n    \"elt\", function(n) { return n.elt; },\n    \"generators\", function(n) { return n.generators; }\n];\nSk.astnodes.Await.prototype._astname = \"Await\";\nSk.astnodes.Await.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Yield.prototype._astname = \"Yield\";\nSk.astnodes.Yield.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.YieldFrom.prototype._astname = \"YieldFrom\";\nSk.astnodes.YieldFrom.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Compare.prototype._astname = \"Compare\";\nSk.astnodes.Compare.prototype._fields = [\n    \"left\", function(n) { return n.left; },\n    \"ops\", function(n) { return n.ops; },\n    \"comparators\", function(n) { return n.comparators; }\n];\nSk.astnodes.Call.prototype._astname = \"Call\";\nSk.astnodes.Call.prototype._fields = [\n    \"func\", function(n) { return n.func; },\n    \"args\", function(n) { return n.args; },\n    \"keywords\", function(n) { return n.keywords; }\n];\nSk.astnodes.Num.prototype._astname = \"Num\";\nSk.astnodes.Num.prototype._fields = [\n    \"n\", function(n) { return n.n; }\n];\nSk.astnodes.Str.prototype._astname = \"Str\";\nSk.astnodes.Str.prototype._fields = [\n    \"s\", function(n) { return n.s; }\n];\nSk.astnodes.FormattedValue.prototype._astname = \"FormattedValue\";\nSk.astnodes.FormattedValue.prototype._fields = [\n    \"value\", function(n) { return n.value; },\n    \"conversion\", function(n) { return n.conversion; },\n    \"format_spec\", function(n) { return n.format_spec; }\n];\nSk.astnodes.JoinedStr.prototype._astname = \"JoinedStr\";\nSk.astnodes.JoinedStr.prototype._fields = [\n    \"values\", function(n) { return n.values; }\n];\nSk.astnodes.Bytes.prototype._astname = \"Bytes\";\nSk.astnodes.Bytes.prototype._fields = [\n    \"s\", function(n) { return n.s; }\n];\nSk.astnodes.NameConstant.prototype._astname = \"NameConstant\";\nSk.astnodes.NameConstant.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Ellipsis.prototype._astname = \"Ellipsis\";\nSk.astnodes.Ellipsis.prototype._fields = [\n];\nSk.astnodes.Constant.prototype._astname = \"Constant\";\nSk.astnodes.Constant.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.Attribute.prototype._astname = \"Attribute\";\nSk.astnodes.Attribute.prototype._fields = [\n    \"value\", function(n) { return n.value; },\n    \"attr\", function(n) { return n.attr; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.Subscript.prototype._astname = \"Subscript\";\nSk.astnodes.Subscript.prototype._fields = [\n    \"value\", function(n) { return n.value; },\n    \"slice\", function(n) { return n.slice; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.Starred.prototype._astname = \"Starred\";\nSk.astnodes.Starred.prototype._fields = [\n    \"value\", function(n) { return n.value; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.Name.prototype._astname = \"Name\";\nSk.astnodes.Name.prototype._fields = [\n    \"id\", function(n) { return n.id; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.List.prototype._astname = \"List\";\nSk.astnodes.List.prototype._fields = [\n    \"elts\", function(n) { return n.elts; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.Tuple.prototype._astname = \"Tuple\";\nSk.astnodes.Tuple.prototype._fields = [\n    \"elts\", function(n) { return n.elts; },\n    \"ctx\", function(n) { return n.ctx; }\n];\nSk.astnodes.Load.prototype._astname = \"Load\";\nSk.astnodes.Load.prototype._isenum = true;\nSk.astnodes.Store.prototype._astname = \"Store\";\nSk.astnodes.Store.prototype._isenum = true;\nSk.astnodes.Del.prototype._astname = \"Del\";\nSk.astnodes.Del.prototype._isenum = true;\nSk.astnodes.AugLoad.prototype._astname = \"AugLoad\";\nSk.astnodes.AugLoad.prototype._isenum = true;\nSk.astnodes.AugStore.prototype._astname = \"AugStore\";\nSk.astnodes.AugStore.prototype._isenum = true;\nSk.astnodes.Param.prototype._astname = \"Param\";\nSk.astnodes.Param.prototype._isenum = true;\nSk.astnodes.Slice.prototype._astname = \"Slice\";\nSk.astnodes.Slice.prototype._fields = [\n    \"lower\", function(n) { return n.lower; },\n    \"upper\", function(n) { return n.upper; },\n    \"step\", function(n) { return n.step; }\n];\nSk.astnodes.ExtSlice.prototype._astname = \"ExtSlice\";\nSk.astnodes.ExtSlice.prototype._fields = [\n    \"dims\", function(n) { return n.dims; }\n];\nSk.astnodes.Index.prototype._astname = \"Index\";\nSk.astnodes.Index.prototype._fields = [\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.And.prototype._astname = \"And\";\nSk.astnodes.And.prototype._isenum = true;\nSk.astnodes.Or.prototype._astname = \"Or\";\nSk.astnodes.Or.prototype._isenum = true;\nSk.astnodes.Add.prototype._astname = \"Add\";\nSk.astnodes.Add.prototype._isenum = true;\nSk.astnodes.Sub.prototype._astname = \"Sub\";\nSk.astnodes.Sub.prototype._isenum = true;\nSk.astnodes.Mult.prototype._astname = \"Mult\";\nSk.astnodes.Mult.prototype._isenum = true;\nSk.astnodes.MatMult.prototype._astname = \"MatMult\";\nSk.astnodes.MatMult.prototype._isenum = true;\nSk.astnodes.Div.prototype._astname = \"Div\";\nSk.astnodes.Div.prototype._isenum = true;\nSk.astnodes.Mod.prototype._astname = \"Mod\";\nSk.astnodes.Mod.prototype._isenum = true;\nSk.astnodes.Pow.prototype._astname = \"Pow\";\nSk.astnodes.Pow.prototype._isenum = true;\nSk.astnodes.LShift.prototype._astname = \"LShift\";\nSk.astnodes.LShift.prototype._isenum = true;\nSk.astnodes.RShift.prototype._astname = \"RShift\";\nSk.astnodes.RShift.prototype._isenum = true;\nSk.astnodes.BitOr.prototype._astname = \"BitOr\";\nSk.astnodes.BitOr.prototype._isenum = true;\nSk.astnodes.BitXor.prototype._astname = \"BitXor\";\nSk.astnodes.BitXor.prototype._isenum = true;\nSk.astnodes.BitAnd.prototype._astname = \"BitAnd\";\nSk.astnodes.BitAnd.prototype._isenum = true;\nSk.astnodes.FloorDiv.prototype._astname = \"FloorDiv\";\nSk.astnodes.FloorDiv.prototype._isenum = true;\nSk.astnodes.Invert.prototype._astname = \"Invert\";\nSk.astnodes.Invert.prototype._isenum = true;\nSk.astnodes.Not.prototype._astname = \"Not\";\nSk.astnodes.Not.prototype._isenum = true;\nSk.astnodes.UAdd.prototype._astname = \"UAdd\";\nSk.astnodes.UAdd.prototype._isenum = true;\nSk.astnodes.USub.prototype._astname = \"USub\";\nSk.astnodes.USub.prototype._isenum = true;\nSk.astnodes.Eq.prototype._astname = \"Eq\";\nSk.astnodes.Eq.prototype._isenum = true;\nSk.astnodes.NotEq.prototype._astname = \"NotEq\";\nSk.astnodes.NotEq.prototype._isenum = true;\nSk.astnodes.Lt.prototype._astname = \"Lt\";\nSk.astnodes.Lt.prototype._isenum = true;\nSk.astnodes.LtE.prototype._astname = \"LtE\";\nSk.astnodes.LtE.prototype._isenum = true;\nSk.astnodes.Gt.prototype._astname = \"Gt\";\nSk.astnodes.Gt.prototype._isenum = true;\nSk.astnodes.GtE.prototype._astname = \"GtE\";\nSk.astnodes.GtE.prototype._isenum = true;\nSk.astnodes.Is.prototype._astname = \"Is\";\nSk.astnodes.Is.prototype._isenum = true;\nSk.astnodes.IsNot.prototype._astname = \"IsNot\";\nSk.astnodes.IsNot.prototype._isenum = true;\nSk.astnodes.In.prototype._astname = \"In\";\nSk.astnodes.In.prototype._isenum = true;\nSk.astnodes.NotIn.prototype._astname = \"NotIn\";\nSk.astnodes.NotIn.prototype._isenum = true;\nSk.astnodes.comprehension.prototype._astname = \"comprehension\";\nSk.astnodes.comprehension.prototype._fields = [\n    \"target\", function(n) { return n.target; },\n    \"iter\", function(n) { return n.iter; },\n    \"ifs\", function(n) { return n.ifs; },\n    \"is_async\", function(n) { return n.is_async; }\n];\nSk.astnodes.ExceptHandler.prototype._astname = \"ExceptHandler\";\nSk.astnodes.ExceptHandler.prototype._fields = [\n    \"type\", function(n) { return n.type; },\n    \"name\", function(n) { return n.name; },\n    \"body\", function(n) { return n.body; }\n];\nSk.astnodes.arguments_.prototype._astname = \"arguments\";\nSk.astnodes.arguments_.prototype._fields = [\n    \"args\", function(n) { return n.args; },\n    \"vararg\", function(n) { return n.vararg; },\n    \"kwonlyargs\", function(n) { return n.kwonlyargs; },\n    \"kw_defaults\", function(n) { return n.kw_defaults; },\n    \"kwarg\", function(n) { return n.kwarg; },\n    \"defaults\", function(n) { return n.defaults; }\n];\nSk.astnodes.arg.prototype._astname = \"arg\";\nSk.astnodes.arg.prototype._fields = [\n    \"arg\", function(n) { return n.arg; },\n    \"annotation\", function(n) { return n.annotation; }\n];\nSk.astnodes.keyword.prototype._astname = \"keyword\";\nSk.astnodes.keyword.prototype._fields = [\n    \"arg\", function(n) { return n.arg; },\n    \"value\", function(n) { return n.value; }\n];\nSk.astnodes.alias.prototype._astname = \"alias\";\nSk.astnodes.alias.prototype._fields = [\n    \"name\", function(n) { return n.name; },\n    \"asname\", function(n) { return n.asname; }\n];\nSk.astnodes.withitem.prototype._astname = \"withitem\";\nSk.astnodes.withitem.prototype._fields = [\n    \"context_expr\", function(n) { return n.context_expr; },\n    \"optional_vars\", function(n) { return n.optional_vars; }\n];\n\nSk.exportSymbol(\"Sk.astnodes\", Sk.astnodes);\n", "//\n// This is pretty much a straight port of ast.c from CPython 3.7.3\n// (with a few leftovers from 2.6.5).\n//\n// The previous version was easier to work with and more JS-ish, but having a\n// somewhat different ast structure than cpython makes testing more difficult.\n//\n// This way, we can use a dump from the ast module on any arbitrary python\n// code and know that we're the same up to ast level, at least.\n//\n\nvar SYM = Sk.ParseTables.sym;\nvar TOK = Sk.token.tokens;\nvar COMP_GENEXP = 0;\nvar COMP_LISTCOMP = 1;\nvar COMP_SETCOMP = 2;\nvar NULL = null;\nvar _slice_kind = {\n    Slice_kind: 1,\n    ExtSlice_kind: 2,\n    Index_kind: 3,\n};\n\nvar _expr_kind = {\n    BoolOp_kind: 1,\n    NamedExpr_kind: 2,\n    BinOp_kind: 3,\n    UnaryOp_kind: 4,\n    Lambda_kind: 5,\n    IfExp_kind: 6,\n    Dict_kind: 7,\n    Set_kind: 8,\n    ListComp_kind: 9,\n    SetComp_kind: 10,\n    DictComp_kind: 11,\n    GeneratorExp_kind: 12,\n    Await_kind: 13,\n    Yield_kind: 14,\n    YieldFrom_kind: 15,\n    Compare_kind: 16,\n    Call_kind: 17,\n    FormattedValue_kind: 18,\n    JoinedStr_kind: 19,\n    Constant_kind: 20,\n    Attribute_kind: 21,\n    Subscript_kind: 22,\n    Starred_kind: 23,\n    Name_kind: 24,\n    List_kind: 25,\n    Tuple_kind: 26,\n};\n\n/** @constructor */\nfunction Compiling(encoding, filename, c_flags) {\n    this.c_encoding = encoding;\n    this.c_filename = filename;\n    this.c_flags = c_flags || 0;\n}\n\n/**\n * @return {number}\n */\nfunction NCH(n) {\n    Sk.asserts.assert(n !== undefined, \"node must be defined\");\n    if (n.children === null) {\n        return 0;\n    }\n    return n.children.length;\n}\n\nfunction CHILD(n, i) {\n    Sk.asserts.assert(n !== undefined, \"node must be defined\");\n    Sk.asserts.assert(i !== undefined, \"index of child must be specified\");\n    return n.children[i];\n}\n\nfunction REQ(n, type) {\n    Sk.asserts.assert(n.type === type, \"node wasn't expected type\");\n}\n\nfunction TYPE(n) {\n    return n.type;\n}\n\nfunction LINENO(n) {\n    return n.lineno;\n}\n\nfunction STR(ch) {\n    return ch.value;\n}\n\nfunction ast_error(c, n, msg) {\n    throw new Sk.builtin.SyntaxError(msg, c.c_filename, ...get_context(n));\n}\n\nfunction strobj(s) {\n    Sk.asserts.assert(typeof s === \"string\", \"expecting string, got \" + typeof s);\n    return new Sk.builtin.str(s);\n}\n\n/** @return {number} */\nfunction numStmts(n) {\n    var ch;\n    var i;\n    var cnt;\n    switch (n.type) {\n        case SYM.single_input:\n            if (CHILD(n, 0).type === TOK.T_NEWLINE) {\n                return 0;\n            } else {\n                return numStmts(CHILD(n, 0));\n            }\n        case SYM.file_input:\n            cnt = 0;\n            for (i = 0; i < NCH(n); ++i) {\n                ch = CHILD(n, i);\n                if (ch.type === SYM.stmt) {\n                    cnt += numStmts(ch);\n                }\n            }\n            return cnt;\n        case SYM.stmt:\n            return numStmts(CHILD(n, 0));\n        case SYM.compound_stmt:\n            return 1;\n        case SYM.simple_stmt:\n            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s\n        case SYM.suite:\n            if (NCH(n) === 1) {\n                return numStmts(CHILD(n, 0));\n            } else {\n                cnt = 0;\n                for (i = 2; i < NCH(n) - 1; ++i) {\n                    cnt += numStmts(CHILD(n, i));\n                }\n                return cnt;\n            }\n            break;\n        default:\n            Sk.asserts.fail(\"Non-statement found\");\n    }\n    return 0;\n}\n\nfunction forbiddenCheck(c, n, x, lineno) {\n    if (x instanceof Sk.builtin.str) {\n        x = x.v;\n    }\n    if (x === \"None\") {\n        throw new Sk.builtin.SyntaxError(\"assignment to None\", c.c_filename, ...get_context(n));\n    }\n    if (x === \"True\" || x === \"False\") {\n        throw new Sk.builtin.SyntaxError(\n            \"assignment to True or False is forbidden\",\n            c.c_filename,\n            ...get_context(n)\n        );\n    }\n}\n\nfunction get_context(n) {\n    // TODO: The first element should be the actual line of code!\n    return [\"\", n.lineno, n.col_offset || 0, n.end_lineno || n.lineno, n.end_col_offset || 0];\n}\n\n/**\n * Set the context ctx for e, recursively traversing e.\n *\n * Only sets context for expr kinds that can appear in assignment context as\n * per the asdl file.\n */\nfunction setContext(c, e, ctx, n) {\n    var i;\n    var exprName;\n    var s;\n    Sk.asserts.assert(\n        ctx !== Sk.astnodes.AugStore && ctx !== Sk.astnodes.AugLoad,\n        \"context not AugStore or AugLoad\"\n    );\n    s = null;\n    exprName = null;\n\n    switch (e.constructor) {\n        case Sk.astnodes.Attribute:\n        case Sk.astnodes.Name:\n            if (ctx === Sk.astnodes.Store) {\n                forbiddenCheck(c, n, e.attr, n.lineno);\n            }\n            e.ctx = ctx;\n            break;\n        case Sk.astnodes.Starred:\n            e.ctx = ctx;\n            setContext(c, e.value, ctx, n);\n            break;\n        case Sk.astnodes.Subscript:\n            e.ctx = ctx;\n            break;\n        case Sk.astnodes.List:\n            e.ctx = ctx;\n            s = e.elts;\n            break;\n        case Sk.astnodes.Tuple:\n            if (e.elts.length === 0) {\n                throw new Sk.builtin.SyntaxError(\n                    \"can't assign to ()\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            }\n            e.ctx = ctx;\n            s = e.elts;\n            break;\n        case Sk.astnodes.Lambda:\n            exprName = \"lambda\";\n            break;\n        case Sk.astnodes.Call:\n            exprName = \"function call\";\n            break;\n        case Sk.astnodes.BoolOp:\n        case Sk.astnodes.BinOp:\n        case Sk.astnodes.UnaryOp:\n            exprName = \"operator\";\n            break;\n        case Sk.astnodes.GeneratorExp:\n            exprName = \"generator expression\";\n            break;\n        case Sk.astnodes.Yield:\n            exprName = \"yield expression\";\n            break;\n        case Sk.astnodes.ListComp:\n            exprName = \"list comprehension\";\n            break;\n        case Sk.astnodes.SetComp:\n            exprName = \"set comprehension\";\n            break;\n        case Sk.astnodes.DictComp:\n            exprName = \"dict comprehension\";\n            break;\n        case Sk.astnodes.Dict:\n        case Sk.astnodes.Set:\n        case Sk.astnodes.Num:\n        case Sk.astnodes.Str:\n            exprName = \"literal\";\n            break;\n        case Sk.astnodes.NameConstant:\n            exprName = \"True, False or None\";\n            break;\n        case Sk.astnodes.Compare:\n            exprName = \"comparison\";\n            break;\n        case Sk.astnodes.Repr:\n            exprName = \"repr\";\n            break;\n        case Sk.astnodes.IfExp:\n            exprName = \"conditional expression\";\n            break;\n        default:\n            Sk.asserts.fail(\"unhandled expression in assignment\");\n    }\n    if (exprName) {\n        throw new Sk.builtin.SyntaxError(\n            \"can't \" + (ctx === Sk.astnodes.Store ? \"assign to\" : \"delete\") + \" \" + exprName,\n            c.c_filename,\n            ...get_context(n)\n        );\n    }\n\n    if (s) {\n        for (i = 0; i < s.length; ++i) {\n            setContext(c, s[i], ctx, n);\n        }\n    }\n}\n\nvar operatorMap = {};\n(function () {\n    operatorMap[TOK.T_VBAR] = Sk.astnodes.BitOr;\n    operatorMap[TOK.T_CIRCUMFLEX] = Sk.astnodes.BitXor;\n    operatorMap[TOK.T_AMPER] = Sk.astnodes.BitAnd;\n    operatorMap[TOK.T_LEFTSHIFT] = Sk.astnodes.LShift;\n    operatorMap[TOK.T_RIGHTSHIFT] = Sk.astnodes.RShift;\n    operatorMap[TOK.T_PLUS] = Sk.astnodes.Add;\n    operatorMap[TOK.T_MINUS] = Sk.astnodes.Sub;\n    operatorMap[TOK.T_STAR] = Sk.astnodes.Mult;\n    operatorMap[TOK.T_SLASH] = Sk.astnodes.Div;\n    operatorMap[TOK.T_DOUBLESLASH] = Sk.astnodes.FloorDiv;\n    operatorMap[TOK.T_PERCENT] = Sk.astnodes.Mod;\n})();\n\nSk.setupOperators = function (py3) {\n    if (py3) {\n        operatorMap[TOK.T_AT] = Sk.astnodes.MatMult;\n    } else {\n        if (operatorMap[TOK.T_AT]) {\n            delete operatorMap[TOK.T_AT];\n        }\n    }\n};\nSk.exportSymbol(\"Sk.setupOperators\", Sk.setupOperators);\n\nfunction getOperator(n) {\n    if (operatorMap[n.type] === undefined) {\n        throw new Sk.builtin.SyntaxError(\"invalid syntax\", n.type, ...get_context(n));\n    }\n    return operatorMap[n.type];\n}\n\nfunction new_identifier(n, c) {\n    if (n.value) {\n        return new Sk.builtin.str(n.value);\n    }\n\n    return new Sk.builtin.str(n);\n}\n\nfunction astForCompOp(c, n) {\n    /* comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'\n     |'is' 'not'\n     */\n    REQ(n, SYM.comp_op);\n    if (NCH(n) === 1) {\n        n = CHILD(n, 0);\n        switch (n.type) {\n            case TOK.T_LESS:\n                return Sk.astnodes.Lt;\n            case TOK.T_GREATER:\n                return Sk.astnodes.Gt;\n            case TOK.T_EQEQUAL:\n                return Sk.astnodes.Eq;\n            case TOK.T_LESSEQUAL:\n                return Sk.astnodes.LtE;\n            case TOK.T_GREATEREQUAL:\n                return Sk.astnodes.GtE;\n            case TOK.T_NOTEQUAL:\n                return Sk.astnodes.NotEq;\n            case TOK.T_NAME:\n                if (n.value === \"in\") {\n                    return Sk.astnodes.In;\n                }\n                if (n.value === \"is\") {\n                    return Sk.astnodes.Is;\n                }\n        }\n    } else if (NCH(n) === 2) {\n        if (CHILD(n, 0).type === TOK.T_NAME) {\n            if (CHILD(n, 1).value === \"in\") {\n                return Sk.astnodes.NotIn;\n            }\n            if (CHILD(n, 0).value === \"is\") {\n                return Sk.astnodes.IsNot;\n            }\n        }\n    }\n    Sk.asserts.fail(\"invalid comp_op\");\n}\n\nfunction copy_location(e, n) {\n    if (e) {\n        e.lineno = LINENO(n);\n        e.col_offset = n.col_offset;\n        e.end_lineno = n.end_lineno;\n        e.end_col_offset = n.end_col_offset;\n    }\n    return e;\n}\n\nfunction seq_for_testlist(c, n) {\n    /* testlist: test (',' test)* [',']\n       testlist_star_expr: test|star_expr (',' test|star_expr)* [',']\n    */\n    var i;\n    var seq = [];\n    Sk.asserts.assert(\n        n.type === SYM.testlist ||\n            n.type === SYM.testlist_star_expr ||\n            n.type === SYM.listmaker ||\n            n.type === SYM.testlist_comp ||\n            n.type === SYM.testlist_safe ||\n            n.type === SYM.testlist1,\n        \"node type must be listlike\"\n    );\n    for (i = 0; i < NCH(n); i += 2) {\n        Sk.asserts.assert(\n            CHILD(n, i).type === SYM.test ||\n                CHILD(n, i).type === SYM.old_test ||\n                CHILD(n, i).type === SYM.star_expr\n        );\n        seq[i / 2] = ast_for_expr(c, CHILD(n, i));\n    }\n    return seq;\n}\n\nfunction astForSuite(c, n) {\n    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */\n    var j;\n    var num;\n    var i;\n    var end;\n    var ch;\n    var pos;\n    var seq;\n    REQ(n, SYM.suite);\n    seq = [];\n    pos = 0;\n    if (CHILD(n, 0).type === SYM.simple_stmt) {\n        n = CHILD(n, 0);\n        /* simple_stmt always ends with an NEWLINE and may have a trailing\n         * SEMI. */\n        end = NCH(n) - 1;\n        if (CHILD(n, end - 1).type === TOK.T_SEMI) {\n            end -= 1;\n        }\n        for (i = 0; i < end; i += 2) {\n            // by 2 to skip ;\n            seq[pos++] = astForStmt(c, CHILD(n, i));\n        }\n    } else {\n        for (i = 2; i < NCH(n) - 1; ++i) {\n            ch = CHILD(n, i);\n            REQ(ch, SYM.stmt);\n            num = numStmts(ch);\n            if (num === 1) {\n                // small_stmt or compound_stmt w/ only 1 child\n                seq[pos++] = astForStmt(c, ch);\n            } else {\n                ch = CHILD(ch, 0);\n                REQ(ch, SYM.simple_stmt);\n                for (j = 0; j < NCH(ch); j += 2) {\n                    if (NCH(CHILD(ch, j)) === 0) {\n                        Sk.asserts.assert(j + 1 === NCH(ch));\n                        break;\n                    }\n                    seq[pos++] = astForStmt(c, CHILD(ch, j));\n                }\n            }\n        }\n    }\n    Sk.asserts.assert(pos === numStmts(n));\n    return seq;\n}\n\nfunction astForExceptClause(c, exc, body) {\n    /* except_clause: 'except' [test [(',' | 'as') test]] */\n    var e;\n    REQ(exc, SYM.except_clause);\n    REQ(body, SYM.suite);\n    if (NCH(exc) === 1) {\n        return new Sk.astnodes.ExceptHandler(\n            null,\n            null,\n            astForSuite(c, body),\n            exc.lineno,\n            exc.col_offset,\n            exc.end_lineno,\n            exc.end_col_offset\n        );\n    } else if (NCH(exc) === 2) {\n        return new Sk.astnodes.ExceptHandler(\n            ast_for_expr(c, CHILD(exc, 1)),\n            null,\n            astForSuite(c, body),\n            exc.lineno,\n            exc.col_offset,\n            exc.end_lineno,\n            exc.end_col_offset\n        );\n    } else if (NCH(exc) === 4) {\n        if (Sk.__future__.python3 && CHILD(exc, 2).value == \",\") {\n            ast_error(c, exc, \"Old-style 'except' clauses are not supported in Python 3\");\n        }\n\n        var expression = ast_for_expr(c, CHILD(exc, 1));\n        e = ast_for_expr(c, CHILD(exc, 3));\n        setContext(c, e, Sk.astnodes.Store, CHILD(exc, 3));\n        return new Sk.astnodes.ExceptHandler(\n            ast_for_expr(c, CHILD(exc, 1)),\n            e,\n            astForSuite(c, body),\n            exc.lineno,\n            exc.col_offset,\n            exc.end_lineno,\n            exc.end_col_offset\n        );\n    }\n    Sk.asserts.fail(\"wrong number of children for except clause\");\n}\n\nfunction astForTryStmt(c, n) {\n    var exceptSt;\n    var i;\n    var handlers = [];\n    var nc = NCH(n);\n    var nexcept = (nc - 3) / 3;\n    var body,\n        orelse = [],\n        finally_ = null;\n\n    REQ(n, SYM.try_stmt);\n    body = astForSuite(c, CHILD(n, 2));\n    if (CHILD(n, nc - 3).type === TOK.T_NAME) {\n        if (CHILD(n, nc - 3).value === \"finally\") {\n            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {\n                /* we can assume it's an \"else\",\n                 because nc >= 9 for try-else-finally and\n                 it would otherwise have a type of except_clause */\n                orelse = astForSuite(c, CHILD(n, nc - 4));\n                nexcept--;\n            }\n\n            finally_ = astForSuite(c, CHILD(n, nc - 1));\n            nexcept--;\n        } else {\n            /* we can assume it's an \"else\",\n             otherwise it would have a type of except_clause */\n            orelse = astForSuite(c, CHILD(n, nc - 1));\n            nexcept--;\n        }\n    } else if (CHILD(n, nc - 3).type !== SYM.except_clause) {\n        throw new Sk.builtin.SyntaxError(\n            \"malformed 'try' statement\",\n            c.c_filename,\n            ...get_context(n)\n        );\n    }\n\n    if (nexcept > 0) {\n        /* process except statements to create a try ... except */\n        for (i = 0; i < nexcept; i++) {\n            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));\n        }\n    }\n\n    Sk.asserts.assert(!!finally_ || handlers.length != 0);\n    return new Sk.astnodes.Try(\n        body,\n        handlers,\n        orelse,\n        finally_,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForDottedName(c, n) {\n    var i;\n    var e;\n    var id;\n    var col_offset;\n    var lineno;\n    REQ(n, SYM.dotted_name);\n    lineno = n.lineno;\n    col_offset = n.col_offset;\n    id = strobj(CHILD(n, 0).value);\n    e = new Sk.astnodes.Name(\n        id,\n        Sk.astnodes.Load,\n        lineno,\n        col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n    for (i = 2; i < NCH(n); i += 2) {\n        id = strobj(CHILD(n, i).value);\n        e = new Sk.astnodes.Attribute(\n            e,\n            id,\n            Sk.astnodes.Load,\n            lineno,\n            col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n    return e;\n}\n\nfunction astForDecorator(c, n) {\n    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */\n    var nameExpr;\n    REQ(n, SYM.decorator);\n    REQ(CHILD(n, 0), TOK.T_AT);\n    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);\n    nameExpr = astForDottedName(c, CHILD(n, 1));\n    if (NCH(n) === 3) {\n        // no args\n        return nameExpr;\n    } else if (NCH(n) === 5) {\n        // call with no args\n        return new Sk.astnodes.Call(\n            nameExpr,\n            [],\n            [],\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else {\n        return ast_for_call(c, CHILD(n, 3), nameExpr);\n    }\n}\n\nfunction astForDecorators(c, n) {\n    var i;\n    var decoratorSeq;\n    REQ(n, SYM.decorators);\n    decoratorSeq = [];\n    for (i = 0; i < NCH(n); ++i) {\n        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));\n    }\n    return decoratorSeq;\n}\n\nfunction ast_for_decorated(c, n) {\n    /* decorated: decorators (classdef | funcdef | async_funcdef) */\n    var thing = null;\n    var decorator_seq = null;\n\n    REQ(n, SYM.decorated);\n\n    decorator_seq = astForDecorators(c, CHILD(n, 0));\n    Sk.asserts.assert(\n        TYPE(CHILD(n, 1)) == SYM.funcdef ||\n            TYPE(CHILD(n, 1)) == SYM.async_funcdef ||\n            TYPE(CHILD(n, 1)) == SYM.classdef\n    );\n\n    if (TYPE(CHILD(n, 1)) == SYM.funcdef) {\n        thing = ast_for_funcdef(c, CHILD(n, 1), decorator_seq);\n    } else if (TYPE(CHILD(n, 1)) == SYM.classdef) {\n        thing = astForClassdef(c, CHILD(n, 1), decorator_seq);\n    } else if (TYPE(CHILD(n, 1)) == SYM.async_funcdef) {\n        thing = ast_for_async_funcdef(c, CHILD(n, 1), decorator_seq);\n    }\n    /* we count the decorators in when talking about the class' or\n     * function's line number */\n    if (thing) {\n        thing.lineno = LINENO(n);\n        thing.col_offset = n.col_offset;\n    }\n    return thing;\n}\n\n/* with_item: test ['as' expr] */\nfunction ast_for_with_item(c, n) {\n    var context_expr, optional_vars;\n    REQ(n, SYM.with_item);\n    context_expr = ast_for_expr(c, CHILD(n, 0));\n    if (NCH(n) == 3) {\n        optional_vars = ast_for_expr(c, CHILD(n, 2));\n        setContext(c, optional_vars, Sk.astnodes.Store, n);\n    }\n\n    return new Sk.astnodes.withitem(context_expr, optional_vars);\n}\n\n/* with_stmt: 'with' with_item (',' with_item)* ':' suite */\nfunction ast_for_with_stmt(c, n0, is_async) {\n    const n = is_async ? CHILD(n0, 1) : n0;\n    var i;\n    var items = [],\n        body;\n\n    REQ(n, SYM.with_stmt);\n\n    for (i = 1; i < NCH(n) - 2; i += 2) {\n        var item = ast_for_with_item(c, CHILD(n, i));\n        items[(i - 1) / 2] = item;\n    }\n\n    body = astForSuite(c, CHILD(n, NCH(n) - 1));\n\n    if (is_async) {\n        return new Sk.astnodes.AsyncWith(\n            items,\n            body,\n            LINENO(n0),\n            n0.col_offset,\n            n0.end_lineno,\n            n0.end_col_offset\n        );\n    } else {\n        return new Sk.astnodes.With(\n            items,\n            body,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n}\n\nfunction astForExecStmt(c, n) {\n    var expr1,\n        globals = null,\n        locals = null;\n    var nchildren = NCH(n);\n    Sk.asserts.assert(nchildren === 2 || nchildren === 4 || nchildren === 6);\n\n    /* exec_stmt: 'exec' expr ['in' test [',' test]] */\n    REQ(n, SYM.exec_stmt);\n    expr1 = ast_for_expr(c, CHILD(n, 1));\n    if (nchildren >= 4) {\n        globals = ast_for_expr(c, CHILD(n, 3));\n    }\n    if (nchildren === 6) {\n        locals = ast_for_expr(c, CHILD(n, 5));\n    }\n    return new Sk.astnodes.Exec(\n        expr1,\n        globals,\n        locals,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForIfStmt(c, n) {\n    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*\n     ['else' ':' suite]\n     */\n    var off;\n    var i;\n    var orelse;\n    var hasElse;\n    var nElif;\n    var decider;\n    var s;\n    REQ(n, SYM.if_stmt);\n    if (NCH(n) === 4) {\n        return new Sk.astnodes.If(\n            ast_for_expr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            [],\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n\n    s = CHILD(n, 4).value;\n    decider = s.charAt(2); // elSe or elIf\n    if (decider === \"s\") {\n        return new Sk.astnodes.If(\n            ast_for_expr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            astForSuite(c, CHILD(n, 6)),\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (decider === \"i\") {\n        nElif = NCH(n) - 4;\n        hasElse = false;\n        orelse = [];\n\n        /* must reference the child nElif+1 since 'else' token is third, not\n         * fourth child from the end. */\n        if (\n            CHILD(n, nElif + 1).type === TOK.T_NAME &&\n            CHILD(n, nElif + 1).value.charAt(2) === \"s\"\n        ) {\n            hasElse = true;\n            nElif -= 3;\n        }\n        nElif /= 4;\n\n        if (hasElse) {\n            orelse = [\n                new Sk.astnodes.If(\n                    ast_for_expr(c, CHILD(n, NCH(n) - 6)),\n                    astForSuite(c, CHILD(n, NCH(n) - 4)),\n                    astForSuite(c, CHILD(n, NCH(n) - 1)),\n                    CHILD(n, NCH(n) - 6).lineno,\n                    CHILD(n, NCH(n) - 6).col_offset,\n                    CHILD(n, NCH(n) - 6).end_lineno,\n                    CHILD(n, NCH(n) - 6).end_col_offset\n                ),\n            ];\n            nElif--;\n        }\n\n        for (i = 0; i < nElif; ++i) {\n            off = 5 + (nElif - i - 1) * 4;\n            orelse = [\n                new Sk.astnodes.If(\n                    ast_for_expr(c, CHILD(n, off)),\n                    astForSuite(c, CHILD(n, off + 2)),\n                    orelse,\n                    CHILD(n, off).lineno,\n                    CHILD(n, off).col_offset,\n                    CHILD(n, NCH(n) - 6).end_lineno,\n                    CHILD(n, NCH(n) - 6).end_col_offset\n                ),\n            ];\n        }\n        return new Sk.astnodes.If(\n            ast_for_expr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            orelse,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n\n    Sk.asserts.fail(\"unexpected token in 'if' statement\");\n}\n\nfunction ast_for_exprlist(c, n, context) {\n    var e;\n    var i;\n    var seq;\n    REQ(n, SYM.exprlist);\n    seq = [];\n    for (i = 0; i < NCH(n); i += 2) {\n        e = ast_for_expr(c, CHILD(n, i));\n        seq[i / 2] = e;\n        if (context) {\n            setContext(c, e, context, CHILD(n, i));\n        }\n    }\n    return seq;\n}\n\nfunction astForDelStmt(c, n) {\n    /* del_stmt: 'del' exprlist */\n    REQ(n, SYM.del_stmt);\n    return new Sk.astnodes.Delete(\n        ast_for_exprlist(c, CHILD(n, 1), Sk.astnodes.Del),\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForGlobalStmt(c, n) {\n    /* global_stmt: 'global' NAME (',' NAME)* */\n    var i;\n    var s = [];\n    REQ(n, SYM.global_stmt);\n    for (i = 1; i < NCH(n); i += 2) {\n        s[(i - 1) / 2] = strobj(CHILD(n, i).value);\n    }\n    return new Sk.astnodes.Global(s, n.lineno, n.col_offset, n.end_lineno, n.end_col_offset);\n}\n\nfunction astForAssertStmt(c, n) {\n    /* assert_stmt: 'assert' test [',' test] */\n    REQ(n, SYM.assert_stmt);\n    if (NCH(n) === 2) {\n        return new Sk.astnodes.Assert(\n            ast_for_expr(c, CHILD(n, 1)),\n            null,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (NCH(n) === 4) {\n        return new Sk.astnodes.Assert(\n            ast_for_expr(c, CHILD(n, 1)),\n            ast_for_expr(c, CHILD(n, 3)),\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n    Sk.asserts.fail(\"improper number of parts to assert stmt\");\n}\n\nfunction aliasForImportName(c, n) {\n    /*\n     import_as_name: NAME ['as' NAME]\n     dotted_as_name: dotted_name ['as' NAME]\n     dotted_name: NAME ('.' NAME)*\n     */\n\n    var i;\n    var a;\n    var name;\n    var str;\n    loop: while (true) {\n        switch (n.type) {\n            case SYM.import_as_name:\n                str = null;\n                name = strobj(CHILD(n, 0).value);\n                if (NCH(n) === 3) {\n                    str = CHILD(n, 2).value;\n                }\n                return new Sk.astnodes.alias(name, str == null ? null : strobj(str));\n            case SYM.dotted_as_name:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue loop;\n                } else {\n                    a = aliasForImportName(c, CHILD(n, 0));\n                    Sk.asserts.assert(!a.asname);\n                    a.asname = strobj(CHILD(n, 2).value);\n                    return a;\n                }\n                break;\n            case SYM.dotted_name:\n                if (NCH(n) === 1) {\n                    return new Sk.astnodes.alias(strobj(CHILD(n, 0).value), null);\n                } else {\n                    // create a string of the form a.b.c\n                    str = \"\";\n                    for (i = 0; i < NCH(n); i += 2) {\n                        str += CHILD(n, i).value + \".\";\n                    }\n                    return new Sk.astnodes.alias(strobj(str.substr(0, str.length - 1)), null);\n                }\n                break;\n            case TOK.T_STAR:\n                return new Sk.astnodes.alias(strobj(\"*\"), null);\n            default:\n                throw new Sk.builtin.SyntaxError(\n                    \"unexpected import name\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n        }\n        break;\n    }\n}\n\nfunction astForImportStmt(c, n) {\n    /*\n     import_stmt: import_name | import_from\n     import_name: 'import' dotted_as_names\n     import_from: 'from' ('.'* dotted_name | '.') 'import'\n     ('*' | '(' import_as_names ')' | import_as_names)\n     */\n    var modname;\n    var idx;\n    var nchildren;\n    var ndots;\n    var mod;\n    var i;\n    var aliases;\n    var col_offset;\n    var lineno;\n    var end_lineno;\n    var end_col_offset;\n    REQ(n, SYM.import_stmt);\n    lineno = n.lineno;\n    col_offset = n.col_offset;\n    end_lineno = n.end_lineno;\n    end_col_offset = n.end_col_offset;\n    n = CHILD(n, 0);\n    if (n.type === SYM.import_name) {\n        n = CHILD(n, 1);\n        REQ(n, SYM.dotted_as_names);\n        aliases = [];\n        for (i = 0; i < NCH(n); i += 2) {\n            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));\n        }\n        return new Sk.astnodes.Import(aliases, lineno, col_offset, end_lineno, end_col_offset);\n    } else if (n.type === SYM.import_from) {\n        mod = null;\n        ndots = 0;\n\n        for (idx = 1; idx < NCH(n); ++idx) {\n            if (CHILD(n, idx).type === SYM.dotted_name) {\n                mod = aliasForImportName(c, CHILD(n, idx));\n                idx++;\n                break;\n            } else if (CHILD(n, idx).type === TOK.T_DOT) {\n                ndots++;\n            } else if (CHILD(n, idx).type === TOK.T_ELLIPSIS) {\n                ndots += 3;\n            } else {\n                break;\n            }\n        }\n        ++idx; // skip the import keyword\n        switch (CHILD(n, idx).type) {\n            case TOK.T_STAR:\n                // from ... import\n                n = CHILD(n, idx);\n                nchildren = 1;\n                break;\n            case TOK.T_LPAR:\n                // from ... import (x, y, z)\n                n = CHILD(n, idx + 1);\n                nchildren = NCH(n);\n                break;\n            case SYM.import_as_names:\n                // from ... import x, y, z\n                n = CHILD(n, idx);\n                nchildren = NCH(n);\n                if (nchildren % 2 === 0) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"trailing comma not allowed without surrounding parentheses\",\n                        c.c_filename,\n                        ...get_context(n)\n                    );\n                }\n                break;\n            default:\n                throw new Sk.builtin.SyntaxError(\n                    \"Unexpected node-type in from-import\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n        }\n        aliases = [];\n        if (n.type === TOK.T_STAR) {\n            aliases[0] = aliasForImportName(c, n);\n        } else {\n            for (i = 0; i < NCH(n); i += 2) {\n                aliases[i / 2] = aliasForImportName(c, CHILD(n, i));\n            }\n        }\n        modname = mod ? mod.name.v : \"\";\n        return new Sk.astnodes.ImportFrom(\n            strobj(modname),\n            aliases,\n            ndots,\n            lineno,\n            col_offset,\n            end_lineno,\n            end_col_offset\n        );\n    }\n    throw new Sk.builtin.SyntaxError(\"unknown import statement\", c.c_filename, ...get_context(n));\n}\n\nfunction ast_for_testlistComp(c, n) {\n    /* testlist_comp: test ( comp_for | (',' test)* [','] ) */\n    /* argument: test [comp_for] */\n    Sk.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);\n    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.comp_for) {\n        return ast_for_gen_expr(c, n);\n    }\n    return ast_for_testlist(c, n);\n}\n\nfunction ast_for_genexp(c, n) {\n    Sk.asserts.assert(TYPE(n) == SYM.testlist_comp || TYPE(n) == SYM.argument);\n    return ast_for_itercomp(c, n, COMP_GENEXP);\n}\n\nfunction ast_for_listcomp(c, n) {\n    Sk.asserts.assert(TYPE(n) == SYM.testlist_comp);\n    return ast_for_itercomp(c, n, COMP_LISTCOMP);\n}\n\nfunction astForFactor(c, n) {\n    /* some random peephole thing that cpy does */\n    var expression;\n    var pnum;\n    var patom;\n    var ppower;\n    var pfactor;\n    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {\n        pfactor = CHILD(n, 1);\n        if (pfactor.type === SYM.factor && NCH(pfactor) === 1) {\n            ppower = CHILD(pfactor, 0);\n            if (ppower.type === SYM.power && NCH(ppower) === 1) {\n                patom = CHILD(ppower, 0);\n                if (patom.type === SYM.atom) {\n                    pnum = CHILD(patom, 0);\n                    if (pnum.type === TOK.T_NUMBER) {\n                        pnum.value = \"-\" + pnum.value;\n                        return ast_for_atom(c, patom);\n                    }\n                }\n            }\n        }\n    }\n\n    expression = ast_for_expr(c, CHILD(n, 1));\n    switch (CHILD(n, 0).type) {\n        case TOK.T_PLUS:\n            return new Sk.astnodes.UnaryOp(\n                Sk.astnodes.UAdd,\n                expression,\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        case TOK.T_MINUS:\n            return new Sk.astnodes.UnaryOp(\n                Sk.astnodes.USub,\n                expression,\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        case TOK.T_TILDE:\n            return new Sk.astnodes.UnaryOp(\n                Sk.astnodes.Invert,\n                expression,\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n    }\n\n    Sk.asserts.fail(\"unhandled factor\");\n}\n\nfunction astForForStmt(c, n) {\n    /* for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] */\n    var target;\n    var _target;\n    var nodeTarget;\n    var seq = [];\n    REQ(n, SYM.for_stmt);\n    if (NCH(n) === 9) {\n        seq = astForSuite(c, CHILD(n, 8));\n    }\n    nodeTarget = CHILD(n, 1);\n    _target = ast_for_exprlist(c, nodeTarget, Sk.astnodes.Store);\n    if (NCH(nodeTarget) === 1) {\n        target = _target[0];\n    } else {\n        target = new Sk.astnodes.Tuple(\n            _target,\n            Sk.astnodes.Store,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n\n    return new Sk.astnodes.For(\n        target,\n        ast_for_testlist(c, CHILD(n, 3)),\n        astForSuite(c, CHILD(n, 5)),\n        seq,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction ast_for_call(c, n, func, allowgen) {\n    /*\n      arglist: argument (',' argument)*  [',']\n      argument: ( test [comp_for] | '*' test | test '=' test | '**' test )\n    */\n\n    var i, nargs, nkeywords;\n    var ndoublestars;\n    var args;\n    var keywords;\n\n    REQ(n, SYM.arglist);\n\n    nargs = 0;\n    nkeywords = 0;\n    for (i = 0; i < NCH(n); i++) {\n        var ch = CHILD(n, i);\n        if (TYPE(ch) == SYM.argument) {\n            if (NCH(ch) == 1) {\n                nargs++;\n            } else if (TYPE(CHILD(ch, 1)) == SYM.comp_for) {\n                nargs++;\n                if (!allowgen) {\n                    ast_error(c, ch, \"invalid syntax\");\n                }\n                if (NCH(n) > 1) {\n                    ast_error(c, ch, \"Generator expression must be parenthesized\");\n                }\n            } else if (TYPE(CHILD(ch, 0)) == TOK.T_STAR) {\n                nargs++;\n            } else {\n                /* TYPE(CHILD(ch, 0)) == DOUBLESTAR or keyword argument */\n                nkeywords++;\n            }\n        }\n    }\n\n    args = [];\n    keywords = [];\n\n    nargs = 0; /* positional arguments + iterable argument unpackings */\n    nkeywords = 0; /* keyword arguments + keyword argument unpackings */\n    ndoublestars = 0; /* just keyword argument unpackings */\n    for (i = 0; i < NCH(n); i++) {\n        ch = CHILD(n, i);\n        if (TYPE(ch) == SYM.argument) {\n            var e;\n            var chch = CHILD(ch, 0);\n            if (NCH(ch) == 1) {\n                /* a positional argument */\n                if (nkeywords) {\n                    if (ndoublestars) {\n                        ast_error(\n                            c,\n                            chch,\n                            \"positional argument follows \" + \"keyword argument unpacking\"\n                        );\n                    } else {\n                        ast_error(c, chch, \"positional argument follows \" + \"keyword argument\");\n                    }\n                }\n                e = ast_for_expr(c, chch);\n                if (!e) {\n                    return NULL;\n                }\n                args[nargs++] = e;\n            } else if (TYPE(chch) == TOK.T_STAR) {\n                /* an iterable argument unpacking */\n                var starred;\n                if (ndoublestars) {\n                    ast_error(\n                        c,\n                        chch,\n                        \"iterable argument unpacking follows \" + \"keyword argument unpacking\"\n                    );\n                    return NULL;\n                }\n                e = ast_for_expr(c, CHILD(ch, 1));\n                if (!e) {\n                    return NULL;\n                }\n                starred = new Sk.astnodes.Starred(\n                    e,\n                    Sk.astnodes.Load,\n                    LINENO(chch),\n                    chch.col_offset,\n                    chch.end_lineno,\n                    chch.end_col_offset\n                );\n                args[nargs++] = starred;\n            } else if (TYPE(chch) == TOK.T_DOUBLESTAR) {\n                /* a keyword argument unpacking */\n                var kw;\n                i++;\n                e = ast_for_expr(c, CHILD(ch, 1));\n                if (!e) {\n                    return NULL;\n                }\n                kw = new Sk.astnodes.keyword(NULL, e);\n                keywords[nkeywords++] = kw;\n                ndoublestars++;\n            } else if (TYPE(CHILD(ch, 1)) == SYM.comp_for) {\n                /* the lone generator expression */\n                e = ast_for_genexp(c, ch);\n                if (!e) {\n                    return NULL;\n                }\n                args[nargs++] = e;\n            } else {\n                /* a keyword argument */\n                var kw;\n                var key, tmp;\n                var k;\n\n                /* chch is test, but must be an identifier? */\n                e = ast_for_expr(c, chch);\n                if (!e) {\n                    return NULL;\n                }\n                /* f(lambda x: x[0] = 3) ends up getting parsed with\n                 * LHS test = lambda x: x[0], and RHS test = 3.\n                 * SF bug 132313 points out that complaining about a keyword\n                 * then is very confusing.\n                 */\n                if (e.constructor === Sk.astnodes.Lambda) {\n                    ast_error(c, chch, \"lambda cannot contain assignment\");\n                    return NULL;\n                } else if (e.constructor !== Sk.astnodes.Name) {\n                    ast_error(c, chch, \"keyword can't be an expression\");\n                    return NULL;\n                } else if (forbiddenCheck(c, e.id, ch, 1)) {\n                    return NULL;\n                }\n                key = e.id;\n                for (k = 0; k < nkeywords; k++) {\n                    tmp = keywords[k].arg;\n                    if (tmp && tmp === key) {\n                        ast_error(c, chch, \"keyword argument repeated\");\n                        return NULL;\n                    }\n                }\n                e = ast_for_expr(c, CHILD(ch, 2));\n                if (!e) {\n                    return NULL;\n                }\n                kw = new Sk.astnodes.keyword(key, e);\n                keywords[nkeywords++] = kw;\n            }\n        }\n    }\n\n    return new Sk.astnodes.Call(\n        func,\n        args,\n        keywords,\n        func.lineno,\n        func.col_offset,\n        func.end_lineno,\n        func.end_col_offset\n    );\n}\n\nfunction ast_for_trailer(c, n, left_expr) {\n    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME\n       subscriptlist: subscript (',' subscript)* [',']\n       subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]\n     */\n    REQ(n, SYM.trailer);\n    if (TYPE(CHILD(n, 0)) == TOK.T_LPAR) {\n        if (NCH(n) == 2) {\n            return new Sk.astnodes.Call(\n                left_expr,\n                NULL,\n                NULL,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        } else {\n            return ast_for_call(c, CHILD(n, 1), left_expr, true);\n        }\n    } else if (TYPE(CHILD(n, 0)) == TOK.T_DOT) {\n        var attr_id = new_identifier(CHILD(n, 1));\n        if (!attr_id) {\n            return NULL;\n        }\n        return new Sk.astnodes.Attribute(\n            left_expr,\n            attr_id,\n            Sk.astnodes.Load,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else {\n        REQ(CHILD(n, 0), TOK.T_LSQB);\n        REQ(CHILD(n, 2), TOK.T_RSQB);\n        n = CHILD(n, 1);\n        if (NCH(n) == 1) {\n            var slc = astForSlice(c, CHILD(n, 0));\n            if (!slc) {\n                return NULL;\n            }\n            return new Sk.astnodes.Subscript(\n                left_expr,\n                slc,\n                Sk.astnodes.Load,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        } else {\n            /* The grammar is ambiguous here. The ambiguity is resolved\n               by treating the sequence as a tuple literal if there are\n               no slice features.\n            */\n            var j;\n            var slc;\n            var e;\n            var simple = 1;\n            var slices = [],\n                elts;\n\n            for (j = 0; j < NCH(n); j += 2) {\n                slc = astForSlice(c, CHILD(n, j));\n                if (!slc) {\n                    return NULL;\n                }\n                if (slc.kind != _slice_kind.Index_kind) {\n                    simple = 0;\n                }\n                slices[j / 2] = slc;\n            }\n            if (!simple) {\n                return new Sk.astnodes.Subscript(\n                    left_expr,\n                    new Sk.astnodes.ExtSlice(slices),\n                    Sk.astnodes.Load,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            }\n            /* extract Index values and put them in a Tuple */\n            elts = [];\n            for (j = 0; j < slices.length; ++j) {\n                // @meredydd any idea how we reach this?\n                slc = slices[j];\n                Sk.asserts.assert(slc.kind == _slice_kind.Index_kind && slc.v.Index.value);\n                elts[j] = slc.v.Index.value;\n            }\n            e = new Sk.astnodes.Tuple(\n                elts,\n                Sk.astnodes.Load,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n\n            return new Sk.astnodes.Subscript(\n                left_expr,\n                new Sk.astnodes.Index(e),\n                Sk.astnodes.Load,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        }\n    }\n}\n\nfunction ast_for_flow_stmt(c, n) {\n    /*\n      flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt\n                 | yield_stmt\n      break_stmt: 'break'\n      continue_stmt: 'continue'\n      return_stmt: 'return' [testlist]\n      yield_stmt: yield_expr\n      yield_expr: 'yield' testlist | 'yield' 'from' test\n      raise_stmt: 'raise' [test [',' test [',' test]]]\n    */\n    var ch;\n\n    REQ(n, SYM.flow_stmt);\n    ch = CHILD(n, 0);\n    switch (TYPE(ch)) {\n        case SYM.break_stmt:\n            return new Sk.astnodes.Break(LINENO(n), n.col_offset, n.end_lineno, n.end_col_offset);\n        case SYM.continue_stmt:\n            return new Sk.astnodes.Continue(\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        case SYM.yield_stmt: {\n            /* will reduce to yield_expr */\n            var exp = ast_for_expr(c, CHILD(ch, 0));\n            if (!exp) {\n                return null;\n            }\n            return new Sk.astnodes.Expr(\n                exp,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        }\n        case SYM.return_stmt:\n            if (NCH(ch) == 1) {\n                return new Sk.astnodes.Return(\n                    null,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            } else {\n                var expression = ast_for_testlist(c, CHILD(ch, 1));\n                if (!expression) {\n                    return null;\n                }\n                return new Sk.astnodes.Return(\n                    expression,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            }\n        case SYM.raise_stmt:\n            // This is tricky and Skulpt-specific, because we need to handle\n            // both Python 3-style and Python 2-style 'raise' statements\n            if (NCH(ch) == 1) {\n                return new Sk.astnodes.Raise(\n                    null,\n                    null,\n                    null,\n                    null,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            } else if (NCH(ch) >= 2) {\n                var cause = null;\n                var expression = ast_for_expr(c, CHILD(ch, 1));\n                var inst = null,\n                    tback = null;\n\n                // raise [expression] from [cause]\n                if (NCH(ch) == 4 && CHILD(ch, 2).value == \"from\") {\n                    if (!Sk.__future__.python3) {\n                        ast_error(\n                            c,\n                            CHILD(ch, 2),\n                            \"raise ... from ... is not available in Python 2\"\n                        );\n                    }\n                    cause = ast_for_expr(c, CHILD(ch, 3));\n                } else if (NCH(ch) >= 4 && CHILD(ch, 2).value == \",\") {\n                    if (Sk.__future__.python3) {\n                        ast_error(c, n, \"Old raise syntax is not available in Python 3\");\n                    }\n                    // raise [exception_type], [instantiation value] [, [traceback]]\n                    // NB traceback isn't implemented in Skulpt yet\n                    inst = ast_for_expr(c, CHILD(ch, 3));\n\n                    if (NCH(ch) == 6) {\n                        tback = ast_for_expr(c, CHILD(ch, 5));\n                    }\n                }\n                return new Sk.astnodes.Raise(\n                    expression,\n                    cause,\n                    inst,\n                    tback,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            }\n        /* fall through */\n        default:\n            Sk.asserts.fail(\"unexpected flow_stmt: \", TYPE(ch));\n            return null;\n    }\n}\n\nfunction astForArg(c, n) {\n    var name;\n    var annotation = null;\n    var ch;\n\n    Sk.asserts.assert(n.type === SYM.tfpdef || n.type === SYM.vfpdef);\n    ch = CHILD(n, 0);\n    forbiddenCheck(c, ch, ch.value, ch.lineno);\n    name = strobj(ch.value);\n\n    if (NCH(n) == 3 && CHILD(n, 1).type === TOK.T_COLON) {\n        annotation = ast_for_expr(c, CHILD(n, 2));\n    }\n\n    return new Sk.astnodes.arg(\n        name,\n        annotation,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\n/* returns -1 if failed to handle keyword only arguments\n   returns new position to keep processing if successful\n               (',' tfpdef ['=' test])*\n                     ^^^\n   start pointing here\n */\nfunction handleKeywordonlyArgs(c, n, start, kwonlyargs, kwdefaults) {\n    var argname;\n    var ch;\n    var expression;\n    var annotation;\n    var arg;\n    var i = start;\n    var j = 0; /* index for kwdefaults and kwonlyargs */\n\n    if (!kwonlyargs) {\n        ast_error(c, CHILD(n, start), \"named arguments must follow bare *\");\n    }\n    Sk.asserts.assert(kwdefaults);\n    while (i < NCH(n)) {\n        ch = CHILD(n, i);\n        switch (ch.type) {\n            case SYM.vfpdef:\n            case SYM.tfpdef:\n                if (i + 1 < NCH(n) && CHILD(n, i + 1).type == TOK.T_EQUAL) {\n                    kwdefaults[j] = ast_for_expr(c, CHILD(n, i + 2));\n                    i += 2; /* '=' and test */\n                } else {\n                    /* setting NULL if no default value exists */\n                    kwdefaults[j] = null;\n                }\n                if (NCH(ch) == 3) {\n                    /* ch is NAME ':' test */\n                    annotation = ast_for_expr(c, CHILD(ch, 2));\n                } else {\n                    annotation = null;\n                }\n                ch = CHILD(ch, 0);\n                forbiddenCheck(c, ch, ch.value, ch.lineno);\n                argname = strobj(ch.value);\n                kwonlyargs[j++] = new Sk.astnodes.arg(\n                    argname,\n                    annotation,\n                    ch.lineno,\n                    ch.col_offset,\n                    ch.end_lineno,\n                    ch.end_col_offset\n                );\n                i += 2; /* the name and the comma */\n                break;\n            case TOK.T_DOUBLESTAR:\n                return i;\n            default:\n                ast_error(c, ch, \"unexpected node\");\n        }\n    }\n    return i;\n}\n\nfunction astForArguments(c, n) {\n    var k;\n    var j;\n    var i;\n    var foundDefault;\n    var posargs = [];\n    var posdefaults = [];\n    var kwonlyargs = [];\n    var kwdefaults = [];\n    var vararg = null;\n    var kwarg = null;\n    var ch = null;\n\n    /* This function handles both typedargslist (function definition)\n       and varargslist (lambda definition).\n\n       parameters: '(' [typedargslist] ')'\n       typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [',' [\n               '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]\n             | '**' tfpdef [',']]]\n         | '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]\n         | '**' tfpdef [','])\n       tfpdef: NAME [':' test]\n       varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' [\n               '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]\n             | '**' vfpdef [',']]]\n         | '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]\n         | '**' vfpdef [',']\n       )\n       vfpdef: NAME\n\n    */\n    if (n.type === SYM.parameters) {\n        if (NCH(n) === 2) {\n            // () as arglist\n            return new Sk.astnodes.arguments_([], null, [], [], null, []);\n        }\n        n = CHILD(n, 1);\n    }\n    Sk.asserts.assert(n.type === SYM.varargslist || n.type === SYM.typedargslist);\n\n    // Skulpt note: the \"counting numbers of args\" section\n    // from ast.c is omitted because JS arrays autoexpand\n\n    /* tfpdef: NAME [':' test]\n       vfpdef: NAME\n    */\n    i = 0;\n    j = 0; /* index for defaults */\n    k = 0; /* index for args */\n    while (i < NCH(n)) {\n        ch = CHILD(n, i);\n        switch (ch.type) {\n            case SYM.tfpdef:\n            case SYM.vfpdef:\n                /* XXX Need to worry about checking if TYPE(CHILD(n, i+1)) is\n                   anything other than EQUAL or a comma? */\n                /* XXX Should NCH(n) check be made a separate check? */\n                if (i + 1 < NCH(n) && CHILD(n, i + 1).type == TOK.T_EQUAL) {\n                    posdefaults[j++] = ast_for_expr(c, CHILD(n, i + 2));\n                    i += 2;\n                    foundDefault = 1;\n                } else if (foundDefault) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"non-default argument follows default argument\",\n                        c.c_filename,\n                        ...get_context(n)\n                    );\n                }\n                posargs[k++] = astForArg(c, ch);\n                i += 2; /* the name and the comma */\n                break;\n            case TOK.T_STAR:\n                if (i + 1 >= NCH(n) || (i + 2 == NCH(n) && CHILD(n, i + 1).type == TOK.T_COMMA)) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"named arguments must follow bare *\",\n                        c.c_filename,\n                        ...get_context(n)\n                    );\n                }\n                ch = CHILD(n, i + 1); /* tfpdef or COMMA */\n                if (ch.type == TOK.T_COMMA) {\n                    i += 2; /* now follows keyword only arguments */\n                    i = handleKeywordonlyArgs(c, n, i, kwonlyargs, kwdefaults);\n                } else {\n                    vararg = astForArg(c, ch);\n\n                    i += 3;\n                    if (\n                        i < NCH(n) &&\n                        (CHILD(n, i).type == SYM.tfpdef || CHILD(n, i).type == SYM.vfpdef)\n                    ) {\n                        i = handleKeywordonlyArgs(c, n, i, kwonlyargs, kwdefaults);\n                    }\n                }\n                break;\n            case TOK.T_DOUBLESTAR:\n                ch = CHILD(n, i + 1); /* tfpdef */\n                Sk.asserts.assert(ch.type == SYM.tfpdef || ch.type == SYM.vfpdef);\n                kwarg = astForArg(c, ch);\n                i += 3;\n                break;\n            default:\n                Sk.asserts.fail(\"unexpected node in varargslist\");\n                return;\n        }\n    }\n    return new Sk.astnodes.arguments_(posargs, vararg, kwonlyargs, kwdefaults, kwarg, posdefaults);\n}\n\nfunction ast_for_async_funcdef(c, n, decorator_seq) {\n    /* async_funcdef: 'async' funcdef */\n    REQ(n, SYM.async_funcdef);\n    REQ(CHILD(n, 0), TOK.T_NAME);\n    Sk.asserts.assert(STR(CHILD(n, 0) === \"async\"));\n    REQ(CHILD(n, 1), SYM.funcdef);\n\n    return ast_for_funcdef_impl(c, n, decorator_seq, true /* is_async */);\n}\n\nfunction ast_for_funcdef(c, n, decorator_seq) {\n    /* funcdef: 'def' NAME parameters ['->' test] ':' suite */\n    return ast_for_funcdef_impl(c, n, decorator_seq, false /* is_async */);\n}\n\nfunction ast_for_funcdef_impl(c, n0, decorator_seq, is_async) {\n    /* funcdef: 'def' NAME parameters ['->' test] ':' [TYPE_COMMENT] suite */\n    var n = is_async ? CHILD(n0, 1) : n0;\n    var name;\n    var args;\n    var body;\n    var returns = NULL;\n    var name_i = 1;\n    var end_lineno, end_col_offset;\n    var tc;\n    var type_comment = NULL;\n\n    if (is_async && c.c_feature_version < 5) {\n        ast_error(c, n, \"Async functions are only supported in Python 3.5 and greater\");\n        return NULL;\n    }\n\n    REQ(n, SYM.funcdef);\n\n    name = new_identifier(CHILD(n, name_i));\n\n    if (forbiddenCheck(c, name, CHILD(n, name_i), 0)) {\n        return NULL;\n    }\n    args = astForArguments(c, CHILD(n, name_i + 1));\n    if (!args) {\n        return NULL;\n    }\n    if (TYPE(CHILD(n, name_i + 2)) == TOK.T_RARROW) {\n        returns = ast_for_expr(c, CHILD(n, name_i + 3));\n        if (!returns) {\n            return NULL;\n        }\n        name_i += 2;\n    }\n\n    if (TYPE(CHILD(n, name_i + 3)) == TOK.T_TYPE_COMMENT) {\n        type_comment = TOK.T_NEW_TYPE_COMMENT(CHILD(n, name_i + 3));\n        if (!type_comment) {\n            return NULL;\n        }\n        name_i += 1;\n    }\n\n    body = astForSuite(c, CHILD(n, name_i + 3));\n    if (!body) {\n        return NULL;\n    }\n    // get_last_end_pos(body, &end_lineno, &end_col_offset);\n\n    if (NCH(CHILD(n, name_i + 3)) > 1) {\n        /* Check if the suite has a type comment in it. */\n        tc = CHILD(CHILD(n, name_i + 3), 1);\n\n        if (TYPE(tc) == TOK.T_TYPE_COMMENT) {\n            if (type_comment != NULL) {\n                ast_error(c, n, \"Cannot have two type comments on def\");\n                return NULL;\n            }\n            type_comment = TOK.T_NEW_TYPE_COMMENT(tc);\n            if (!type_comment) {\n                return NULL;\n            }\n        }\n    }\n\n    if (is_async) {\n        return new Sk.astnodes.AsyncFunctionDef(\n            name,\n            args,\n            body,\n            decorator_seq,\n            returns,\n            type_comment,\n            LINENO(n0),\n            n0.col_offset,\n            n0.end_lineno,\n            n0.end_col_offset\n        );\n    } else {\n        return new Sk.astnodes.FunctionDef(\n            name,\n            args,\n            body,\n            decorator_seq,\n            returns,\n            type_comment,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n}\n\nfunction astForClassBases(c, n) {\n    /* testlist: test (',' test)* [','] */\n    Sk.asserts.assert(NCH(n) > 0);\n    REQ(n, SYM.testlist);\n    if (NCH(n) === 1) {\n        return [ast_for_expr(c, CHILD(n, 0))];\n    }\n    return seq_for_testlist(c, n);\n}\n\nfunction astForClassdef(c, n, decoratorSeq) {\n    /* classdef: 'class' NAME ['(' arglist ')'] ':' suite */\n    var classname;\n    var call;\n    var s;\n\n    REQ(n, SYM.classdef);\n\n    if (NCH(n) == 4) {\n        /* class NAME ':' suite */\n        s = astForSuite(c, CHILD(n, 3));\n        classname = new_identifier(CHILD(n, 1).value);\n        forbiddenCheck(c, CHILD(n, 3), classname, n.lineno);\n\n        return new Sk.astnodes.ClassDef(\n            classname,\n            [],\n            [],\n            s,\n            decoratorSeq,\n            /*TODO docstring*/ null,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n\n    if (TYPE(CHILD(n, 3)) === TOK.T_RPAR) {\n        /* class NAME '(' ')' ':' suite */\n        s = astForSuite(c, CHILD(n, 5));\n        classname = new_identifier(CHILD(n, 1).value);\n        forbiddenCheck(c, CHILD(n, 3), classname, CHILD(n, 3).lineno);\n        return new Sk.astnodes.ClassDef(\n            classname,\n            [],\n            [],\n            s,\n            decoratorSeq,\n            /*TODO docstring*/ null,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n\n    /* class NAME '(' arglist ')' ':' suite */\n    /* build up a fake Call node so we can extract its pieces */\n    {\n        var dummy_name;\n        var dummy;\n        dummy_name = new_identifier(CHILD(n, 1));\n        dummy = new Sk.astnodes.Name(\n            dummy_name,\n            Sk.astnodes.Load,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n        call = ast_for_call(c, CHILD(n, 3), dummy, false);\n    }\n    s = astForSuite(c, CHILD(n, 6));\n    classname = new_identifier(CHILD(n, 1).value);\n    forbiddenCheck(c, CHILD(n, 1), classname, CHILD(n, 1).lineno);\n\n    return new Sk.astnodes.ClassDef(\n        classname,\n        call.args,\n        call.keywords,\n        s,\n        decoratorSeq,\n        /*TODO docstring*/ null,\n        LINENO(n),\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForLambdef(c, n) {\n    /* lambdef: 'lambda' [varargslist] ':' test */\n    var args;\n    var expression;\n    if (NCH(n) === 3) {\n        args = new Sk.astnodes.arguments_([], null, null, []);\n        expression = ast_for_expr(c, CHILD(n, 2));\n    } else {\n        args = astForArguments(c, CHILD(n, 1));\n        expression = ast_for_expr(c, CHILD(n, 3));\n    }\n    return new Sk.astnodes.Lambda(\n        args,\n        expression,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForComprehension(c, n) {\n    /* testlist_comp: test ( comp_for | (',' test)* [','] )\n       argument: test [comp_for] | test '=' test       # Really [keyword '='] test */\n\n    var j;\n    var ifs;\n    var nifs;\n    var ge;\n    var expression;\n    var t;\n    var forch;\n    var i;\n    var ch;\n    var genexps;\n    var nfors;\n    var elt;\n    var comps;\n    var comp;\n\n    function countCompFors(c, n) {\n        var nfors = 0;\n        count_comp_for: while (true) {\n            nfors++;\n            REQ(n, SYM.comp_for);\n            if (NCH(n) === 5) {\n                n = CHILD(n, 4);\n            } else {\n                return nfors;\n            }\n            count_comp_iter: while (true) {\n                REQ(n, SYM.comp_iter);\n                n = CHILD(n, 0);\n                if (n.type === SYM.comp_for) {\n                    continue count_comp_for;\n                } else if (n.type === SYM.comp_if) {\n                    if (NCH(n) === 3) {\n                        n = CHILD(n, 2);\n                        continue count_comp_iter;\n                    } else {\n                        return nfors;\n                    }\n                }\n                break;\n            }\n            break;\n        }\n        Sk.asserts.fail(\"logic error in countCompFors\");\n    }\n\n    function countCompIfs(c, n) {\n        var nifs = 0;\n        while (true) {\n            REQ(n, SYM.comp_iter);\n            if (CHILD(n, 0).type === SYM.comp_for) {\n                return nifs;\n            }\n            n = CHILD(n, 0);\n            REQ(n, SYM.comp_if);\n            nifs++;\n            if (NCH(n) === 2) {\n                return nifs;\n            }\n            n = CHILD(n, 2);\n        }\n    }\n\n    nfors = countCompFors(c, n);\n    comps = [];\n    for (i = 0; i < nfors; ++i) {\n        REQ(n, SYM.comp_for);\n        forch = CHILD(n, 1);\n        t = ast_for_exprlist(c, forch, Sk.astnodes.Store);\n        expression = ast_for_expr(c, CHILD(n, 3));\n        if (NCH(forch) === 1) {\n            comp = new Sk.astnodes.comprehension(t[0], expression, []);\n        } else {\n            comp = new Sk.astnodes.comprehension(\n                new Sk.astnodes.Tuple(\n                    t,\n                    Sk.astnodes.Store,\n                    n.lineno,\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                ),\n                expression,\n                []\n            );\n        }\n        if (NCH(n) === 5) {\n            n = CHILD(n, 4);\n            nifs = countCompIfs(c, n);\n            ifs = [];\n            for (j = 0; j < nifs; ++j) {\n                REQ(n, SYM.comp_iter);\n                n = CHILD(n, 0);\n                REQ(n, SYM.comp_if);\n                expression = ast_for_expr(c, CHILD(n, 1));\n                ifs[j] = expression;\n                if (NCH(n) === 3) {\n                    n = CHILD(n, 2);\n                }\n            }\n            if (n.type === SYM.comp_iter) {\n                n = CHILD(n, 0);\n            }\n            comp.ifs = ifs;\n        }\n        comps[i] = comp;\n    }\n    return comps;\n}\n\nfunction astForIterComp(c, n, type) {\n    var elt, comps;\n    Sk.asserts.assert(NCH(n) > 1);\n    elt = ast_for_expr(c, CHILD(n, 0));\n    comps = astForComprehension(c, CHILD(n, 1));\n    if (type === COMP_GENEXP) {\n        return new Sk.astnodes.GeneratorExp(\n            elt,\n            comps,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (type === COMP_SETCOMP) {\n        return new Sk.astnodes.SetComp(\n            elt,\n            comps,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n}\n\n/*\n   Count the number of 'for' loops in a comprehension.\n   Helper for ast_for_comprehension().\n*/\nfunction count_comp_fors(c, n) {\n    var n_fors = 0;\n    var is_async;\n    count_comp_for: while (true) {\n        // @meredydd needs new grammar\n        // REQ(n, SYM.comp_for);\n        // if (NCH(n) === 2) {\n        //     REQ(CHILD(n, 0), TOK.T_ASYNC);\n        //     n = CHILD(n, 1);\n        // } else if (NCH(n) === 1) {\n        //     n = CHILD(n, 0);\n        // } else {\n        //     Sk.asserts.fail(\"logic error in count_comp_fors\");\n        // }\n        // if (NCH(n) == (5)) {\n        //     n = CHILD(n, 4);\n        // } else {\n        //     return n_fors;\n        // }\n        is_async = 0;\n        n_fors++;\n        REQ(n, SYM.comp_for);\n        if (TYPE(CHILD(n, 0)) == TOK.T_ASYNC) {\n            is_async = 1;\n        }\n        if (NCH(n) == 5 + is_async) {\n            n = CHILD(n, 4 + is_async);\n        } else {\n            return n_fors;\n        }\n        count_comp_iter: while (true) {\n            REQ(n, SYM.comp_iter);\n            n = CHILD(n, 0);\n            if (TYPE(n) === SYM.comp_for) {\n                continue count_comp_for;\n            } else if (TYPE(n) === SYM.comp_if) {\n                if (NCH(n) === 3) {\n                    n = CHILD(n, 2);\n                    continue count_comp_iter;\n                } else {\n                    return n_fors;\n                }\n            }\n            break;\n        }\n        break;\n    }\n}\n\nfunction count_comp_ifs(c, n) {\n    var n_ifs = 0;\n\n    while (true) {\n        REQ(n, SYM.comp_iter);\n        if (TYPE(CHILD(n, 0)) == SYM.comp_for) {\n            return n_ifs;\n        }\n        n = CHILD(n, 0);\n        REQ(n, SYM.comp_if);\n        n_ifs++;\n        if (NCH(n) == 2) {\n            return n_ifs;\n        }\n        n = CHILD(n, 2);\n    }\n}\n\nfunction ast_for_comprehension(c, n) {\n    var i, n_fors;\n    var comps = [];\n    n_fors = count_comp_fors(c, n);\n\n    for (i = 0; i < n_fors; i++) {\n        var comp;\n        var t;\n        var expression, first;\n        var for_ch;\n        var is_async = 0;\n\n        if (TYPE(CHILD(n, 0)) == TOK.T_ASYNC) {\n            is_async = 1;\n        }\n\n        for_ch = CHILD(n, 1 + is_async);\n        t = ast_for_exprlist(c, for_ch, Sk.astnodes.Store);\n        if (!t) {\n            return null;\n        }\n\n        expression = ast_for_expr(c, CHILD(n, 3 + is_async));\n\n        if (!expression) {\n            return null;\n        }\n\n        // again new grammar needed\n        // REQ(n, SYM.comp_for);\n\n        // if (NCH(n) == 2) {\n        //     is_async = 1;\n        //     REQ(CHILD(n, 0), TOK.T_ASYNC);\n        //     sync_n = CHILD(n, 1);\n        // }\n        // else {\n        //     sync_n = CHILD(n, 0);\n        // }\n        // REQ(sync_n, SYM.sync_comp_for);\n\n        // /* Async comprehensions only allowed in Python 3.6 and greater */\n        // /* @meredydd see below for the joys of the future! */\n        // if (is_async && c.c_feature_version < 6) {\n        //     ast_error(c, n,\n        //               \"Async comprehensions are only supported in Python 3.6 and greater\");\n        //     return null;\n        // }\n\n        // for_ch = CHILD(sync_n, 1);\n        // t = ast_for_exprlist(c, for_ch, Sk.astnodes.Store);\n\n        // expression = ast_for_expr(c, CHILD(sync_n, 3));\n\n        /* Check the # of children rather than the length of t, since\n           (x for x, in ...) has 1 element in t, but still requires a Tuple. */\n        first = t[0];\n        if (NCH(for_ch) == 1) {\n            comp = new Sk.astnodes.comprehension(first, expression, null, is_async);\n        } else {\n            comp = new Sk.astnodes.comprehension(\n                new Sk.astnodes.Tuple(\n                    t,\n                    Sk.astnodes.Store,\n                    first.lineno,\n                    first.col_offset,\n                    for_ch.end_lineno,\n                    for_ch.end_col_offset\n                ),\n                expression,\n                null,\n                is_async\n            );\n        }\n\n        if (NCH(n) == 5 + is_async) {\n            var j, n_ifs;\n            var ifs = [];\n\n            n = CHILD(n, 4 + is_async);\n            n_ifs = count_comp_ifs(c, n);\n            if (n_ifs == -1) {\n                return null;\n            }\n\n            for (j = 0; j < n_ifs; j++) {\n                REQ(n, SYM.comp_iter);\n                n = CHILD(n, 0);\n                REQ(n, SYM.comp_if);\n\n                expression = ast_for_expr(c, CHILD(n, 1));\n                if (!expression) {\n                    return null;\n                }\n\n                ifs[j] = expression;\n                if (NCH(n) == 3) {\n                    n = CHILD(n, 2);\n                }\n            }\n            /* on exit, must guarantee that n is a comp_for */\n            if (TYPE(n) == SYM.comp_iter) {\n                n = CHILD(n, 0);\n            }\n            comp.ifs = ifs;\n        }\n        // if (NCH(sync_n) == 5) {\n        //     var j, n_ifs;\n        //     var ifs = [];\n\n        //     n = CHILD(sync_n, 4);\n        //     n_ifs = count_comp_ifs(c, n);\n\n        //     for (j = 0; j < n_ifs; j++) {\n        //         REQ(n, comp_iter);\n        //         n = CHILD(n, 0);\n        //         REQ(n, comp_if);\n\n        //         expression = ast_for_expr(c, CHILD(n, 1));\n        //         if (!expression) {\n        //             return null;\n        //         }\n\n        //         ifs[j] = expression;\n        //         if (NCH(n) == 3) {\n        //             n = CHILD(n, 2);\n        //         }\n        //     }\n        //     /* on exit, must guarantee that n is a comp_for */\n        //     if (TYPE(n) == SYM.comp_iter) {\n        //         n = CHILD(n, 0);\n        //     }\n        //     comp.ifs = ifs;\n        // }\n        comps[i] = comp;\n    }\n    return comps;\n}\n\nfunction ast_for_itercomp(c, n, type) {\n    /* testlist_comp: (test|star_expr)\n     *                ( comp_for | (',' (test|star_expr))* [','] ) */\n    var elt;\n    var comps;\n    var ch;\n\n    Sk.asserts.assert(NCH(n) > 1);\n\n    ch = CHILD(n, 0);\n    elt = ast_for_expr(c, ch);\n\n    if (elt.constructor === Sk.astnodes.Starred) {\n        ast_error(c, ch, \"iterable unpacking cannot be used in comprehension\");\n        return NULL;\n    }\n\n    comps = ast_for_comprehension(c, CHILD(n, 1));\n\n    if (type == COMP_GENEXP) {\n        return new Sk.astnodes.GeneratorExp(\n            elt,\n            comps,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (type == COMP_LISTCOMP) {\n        return new Sk.astnodes.ListComp(\n            elt,\n            comps,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (type == COMP_SETCOMP) {\n        return new Sk.astnodes.SetComp(\n            elt,\n            comps,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else {\n        /* Should never happen */\n        return null;\n    }\n}\n\n/* Fills in the key, value pair corresponding to the dict element.  In case\n * of an unpacking, key is NULL.  *i is advanced by the number of ast\n * elements.  Iff successful, nonzero is returned.\n */\nfunction ast_for_dictelement(c, n, i) {\n    var expression;\n    if (TYPE(CHILD(n, i)) == TOK.T_DOUBLESTAR) {\n        Sk.asserts.assert(NCH(n) - i >= 2);\n\n        expression = ast_for_expr(c, CHILD(n, i + 1));\n\n        return { key: null, value: expression, i: i + 2 };\n    } else {\n        Sk.asserts.assert(NCH(n) - i >= 3);\n\n        expression = ast_for_expr(c, CHILD(n, i));\n        if (!expression) {\n            return 0;\n        }\n        var key = expression;\n\n        REQ(CHILD(n, i + 1), TOK.T_COLON);\n\n        expression = ast_for_expr(c, CHILD(n, i + 2));\n        if (!expression) {\n            return false;\n        }\n\n        var value = expression;\n\n        return { key: key, value: value, i: i + 3 };\n    }\n}\n\nfunction ast_for_dictcomp(c, n) {\n    var key, value;\n    var comps = [];\n    Sk.asserts.assert(NCH(n) > 3);\n    REQ(CHILD(n, 1), TOK.T_COLON);\n    key = ast_for_expr(c, CHILD(n, 0));\n    value = ast_for_expr(c, CHILD(n, 2));\n    comps = astForComprehension(c, CHILD(n, 3));\n    return new Sk.astnodes.DictComp(\n        key,\n        value,\n        comps,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction ast_for_dictdisplay(c, n) {\n    var i;\n    var j;\n    var keys = [],\n        values = [];\n\n    j = 0;\n    for (i = 0; i < NCH(n); i++) {\n        var res = ast_for_dictelement(c, n, i);\n        i = res.i;\n        keys[j] = res.key;\n        values[j] = res.value;\n        j++;\n    }\n\n    return new Sk.astnodes.Dict(\n        keys,\n        values,\n        LINENO(n),\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction ast_for_gen_expr(c, n) {\n    Sk.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);\n    return astForIterComp(c, n, COMP_GENEXP);\n}\n\nfunction ast_for_setcomp(c, n) {\n    Sk.asserts.assert(n.type === SYM.dictorsetmaker);\n    return astForIterComp(c, n, COMP_SETCOMP);\n}\n\nfunction astForWhileStmt(c, n) {\n    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */\n    REQ(n, SYM.while_stmt);\n    if (NCH(n) === 4) {\n        return new Sk.astnodes.While(\n            ast_for_expr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            [],\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (NCH(n) === 7) {\n        return new Sk.astnodes.While(\n            ast_for_expr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            astForSuite(c, CHILD(n, 6)),\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n    Sk.asserts.fail(\"wrong number of tokens for 'while' stmt\");\n}\n\nfunction astForAugassign(c, n) {\n    REQ(n, SYM.augassign);\n    n = CHILD(n, 0);\n    switch (n.value.charAt(0)) {\n        case \"+\":\n            return Sk.astnodes.Add;\n        case \"-\":\n            return Sk.astnodes.Sub;\n        case \"/\":\n            if (n.value.charAt(1) === \"/\") {\n                return Sk.astnodes.FloorDiv;\n            }\n            return Sk.astnodes.Div;\n        case \"%\":\n            return Sk.astnodes.Mod;\n        case \"<\":\n            return Sk.astnodes.LShift;\n        case \">\":\n            return Sk.astnodes.RShift;\n        case \"&\":\n            return Sk.astnodes.BitAnd;\n        case \"^\":\n            return Sk.astnodes.BitXor;\n        case \"|\":\n            return Sk.astnodes.BitOr;\n        case \"*\":\n            if (n.value.charAt(1) === \"*\") {\n                return Sk.astnodes.Pow;\n            }\n            return Sk.astnodes.Mult;\n        case \"@\":\n            if (Sk.__future__.python3) {\n                return Sk.astnodes.MatMult;\n            }\n        default:\n            Sk.asserts.fail(\"invalid augassign\");\n    }\n}\n\nfunction astForBinop(c, n) {\n    /* Must account for a sequence of expressions.\n     How should A op B op C by represented?\n     BinOp(BinOp(A, op, B), op, C).\n     */\n    var tmp;\n    var newoperator;\n    var nextOper;\n    var i;\n    var result = new Sk.astnodes.BinOp(\n        ast_for_expr(c, CHILD(n, 0)),\n        getOperator(CHILD(n, 1)),\n        ast_for_expr(c, CHILD(n, 2)),\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n    var nops = (NCH(n) - 1) / 2;\n    for (i = 1; i < nops; ++i) {\n        nextOper = CHILD(n, i * 2 + 1);\n        newoperator = getOperator(nextOper);\n        tmp = ast_for_expr(c, CHILD(n, i * 2 + 2));\n        result = new Sk.astnodes.BinOp(\n            result,\n            newoperator,\n            tmp,\n            nextOper.lineno,\n            nextOper.col_offset,\n            nextOper.end_lineno,\n            nextOper.end_col_offset\n        );\n    }\n    return result;\n}\n\nfunction ast_for_testlist(c, n) {\n    /* testlist_comp: test (',' comp_for | (',' test)* [',']) */\n    /* testlist: test (',' test)* [','] */\n    Sk.asserts.assert(NCH(n) > 0);\n    if (n.type === SYM.testlist_comp) {\n        if (NCH(n) > 1) {\n            Sk.asserts.assert(CHILD(n, 1).type !== SYM.comp_for);\n        }\n    } else {\n        Sk.asserts.assert(n.type === SYM.testlist || n.type === SYM.testlist_star_expr);\n    }\n\n    if (NCH(n) === 1) {\n        return ast_for_expr(c, CHILD(n, 0));\n    } else {\n        return new Sk.astnodes.Tuple(\n            seq_for_testlist(c, n),\n            Sk.astnodes.Load,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset /*, c.c_arena */\n        );\n    }\n}\n\nfunction ast_for_exprStmt(c, n) {\n    var expression;\n    var value;\n    var e;\n    var i;\n    var targets;\n    var expr2;\n    var varName;\n    var expr1;\n    var ch;\n    var ann;\n    var simple;\n    var deep;\n    var expr3;\n    REQ(n, SYM.expr_stmt);\n    /* expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |\n                            ('=' (yield_expr|testlist_star_expr))*)\n       annassign: ':' test ['=' test]\n       testlist_star_expr: (test|star_expr) (',' test|star_expr)* [',']\n       augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^='\n                | '<<=' | '>>=' | '**=' | '//='\n       test: ... here starts the operator precedence dance\n     */\n    if (NCH(n) === 1) {\n        return new Sk.astnodes.Expr(\n            ast_for_testlist(c, CHILD(n, 0)),\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (CHILD(n, 1).type === SYM.augassign) {\n        ch = CHILD(n, 0);\n        expr1 = ast_for_testlist(c, ch);\n        setContext(c, expr1, Sk.astnodes.Store, ch);\n        switch (expr1.constructor) {\n            case Sk.astnodes.Name:\n                varName = expr1.id;\n                forbiddenCheck(c, ch, varName, n.lineno);\n                break;\n            case Sk.astnodes.Attribute:\n            case Sk.astnodes.Subscript:\n                break;\n            case Sk.astnodes.GeneratorExp:\n                throw new Sk.builtin.SyntaxError(\n                    \"augmented assignment to generator expression not possible\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            case Sk.astnodes.Yield:\n                throw new Sk.builtin.SyntaxError(\n                    \"augmented assignment to yield expression not possible\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            default:\n                throw new Sk.builtin.SyntaxError(\n                    \"illegal expression for augmented assignment\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n        }\n\n        ch = CHILD(n, 2);\n        if (ch.type === SYM.testlist) {\n            expr2 = ast_for_testlist(c, ch);\n        } else {\n            expr2 = ast_for_expr(c, ch);\n        }\n\n        return new Sk.astnodes.AugAssign(\n            expr1,\n            astForAugassign(c, CHILD(n, 1)),\n            expr2,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    } else if (CHILD(n, 1).type === SYM.annassign) {\n        if (!Sk.__future__.python3) {\n            throw new Sk.builtin.SyntaxError(\n                \"Annotated assignment is not supported in Python 2\",\n                ...get_context(n)\n            );\n        }\n        // annotated assignment\n        ch = CHILD(n, 0);\n        ann = CHILD(n, 1);\n        simple = 1;\n        deep = ch;\n        while (NCH(deep) == 1) {\n            deep = CHILD(deep, 0);\n        }\n        if (NCH(deep) > 0 && TYPE(CHILD(deep, 0)) == TOK.T_LPAR) {\n            simple = 0;\n        }\n        expr1 = ast_for_testlist(c, ch);\n        switch (expr1.constructor) {\n            case Sk.astnodes.Name:\n                varName = expr1.id;\n                forbiddenCheck(c, ch, varName, n.lineno);\n                setContext(c, expr1, Sk.astnodes.Store, ch);\n                break;\n            case Sk.astnodes.Attribute:\n                varName = expr1.attr;\n                forbiddenCheck(c, ch, varName, n.lineno);\n                setContext(c, expr1, Sk.astnodes.Store, ch);\n                break;\n            case Sk.astnodes.Subscript:\n                setContext(c, expr1, Sk.astnodes.Store, ch);\n                break;\n            case Sk.astnodes.List:\n                throw new Sk.builtin.SyntaxError(\n                    \"only single target (not list) can be annotated\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            case Sk.astnodes.Tuple:\n                throw new Sk.builtin.SyntaxError(\n                    \"only single target (not tuple) can be annotated\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            default:\n                throw new Sk.builtin.SyntaxError(\n                    \"illegal target for annotation\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n        }\n\n        if (expr1.constructor != Sk.astnodes.Name) {\n            simple = 0;\n        }\n\n        ch = CHILD(ann, 1);\n        expr2 = ast_for_expr(c, ch);\n        if (NCH(ann) == 2) {\n            return new Sk.astnodes.AnnAssign(\n                expr1,\n                expr2,\n                null,\n                simple,\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        } else {\n            ch = CHILD(ann, 3);\n            expr3 = ast_for_expr(c, ch);\n            return new Sk.astnodes.AnnAssign(\n                expr1,\n                expr2,\n                expr3,\n                simple,\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        }\n    } else {\n        // normal assignment\n        REQ(CHILD(n, 1), TOK.T_EQUAL);\n        targets = [];\n        for (i = 0; i < NCH(n) - 2; i += 2) {\n            ch = CHILD(n, i);\n            if (ch.type === SYM.yield_expr) {\n                throw new Sk.builtin.SyntaxError(\n                    \"assignment to yield expression not possible\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            }\n            e = ast_for_testlist(c, ch);\n            setContext(c, e, Sk.astnodes.Store, CHILD(n, i));\n            targets[i / 2] = e;\n        }\n        value = CHILD(n, NCH(n) - 1);\n        if (value.type === SYM.testlist_star_expr) {\n            expression = ast_for_testlist(c, value);\n        } else {\n            expression = ast_for_expr(c, value);\n        }\n        return new Sk.astnodes.Assign(\n            targets,\n            expression,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n}\n\nfunction astForIfexpr(c, n) {\n    /* test: or_test 'if' or_test 'else' test */\n    Sk.asserts.assert(NCH(n) === 5);\n    return new Sk.astnodes.IfExp(\n        ast_for_expr(c, CHILD(n, 2)),\n        ast_for_expr(c, CHILD(n, 0)),\n        ast_for_expr(c, CHILD(n, 4)),\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\n/**\n * s is a python-style string literal, including quote characters and u/r/b\n * prefixes. Returns [decoded string object, is-an-fstring]\n */\nfunction parsestr(c, n, s) {\n    var quote = s.charAt(0);\n    var rawmode = false;\n    var unicode = false;\n    var fmode = false;\n    var bytesmode = false;\n\n    var decodeEscape = function (s, quote) {\n        var d3;\n        var d2;\n        var d1;\n        var d0;\n        var ch;\n        var i;\n        var len = s.length;\n        var ret = \"\";\n        for (i = 0; i < len; ++i) {\n            ch = s.charAt(i);\n            if (ch === \"\\\\\") {\n                ++i;\n                ch = s.charAt(i);\n                if (ch === \"n\") {\n                    ret += \"\\n\";\n                } else if (ch === \"\\\\\") {\n                    ret += \"\\\\\";\n                } else if (ch === \"t\") {\n                    ret += \"\\t\";\n                } else if (ch === \"r\") {\n                    ret += \"\\r\";\n                } else if (ch === \"b\") {\n                    ret += \"\\b\";\n                } else if (ch === \"f\") {\n                    ret += \"\\f\";\n                } else if (ch === \"v\") {\n                    ret += \"\\v\";\n                } else if (ch === \"0\") {\n                    ret += \"\\0\";\n                } else if (ch === '\"') {\n                    ret += '\"';\n                } else if (ch === \"'\") {\n                    ret += \"'\";\n                } else if (ch === \"\\n\") {\n                    /* escaped newline, join lines */\n                } else if (ch === \"x\") {\n                    if (i + 2 >= len) {\n                        ast_error(c, n, \"Truncated \\\\xNN escape\");\n                    }\n                    ret += String.fromCharCode(parseInt(s.substr(i + 1, 2), 16));\n                    i += 2;\n                } else if (!bytesmode && ch === \"u\") {\n                    if (i + 4 >= len) {\n                        ast_error(c, n, \"Truncated \\\\uXXXX escape\");\n                    }\n                    ret += String.fromCharCode(parseInt(s.substr(i + 1, 4), 16));\n                    i += 4;\n                } else if (!bytesmode && ch === \"U\") {\n                    if (i + 8 >= len) {\n                        ast_error(c, n, \"Truncated \\\\UXXXXXXXX escape\");\n                    }\n                    ret += String.fromCodePoint(parseInt(s.substr(i + 1, 8), 16));\n                    i += 8;\n                } else {\n                    // Leave it alone\n                    ret += \"\\\\\" + ch;\n                    // Sk.asserts.fail(\"unhandled escape: '\" + ch.charCodeAt(0) + \"'\");\n                }\n            } else if (bytesmode && ch.charCodeAt(0) > 0x7f) {\n                ast_error(c, n, \"bytes can only contain ASCII literal characters\");\n            } else {\n                ret += ch;\n            }\n        }\n        return ret;\n    };\n\n    //console.log(\"parsestr\", s);\n\n    // treats every sequence as unicodes even if they are not treated with uU prefix\n    // kinda hacking though working for most purposes\n    if (\n        c.c_flags & Sk.Parser.CO_FUTURE_UNICODE_LITERALS ||\n        Sk.__future__.unicode_literals === true\n    ) {\n        unicode = true;\n    }\n\n    let seenflags = {};\n\n    while (true) {\n        if (quote === \"u\" || quote === \"U\") {\n            unicode = true;\n        } else if (quote === \"r\" || quote === \"R\") {\n            rawmode = true;\n        } else if (quote === \"b\" || quote === \"B\") {\n            bytesmode = true;\n        } else if (quote === \"f\" || quote === \"F\") {\n            fmode = true;\n        } else {\n            break;\n        }\n        s = s.substr(1);\n        quote = s.charAt(0);\n    }\n\n    Sk.asserts.assert(quote === \"'\" || (quote === '\"' && s.charAt(s.length - 1) === quote));\n    s = s.substr(1, s.length - 2);\n\n    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {\n        Sk.asserts.assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);\n        s = s.substr(2, s.length - 4);\n    }\n\n    if (rawmode || s.indexOf(\"\\\\\") === -1) {\n        if (bytesmode) {\n            for (let i = 0; i < s.length; i++) {\n                if (s.charCodeAt(i) > 0x7f) {\n                    ast_error(c, n, \"bytes can only contain ASCII literal characters\");\n                }\n            }\n        }\n        return [strobj(s), fmode, bytesmode];\n    }\n    return [strobj(decodeEscape(s, quote)), fmode, bytesmode];\n}\n\nfunction fstring_compile_expr(str, expr_start, expr_end, c, n) {\n    Sk.asserts.assert(expr_end >= expr_start);\n    Sk.asserts.assert(str.charAt(expr_start - 1) == \"{\");\n    Sk.asserts.assert(\n        str.charAt(expr_end) == \"}\" || str.charAt(expr_end) == \"!\" || str.charAt(expr_end) == \":\"\n    );\n\n    let s = str.substring(expr_start, expr_end);\n\n    /* If the substring is all whitespace, it's an error.  We need to catch this\n       here, and not when we call PyParser_SimpleParseStringFlagsFilename,\n       because turning the expression '' in to '()' would go from being invalid\n       to valid. */\n    if (/^\\s*$/.test(s)) {\n        ast_error(c, n, \"f-string: empty expression not allowed\");\n    }\n    s = \"(\" + s + \")\";\n\n    let ast;\n    try {\n        let parsed = Sk.parse(\"<fstring>\", s);\n        ast = Sk.astFromParse(parsed.cst, \"<fstring>\", parsed.flags);\n    } catch (e) {\n        if (e.traceback && e.traceback[0]) {\n            let tb = e.traceback[0];\n            tb.lineno = (tb.lineno || 1) - 1 + LINENO(n);\n            tb.filename = c.c_filename;\n        }\n        throw e;\n    }\n\n    // TODO fstring_fix_node_location\n\n    Sk.asserts.assert(ast.body.length == 1 && ast.body[0].constructor === Sk.astnodes.Expr);\n\n    return ast.body[0].value;\n}\n\nfunction fstring_find_expr(str, start, end, raw, recurse_lvl, c, n) {\n    let i = start;\n    Sk.asserts.assert(str.charAt(i) == \"{\");\n    i++;\n    let expr_start = i;\n    /* null if we're not in a string, else the quote char we're trying to\n       match (single or double quote). */\n    let quote_char = null;\n    /* If we're inside a string, 1=normal, 3=triple-quoted. */\n    let string_type = 0;\n    /* Keep track of nesting level for braces/parens/brackets in\n       expressions. */\n    let nested_depth = 0;\n\n    let format_spec, conversion;\n\n    let unexpected_end_of_string = () => ast_error(c, n, \"f-string: expecting '}'\");\n\n    Sk.asserts.assert(i <= end);\n\n    for (; i < end; i++) {\n        let ch = str.charAt(i);\n\n        /* Nowhere inside an expression is a backslash allowed. */\n        if (ch == \"\\\\\") {\n            /* Error: can't include a backslash character, inside\n               parens or strings or not. */\n            ast_error(c, n, \"f-string expression part cannot include a backslash\");\n        }\n        if (quote_char) {\n            /* We're inside a string. See if we're at the end. */\n            /* This code needs to implement the same non-error logic\n               as tok_get from tokenizer.c, at the letter_quote\n               label. To actually share that code would be a\n               nightmare. But, it's unlikely to change and is small,\n               so duplicate it here. Note we don't need to catch all\n               of the errors, since they'll be caught when parsing the\n               expression. We just need to match the non-error\n               cases. Thus we can ignore \\n in single-quoted strings,\n               for example. Or non-terminated strings. */\n            if (ch == quote_char) {\n                /* Does this match the string_type (single or triple\n                   quoted)? */\n                if (string_type == 3) {\n                    if (i + 2 < end && str.charAt(i + 1) == ch && str.charAt(i + 2) == ch) {\n                        /* We're at the end of a triple quoted string. */\n                        i += 2;\n                        string_type = 0;\n                        quote_char = 0;\n                        continue;\n                    }\n                } else {\n                    /* We're at the end of a normal string. */\n                    quote_char = 0;\n                    string_type = 0;\n                    continue;\n                }\n            }\n        } else if (ch == \"'\" || ch == '\"') {\n            /* Is this a triple quoted string? */\n            if (i + 2 < end && str.charAt(i + 1) == ch && str.charAt(i + 2) == ch) {\n                string_type = 3;\n                i += 2;\n            } else {\n                /* Start of a normal string. */\n                string_type = 1;\n            }\n            /* Start looking for the end of the string. */\n            quote_char = ch;\n        } else if (ch == \"[\" || ch == \"{\" || ch == \"(\") {\n            nested_depth++;\n        } else if (nested_depth != 0 && (ch == \"]\" || ch == \"}\" || ch == \")\")) {\n            nested_depth--;\n        } else if (ch == \"#\") {\n            /* Error: can't include a comment character, inside parens\n               or not. */\n            ast_error(c, n, \"f-string expression part cannot include '#'\");\n        } else if (nested_depth == 0 && (ch == \"!\" || ch == \":\" || ch == \"}\")) {\n            /* First, test for the special case of \"!=\". Since '=' is\n               not an allowed conversion character, nothing is lost in\n               this test. */\n            if (ch == \"!\" && i + 1 < end && str.charAt(i + 1) == \"=\") {\n                /* This isn't a conversion character, just continue. */\n                continue;\n            }\n            /* Normal way out of this loop. */\n            break;\n        } else {\n            /* Just consume this char and loop around. */\n        }\n    }\n\n    /* If we leave this loop in a string or with mismatched parens, we\n       don't care. We'll get a syntax error when compiling the\n       expression. But, we can produce a better error message, so\n       let's just do that.*/\n    if (quote_char) {\n        ast_error(c, n, \"f-string: unterminated string\");\n    }\n    if (nested_depth) {\n        ast_error(c, n, \"f-string: mismatched '(', '{', or '['\");\n    }\n\n    let expr_end = i;\n\n    /* Compile the expression as soon as possible, so we show errors\n       related to the expression before errors related to the\n       conversion or format_spec. */\n    let simple_expression = fstring_compile_expr(str, expr_start, expr_end, c, n);\n\n    /* Check for a conversion char, if present. */\n    if (str.charAt(i) == \"!\") {\n        i++;\n        if (i >= end) {\n            unexpected_end_of_string();\n        }\n\n        conversion = str.charAt(i);\n        i++;\n\n        /* Validate the conversion. */\n        if (!(conversion == \"s\" || conversion == \"r\" || conversion == \"a\")) {\n            ast_error(c, n, \"f-string: invalid conversion character: expected 's', 'r', or 'a'\");\n        }\n    }\n\n    /* Check for the format spec, if present. */\n    if (i >= end) {\n        unexpected_end_of_string();\n    }\n    if (str.charAt(i) == \":\") {\n        i++;\n        if (i >= end) {\n            unexpected_end_of_string();\n        }\n\n        /* Parse the format spec. */\n        [format_spec, i] = fstring_parse(str, i, end, raw, recurse_lvl + 1, c, n);\n    }\n\n    if (i >= end || str.charAt(i) != \"}\") {\n        unexpected_end_of_string();\n    }\n\n    /* We're at a right brace. Consume it. */\n    i++;\n\n    /* And now create the FormattedValue node that represents this\n       entire expression with the conversion and format spec. */\n    let expr = new Sk.astnodes.FormattedValue(\n        simple_expression,\n        conversion,\n        format_spec,\n        LINENO(n),\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n\n    return [expr, i];\n}\n\nfunction fstring_parse(str, start, end, raw, recurse_lvl, c, n) {\n    let values = [];\n    let idx = start;\n\n    let addLiteral = (literal) => {\n        if (literal.indexOf(\"}\") !== -1) {\n            // We need to error out on any lone }s, and\n            // replace doubles with singles.\n            if (/(^|[^}])}(}})*($|[^}])/.test(literal)) {\n                throw new Sk.builtin.SyntaxError(\n                    \"f-string: single '}' is not allowed\",\n                    c.c_filename,\n                    ...get_context(n)\n                );\n            }\n            literal = literal.replace(/}}/g, \"}\");\n        }\n        values.push(\n            new Sk.astnodes.Str(\n                new Sk.builtin.str(literal),\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            )\n        );\n    };\n\n    while (idx < end) {\n        let bidx = str.indexOf(\"{\", idx);\n        if (recurse_lvl !== 0) {\n            // If there's a closing brace before the next open brace,\n            // that's our end-of-expression\n            let cbidx = str.indexOf(\"}\", idx);\n            if (cbidx !== -1) {\n                if (bidx === -1) {\n                    end = cbidx;\n                } else if (bidx > cbidx) {\n                    bidx = -1;\n                    end = cbidx;\n                }\n            }\n        }\n        if (bidx === -1) {\n            addLiteral(str.substring(idx, end));\n            idx = end;\n            break;\n        } else if (bidx + 1 < end && str.charAt(bidx + 1) === \"{\") {\n            // Swallow the double {{\n            addLiteral(str.substring(idx, bidx + 1));\n            idx = bidx + 2;\n            continue;\n        } else {\n            addLiteral(str.substring(idx, bidx));\n            idx = bidx;\n\n            // And now parse the f-string expression itself\n            let [expr, endIdx] = fstring_find_expr(str, bidx, end, raw, recurse_lvl, c, n);\n            values.push(expr);\n            idx = endIdx;\n        }\n    }\n    return [\n        new Sk.astnodes.JoinedStr(values, LINENO(n), n.col_offset, n.end_lineno, n.end_col_offset),\n        idx,\n    ];\n}\n\nfunction parsestrplus(c, n) {\n    let strs = [];\n    let lastStrNode;\n    let bytesmode;\n\n    for (let i = 0; i < NCH(n); ++i) {\n        let chstr = CHILD(n, i).value;\n        let r = parsestr(c, CHILD(n, i), chstr);\n        let str = r[0];\n        let fmode = r[1];\n        let this_bytesmode = r[2];\n\n        /* Check that we're not mixing bytes with unicode. */\n        if (i != 0 && bytesmode !== this_bytesmode) {\n            ast_error(c, n, \"cannot mix bytes and nonbytes literals\");\n        }\n        bytesmode = this_bytesmode;\n\n        if (fmode) {\n            if (!Sk.__future__.python3) {\n                throw new Sk.builtin.SyntaxError(\n                    \"invalid string (f-strings are not supported in Python 2)\",\n                    c.c_filename,\n                    ...get_context(CHILD(n, i))\n                );\n            }\n            let jss = str.$jsstr();\n            let [astnode, _] = fstring_parse(jss, 0, jss.length, false, 0, c, CHILD(n, i));\n            strs.push.apply(strs, astnode.values);\n            lastStrNode = null;\n        } else {\n            if (lastStrNode) {\n                lastStrNode.s = lastStrNode.s.sq$concat(str);\n            } else {\n                let type = bytesmode ? Sk.astnodes.Bytes : Sk.astnodes.Str;\n                lastStrNode = new type(\n                    str,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n                strs.push(lastStrNode);\n            }\n        }\n    }\n\n    if (strs.length === 1 && strs[0].constructor === Sk.astnodes.Str) {\n        return strs[0];\n    } else {\n        return new Sk.astnodes.JoinedStr(\n            strs,\n            LINENO(n),\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n}\n\nconst FLOAT_RE = new RegExp(Sk._tokenize.Floatnumber);\nconst underscore = /_/g;\n\nfunction parsenumber(c, s, lineno) {\n    s = s.replace(underscore, \"\"); // we already know that we have a valid underscore number from the tokenizer\n\n    const end = s[s.length - 1];\n    // we know it's just a single floating point imaginary complex number\n    if (end === \"j\" || end === \"J\") {\n        return new Sk.builtin.complex(0, parseFloat(s.slice(0, -1)));\n    }\n\n    // use the tokenizer float test\n    if (FLOAT_RE.test(s)) {\n        return new Sk.builtin.float_(parseFloat(s));\n    }\n\n    const start = s[0];\n    // python 2 compatiblity\n    if (\n        start === \"0\" &&\n        s !== \"0\" &&\n        s.charCodeAt(1) < 65 /** i.e. the second char is a digit and not a base */\n    ) {\n        s = \"0o\" + s.substring(1); // silent octal\n    }\n    // python2 makes no guarantee about the size of a long\n    // so only make the int literal a long if it has an L suffix\n    let isInt = true;\n    if (end === \"l\" || end === \"L\") {\n        s = s.slice(0, -1);\n        isInt = false;\n    }\n\n    // we know it's a valid octal, hex, binary or decimal so let Number do its thing\n    const val = Number(s); // we can rely on this since we know s is positive and is already a valid int literal\n    if (val > Number.MAX_SAFE_INTEGER) {\n        return isInt ? new Sk.builtin.int_(JSBI.BigInt(s)) : new Sk.builtin.lng(JSBI.BigInt(s));\n    }\n    return isInt ? new Sk.builtin.int_(val) : new Sk.builtin.lng(val);\n}\n\nfunction astForSlice(c, n) {\n    var n2;\n    var step;\n    var upper;\n    var lower;\n    var ch;\n    REQ(n, SYM.subscript);\n\n    /*\n     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]\n     sliceop: ':' [test]\n     */\n    ch = CHILD(n, 0);\n    lower = null;\n    upper = null;\n    step = null;\n    if (ch.type === TOK.T_DOT) {\n        return new Sk.astnodes.Ellipsis();\n    }\n    if (NCH(n) === 1 && ch.type === SYM.test) {\n        return new Sk.astnodes.Index(ast_for_expr(c, ch));\n    }\n    if (ch.type === SYM.test) {\n        lower = ast_for_expr(c, ch);\n    }\n    if (ch.type === TOK.T_COLON) {\n        if (NCH(n) > 1) {\n            n2 = CHILD(n, 1);\n            if (n2.type === SYM.test) {\n                upper = ast_for_expr(c, n2);\n            }\n        }\n    } else if (NCH(n) > 2) {\n        n2 = CHILD(n, 2);\n        if (n2.type === SYM.test) {\n            upper = ast_for_expr(c, n2);\n        }\n    }\n\n    ch = CHILD(n, NCH(n) - 1);\n    if (ch.type === SYM.sliceop) {\n        if (NCH(ch) === 1) {\n            ch = CHILD(ch, 0);\n            step = new Sk.astnodes.NameConstant(\n                Sk.builtin.none.none$,\n                Sk.astnodes.Load,\n                ch.lineno,\n                ch.col_offset,\n                ch.end_lineno,\n                ch.end_col_offset\n            );\n        } else {\n            ch = CHILD(ch, 1);\n            if (ch.type === SYM.test) {\n                step = ast_for_expr(c, ch);\n            }\n        }\n    }\n    return new Sk.astnodes.Slice(lower, upper, step);\n}\n\nfunction ast_for_atom(c, n) {\n    /* atom: '(' [yield_expr|testlist_comp] ')' | '[' [testlist_comp] ']'\n       | '{' [dictmaker|testlist_comp] '}' | NAME | NUMBER | STRING+\n       | '...' | 'None' | 'True' | 'False'\n    */\n    var ch = CHILD(n, 0);\n\n    switch (TYPE(ch)) {\n        case TOK.T_NAME: {\n            var name;\n            var s = STR(ch);\n            if (s.length >= 4 && s.length <= 5) {\n                if (s === \"None\") {\n                    return new Sk.astnodes.NameConstant(\n                        Sk.builtin.none.none$,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n\n                if (s === \"True\") {\n                    return new Sk.astnodes.NameConstant(\n                        Sk.builtin.bool.true$,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n\n                if (s === \"False\") {\n                    return new Sk.astnodes.NameConstant(\n                        Sk.builtin.bool.false$,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n            }\n            name = new_identifier(s, c);\n            /* All names start in Load context, but may later be changed. */\n            return new Sk.astnodes.Name(\n                name,\n                Sk.astnodes.Load,\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        }\n        case TOK.T_STRING:\n            return parsestrplus(c, n);\n        case TOK.T_NUMBER:\n            return new Sk.astnodes.Num(\n                parsenumber(c, ch.value, n.lineno),\n                n.lineno,\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        case TOK.T_ELLIPSIS /* Ellipsis */:\n            return new Sk.astnodes.Ellipsis(\n                LINENO(n),\n                n.col_offset,\n                n.end_lineno,\n                n.end_col_offset\n            );\n        case TOK.T_LPAR /* some parenthesized expressions */:\n            ch = CHILD(n, 1);\n\n            if (TYPE(ch) == TOK.T_RPAR) {\n                return new Sk.astnodes.Tuple(\n                    [],\n                    Sk.astnodes.Load,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            }\n\n            if (TYPE(ch) == SYM.yield_expr) {\n                return ast_for_expr(c, ch);\n            }\n\n            /* testlist_comp: test ( comp_for | (',' test)* [','] ) */\n            if (NCH(ch) == 1) {\n                return ast_for_testlist(c, ch);\n            }\n\n            if (TYPE(CHILD(ch, 1)) == SYM.comp_for) {\n                return copy_location(ast_for_genexp(c, ch), n);\n            } else {\n                return copy_location(ast_for_testlist(c, ch), n);\n            }\n        case TOK.T_LSQB /* list (or list comprehension) */:\n            ch = CHILD(n, 1);\n\n            if (TYPE(ch) == TOK.T_RSQB) {\n                return new Sk.astnodes.List(\n                    [],\n                    Sk.astnodes.Load,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            }\n\n            REQ(ch, SYM.testlist_comp);\n            if (NCH(ch) == 1 || TYPE(CHILD(ch, 1)) == TOK.T_COMMA) {\n                var elts = seq_for_testlist(c, ch);\n                if (!elts) {\n                    return null;\n                }\n                return new Sk.astnodes.List(\n                    elts,\n                    Sk.astnodes.Load,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            } else {\n                return copy_location(ast_for_listcomp(c, ch), n);\n            }\n        case TOK.T_LBRACE: {\n            /* dictorsetmaker: ( ((test ':' test | '**' test)\n             *                    (comp_for | (',' (test ':' test | '**' test))* [','])) |\n             *                   ((test | '*' test)\n             *                    (comp_for | (',' (test | '*' test))* [','])) ) */\n            var res;\n            ch = CHILD(n, 1);\n            if (TYPE(ch) == TOK.T_RBRACE) {\n                /* It's an empty dict. */\n                return new Sk.astnodes.Dict(\n                    null,\n                    null,\n                    LINENO(n),\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            } else {\n                var is_dict = TYPE(CHILD(ch, 0)) == TOK.T_DOUBLESTAR;\n                if (NCH(ch) == 1 || (NCH(ch) > 1 && TYPE(CHILD(ch, 1)) == TOK.T_COMMA)) {\n                    /* It's a set display. */\n                    res = ast_for_setdisplay(c, ch);\n                } else if (NCH(ch) > 1 && TYPE(CHILD(ch, 1)) == SYM.comp_for) {\n                    /* It's a set comprehension. */\n                    res = ast_for_setcomp(c, ch);\n                } else if (NCH(ch) > 3 - is_dict && TYPE(CHILD(ch, 3 - is_dict)) == SYM.comp_for) {\n                    /* It's a dictionary comprehension. */\n                    if (is_dict) {\n                        ast_error(c, n, \"dict unpacking cannot be used in dict comprehension\");\n                        return null;\n                    }\n                    res = ast_for_dictcomp(c, ch);\n                } else {\n                    /* It's a dictionary display. */\n                    res = ast_for_dictdisplay(c, ch);\n                }\n                return copy_location(res, n);\n            }\n        }\n        default:\n            Sk.asserts.fail(\"unhandled atom \" + TYPE(ch));\n            return null;\n    }\n}\n\nfunction ast_for_setdisplay(c, n) {\n    var i;\n    var elts = [];\n\n    Sk.asserts.assert(TYPE(n) === SYM.dictorsetmaker);\n\n    for (i = 0; i < NCH(n); i += 2) {\n        var expression;\n        expression = ast_for_expr(c, CHILD(n, i));\n        elts[i / 2] = expression;\n    }\n\n    return new Sk.astnodes.Set(elts, LINENO(n), n.col_offset, n.end_lineno, n.end_col_offset);\n}\n\nfunction astForAtomExpr(c, n) {\n    var i,\n        nch,\n        start = 0;\n    var e, tmp;\n\n    REQ(n, SYM.atom_expr);\n    nch = NCH(n);\n\n    if (CHILD(n, 0).type === TOK.T_AWAIT) {\n        start = 1;\n        Sk.asserts.assert(nch > 1);\n    }\n\n    e = ast_for_atom(c, CHILD(n, start));\n    if (!e) {\n        return null;\n    }\n\n    if (nch === 1) {\n        return e;\n    }\n\n    if (start && nch === 2) {\n        return new Sk.astnodes.Await(\n            e,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset /*, c->c_arena*/\n        );\n    }\n\n    for (i = start + 1; i < nch; i++) {\n        var ch = CHILD(n, i);\n        if (ch.type !== SYM.trailer) {\n            break;\n        }\n        tmp = ast_for_trailer(c, ch, e);\n        if (!tmp) {\n            return null;\n        }\n\n        tmp.lineno = e.lineno;\n        tmp.col_offset = e.col_offset;\n        e = tmp;\n    }\n\n    if (start) {\n        /* there was an AWAIT */\n        return new Sk.astnodes.Await(\n            e,\n            n.line,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset /*, c->c_arena*/\n        );\n    } else {\n        return e;\n    }\n}\n\nfunction astForPower(c, n) {\n    /* power: atom trailer* ('**' factor)*\n     */\n    var f;\n    var tmp;\n    var ch;\n    var i;\n    var e;\n    REQ(n, SYM.power);\n    e = astForAtomExpr(c, CHILD(n, 0));\n    if (NCH(n) === 1) {\n        return e;\n    }\n    if (CHILD(n, NCH(n) - 1).type === SYM.factor) {\n        f = ast_for_expr(c, CHILD(n, NCH(n) - 1));\n        e = new Sk.astnodes.BinOp(\n            e,\n            Sk.astnodes.Pow,\n            f,\n            n.lineno,\n            n.col_offset,\n            n.end_lineno,\n            n.end_col_offset\n        );\n    }\n    return e;\n}\n\nfunction astForStarred(c, n) {\n    REQ(n, SYM.star_expr);\n\n    /* The Load context is changed later */\n    return new Sk.astnodes.Starred(\n        ast_for_expr(c, CHILD(n, 1)),\n        Sk.astnodes.Load,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset /*, c.c_arena */\n    );\n}\n\nfunction ast_for_expr(c, n) {\n    /*\n     handle the full range of simple expressions\n     test: or_test ['if' or_test 'else' test] | lambdef\n     test_nocond: or_test | lambdef_nocond\n     or_test: and_test ('or' and_test)*\n     and_test: not_test ('and' not_test)*\n     not_test: 'not' not_test | comparison\n     comparison: expr (comp_op expr)*\n     expr: xor_expr ('|' xor_expr)*\n     xor_expr: and_expr ('^' and_expr)*\n     and_expr: shift_expr ('&' shift_expr)*\n     shift_expr: arith_expr (('<<'|'>>') arith_expr)*\n     arith_expr: term (('+'|'-') term)*\n     term: factor (('*'|'/'|'%'|'//') factor)*\n     factor: ('+'|'-'|'~') factor | power\n     power: atom_expr ['**' factor]\n     atom_expr: [AWAIT] atom trailer*\n     yield_expr: 'yield' [yield_arg]\n    */\n\n    var exp;\n    var cmps;\n    var ops;\n    var i;\n    var seq;\n    LOOP: while (true) {\n        switch (n.type) {\n            case SYM.test:\n            case SYM.test_nocond:\n                if (CHILD(n, 0).type === SYM.lambdef || CHILD(n, 0).type === SYM.lambdef_nocond) {\n                    return astForLambdef(c, CHILD(n, 0));\n                } else if (NCH(n) > 1) {\n                    return astForIfexpr(c, n);\n                }\n            // fallthrough\n            case SYM.or_test:\n            case SYM.and_test:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                seq = [];\n                for (i = 0; i < NCH(n); i += 2) {\n                    seq[i / 2] = ast_for_expr(c, CHILD(n, i));\n                }\n                if (CHILD(n, 1).value === \"and\") {\n                    return new Sk.astnodes.BoolOp(\n                        Sk.astnodes.And,\n                        seq,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset /*, c.c_arena*/\n                    );\n                }\n                Sk.asserts.assert(CHILD(n, 1).value === \"or\");\n                return new Sk.astnodes.BoolOp(\n                    Sk.astnodes.Or,\n                    seq,\n                    n.lineno,\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            case SYM.not_test:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                } else {\n                    return new Sk.astnodes.UnaryOp(\n                        Sk.astnodes.Not,\n                        ast_for_expr(c, CHILD(n, 1)),\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n                break;\n            case SYM.comparison:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                } else {\n                    ops = [];\n                    cmps = [];\n                    for (i = 1; i < NCH(n); i += 2) {\n                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));\n                        cmps[(i - 1) / 2] = ast_for_expr(c, CHILD(n, i + 1));\n                    }\n                    return new Sk.astnodes.Compare(\n                        ast_for_expr(c, CHILD(n, 0)),\n                        ops,\n                        cmps,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n                break;\n            case SYM.star_expr:\n                return astForStarred(c, n);\n            /* The next fize cases all handle BinOps  The main body of code\n               is the same in each case, but the switch turned inside out to\n               reuse the code for each type of operator\n             */\n            case SYM.expr:\n            case SYM.xor_expr:\n            case SYM.and_expr:\n            case SYM.shift_expr:\n            case SYM.arith_expr:\n            case SYM.term:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                return astForBinop(c, n);\n            case SYM.yield_expr:\n                var an;\n                var en;\n                var is_from = false;\n                exp = null;\n                if (NCH(n) > 1) {\n                    an = CHILD(n, 1); /* yield_arg */\n                }\n\n                if (an) {\n                    en = CHILD(an, NCH(an) - 1);\n                    if (NCH(an) == 2) {\n                        is_from = true;\n                        exp = ast_for_expr(c, en);\n                    } else {\n                        exp = ast_for_testlist(c, en);\n                    }\n                }\n\n                if (is_from) {\n                    return new Sk.astnodes.YieldFrom(\n                        exp,\n                        n.lineno,\n                        n.col_offset,\n                        n.end_lineno,\n                        n.end_col_offset\n                    );\n                }\n\n                return new Sk.astnodes.Yield(\n                    exp,\n                    n.lineno,\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            case SYM.factor:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                return astForFactor(c, n);\n            case SYM.power:\n                return astForPower(c, n);\n            default:\n                Sk.asserts.fail(\"unhandled expr\", \"n.type: %d\", n.type);\n        }\n        break;\n    }\n}\n\nfunction astForNonLocalStmt(c, n) {\n    ast_error(c, n, \"Not implemented: nonlocal\");\n}\n\nfunction astForAsyncStmt(c, n) {\n    ast_error(c, n, \"Not implemented: async\");\n}\n\n// This is only used for Python 2 support.\nfunction astForPrintStmt(c, n) {\n    if (Sk.__future__.print_function) {\n        ast_error(c, n, \"Missing parentheses in call to 'print'\");\n    }\n\n    /* print_stmt: 'print' ( [ test (',' test)* [','] ]\n     | '>>' test [ (',' test)+ [','] ] )\n     */\n    var nl;\n    var i, j;\n    var seq;\n    var start = 1;\n    var dest = null;\n    REQ(n, SYM.print_stmt);\n    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {\n        dest = ast_for_expr(c, CHILD(n, 2));\n        start = 4;\n    }\n    seq = [];\n    for (i = start, j = 0; i < NCH(n); i += 2, ++j) {\n        seq[j] = ast_for_expr(c, CHILD(n, i));\n    }\n    nl = CHILD(n, NCH(n) - 1).type === TOK.T_COMMA ? false : true;\n    return new Sk.astnodes.Print(\n        dest,\n        seq,\n        nl,\n        n.lineno,\n        n.col_offset,\n        n.end_lineno,\n        n.end_col_offset\n    );\n}\n\nfunction astForStmt(c, n) {\n    var ch;\n    if (n.type === SYM.stmt) {\n        Sk.asserts.assert(NCH(n) === 1);\n        n = CHILD(n, 0);\n    }\n    if (n.type === SYM.simple_stmt) {\n        Sk.asserts.assert(numStmts(n) === 1);\n        n = CHILD(n, 0);\n    }\n    if (n.type === SYM.small_stmt) {\n        n = CHILD(n, 0);\n        /* small_stmt: expr_stmt | del_stmt | pass_stmt | flow_stmt\n                   | import_stmt | global_stmt | nonlocal_stmt | assert_stmt\n                   | debugger_stmt (skulpt special)\n        */\n        switch (n.type) {\n            case SYM.expr_stmt:\n                return ast_for_exprStmt(c, n);\n            case SYM.del_stmt:\n                return astForDelStmt(c, n);\n            case SYM.pass_stmt:\n                return new Sk.astnodes.Pass(n.lineno, n.col_offset, n.end_lineno, n.end_col_offset);\n            case SYM.flow_stmt:\n                return ast_for_flow_stmt(c, n);\n            case SYM.import_stmt:\n                return astForImportStmt(c, n);\n            case SYM.global_stmt:\n                return astForGlobalStmt(c, n);\n            case SYM.nonlocal_stmt:\n                return astForNonLocalStmt(c, n);\n            case SYM.assert_stmt:\n                return astForAssertStmt(c, n);\n            case SYM.print_stmt:\n                return astForPrintStmt(c, n);\n            case SYM.debugger_stmt:\n                return new Sk.astnodes.Debugger(\n                    n.lineno,\n                    n.col_offset,\n                    n.end_lineno,\n                    n.end_col_offset\n                );\n            default:\n                Sk.asserts.fail(\"unhandled small_stmt\");\n        }\n    } else {\n        /* compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt\n                        | funcdef | classdef | decorated | async_stmt\n        */\n        ch = CHILD(n, 0);\n        REQ(n, SYM.compound_stmt);\n        switch (ch.type) {\n            case SYM.if_stmt:\n                return astForIfStmt(c, ch);\n            case SYM.while_stmt:\n                return astForWhileStmt(c, ch);\n            case SYM.for_stmt:\n                return astForForStmt(c, ch);\n            case SYM.try_stmt:\n                return astForTryStmt(c, ch);\n            case SYM.with_stmt:\n                return ast_for_with_stmt(c, ch);\n            case SYM.funcdef:\n                return ast_for_funcdef(c, ch, []);\n            case SYM.classdef:\n                return astForClassdef(c, ch, []);\n            case SYM.decorated:\n                return ast_for_decorated(c, ch);\n            case SYM.async_stmt:\n                return astForAsyncStmt(c, ch);\n            default:\n                Sk.asserts.assert(\"unhandled compound_stmt\");\n        }\n    }\n}\n\nSk.astFromParse = function (n, filename, c_flags) {\n    var j;\n    var num;\n    var ch;\n    var i;\n    var c = new Compiling(\"utf-8\", filename, c_flags);\n    var stmts = [];\n    var k = 0;\n    switch (n.type) {\n        case SYM.file_input:\n            for (i = 0; i < NCH(n) - 1; ++i) {\n                ch = CHILD(n, i);\n                if (ch.type === TOK.T_NEWLINE) {\n                    continue;\n                }\n                REQ(ch, SYM.stmt);\n                num = numStmts(ch);\n                if (num === 1) {\n                    stmts[k++] = astForStmt(c, ch);\n                } else {\n                    ch = CHILD(ch, 0);\n                    REQ(ch, SYM.simple_stmt);\n                    for (j = 0; j < num; ++j) {\n                        stmts[k++] = astForStmt(c, CHILD(ch, j * 2));\n                    }\n                }\n            }\n            return new Sk.astnodes.Module(stmts);\n        case SYM.eval_input:\n            Sk.asserts.fail(\"todo;\");\n        case SYM.single_input:\n            Sk.asserts.fail(\"todo;\");\n        default:\n            Sk.asserts.fail(\"todo;\");\n    }\n};\n\nSk.astDump = function (node) {\n    var spaces = function (n) {\n        // todo; blurgh\n        var i;\n        var ret = \"\";\n        for (i = 0; i < n; ++i) {\n            ret += \" \";\n        }\n        return ret;\n    };\n\n    var _format = function (node, indent) {\n        var ret;\n        var elemsstr;\n        var x;\n        var elems;\n        var fieldstr;\n        var field;\n        var attrs;\n        var fieldlen;\n        var b;\n        var a;\n        var i;\n        var fields;\n        var namelen;\n        if (node === null) {\n            return indent + \"None\";\n        } else if (\n            node.prototype &&\n            node.prototype._astname !== undefined &&\n            node.prototype._isenum\n        ) {\n            return indent + node.prototype._astname + \"()\";\n        } else if (node._astname !== undefined) {\n            namelen = spaces(node._astname.length + 1);\n            fields = [];\n            for (i = 0; i < node._fields.length; i += 2) {\n                // iter_fields\n                a = node._fields[i]; // field name\n                b = node._fields[i + 1](node); // field getter func\n                fieldlen = spaces(a.length + 1);\n                fields.push([a, _format(b, indent + namelen + fieldlen)]);\n            }\n            attrs = [];\n            for (i = 0; i < fields.length; ++i) {\n                field = fields[i];\n                attrs.push(field[0] + \"=\" + field[1].replace(/^\\s+/, \"\"));\n            }\n            fieldstr = attrs.join(\",\\n\" + indent + namelen);\n            return indent + node._astname + \"(\" + fieldstr + \")\";\n        } else if (Sk.isArrayLike(node)) {\n            //Sk.debugout(\"arr\", node.length);\n            elems = [];\n            for (i = 0; i < node.length; ++i) {\n                x = node[i];\n                elems.push(_format(x, indent + \" \"));\n            }\n            elemsstr = elems.join(\",\\n\");\n            return indent + \"[\" + elemsstr.replace(/^\\s+/, \"\") + \"]\";\n        } else {\n            if (node === true) {\n                ret = \"True\";\n            } else if (node === false) {\n                ret = \"False\";\n            } else if (node instanceof Sk.builtin.lng) {\n                ret = node.tp$str().v;\n            } else if (node instanceof Sk.builtin.str) {\n                ret = node[\"$r\"]().v;\n            } else {\n                ret = \"\" + node;\n            }\n            return indent + ret;\n        }\n    };\n\n    return _format(node, \"\");\n};\n\nSk.INHERITANCE_MAP = {\n    mod: [Sk.astnodes.Module, Sk.astnodes.Interactive, Sk.astnodes.Expression, Sk.astnodes.Suite],\n    stmt: [\n        Sk.astnodes.FunctionDef,\n        Sk.astnodes.AsyncFunctionDef,\n        Sk.astnodes.ClassDef,\n        Sk.astnodes.Return,\n        Sk.astnodes.Delete,\n        Sk.astnodes.Assign,\n        Sk.astnodes.AugAssign,\n        Sk.astnodes.AnnAssign,\n        Sk.astnodes.For,\n        Sk.astnodes.AsyncFor,\n        Sk.astnodes.While,\n        Sk.astnodes.If,\n        Sk.astnodes.With,\n        Sk.astnodes.AsyncWith,\n        Sk.astnodes.Raise,\n        Sk.astnodes.Try,\n        Sk.astnodes.Assert,\n        Sk.astnodes.Import,\n        Sk.astnodes.ImportFrom,\n        Sk.astnodes.Global,\n        Sk.astnodes.Nonlocal,\n        Sk.astnodes.Expr,\n        Sk.astnodes.Pass,\n        Sk.astnodes.Break,\n        Sk.astnodes.Continue,\n        Sk.astnodes.Print,\n        Sk.astnodes.Debugger,\n    ],\n    expr: [\n        Sk.astnodes.BoolOp,\n        Sk.astnodes.BinOp,\n        Sk.astnodes.UnaryOp,\n        Sk.astnodes.Lambda,\n        Sk.astnodes.IfExp,\n        Sk.astnodes.Dict,\n        Sk.astnodes.Set,\n        Sk.astnodes.ListComp,\n        Sk.astnodes.SetComp,\n        Sk.astnodes.DictComp,\n        Sk.astnodes.GeneratorExp,\n        Sk.astnodes.Await,\n        Sk.astnodes.Yield,\n        Sk.astnodes.YieldFrom,\n        Sk.astnodes.Compare,\n        Sk.astnodes.Call,\n        Sk.astnodes.Num,\n        Sk.astnodes.Str,\n        Sk.astnodes.FormattedValue,\n        Sk.astnodes.JoinedStr,\n        Sk.astnodes.Bytes,\n        Sk.astnodes.Ellipsis,\n        Sk.astnodes.NameConstant,\n        Sk.astnodes.Constant,\n        Sk.astnodes.Attribute,\n        Sk.astnodes.Subscript,\n        Sk.astnodes.Starred,\n        Sk.astnodes.Name,\n        Sk.astnodes.List,\n        Sk.astnodes.Tuple,\n    ],\n    expr_context: [\n        Sk.astnodes.Load,\n        Sk.astnodes.Store,\n        Sk.astnodes.Del,\n        Sk.astnodes.AugLoad,\n        Sk.astnodes.AugStore,\n        Sk.astnodes.Param,\n    ],\n    slice: [Sk.astnodes.Slice, Sk.astnodes.ExtSlice, Sk.astnodes.Index],\n    boolop: [Sk.astnodes.And, Sk.astnodes.Or],\n    operator: [\n        Sk.astnodes.Add,\n        Sk.astnodes.Sub,\n        Sk.astnodes.Mult,\n        Sk.astnodes.MatMult,\n        Sk.astnodes.Div,\n        Sk.astnodes.Mod,\n        Sk.astnodes.Pow,\n        Sk.astnodes.LShift,\n        Sk.astnodes.RShift,\n        Sk.astnodes.BitOr,\n        Sk.astnodes.BitXor,\n        Sk.astnodes.BitAnd,\n        Sk.astnodes.FloorDiv,\n    ],\n    unaryop: [Sk.astnodes.Invert, Sk.astnodes.Not, Sk.astnodes.UAdd, Sk.astnodes.USub],\n    cmpop: [\n        Sk.astnodes.Eq,\n        Sk.astnodes.NotEq,\n        Sk.astnodes.Lt,\n        Sk.astnodes.LtE,\n        Sk.astnodes.Gt,\n        Sk.astnodes.GtE,\n        Sk.astnodes.Is,\n        Sk.astnodes.IsNot,\n        Sk.astnodes.In,\n        Sk.astnodes.NotIn,\n    ],\n    comprehension: [],\n    excepthandler: [Sk.astnodes.ExceptHandler],\n    arguments_: [],\n    arg: [],\n    keyword: [],\n    alias: [],\n    withitem: [],\n};\n\nSk.exportSymbol(\"Sk.astFromParse\", Sk.astFromParse);\nSk.exportSymbol(\"Sk.astDump\", Sk.astDump);\nSk.exportSymbol(\"Sk.INHERITANCE_MAP\", Sk.INHERITANCE_MAP);\n", "/* Flags for def-use information */\n\nvar DEF_GLOBAL = 1;\n/* global stmt */\nvar DEF_LOCAL = 2;\n/* assignment in code block */\nvar DEF_PARAM = 2 << 1;\n/* formal parameter */\nvar USE = 2 << 2;\n/* name is used */\nvar DEF_STAR = 2 << 3;\n/* parameter is star arg */\nvar DEF_DOUBLESTAR = 2 << 4;\n/* parameter is star-star arg */\nvar DEF_INTUPLE = 2 << 5;\n/* name defined in tuple in parameters */\nvar DEF_FREE = 2 << 6;\n/* name used but not defined in nested block */\nvar DEF_FREE_GLOBAL = 2 << 7;\n/* free variable is actually implicit global */\nvar DEF_FREE_CLASS = 2 << 8;\n/* free variable from class's method */\nvar DEF_IMPORT = 2 << 9;\n/* assignment occurred via import */\nvar DEF_NONLOCAL = 2 << 10;\n/* nonlocal stmt */\nvar DEF_ANNOT = 2 << 11;\n/* this name is annotated */\n\nvar DEF_BOUND = DEF_LOCAL | DEF_PARAM | DEF_IMPORT;\n\n/* GLOBAL_EXPLICIT and GLOBAL_IMPLICIT are used internally by the symbol\n table.  GLOBAL is returned from PyST_GetScope() for either of them.\n It is stored in ste_symbols at bits 12-14.\n */\nvar SCOPE_OFF = 11;\nvar SCOPE_MASK = 7;\n\nvar LOCAL = 1;\nvar GLOBAL_EXPLICIT = 2;\nvar GLOBAL_IMPLICIT = 3;\nvar FREE = 4;\nvar CELL = 5;\n\n/* The following three names are used for the ste_unoptimized bit field */\nvar OPT_IMPORT_STAR = 1;\nvar OPT_EXEC = 2;\nvar OPT_BARE_EXEC = 4;\nvar OPT_TOPLEVEL = 8;\n/* top-level names, including eval and exec */\n\nvar GENERATOR = 2;\nvar GENERATOR_EXPRESSION = 2;\n\nvar ModuleBlock = \"module\";\nvar FunctionBlock = \"function\";\nvar ClassBlock = \"class\";\n\nvar SYMTAB_CONSTS = {\n    DEF_GLOBAL: DEF_GLOBAL,\n    DEF_LOCAL: DEF_LOCAL,\n    DEF_PARAM: DEF_PARAM,\n    USE: USE,\n    DEF_STAR: DEF_STAR,\n    DEF_DOUBLESTAR: DEF_DOUBLESTAR,\n    DEF_INTUPLE: DEF_INTUPLE,\n    DEF_FREE: DEF_FREE,\n    DEF_FREE_GLOBAL: DEF_FREE_GLOBAL,\n    DEF_FREE_CLASS: DEF_FREE_CLASS,\n    DEF_IMPORT: DEF_IMPORT,\n    DEF_BOUND: DEF_BOUND,\n    SCOPE_OFF: SCOPE_OFF,\n    SCOPE_MASK: SCOPE_MASK,\n    LOCAL: LOCAL,\n    GLOBAL_EXPLICIT: GLOBAL_EXPLICIT,\n    GLOBAL_IMPLICIT: GLOBAL_IMPLICIT,\n    FREE: FREE,\n    CELL: CELL,\n    OPT_IMPORT_STAR: OPT_IMPORT_STAR,\n    OPT_EXEC: OPT_EXEC,\n    OPT_BARE_EXEC: OPT_BARE_EXEC,\n    OPT_TOPLEVEL: OPT_TOPLEVEL,\n    GENERATOR: GENERATOR,\n    GENERATOR_EXPRESSION: GENERATOR_EXPRESSION,\n    ModuleBlock: ModuleBlock,\n    FunctionBlock: FunctionBlock,\n    ClassBlock: ClassBlock,\n};\n\nSk.exportSymbol(\"Sk.SYMTAB_CONSTS\", SYMTAB_CONSTS);\n\n/**\n * @constructor\n * @param {string} name\n * @param {number} flags\n * @param {Array.<SymbolTableScope>} namespaces\n */\nfunction Symbol_(name, flags, namespaces) {\n    this.__name = name;\n    this.__flags = flags;\n    this.__scope = (flags >> SCOPE_OFF) & SCOPE_MASK;\n    this.__namespaces = namespaces || [];\n}\n\nSymbol_.prototype.get_name = function () {\n    return this.__name;\n};\nSymbol_.prototype.is_referenced = function () {\n    return !!(this.__flags & USE);\n};\nSymbol_.prototype.is_parameter = function () {\n    return !!(this.__flags & DEF_PARAM);\n};\nSymbol_.prototype.is_global = function () {\n    return this.__scope === GLOBAL_IMPLICIT || this.__scope == GLOBAL_EXPLICIT;\n};\nSymbol_.prototype.is_declared_global = function () {\n    return this.__scope == GLOBAL_EXPLICIT;\n};\nSymbol_.prototype.is_local = function () {\n    return !!(this.__flags & DEF_BOUND);\n};\nSymbol_.prototype.is_free = function () {\n    return this.__scope == FREE;\n};\nSymbol_.prototype.is_imported = function () {\n    return !!(this.__flags & DEF_IMPORT);\n};\nSymbol_.prototype.is_assigned = function () {\n    return !!(this.__flags & DEF_LOCAL);\n};\nSymbol_.prototype.is_namespace = function () {\n    return this.__namespaces && this.__namespaces.length > 0;\n};\nSymbol_.prototype.get_namespaces = function () {\n    return this.__namespaces;\n};\n\nvar astScopeCounter = 0;\n\n/**\n * @constructor\n * @param {SymbolTable} table\n * @param {string} name\n * @param {string} type\n * @param {number} lineno\n */\nfunction SymbolTableScope(table, name, type, ast, lineno) {\n    this.symFlags = {};\n    this.name = name;\n    this.varnames = [];\n    this.children = [];\n    this.blockType = type;\n\n    this.isNested = false;\n    this.hasFree = false;\n    this.childHasFree = false; // true if child block has free vars including free refs to globals\n    this.generator = false;\n    this.varargs = false;\n    this.varkeywords = false;\n    this.returnsValue = false;\n\n    this.lineno = lineno;\n\n    this.table = table;\n\n    if (table.cur && (table.cur.nested || table.cur.blockType === FunctionBlock)) {\n        this.isNested = true;\n    }\n\n    ast.scopeId = astScopeCounter++;\n    table.stss[ast.scopeId] = this;\n\n    // cache of Symbols for returning to other parts of code\n    this.symbols = {};\n}\n\nSymbolTableScope.prototype.get_type = function () {\n    return this.blockType;\n};\nSymbolTableScope.prototype.get_name = function () {\n    return this.name;\n};\nSymbolTableScope.prototype.get_lineno = function () {\n    return this.lineno;\n};\nSymbolTableScope.prototype.is_nested = function () {\n    return this.isNested;\n};\nSymbolTableScope.prototype.has_children = function () {\n    return this.children.length > 0;\n};\nSymbolTableScope.prototype.get_identifiers = function () {\n    return this._identsMatching(function () {\n        return true;\n    });\n};\nSymbolTableScope.prototype.lookup = function (name) {\n    var namespaces;\n    var flags;\n    var sym;\n    if (!this.symbols.hasOwnProperty(name)) {\n        flags = this.symFlags[name];\n        namespaces = this.__check_children(name);\n        sym = this.symbols[name] = new Symbol_(name, flags, namespaces);\n    } else {\n        sym = this.symbols[name];\n    }\n    return sym;\n};\nSymbolTableScope.prototype.__check_children = function (name) {\n    //print(\"  check_children:\", name);\n    var child;\n    var i;\n    var ret = [];\n    for (i = 0; i < this.children.length; ++i) {\n        child = this.children[i];\n        if (child.name === name) {\n            ret.push(child);\n        }\n    }\n    return ret;\n};\n\nSymbolTableScope.prototype._identsMatching = function (f) {\n    var k;\n    var ret = [];\n    for (k in this.symFlags) {\n        if (this.symFlags.hasOwnProperty(k)) {\n            if (f(this.symFlags[k])) {\n                ret.push(k);\n            }\n        }\n    }\n    ret.sort();\n    return ret;\n};\nSymbolTableScope.prototype.get_parameters = function () {\n    Sk.asserts.assert(\n        this.get_type() == \"function\",\n        \"get_parameters only valid for function scopes\"\n    );\n    if (!this._funcParams) {\n        this._funcParams = this._identsMatching(function (x) {\n            return x & DEF_PARAM;\n        });\n    }\n    return this._funcParams;\n};\nSymbolTableScope.prototype.get_locals = function () {\n    Sk.asserts.assert(this.get_type() == \"function\", \"get_locals only valid for function scopes\");\n    if (!this._funcLocals) {\n        this._funcLocals = this._identsMatching(function (x) {\n            return x & DEF_BOUND;\n        });\n    }\n    return this._funcLocals;\n};\nSymbolTableScope.prototype.get_globals = function () {\n    Sk.asserts.assert(this.get_type() == \"function\", \"get_globals only valid for function scopes\");\n    if (!this._funcGlobals) {\n        this._funcGlobals = this._identsMatching(function (x) {\n            var masked = (x >> SCOPE_OFF) & SCOPE_MASK;\n            return masked == GLOBAL_IMPLICIT || masked == GLOBAL_EXPLICIT;\n        });\n    }\n    return this._funcGlobals;\n};\nSymbolTableScope.prototype.get_frees = function () {\n    Sk.asserts.assert(this.get_type() == \"function\", \"get_frees only valid for function scopes\");\n    if (!this._funcFrees) {\n        this._funcFrees = this._identsMatching(function (x) {\n            var masked = (x >> SCOPE_OFF) & SCOPE_MASK;\n            return masked == FREE;\n        });\n    }\n    return this._funcFrees;\n};\nSymbolTableScope.prototype.get_methods = function () {\n    var i;\n    var all;\n    Sk.asserts.assert(this.get_type() == \"class\", \"get_methods only valid for class scopes\");\n    if (!this._classMethods) {\n        // todo; uniq?\n        all = [];\n        for (i = 0; i < this.children.length; ++i) {\n            all.push(this.children[i].name);\n        }\n        all.sort();\n        this._classMethods = all;\n    }\n    return this._classMethods;\n};\nSymbolTableScope.prototype.getScope = function (name) {\n    //print(\"getScope\");\n    //for (var k in this.symFlags) print(k);\n    var v = this.symFlags[name];\n    if (v === undefined) {\n        return 0;\n    }\n    return (v >> SCOPE_OFF) & SCOPE_MASK;\n};\n\n/**\n * @constructor\n * @param {string} filename\n */\nfunction SymbolTable(filename) {\n    this.filename = filename;\n    this.cur = null;\n    this.top = null;\n    this.stack = [];\n    this.global = null; // points at top level module symFlags\n    this.curClass = null; // current class or null\n    this.tmpname = 0;\n\n    // mapping from ast nodes to their scope if they have one. we add an\n    // id to the ast node when a scope is created for it, and store it in\n    // here for the compiler to lookup later.\n    this.stss = {};\n}\n\nSymbolTable.prototype.getStsForAst = function (ast) {\n    var v;\n    Sk.asserts.assert(ast.scopeId !== undefined, \"ast wasn't added to st?\");\n    v = this.stss[ast.scopeId];\n    Sk.asserts.assert(v !== undefined, \"unknown sym tab entry\");\n    return v;\n};\n\nSymbolTable.prototype.SEQStmt = function (nodes) {\n    var val;\n    var i;\n    var len;\n    if (nodes !== null) {\n        Sk.asserts.assert(Sk.isArrayLike(nodes), \"SEQ: nodes isn't array? got \" + nodes.toString());\n        len = nodes.length;\n        for (i = 0; i < len; ++i) {\n            val = nodes[i];\n            if (val) {\n                this.visitStmt(val);\n            }\n        }\n    }\n};\n\nSymbolTable.prototype.SEQExpr = function (nodes) {\n    var val;\n    var i;\n    var len;\n    if (nodes !== null) {\n        Sk.asserts.assert(Sk.isArrayLike(nodes), \"SEQ: nodes isn't array? got \" + nodes.toString());\n        len = nodes.length;\n        for (i = 0; i < len; ++i) {\n            val = nodes[i];\n            if (val) {\n                this.visitExpr(val);\n            }\n        }\n    }\n};\n\nSymbolTable.prototype.enterBlock = function (name, blockType, ast, lineno) {\n    var prev;\n    name = Sk.fixReserved(name);\n    //print(\"enterBlock:\", name);\n    prev = null;\n    if (this.cur) {\n        prev = this.cur;\n        this.stack.push(this.cur);\n    }\n    this.cur = new SymbolTableScope(this, name, blockType, ast, lineno);\n    if (name === \"top\") {\n        this.global = this.cur.symFlags;\n    }\n    if (prev) {\n        //print(\"    adding\", this.cur.name, \"to\", prev.name);\n        prev.children.push(this.cur);\n    }\n};\n\nSymbolTable.prototype.exitBlock = function () {\n    //print(\"exitBlock\");\n    this.cur = null;\n    if (this.stack.length > 0) {\n        this.cur = this.stack.pop();\n    }\n};\n\nSymbolTable.prototype.visitParams = function (args, toplevel, lineno) {\n    var arg;\n    var i;\n    for (i = 0; i < args.length; ++i) {\n        arg = args[i];\n        if (arg.constructor === Sk.astnodes.arg) {\n            // TODO arguments are more complicated in Python 3...\n            this.addDef(arg.arg, DEF_PARAM, lineno);\n        } else {\n            // Tuple isn't supported\n            throw new Sk.builtin.SyntaxError(\n                \"invalid expression in parameter list\",\n                this.filename,\n                lineno\n            );\n        }\n    }\n};\n\nSymbolTable.prototype.visitAnnotations = function (a, returns) {\n    if (a.posonlyargs) {\n        this.visitArgAnnotations(a.posonlyargs);\n    }\n    if (a.args) {\n        this.visitArgAnnotations(a.args);\n    }\n    if (a.vararg && a.vararg.annotation) {\n        this.visitExpr(a.vararg.annotation);\n    }\n    if (a.kwarg && a.kwarg.annotation) {\n        this.visitExpr(a.kwarg.annotation);\n    }\n    if (a.kwonlyargs) {\n        this.visitArgAnnotations(a.kwonlyargs);\n    }\n    if (returns) {\n        this.visitExpr(returns);\n    }\n};\n\nSymbolTable.prototype.visitArgAnnotations = function (args) {\n    for (let i = 0; i < args.length; i++) {\n        const arg = args[i];\n        if (arg.annotation) {\n            this.visitExpr(arg.annotation);\n        }\n    }\n};\n\nSymbolTable.prototype.visitArguments = function (a, lineno) {\n    if (a.args) {\n        this.visitParams(a.args, true, lineno);\n    }\n    if (a.kwonlyargs) {\n        this.visitParams(a.kwonlyargs, true, lineno);\n    }\n    if (a.vararg) {\n        this.addDef(a.vararg.arg, DEF_PARAM, lineno);\n        this.cur.varargs = true;\n    }\n    if (a.kwarg) {\n        this.addDef(a.kwarg.arg, DEF_PARAM, lineno);\n        this.cur.varkeywords = true;\n    }\n};\n\nSymbolTable.prototype.newTmpname = function (lineno) {\n    this.addDef(new Sk.builtin.str(\"_[\" + ++this.tmpname + \"]\"), DEF_LOCAL, lineno);\n};\n\nSymbolTable.prototype.addDef = function (name, flag, lineno) {\n    var fromGlobal;\n    var val;\n    var mangled = Sk.mangleName(this.curClass, name).v;\n    mangled = Sk.fixReserved(mangled);\n    val = this.cur.symFlags[mangled];\n    if (val !== undefined) {\n        if (flag & DEF_PARAM && val & DEF_PARAM) {\n            throw new Sk.builtin.SyntaxError(\n                \"duplicate argument '\" + name.v + \"' in function definition\",\n                this.filename,\n                lineno\n            );\n        }\n        val |= flag;\n    } else {\n        val = flag;\n    }\n    this.cur.symFlags[mangled] = val;\n    if (flag & DEF_PARAM) {\n        this.cur.varnames.push(mangled);\n    } else if (flag & DEF_GLOBAL) {\n        val = flag;\n        fromGlobal = this.global[mangled];\n        if (fromGlobal !== undefined) {\n            val |= fromGlobal;\n        }\n        this.global[mangled] = val;\n    }\n};\n\nSymbolTable.prototype.visitSlice = function (s) {\n    var i;\n    switch (s.constructor) {\n        case Sk.astnodes.Slice:\n            if (s.lower) {\n                this.visitExpr(s.lower);\n            }\n            if (s.upper) {\n                this.visitExpr(s.upper);\n            }\n            if (s.step) {\n                this.visitExpr(s.step);\n            }\n            break;\n        case Sk.astnodes.ExtSlice:\n            for (i = 0; i < s.dims.length; ++i) {\n                this.visitSlice(s.dims[i]);\n            }\n            break;\n        case Sk.astnodes.Index:\n            this.visitExpr(s.value);\n            break;\n        case Sk.astnodes.Ellipsis:\n            break;\n    }\n};\n\nSymbolTable.prototype.visitStmt = function (s) {\n    var cur;\n    var name;\n    var i;\n    var nameslen;\n    var tmp;\n    var e_name;\n    Sk.asserts.assert(s !== undefined, \"visitStmt called with undefined\");\n    switch (s.constructor) {\n        case Sk.astnodes.FunctionDef:\n            this.addDef(s.name, DEF_LOCAL, s.lineno);\n            if (s.args.defaults) {\n                this.SEQExpr(s.args.defaults);\n            }\n            if (s.decorator_list) {\n                this.SEQExpr(s.decorator_list);\n            }\n            if (s.args.kw_defaults) {\n                this.SEQExpr(s.args.kw_defaults);\n            }\n            this.visitAnnotations(s.args, s.returns);\n            this.enterBlock(s.name.v, FunctionBlock, s, s.lineno);\n            this.visitArguments(s.args, s.lineno);\n            this.SEQStmt(s.body);\n            this.exitBlock();\n            break;\n        case Sk.astnodes.ClassDef:\n            this.addDef(s.name, DEF_LOCAL, s.lineno);\n            this.SEQExpr(s.bases);\n            if (s.decorator_list) {\n                this.SEQExpr(s.decorator_list);\n            }\n            this.enterBlock(s.name.v, ClassBlock, s, s.lineno);\n            tmp = this.curClass;\n            this.curClass = s.name;\n            this.SEQStmt(s.body);\n            this.exitBlock();\n            break;\n        case Sk.astnodes.Return:\n            if (s.value) {\n                this.visitExpr(s.value);\n                this.cur.returnsValue = true;\n                if (this.cur.generator) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"'return' with argument inside generator\",\n                        this.filename,\n                        s.lineno\n                    );\n                }\n            }\n            break;\n        case Sk.astnodes.Delete:\n            this.SEQExpr(s.targets);\n            break;\n        case Sk.astnodes.Assign:\n            this.SEQExpr(s.targets);\n            this.visitExpr(s.value);\n            break;\n        case Sk.astnodes.AnnAssign:\n            if (s.target.constructor == Sk.astnodes.Name) {\n                e_name = s.target;\n                name = Sk.mangleName(this.curClass, e_name.id).v;\n                name = Sk.fixReserved(name);\n                cur = this.cur.symFlags[name];\n                if (\n                    cur & (DEF_GLOBAL | DEF_NONLOCAL) &&\n                    this.global != this.cur.symFlags && // TODO\n                    s.simple\n                ) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"annotated name '\" + name + \"' can't be global\",\n                        this.filename,\n                        s.lineno\n                    );\n                }\n                if (s.simple) {\n                    this.addDef(new Sk.builtin.str(name), DEF_ANNOT | DEF_LOCAL, s.lineno);\n                } else if (s.value) {\n                    this.addDef(new Sk.builtin.str(name), DEF_LOCAL, s.lineno);\n                }\n            } else {\n                this.visitExpr(s.target);\n            }\n            this.visitExpr(s.annotation);\n            if (s.value) {\n                this.visitExpr(s.value);\n            }\n            break;\n        case Sk.astnodes.AugAssign:\n            this.visitExpr(s.target);\n            this.visitExpr(s.value);\n            break;\n        case Sk.astnodes.Print:\n            if (s.dest) {\n                this.visitExpr(s.dest);\n            }\n            this.SEQExpr(s.values);\n            break;\n        case Sk.astnodes.For:\n            this.visitExpr(s.target);\n            this.visitExpr(s.iter);\n            this.SEQStmt(s.body);\n            if (s.orelse) {\n                this.SEQStmt(s.orelse);\n            }\n            break;\n        case Sk.astnodes.While:\n            this.visitExpr(s.test);\n            this.SEQStmt(s.body);\n            if (s.orelse) {\n                this.SEQStmt(s.orelse);\n            }\n            break;\n        case Sk.astnodes.If:\n            this.visitExpr(s.test);\n            this.SEQStmt(s.body);\n            if (s.orelse) {\n                this.SEQStmt(s.orelse);\n            }\n            break;\n        case Sk.astnodes.Raise:\n            if (s.exc) {\n                this.visitExpr(s.exc);\n                // Our hacked AST supports both Python 2 (inst, tback)\n                // and Python 3 (cause) versions of the Raise statement\n                if (s.inst) {\n                    this.visitExpr(s.inst);\n                    if (s.tback) {\n                        this.visitExpr(s.tback);\n                    }\n                }\n                if (s.cause) {\n                    this.visitExpr(s.cause);\n                }\n            }\n            break;\n        case Sk.astnodes.Assert:\n            this.visitExpr(s.test);\n            if (s.msg) {\n                this.visitExpr(s.msg);\n            }\n            break;\n        case Sk.astnodes.Import:\n        case Sk.astnodes.ImportFrom:\n            this.visitAlias(s.names, s.lineno);\n            break;\n        case Sk.astnodes.Global:\n            nameslen = s.names.length;\n            for (i = 0; i < nameslen; ++i) {\n                name = Sk.mangleName(this.curClass, s.names[i]).v;\n                name = Sk.fixReserved(name);\n                cur = this.cur.symFlags[name];\n                if (cur & (DEF_LOCAL | USE)) {\n                    if (cur & DEF_LOCAL) {\n                        throw new Sk.builtin.SyntaxError(\n                            \"name '\" + name + \"' is assigned to before global declaration\",\n                            this.filename,\n                            s.lineno\n                        );\n                    } else {\n                        throw new Sk.builtin.SyntaxError(\n                            \"name '\" + name + \"' is used prior to global declaration\",\n                            this.filename,\n                            s.lineno\n                        );\n                    }\n                }\n                this.addDef(new Sk.builtin.str(name), DEF_GLOBAL, s.lineno);\n            }\n            break;\n        case Sk.astnodes.Expr:\n            this.visitExpr(s.value);\n            break;\n        case Sk.astnodes.Pass:\n        case Sk.astnodes.Break:\n        case Sk.astnodes.Continue:\n        case Sk.astnodes.Debugger:\n            // nothing\n            break;\n        case Sk.astnodes.With:\n            VISIT_SEQ(this.visit_withitem.bind(this), s.items);\n            VISIT_SEQ(this.visitStmt.bind(this), s.body);\n            break;\n\n        case Sk.astnodes.Try:\n            this.SEQStmt(s.body);\n            this.visitExcepthandlers(s.handlers);\n            this.SEQStmt(s.orelse);\n            this.SEQStmt(s.finalbody);\n            break;\n\n        default:\n            Sk.asserts.fail(\"Unhandled type \" + s.constructor.name + \" in visitStmt\");\n    }\n};\n\nSymbolTable.prototype.visit_withitem = function (item) {\n    this.visitExpr(item.context_expr);\n    if (item.optional_vars) {\n        this.visitExpr(item.optional_vars);\n    }\n};\n\nfunction VISIT_SEQ(visitFunc, seq) {\n    var i;\n    for (i = 0; i < seq.length; i++) {\n        var elt = seq[i];\n        visitFunc(elt);\n    }\n}\n\nSymbolTable.prototype.visitExpr = function (e) {\n    var i;\n    Sk.asserts.assert(e !== undefined, \"visitExpr called with undefined\");\n    // console.log(\"  e: \", e.constructor.name);\n    switch (e.constructor) {\n        case Sk.astnodes.BoolOp:\n            this.SEQExpr(e.values);\n            break;\n        case Sk.astnodes.BinOp:\n            this.visitExpr(e.left);\n            this.visitExpr(e.right);\n            break;\n        case Sk.astnodes.UnaryOp:\n            this.visitExpr(e.operand);\n            break;\n        case Sk.astnodes.Lambda:\n            this.addDef(new Sk.builtin.str(\"lambda\"), DEF_LOCAL, e.lineno);\n            if (e.args.defaults) {\n                this.SEQExpr(e.args.defaults);\n            }\n            this.enterBlock(\"lambda\", FunctionBlock, e, e.lineno);\n            this.visitArguments(e.args, e.lineno);\n            this.visitExpr(e.body);\n            this.exitBlock();\n            break;\n        case Sk.astnodes.IfExp:\n            this.visitExpr(e.test);\n            this.visitExpr(e.body);\n            this.visitExpr(e.orelse);\n            break;\n        case Sk.astnodes.Dict:\n            this.SEQExpr(e.keys);\n            this.SEQExpr(e.values);\n            break;\n        case Sk.astnodes.DictComp:\n            this.newTmpname(e.lineno);\n            this.visitExpr(e.key);\n            this.visitExpr(e.value);\n            this.visitComprehension(e.generators, 0);\n            break;\n        case Sk.astnodes.SetComp:\n            this.newTmpname(e.lineno);\n            this.visitExpr(e.elt);\n            this.visitComprehension(e.generators, 0);\n            break;\n        case Sk.astnodes.ListComp:\n            this.newTmpname(e.lineno);\n            this.visitExpr(e.elt);\n            this.visitComprehension(e.generators, 0);\n            break;\n        case Sk.astnodes.GeneratorExp:\n            this.visitGenexp(e);\n            break;\n        case Sk.astnodes.YieldFrom:\n        case Sk.astnodes.Yield:\n            if (e.value) {\n                this.visitExpr(e.value);\n            }\n            this.cur.generator = true;\n            if (this.cur.returnsValue) {\n                throw new Sk.builtin.SyntaxError(\n                    \"'return' with argument inside generator\",\n                    this.filename,\n                    e.lineno\n                );\n            }\n            break;\n        case Sk.astnodes.Compare:\n            this.visitExpr(e.left);\n            this.SEQExpr(e.comparators);\n            break;\n        case Sk.astnodes.Call:\n            this.visitExpr(e.func);\n            if (e.args) {\n                for (let a of e.args) {\n                    if (a.constructor === Sk.astnodes.Starred) {\n                        this.visitExpr(a.value);\n                    } else {\n                        this.visitExpr(a);\n                    }\n                }\n            }\n            if (e.keywords) {\n                for (let k of e.keywords) {\n                    this.visitExpr(k.value);\n                }\n            }\n            break;\n        case Sk.astnodes.Num:\n        case Sk.astnodes.Str:\n        case Sk.astnodes.Bytes:\n            break;\n        case Sk.astnodes.JoinedStr:\n            for (let s of e.values) {\n                this.visitExpr(s);\n            }\n            break;\n        case Sk.astnodes.FormattedValue:\n            this.visitExpr(e.value);\n            if (e.format_spec) {\n                this.visitExpr(e.format_spec);\n            }\n            break;\n        case Sk.astnodes.Attribute:\n            this.visitExpr(e.value);\n            break;\n        case Sk.astnodes.Subscript:\n            this.visitExpr(e.value);\n            this.visitSlice(e.slice);\n            break;\n        case Sk.astnodes.Name:\n            this.addDef(e.id, e.ctx === Sk.astnodes.Load ? USE : DEF_LOCAL, e.lineno);\n            break;\n        case Sk.astnodes.NameConstant:\n            break;\n        case Sk.astnodes.List:\n        case Sk.astnodes.Tuple:\n        case Sk.astnodes.Set:\n            this.SEQExpr(e.elts);\n            break;\n        case Sk.astnodes.Starred:\n            this.visitExpr(e.value);\n            break;\n        case Sk.astnodes.Ellipsis:\n            break;\n        default:\n            Sk.asserts.fail(\"Unhandled type \" + e.constructor.name + \" in visitExpr\");\n    }\n};\n\nSymbolTable.prototype.visitComprehension = function (lcs, startAt) {\n    var lc;\n    var i;\n    var len = lcs.length;\n    for (i = startAt; i < len; ++i) {\n        lc = lcs[i];\n        this.visitExpr(lc.target);\n        this.visitExpr(lc.iter);\n        this.SEQExpr(lc.ifs);\n    }\n};\n\nSymbolTable.prototype.visitAlias = function (names, lineno) {\n    /* Compute store_name, the name actually bound by the import\n     operation.  It is diferent than a->name when a->name is a\n     dotted package name (e.g. spam.eggs)\n     */\n    var dot;\n    var storename;\n    var name;\n    var a;\n    var i;\n    for (i = 0; i < names.length; ++i) {\n        a = names[i];\n        name = a.asname === null ? a.name.v : a.asname.v;\n        storename = name;\n        dot = name.indexOf(\".\");\n        if (dot !== -1) {\n            storename = name.substr(0, dot);\n        }\n        if (name !== \"*\") {\n            this.addDef(new Sk.builtin.str(storename), DEF_IMPORT, lineno);\n        } else {\n            if (this.cur.blockType !== ModuleBlock) {\n                throw new Sk.builtin.SyntaxError(\n                    \"import * only allowed at module level\",\n                    this.filename,\n                    lineno\n                );\n            }\n        }\n    }\n};\n\nSymbolTable.prototype.visitGenexp = function (e) {\n    var outermost = e.generators[0];\n    // outermost is evaled in current scope\n    this.visitExpr(outermost.iter);\n    this.enterBlock(\"genexpr\", FunctionBlock, e, e.lineno);\n    this.cur.generator = true;\n    this.addDef(new Sk.builtin.str(\".0\"), DEF_PARAM, e.lineno);\n    this.visitExpr(outermost.target);\n    this.SEQExpr(outermost.ifs);\n    this.visitComprehension(e.generators, 1);\n    this.visitExpr(e.elt);\n    this.exitBlock();\n};\n\nSymbolTable.prototype.visitExcepthandlers = function (handlers) {\n    var i, eh;\n    for (i = 0; (eh = handlers[i]); ++i) {\n        if (eh.type) {\n            this.visitExpr(eh.type);\n        }\n        if (eh.name) {\n            this.visitExpr(eh.name);\n        }\n        this.SEQStmt(eh.body);\n    }\n};\n\nfunction _dictUpdate(a, b) {\n    var kb;\n    for (kb in b) {\n        a[kb] = b[kb];\n    }\n}\n\nSymbolTable.prototype.analyzeBlock = function (ste, bound, free, global) {\n    var c;\n    var i;\n    var childlen;\n    var allfree;\n    var flags;\n    var name;\n    var local = {};\n    var scope = {};\n    var newglobal = {};\n    var newbound = {};\n    var newfree = {};\n\n    if (ste.blockType == ClassBlock) {\n        _dictUpdate(newglobal, global);\n        if (bound) {\n            _dictUpdate(newbound, bound);\n        }\n    }\n\n    for (name in ste.symFlags) {\n        flags = ste.symFlags[name];\n        this.analyzeName(ste, scope, name, flags, bound, local, free, global);\n    }\n\n    if (ste.blockType !== ClassBlock) {\n        if (ste.blockType === FunctionBlock) {\n            _dictUpdate(newbound, local);\n        }\n        if (bound) {\n            _dictUpdate(newbound, bound);\n        }\n        _dictUpdate(newglobal, global);\n    }\n\n    allfree = {};\n    childlen = ste.children.length;\n    for (i = 0; i < childlen; ++i) {\n        c = ste.children[i];\n        this.analyzeChildBlock(c, newbound, newfree, newglobal, allfree);\n        if (c.hasFree || c.childHasFree) {\n            ste.childHasFree = true;\n        }\n    }\n\n    _dictUpdate(newfree, allfree);\n    if (ste.blockType === FunctionBlock) {\n        this.analyzeCells(scope, newfree);\n    }\n    let discoveredFree = this.updateSymbols(\n        ste.symFlags,\n        scope,\n        bound,\n        newfree,\n        ste.blockType === ClassBlock\n    );\n    ste.hasFree = ste.hasFree || discoveredFree;\n\n    _dictUpdate(free, newfree);\n};\n\nSymbolTable.prototype.analyzeChildBlock = function (entry, bound, free, global, childFree) {\n    var tempGlobal;\n    var tempFree;\n    var tempBound = {};\n    _dictUpdate(tempBound, bound);\n    tempFree = {};\n    _dictUpdate(tempFree, free);\n    tempGlobal = {};\n    _dictUpdate(tempGlobal, global);\n\n    this.analyzeBlock(entry, tempBound, tempFree, tempGlobal);\n    _dictUpdate(childFree, tempFree);\n};\n\nSymbolTable.prototype.analyzeCells = function (scope, free) {\n    var flags;\n    var name;\n    for (name in scope) {\n        flags = scope[name];\n        if (flags !== LOCAL) {\n            continue;\n        }\n        if (free[name] === undefined) {\n            continue;\n        }\n        scope[name] = CELL;\n        delete free[name];\n    }\n};\n\n/**\n * store scope info back into the st symbols dict. symbols is modified,\n * others are not.\n */\nSymbolTable.prototype.updateSymbols = function (symbols, scope, bound, free, classflag) {\n    var i;\n    var o;\n    var pos;\n    var freeValue;\n    var w;\n    var flags;\n    var name;\n    var discoveredFree = false;\n    for (name in symbols) {\n        flags = symbols[name];\n        w = scope[name];\n        flags |= w << SCOPE_OFF;\n        symbols[name] = flags;\n    }\n\n    freeValue = FREE << SCOPE_OFF;\n    pos = 0;\n    for (name in free) {\n        o = symbols[name];\n        if (o !== undefined) {\n            // it could be a free variable in a method of the class that has\n            // the same name as a local or global in the class scope\n            if (classflag && o & (DEF_BOUND | DEF_GLOBAL)) {\n                i = o | DEF_FREE_CLASS;\n                symbols[name] = i;\n            }\n            // else it's not free, probably a cell\n            continue;\n        }\n        if (bound[name] === undefined) {\n            continue;\n        }\n        symbols[name] = freeValue;\n        discoveredFree = true;\n    }\n    return discoveredFree;\n};\n\nSymbolTable.prototype.analyzeName = function (ste, dict, name, flags, bound, local, free, global) {\n    if (flags & DEF_GLOBAL) {\n        if (flags & DEF_PARAM) {\n            throw new Sk.builtin.SyntaxError(\n                \"name '\" + name + \"' is local and global\",\n                this.filename,\n                ste.lineno\n            );\n        }\n        dict[name] = GLOBAL_EXPLICIT;\n        global[name] = null;\n        if (bound && bound[name] !== undefined) {\n            delete bound[name];\n        }\n        return;\n    }\n    if (flags & DEF_BOUND) {\n        dict[name] = LOCAL;\n        local[name] = null;\n        delete global[name];\n        return;\n    }\n\n    if (bound && bound[name] !== undefined) {\n        dict[name] = FREE;\n        ste.hasFree = true;\n        free[name] = null;\n    } else if (global && global[name] !== undefined) {\n        dict[name] = GLOBAL_IMPLICIT;\n    } else {\n        if (ste.isNested) {\n            ste.hasFree = true;\n        }\n        dict[name] = GLOBAL_IMPLICIT;\n    }\n};\n\nSymbolTable.prototype.analyze = function () {\n    var free = {};\n    var global = {};\n    this.analyzeBlock(this.top, null, free, global);\n};\n\n/**\n * @param {Object} ast\n * @param {string} filename\n */\nSk.symboltable = function (ast, filename) {\n    var i;\n    var ret = new SymbolTable(filename);\n\n    ret.enterBlock(\"top\", ModuleBlock, ast, 0);\n    ret.top = ret.cur;\n\n    //print(Sk.astDump(ast));\n    for (i = 0; i < ast.body.length; ++i) {\n        ret.visitStmt(ast.body[i]);\n    }\n\n    ret.exitBlock();\n\n    ret.analyze();\n\n    return ret;\n};\n\nSk.dumpSymtab = function (st) {\n    var pyBoolStr = function (b) {\n        return b ? \"True\" : \"False\";\n    };\n    var pyList = function (l) {\n        var i;\n        var ret = [];\n        for (i = 0; i < l.length; ++i) {\n            ret.push(new Sk.builtin.str(l[i])[\"$r\"]().v);\n        }\n        return \"[\" + ret.join(\", \") + \"]\";\n    };\n    var getIdents = function (obj, indent) {\n        var ns;\n        var j;\n        var sub;\n        var nsslen;\n        var nss;\n        var info;\n        var i;\n        var objidentslen;\n        var objidents;\n        var ret;\n        if (indent === undefined) {\n            indent = \"\";\n        }\n        ret = \"\";\n        ret += indent + \"Sym_type: \" + obj.get_type() + \"\\n\";\n        ret += indent + \"Sym_name: \" + obj.get_name() + \"\\n\";\n        ret += indent + \"Sym_lineno: \" + obj.get_lineno() + \"\\n\";\n        ret += indent + \"Sym_nested: \" + pyBoolStr(obj.is_nested()) + \"\\n\";\n        ret += indent + \"Sym_haschildren: \" + pyBoolStr(obj.has_children()) + \"\\n\";\n        if (obj.get_type() === \"class\") {\n            ret += indent + \"Class_methods: \" + pyList(obj.get_methods()) + \"\\n\";\n        } else if (obj.get_type() === \"function\") {\n            ret += indent + \"Func_params: \" + pyList(obj.get_parameters()) + \"\\n\";\n            ret += indent + \"Func_locals: \" + pyList(obj.get_locals()) + \"\\n\";\n            ret += indent + \"Func_globals: \" + pyList(obj.get_globals()) + \"\\n\";\n            ret += indent + \"Func_frees: \" + pyList(obj.get_frees()) + \"\\n\";\n        }\n        ret += indent + \"-- Identifiers --\\n\";\n        objidents = obj.get_identifiers();\n        objidentslen = objidents.length;\n        for (i = 0; i < objidentslen; ++i) {\n            info = obj.lookup(objidents[i]);\n            ret += indent + \"name: \" + info.get_name() + \"\\n\";\n            ret += indent + \"  is_referenced: \" + pyBoolStr(info.is_referenced()) + \"\\n\";\n            ret += indent + \"  is_imported: \" + pyBoolStr(info.is_imported()) + \"\\n\";\n            ret += indent + \"  is_parameter: \" + pyBoolStr(info.is_parameter()) + \"\\n\";\n            ret += indent + \"  is_global: \" + pyBoolStr(info.is_global()) + \"\\n\";\n            ret += indent + \"  is_declared_global: \" + pyBoolStr(info.is_declared_global()) + \"\\n\";\n            ret += indent + \"  is_local: \" + pyBoolStr(info.is_local()) + \"\\n\";\n            ret += indent + \"  is_free: \" + pyBoolStr(info.is_free()) + \"\\n\";\n            ret += indent + \"  is_assigned: \" + pyBoolStr(info.is_assigned()) + \"\\n\";\n            ret += indent + \"  is_namespace: \" + pyBoolStr(info.is_namespace()) + \"\\n\";\n            nss = info.get_namespaces();\n            nsslen = nss.length;\n            ret += indent + \"  namespaces: [\\n\";\n            sub = [];\n            for (j = 0; j < nsslen; ++j) {\n                ns = nss[j];\n                sub.push(getIdents(ns, indent + \"    \"));\n            }\n            ret += sub.join(\"\\n\");\n            ret += indent + \"  ]\\n\";\n        }\n        return ret;\n    };\n    return getIdents(st.top, \"\");\n};\n\nSk.exportSymbol(\"Sk.symboltable\", Sk.symboltable);\nSk.exportSymbol(\"Sk.dumpSymtab\", Sk.dumpSymtab);\n", "/** @param {...*} x */\nvar out;\n\nSk.gensymcount = 0;\n\n/**\n * @constructor\n * @param {string} filename\n * @param {SymbolTable} st\n * @param {number} flags\n * @param {boolean=} canSuspend whether compiled code can suspend\n * @param {string=} sourceCodeForAnnotation used to add original source to listing if desired\n */\nfunction Compiler(filename, st, flags, canSuspend, sourceCodeForAnnotation) {\n    this.filename = filename;\n    this.st = st;\n    this.flags = flags;\n    this.canSuspend = canSuspend;\n    this.interactive = false;\n    this.nestlevel = 0;\n\n    this.u = null;\n    this.consts = {};\n    this.stack = [];\n\n    this.result = [];\n\n    // this.gensymcount = 0;\n\n    this.allUnits = [];\n\n    this.source = sourceCodeForAnnotation ? sourceCodeForAnnotation.split(\"\\n\") : false;\n    this.retainComments = false;\n}\n\n/**\n * @constructor\n *\n * Stuff that changes on entry/exit of code blocks. must be saved and restored\n * when returning to a block.\n *\n * Corresponds to the body of a module, class, or function.\n *\n * Effectively a frame.\n */\n\nfunction CompilerUnit() {\n    this.ste = null;\n    this.name = null;\n    this.canSuspend = false;\n    this.doesSuspend = false;\n\n    this.private_ = null;\n    this.firstlineno = 0;\n    this.lineno = 0;\n    this.linenoSet = false;\n    this.localnames = [];\n\n    this.localtemps = [];\n    this.tempsToSave = [];\n\n    this.blocknum = 0;\n    this.blocks = [];\n    this.curblock = 0;\n\n    //this.consts = {};\n\n    this.scopename = null;\n\n    this.prefixCode = \"\";\n    this.varDeclsCode = \"\";\n    this.switchCode = \"\";\n    this.suffixCode = \"\";\n\n    // stack of where to go on a break\n    this.breakBlocks = [];\n    // stack of where to go on a continue\n    this.continueBlocks = [];\n    this.exceptBlocks = [];\n    // state of where to go on a return\n    this.finallyBlocks = [];\n}\n\nfunction get_context(ctx) {\n    return [ctx.lineno, ctx.col_offset, ctx.end_lineno, ctx.end_col_offset];\n}\n\nCompilerUnit.prototype.activateScope = function () {\n    var self = this;\n\n    out = function () {\n        var i;\n        var b = self.blocks[self.curblock];\n        if (b._next === null) {\n            for (i = 0; i < arguments.length; ++i) {\n                b.push(arguments[i]);\n            }\n        }\n        // TODO: Warn about unreachable code after an unconditional jump?\n    };\n};\n\nCompiler.prototype.getSourceLine = function (lineno) {\n    Sk.asserts.assert(this.source);\n    return this.source[lineno - 1];\n};\n\nCompiler.prototype.annotateSource = function (ast, shouldStep) {\n    var i;\n    var col_offset;\n    var lineno;\n    var sourceLine;\n    if (this.source) {\n        const astName = ast._astname;\n        lineno = ast.lineno;\n        col_offset = ast.col_offset;\n        sourceLine = this.getSourceLine(lineno);\n        Sk.asserts.assert(ast.lineno !== undefined && ast.col_offset !== undefined);\n        let isDocstring = !!(\n            ast.constructor === Sk.astnodes.Expr && ast.value.constructor === Sk.astnodes.Str\n        );\n        // Do not trace the standard library\n        if (shouldStep && (!this.filename || !this.filename.startsWith(\"src/lib/\"))) {\n            out(\"\\n$currLineNo=\", lineno, \";$currColNo=\", col_offset, \";\");\n            // TODO: Make filename a module-global, and update it via that quickly.\n            // JSON.stringify(sourceLine)\n            let chompedLine = sourceLine;\n            if (chompedLine.length > 24) {\n                chompedLine = chompedLine.substr(0, 24) + \"...\";\n            }\n            out(\"Sk.currFilename=$fname;$currSource=\", JSON.stringify(chompedLine), \";\");\n            out(\n                `Sk.afterSingleExecution && Sk.afterSingleExecution($gbl,$getLocals(),${lineno}, ${col_offset}, $fname, ${isDocstring}, '${astName}');\\n`\n            );\n        }\n    }\n};\n\nCompiler.prototype.gensym = function (hint) {\n    hint = hint || \"\";\n    hint = \"$\" + hint;\n    hint += Sk.gensymcount++;\n    return hint;\n};\n\nCompiler.prototype.niceName = function (roughName) {\n    return this.gensym(roughName.replace(\"<\", \"\").replace(\">\", \"\").replace(\" \", \"_\"));\n};\n\nvar reservedWords_ = Sk.builtin.str.reservedWords_; // defined in str.js\n\nfunction fixReserved(name) {\n    if (reservedWords_[name] === undefined) {\n        return name;\n    }\n    return name + \"_$rw$\";\n}\n\nfunction unfixReserved(name) {\n    return name.replace(/_\\$rw\\$$/, \"\");\n}\n\nfunction mangleName(priv, ident) {\n    var name = ident.v;\n    var strpriv = null;\n\n    if (priv === null || name === null || name.charAt(0) !== \"_\" || name.charAt(1) !== \"_\") {\n        return ident;\n    }\n    // don't mangle __id__\n    if (name.charAt(name.length - 1) === \"_\" && name.charAt(name.length - 2) === \"_\") {\n        return ident;\n    }\n    // don't mangle classes that are all _ (obscure much?)\n    strpriv = priv.v;\n    strpriv.replace(/_/g, \"\");\n    if (strpriv === \"\") {\n        return ident;\n    }\n\n    strpriv = priv.v;\n    strpriv.replace(/^_*/, \"\");\n    strpriv = new Sk.builtin.str(\"_\" + strpriv + name);\n    return strpriv;\n}\n\n/**\n * @param {...*} rest\n */\nCompiler.prototype.makeConstant = function (rest) {\n    var i;\n    var v;\n    var val = \"\";\n    var cval;\n\n    // Construct constant value\n    for (i = 0; i < arguments.length; ++i) {\n        val += arguments[i];\n    }\n\n    // Check if we've already defined this exact constant\n    for (var constant in this.consts) {\n        if (this.consts.hasOwnProperty(constant)) {\n            cval = this.consts[constant];\n            if (cval == val) {\n                // We have, just use it\n                return constant;\n            }\n        }\n    }\n\n    // We have not, build new one\n    v = \"$moduleConstants\" + \".\" + this.gensym(\"_\");\n    this.consts[v] = val;\n    return v;\n};\n\n/**\n * @param {string} hint basename for gensym\n * @param {...*} rest\n */\nCompiler.prototype._gr = function (hint, rest) {\n    var i;\n    var v = this.gensym(hint);\n    this.u.localtemps.push(v);\n    out(\"var \", v, \"=\");\n    for (i = 1; i < arguments.length; ++i) {\n        out(arguments[i]);\n    }\n    out(\";\");\n    return v;\n};\n\n/**\n * Function to test if an interrupt should occur if the program has been running for too long.\n * This function is executed at every test/branch operation.\n */\nCompiler.prototype.outputInterruptTest = function () {\n    // Added by RNL\n    var output = \"\";\n    if (Sk.execLimit !== null || (Sk.yieldLimit !== null && this.u.canSuspend)) {\n        output += \"var $dateNow = Date.now();\";\n        //output += \"console.log($dateNow, Sk.execStart, Sk.execPaused, Sk.execPausedAmount, $dateNow-Sk.execStart-Sk.execPausedAmount, Sk.execLimit, );\";\n        if (Sk.execLimit !== null) {\n            //output += (\"if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPausedAmount > Sk.execLimit){\" +\n            //    \"throw new Sk.builtin.TimeoutError(Sk.timeoutMsg())}\");\n            output += \"Sk.misceval.timeoutCheck($dateNow);\";\n        }\n        if (Sk.yieldLimit !== null && this.u.canSuspend) {\n            output += \"if ($dateNow - Sk.lastYield > Sk.yieldLimit) {\";\n            output +=\n                \"var $susp = $saveSuspension($mys(), $fname,$currLineNo,$currColNo, $currSource);\";\n            output += \"$susp.$blk = $blk;\";\n            output += \"$susp.optional = true;\";\n            output += \"return $susp;\";\n            output += \"}\";\n            this.u.doesSuspend = true;\n        }\n    }\n    return output;\n};\n\nCompiler.prototype._jumpfalse = function (test, block) {\n    var cond = this._gr(\"jfalse\", \"(\", test, \"===false||!Sk.misceval.isTrue(\", test, \"))\");\n    out(\"if(\", cond, \"){/*test failed */$blk=\", block, \";continue;}\");\n};\n\nCompiler.prototype._jumpundef = function (test, block) {\n    out(\"if(\", test, \"===undefined){$blk=\", block, \";continue;}\");\n};\n\nCompiler.prototype._jumpnotundef = function (test, block) {\n    out(\"if(\", test, \"!==undefined){$blk=\", block, \";continue;}\");\n};\n\nCompiler.prototype._jumptrue = function (test, block) {\n    var cond = this._gr(\"jtrue\", \"(\", test, \"===true||Sk.misceval.isTrue(\", test, \"))\");\n    out(\"if(\", cond, \"){/*test passed */$blk=\", block, \";continue;}\");\n};\n\nCompiler.prototype._jump = function (block) {\n    if (this.u.blocks[this.u.curblock]._next === null) {\n        out(\"$blk=\", block, \";\");\n        this.u.blocks[this.u.curblock]._next = block;\n    }\n};\n\n/**\n * @param {Object=} e Object with keys 'lineno' and 'col_offset'\n */\nCompiler.prototype._checkSuspension = function (e) {\n    var retblk;\n    if (this.u.canSuspend) {\n        retblk = this.newBlock(\"function return or resume suspension\");\n        this._jump(retblk);\n        this.setBlock(retblk);\n\n        e = e || { lineno: \"$currLineNo\", col_offset: \"$currColNo\", source: \"$currSource\" };\n\n        out(\n            \"if ($ret && $ret.$isSuspension) { return $saveSuspension($ret,$fname,\" +\n                e.lineno +\n                \",\" +\n                e.col_offset +\n                \",\" +\n                e.source +\n                \"); }\"\n        );\n\n        this.u.doesSuspend = true;\n        this.u.tempsToSave = this.u.tempsToSave.concat(this.u.localtemps);\n    } else {\n        out(\n            \"if ($ret && $ret.$isSuspension) { $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret); }\"\n        );\n    }\n};\nCompiler.prototype.cunpackstarstoarray = function (elts, permitEndOnly) {\n    if (!elts || elts.length == 0) {\n        return \"[]\";\n    }\n\n    let hasStars = false;\n    // If there are no stars, we have a nice fast path here\n    for (let elt of elts) {\n        if (permitEndOnly && hasStars) {\n            throw new Sk.builtin.SyntaxError(\n                \"Extended argument unpacking is not permitted in Python 2\"\n            );\n        }\n        if (elt.constructor === Sk.astnodes.Starred) {\n            hasStars = true;\n        }\n    }\n\n    if (hasStars) {\n        // Slow path\n        let arr = this._gr(\"unpack\", \"[]\");\n        for (let elt of elts) {\n            if (elt.constructor !== Sk.astnodes.Starred) {\n                out(arr, \".push(\", this.vexpr(elt), \");\");\n            } else {\n                out(\n                    \"$ret = Sk.misceval.iterFor(Sk.abstr.iter(\",\n                    this.vexpr(elt.value),\n                    \"), function(e) { \",\n                    arr,\n                    \".push(e); });\"\n                );\n                this._checkSuspension();\n            }\n        }\n        return arr;\n    } else {\n        // Fast path\n        return \"[\" + elts.map((expr) => this.vexpr(expr)).join(\",\") + \"]\";\n    }\n};\n\nCompiler.prototype.ctuplelistorset = function (e, data, tuporlist) {\n    var i;\n    var items;\n    var item;\n    var allconsts;\n    Sk.asserts.assert(tuporlist === \"tuple\" || tuporlist === \"list\" || tuporlist === \"set\");\n\n    let hasStars = false;\n    let starIdx;\n    for (i = 0; i < e.elts.length; i++) {\n        if (e.elts[i].constructor === Sk.astnodes.Starred) {\n            hasStars = true;\n            starIdx = i;\n            break;\n        }\n    }\n\n    if (e.ctx === Sk.astnodes.Store) {\n        if (hasStars) {\n            if (!Sk.__future__.python3) {\n                throw new Sk.builtin.SyntaxError(\n                    \"assignment unpacking with stars is not supported in Python 2\",\n                    this.filename,\n                    e.lineno\n                );\n            }\n            for (i = starIdx + 1; i < e.elts.length; i++) {\n                if (e.elts[i].constructor === Sk.astnodes.Starred) {\n                    throw new Sk.builtin.SyntaxError(\n                        \"multiple starred expressions in assignment\",\n                        this.filename,\n                        e.lineno,\n                        ...get_context(e)\n                    );\n                }\n            }\n        }\n        const breakIdx = hasStars ? starIdx : e.elts.length;\n        const numvals = hasStars ? e.elts.length - 1 : breakIdx;\n        out(\n            \"$ret = Sk.abstr.sequenceUnpack(\" +\n                data +\n                \",\" +\n                breakIdx +\n                \",\" +\n                numvals +\n                \", \" +\n                hasStars +\n                \");\"\n        );\n        this._checkSuspension();\n        items = this._gr(\"items\", \"$ret\");\n\n        for (i = 0; i < e.elts.length; ++i) {\n            if (i === starIdx) {\n                this.vexpr(e.elts[i].value, items + \"[\" + i + \"]\");\n            } else {\n                this.vexpr(e.elts[i], items + \"[\" + i + \"]\");\n            }\n        }\n    } else if (e.ctx === Sk.astnodes.Load || tuporlist === \"set\") {\n        //because set's can't be assigned to.\n\n        if (hasStars) {\n            if (!Sk.__future__.python3) {\n                throw new Sk.builtin.SyntaxError(\n                    \"List packing with stars is not supported in Python 2\"\n                );\n            }\n            return this._gr(\n                \"load\" + tuporlist,\n                \"new Sk.builtins['\",\n                tuporlist,\n                \"'](\",\n                this.cunpackstarstoarray(e.elts),\n                \")\"\n            );\n        } else if (tuporlist === \"tuple\") {\n            allconsts = true;\n            items = [];\n            for (i = 0; i < e.elts.length; ++i) {\n                item = this.vexpr(e.elts[i]);\n\n                // The following is an ugly check to see if item was\n                // turned into a constant.  As vexpr returns a string,\n                // this requires seeing if \"$const\" is contained\n                // within it.  A better solution would require a\n                // change to vexpr, which would be more invasive.\n                if (allconsts && item.indexOf(\"$const\") == -1) {\n                    allconsts = false;\n                }\n                items.push(item);\n            }\n\n            if (allconsts) {\n                return this.makeConstant(\"new Sk.builtin.tuple([\" + items + \"])\");\n            } else {\n                for (i = 0; i < items.length; ++i) {\n                    items[i] = this._gr(\"elem\", items[i]);\n                }\n                return this._gr(\n                    \"load\" + tuporlist,\n                    \"new Sk.builtins['\",\n                    tuporlist,\n                    \"']([\",\n                    items,\n                    \"])\"\n                );\n            }\n        } else {\n            items = [];\n            for (i = 0; i < e.elts.length; ++i) {\n                items.push(this._gr(\"elem\", this.vexpr(e.elts[i])));\n            }\n            return this._gr(\n                \"load\" + tuporlist,\n                \"new Sk.builtins['\",\n                tuporlist,\n                \"']([\",\n                items,\n                \"])\"\n            );\n        }\n    }\n};\n\nCompiler.prototype.csubdict = function (e, begin, end) {\n    const items = [];\n    for (let i = begin; i < end; i++) {\n        items.push(this.vexpr(e.keys[i]));\n        items.push(this.vexpr(e.values[i]));\n    }\n    return this._gr(\"loaddict\", \"new Sk.builtins['dict']([\", items, \"])\");\n};\n\nCompiler.prototype.cdict = function (e) {\n    let have_dict = 0;\n    let is_unpacking = false;\n    const n = e.values ? e.values.length : 0;\n    let elements = 0;\n    let main_dict;\n    let sub_dict;\n\n    for (let i = 0; i < n; i++) {\n        is_unpacking = e.keys[i] === null;\n        if (is_unpacking) {\n            if (elements) {\n                sub_dict = this.csubdict(e, i - elements, i);\n                if (have_dict) {\n                    out(main_dict, \".dict$merge(\", sub_dict, \");\");\n                    // update the current dict (this won't suspend)\n                } else {\n                    main_dict = sub_dict;\n                    have_dict = 1;\n                }\n                elements = 0;\n            }\n            if (have_dict === 0) {\n                main_dict = this._gr(\"loaddict\", \"new Sk.builtins.dict([])\");\n                have_dict = 1;\n            }\n            sub_dict = this.vexpr(e.values[i]);\n            out(\"$ret = \", main_dict, \".dict$merge(\", sub_dict, \");\");\n            this._checkSuspension(e);\n            // could suspend\n        } else {\n            elements++;\n        }\n    }\n    if (elements) {\n        sub_dict = this.csubdict(e, n - elements, n);\n        if (have_dict) {\n            out(main_dict, \".dict$merge(\", sub_dict, \");\");\n            // update the current dict (this won't suspend)\n        } else {\n            main_dict = sub_dict;\n            have_dict = 1;\n        }\n    }\n    if (have_dict === 0) {\n        // add op buildmap\n        main_dict = this._gr(\"loaddict\", \"new Sk.builtins.dict([])\");\n    }\n    return main_dict;\n};\n\nCompiler.prototype.clistcomp = function (e) {\n    Sk.asserts.assert(e instanceof Sk.astnodes.ListComp);\n    var tmp = this._gr(\"_compr\", \"new Sk.builtins['list']([])\"); // note: _ is impt. for hack in name mangling (same as cpy)\n    return this.ccompgen(\"list\", tmp, e.generators, 0, e.elt, null, e);\n};\n\nCompiler.prototype.cdictcomp = function (e) {\n    Sk.asserts.assert(e instanceof Sk.astnodes.DictComp);\n    var tmp = this._gr(\"_dcompr\", \"new Sk.builtins.dict([])\");\n    return this.ccompgen(\"dict\", tmp, e.generators, 0, e.value, e.key, e);\n};\n\nCompiler.prototype.csetcomp = function (e) {\n    Sk.asserts.assert(e instanceof Sk.astnodes.SetComp);\n    var tmp = this._gr(\"_setcompr\", \"new Sk.builtins.set([])\");\n    return this.ccompgen(\"set\", tmp, e.generators, 0, e.elt, null, e);\n};\n\nCompiler.prototype.ccompgen = function (type, tmpname, generators, genIndex, value, key, e) {\n    var start = this.newBlock(type + \" comp start\");\n    var skip = this.newBlock(type + \" comp skip\");\n    var anchor = this.newBlock(type + \" comp anchor\");\n\n    var l = generators[genIndex];\n    var toiter = this.vexpr(l.iter);\n    var iter = this._gr(\"iter\", \"Sk.abstr.iter(\", toiter, \")\");\n    var lvalue;\n    var lkey;\n    var ifres;\n    var i;\n    var target;\n    var nexti;\n    var n;\n\n    this._jump(start);\n    this.setBlock(start);\n\n    // load targets\n    out(\"$ret = Sk.abstr.iternext(\", iter, \", true);\");\n\n    this._checkSuspension(e);\n\n    nexti = this._gr(\"next\", \"$ret\");\n    this._jumpundef(nexti, anchor); // todo; this should be handled by StopIteration\n    target = this.vexpr(l.target, nexti);\n\n    n = l.ifs ? l.ifs.length : 0;\n    for (i = 0; i < n; ++i) {\n        ifres = this.vexpr(l.ifs[i]);\n        this._jumpfalse(ifres, start);\n    }\n\n    if (++genIndex < generators.length) {\n        this.ccompgen(type, tmpname, generators, genIndex, value, key, e);\n    }\n\n    if (genIndex >= generators.length) {\n        lvalue = this.vexpr(value);\n        if (type === \"dict\") {\n            lkey = this.vexpr(key);\n            out(tmpname, \".mp$ass_subscript(\", lkey, \",\", lvalue, \");\");\n        } else if (type === \"list\") {\n            out(tmpname, \".v.push(\", lvalue, \");\"); // todo;\n        } else if (type === \"set\") {\n            out(tmpname, \".v.mp$ass_subscript(\", lvalue, \", true);\");\n        }\n        this._jump(skip);\n        this.setBlock(skip);\n    }\n\n    this._jump(start);\n\n    this.setBlock(anchor);\n\n    return tmpname;\n};\n\nCompiler.prototype.cyield = function (e) {\n    if (this.u.ste.blockType !== Sk.SYMTAB_CONSTS.FunctionBlock) {\n        throw new Sk.builtin.SyntaxError(\n            \"'yield' outside function\",\n            this.filename,\n            e.lineno,\n            ...get_context(e)\n        );\n    }\n    var val = \"Sk.builtin.none.none$\",\n        nextBlock;\n    if (e.value) {\n        val = this.vexpr(e.value);\n    }\n    nextBlock = this.newBlock(\"after yield\");\n    // return a pair: resume target block and yielded value\n    out(\"return [/*resume*/\", nextBlock, \",/*ret*/\", val, \"];\");\n    this.setBlock(nextBlock);\n    return \"$gen.gi$sentvalue\"; // will either be none if none sent, or the value from gen.send(value)\n};\n\nCompiler.prototype.cyieldfrom = function (e) {\n    if (this.u.ste.blockType !== Sk.SYMTAB_CONSTS.FunctionBlock) {\n        throw new Sk.builtin.SyntaxError(\n            \"'yield' outside function\",\n            this.filename,\n            e.lineno,\n            ...get_context(e)\n        );\n    }\n    let iterable = this.vexpr(e.value);\n    // get the iterator we are yielding from and store it\n    iterable = this._gr(\"iter\", \"Sk.abstr.iter(\", iterable, \")\");\n    out(\"$gen.\" + iterable + \"=\", iterable, \";\");\n    var afterIter = this.newBlock(\"after iter\");\n    var afterBlock = this.newBlock(\"after yield from\");\n    this._jump(afterIter);\n    this.setBlock(afterIter);\n    var retval = this.gensym(\"retval\");\n    // We may have entered this block resuming from a yield\n    // So get the iterable stored on $gen.\n    out(iterable, \"=$gen.\", iterable, \";\");\n    out(\"var \", retval, \";\");\n    // fast path -> we're sending None (not sending a value)\n    // or we use gen.tp$iternext(true, val) (see generator.js) which is the equivalent of gen.send(val)\n    out(\n        \"if ($gen.gi$sentvalue === Sk.builtin.none.none$ || \" +\n            iterable +\n            \".constructor === Sk.builtin.generator) {\"\n    );\n    out(\"$ret=\", iterable, \".tp$iternext(true, $gen.gi$sentvalue);\");\n    out(\"} else {\");\n    var send = this.makeConstant(\"new Sk.builtin.str('send');\");\n    // slow path -> get the send method of the non-generator iterator and call it\n    // throw anything other than a StopIteration\n    out(\"$ret=Sk.misceval.tryCatch(\");\n    out(\"function(){\");\n    out(\n        \"return Sk.misceval.callsimOrSuspendArray(Sk.abstr.gattr(\",\n        iterable,\n        \",\",\n        send,\n        \"), [$gen.gi$sentvalue]);},\"\n    );\n    out(\"function (e) { \");\n    out(\"if (e instanceof Sk.builtin.StopIteration) { \");\n    out(iterable, \".gi$ret = e.$value;\");\n    // store the return value on the iterator\n    // otherwise we lose it beause iterator code in skulpt relies on returning undefined;\n    // one day maybe we can use the js .next protocol {value: ret, done: true} ;-)\n    out(\"return undefined;\");\n    out(\"} else { throw e; }\");\n    out(\"}\");\n    out(\");\");\n    out(\"}\");\n    this._checkSuspension(e);\n    out(retval, \"=$ret;\");\n    // if the iterator is done (undefined) and we still have an unused sent value, it will be in `[iterable].gi$ret`, so we grab it from there and move on from the `yield from` (\"afterBlock\")\n    out(\"if(\", retval, \"===undefined) {\");\n    out(\"$gen.gi$sentvalue=$gen.\" + iterable + \".gi$ret;\");\n    out(\"$blk=\", afterBlock, \";continue;\");\n    out(\"}\");\n    out(\"return [/*resume*/\", afterIter, \",/*ret*/\", retval, \"];\");\n    this.setBlock(afterBlock);\n    return \"$gen.gi$sentvalue\"; // will either be none if none sent, or the value retuned from gen.send(value)\n};\n\nCompiler.prototype.ccompare = function (e) {\n    var res;\n    var rhs;\n    var i;\n    var fres;\n    var done;\n    var n;\n    var cur;\n    Sk.asserts.assert(e.ops.length === e.comparators.length);\n    cur = this.vexpr(e.left);\n    n = e.ops.length;\n    done = this.newBlock(\"done\");\n    fres = this._gr(\"compareres\", \"null\");\n\n    for (i = 0; i < n; ++i) {\n        rhs = this.vexpr(e.comparators[i]);\n        out(\n            \"$ret = Sk.misceval.richCompareBool(\",\n            cur,\n            \",\",\n            rhs,\n            \",'\",\n            e.ops[i].prototype._astname,\n            \"', true);\"\n        );\n        this._checkSuspension(e);\n        out(fres, \"=Sk.builtin.bool($ret);\");\n        this._jumpfalse(\"$ret\", done);\n        cur = rhs;\n    }\n    this._jump(done);\n    this.setBlock(done);\n    return fres;\n};\n\nCompiler.prototype.ccall = function (e) {\n    var func = this.vexpr(e.func);\n    var kwarray = null;\n    // Okay, here's the deal. We have some set of positional args\n    // and we need to unpack them. We have some set of keyword args\n    // and we need to unpack those too. Then we make a call.\n    // The existing Sk.misceval.call() and .apply() signatures do not\n    // help us here; we do it by hand.\n\n    let positionalArgs = this.cunpackstarstoarray(e.args, !Sk.__future__.python3);\n    let keywordArgs = \"undefined\";\n\n    if (e.keywords && e.keywords.length > 0) {\n        let hasStars = false;\n        kwarray = [];\n        for (let kw of e.keywords) {\n            if (hasStars && !Sk.__future__.python3) {\n                throw new Sk.builtin.SyntaxError(\n                    \"Advanced unpacking of function arguments is not supported in Python 2\"\n                );\n            }\n            if (kw.arg) {\n                kwarray.push(\"'\" + kw.arg.v + \"'\");\n                kwarray.push(this.vexpr(kw.value));\n            } else {\n                hasStars = true;\n            }\n        }\n        keywordArgs = \"[\" + kwarray.join(\",\") + \"]\";\n        if (hasStars) {\n            keywordArgs = this._gr(\"keywordArgs\", keywordArgs);\n            for (let kw of e.keywords) {\n                if (!kw.arg) {\n                    out(\n                        \"$ret = Sk.abstr.mappingUnpackIntoKeywordArray(\",\n                        keywordArgs,\n                        \",\",\n                        this.vexpr(kw.value),\n                        \",\",\n                        func,\n                        \");\"\n                    );\n                    this._checkSuspension();\n                }\n            }\n        }\n    }\n\n    if (\n        Sk.__future__.super_args &&\n        e.func.id &&\n        e.func.id.v === \"super\" &&\n        positionalArgs === \"[]\"\n    ) {\n        // make sure there is a self variable\n        // note that it's part of the js API spec: https://developer.mozilla.org/en/docs/Web/API/Window/self\n        // so we should probably add self to the mangling\n        // TODO: feel free to ignore the above\n        //out(\"if (typeof self === \\\"undefined\\\" || self.toString().indexOf(\\\"Window\\\") > 0) { throw new Sk.builtin.RuntimeError(\\\"super(): no arguments\\\") };\");\n        out(\n            'if (typeof self === \"undefined\" || self===window) { throw new Sk.builtin.RuntimeError(\"super(): no arguments\") };'\n        );\n        positionalArgs = \"[__class__,self]\";\n    }\n    out(\n        \"$ret = (\",\n        func,\n        \".tp$call)?\",\n        func,\n        \".tp$call(\",\n        positionalArgs,\n        \",\",\n        keywordArgs,\n        \") : Sk.misceval.applyOrSuspend(\",\n        func,\n        \",undefined,undefined,\",\n        keywordArgs,\n        \",\",\n        positionalArgs,\n        \");\"\n    );\n\n    this._checkSuspension(e);\n\n    return this._gr(\"call\", \"$ret\");\n};\n\nCompiler.prototype.cslice = function (s) {\n    var step;\n    var high;\n    var low;\n    Sk.asserts.assert(s instanceof Sk.astnodes.Slice);\n    if (Sk.__future__.python3) {\n        low = s.lower ? this.vexpr(s.lower) : \"Sk.builtin.none.none$\";\n        high = s.upper ? this.vexpr(s.upper) : \"Sk.builtin.none.none$\";\n        step = s.step ? this.vexpr(s.step) : \"Sk.builtin.none.none$\";\n    } else {\n        // This implements Python 2's idea of slice literals, which is...idiosyncratic.\n        // The rules for when you get None, and when you get an arbitrary integer (0 or maxint)\n        // seem pretty arbitrary. Python 3's are much saner.\n        low = s.lower\n            ? this.vexpr(s.lower)\n            : s.step\n              ? \"Sk.builtin.none.none$\"\n              : \"new Sk.builtin.int_(0)\"; // todo;ideally, these numbers would be constants\n        high = s.upper\n            ? this.vexpr(s.upper)\n            : s.step\n              ? \"Sk.builtin.none.none$\"\n              : \"new Sk.builtin.int_(2147483647)\";\n        step = s.step ? this.vexpr(s.step) : \"Sk.builtin.none.none$\";\n    }\n    return this._gr(\"slice\", \"new Sk.builtins['slice'](\", low, \",\", high, \",\", step, \")\");\n};\n\nCompiler.prototype.eslice = function (dims) {\n    var i;\n    var dimSubs, subs;\n    Sk.asserts.assert(dims instanceof Array);\n    dimSubs = [];\n    for (i = 0; i < dims.length; i++) {\n        dimSubs.push(this.vslicesub(dims[i]));\n    }\n    return this._gr(\"extslice\", \"new Sk.builtins['tuple']([\", dimSubs, \"])\");\n};\n\nCompiler.prototype.vslicesub = function (s) {\n    var subs;\n    switch (s.constructor) {\n        case Sk.astnodes.Index:\n            subs = this.vexpr(s.value);\n            break;\n        case Sk.astnodes.Slice:\n            subs = this.cslice(s);\n            break;\n        case Sk.astnodes.Ellipsis:\n            Sk.asserts.fail(\"todo compile.js Ellipsis;\");\n            break;\n        case Sk.astnodes.ExtSlice:\n            subs = this.eslice(s.dims);\n            break;\n        default:\n            Sk.asserts.fail(\"invalid subscript kind\");\n    }\n    return subs;\n};\n\nCompiler.prototype.vslice = function (s, ctx, obj, dataToStore) {\n    var subs = this.vslicesub(s);\n    return this.chandlesubscr(ctx, obj, subs, dataToStore);\n};\n\nCompiler.prototype.chandlesubscr = function (ctx, obj, subs, data) {\n    if (ctx === Sk.astnodes.Load || ctx === Sk.astnodes.AugLoad) {\n        out(\"$ret = Sk.abstr.objectGetItem(\", obj, \",\", subs, \", true);\");\n        this._checkSuspension();\n        return this._gr(\"lsubscr\", \"$ret\");\n    } else if (ctx === Sk.astnodes.Store || ctx === Sk.astnodes.AugStore) {\n        out(\"$ret = Sk.abstr.objectSetItem(\", obj, \",\", subs, \",\", data, \", true);\");\n        this._checkSuspension();\n    } else if (ctx === Sk.astnodes.Del) {\n        out(\"Sk.abstr.objectDelItem(\", obj, \",\", subs, \");\");\n    } else {\n        Sk.asserts.fail(\"handlesubscr fail\");\n    }\n};\n\nCompiler.prototype.cboolop = function (e) {\n    var expres;\n    var i;\n    var retval;\n    var n;\n    var s;\n    var end;\n    var ifFailed;\n    var jtype;\n    Sk.asserts.assert(e instanceof Sk.astnodes.BoolOp);\n    if (e.op === Sk.astnodes.And) {\n        jtype = this._jumpfalse;\n    } else {\n        jtype = this._jumptrue;\n    }\n    end = this.newBlock(\"end of boolop\");\n    s = e.values;\n    n = s.length;\n    for (i = 0; i < n; ++i) {\n        expres = this.vexpr(s[i]);\n        if (i === 0) {\n            retval = this._gr(\"boolopsucc\", expres);\n        }\n        out(retval, \"=\", expres, \";\");\n        jtype.call(this, expres, end);\n    }\n    this._jump(end);\n    this.setBlock(end);\n    return retval;\n};\n\nCompiler.prototype.cjoinedstr = function (e) {\n    let ret;\n    Sk.asserts.assert(e instanceof Sk.astnodes.JoinedStr);\n\n    for (let s of e.values) {\n        let v = this.vexpr(s);\n        if (!ret) {\n            ret = this._gr(\"joinedstr\", v);\n        } else {\n            out(ret, \"=\", ret, \".sq$concat(\", v, \");\");\n        }\n    }\n\n    if (!ret) {\n        ret = \"Sk.builtin.str.$emptystr\";\n    }\n\n    return ret;\n};\n\nCompiler.prototype.cformattedvalue = function (e) {\n    let value = this.vexpr(e.value);\n    switch (e.conversion) {\n        case \"s\":\n            value = this._gr(\"value\", \"new Sk.builtin.str(\", value, \")\");\n            break;\n        case \"a\":\n            value = this._gr(\"value\", \"Sk.builtin.ascii(\", value, \")\");\n            break;\n        case \"r\":\n            value = this._gr(\"value\", \"Sk.builtin.repr(\", value, \")\");\n            break;\n    }\n    let formatSpec = e.format_spec ? this.vexpr(e.format_spec) : \"Sk.builtin.str.$emptystr\";\n    return this._gr(\"formatted\", \"Sk.abstr.objectFormat(\" + value + \",\" + formatSpec + \")\");\n};\n\nfunction getJsLiteralForString(s) {\n    let r = '\"';\n    for (let i = 0; i < s.length; i++) {\n        let c = s.charCodeAt(i);\n        // Escape quotes, anything before space, and anything non-ASCII\n        if (c == 0x0a) {\n            r += \"\\\\n\";\n        } else if (c == 92) {\n            r += \"\\\\\\\\\";\n        } else if (c == 34 || c < 32 || (c >= 0x7f && c < 0x100)) {\n            r += \"\\\\x\" + (\"0\" + c.toString(16)).substr(-2);\n        } else if (c >= 0x100) {\n            r += \"\\\\u\" + (\"000\" + c.toString(16)).substr(-4);\n        } else {\n            r += s.charAt(i);\n        }\n    }\n    r += '\"';\n    return r;\n}\n\n/**\n *\n * compiles an expression. to 'return' something, it'll gensym a var and store\n * into that var so that the calling code doesn't have avoid just pasting the\n * returned name.\n *\n * @param {Object} e\n * @param {string=} data data to store in a store operation\n * @param {Object=} augvar var to load/store to for augmented assignments like '+='.\n *                  (already vexpr'ed, so we can evaluate it once and reuse for both load and store ops)\n * @param {Object=} augsubs precomputed subscript for augmented assignments like '+='.\n *                  (already vexpr'ed, so we can evaluate it once and reuse for both load and store ops)\n */\nCompiler.prototype.vexpr = function (e, data, augvar, augsubs) {\n    var mangled, mname;\n    var val;\n    var result;\n    var nStr; // used for preserving signs for floats (zeros)\n    if (e.lineno > this.u.lineno) {\n        this.u.lineno = e.lineno;\n        this.u.linenoSet = false;\n    }\n    //this.annotateSource(e);\n    switch (e.constructor) {\n        case Sk.astnodes.BoolOp:\n            return this.cboolop(e);\n        case Sk.astnodes.BinOp:\n            return this._gr(\n                \"binop\",\n                \"Sk.abstr.numberBinOp(\",\n                this.vexpr(e.left),\n                \",\",\n                this.vexpr(e.right),\n                \",'\",\n                e.op.prototype._astname,\n                \"')\"\n            );\n        case Sk.astnodes.UnaryOp:\n            return this._gr(\n                \"unaryop\",\n                \"Sk.abstr.numberUnaryOp(\",\n                this.vexpr(e.operand),\n                \",'\",\n                e.op.prototype._astname,\n                \"')\"\n            );\n        case Sk.astnodes.Lambda:\n            return this.clambda(e);\n        case Sk.astnodes.IfExp:\n            return this.cifexp(e);\n        case Sk.astnodes.Dict:\n            return this.cdict(e);\n        case Sk.astnodes.ListComp:\n            return this.clistcomp(e);\n        case Sk.astnodes.DictComp:\n            return this.cdictcomp(e);\n        case Sk.astnodes.SetComp:\n            return this.csetcomp(e);\n        case Sk.astnodes.GeneratorExp:\n            return this.cgenexp(e);\n        case Sk.astnodes.Yield:\n            return this.cyield(e);\n        case Sk.astnodes.YieldFrom:\n            return this.cyieldfrom(e);\n        case Sk.astnodes.Compare:\n            return this.ccompare(e);\n        case Sk.astnodes.Call:\n            result = this.ccall(e);\n            // After the function call, we've returned to this line\n            this.annotateSource(e, true);\n            return result;\n        case Sk.astnodes.Num:\n            if (typeof e.n === \"number\") {\n                return e.n;\n            } else if (e.n instanceof Sk.builtin.lng) {\n                return this.makeConstant(\"new Sk.builtin.lng('\" + e.n.v.toString() + \"')\");\n            } else if (e.n instanceof Sk.builtin.int_) {\n                if (typeof e.n.v === \"number\") {\n                    return this.makeConstant(\"new Sk.builtin.int_(\" + e.n.v + \")\");\n                }\n                return this.makeConstant(\"new Sk.builtin.int_('\" + e.n.v.toString() + \"')\");\n            } else if (e.n instanceof Sk.builtin.float_) {\n                // Preserve sign of zero for floats\n                nStr = e.n.v === 0 && 1 / e.n.v === -Infinity ? \"-0\" : e.n.v;\n                return this.makeConstant(\"new Sk.builtin.float_(\" + nStr + \")\");\n            } else if (e.n instanceof Sk.builtin.complex) {\n                // preserve sign of zero here too\n                var real_val = e.n.real === 0 && 1 / e.n.real === -Infinity ? \"-0\" : e.n.real;\n                var imag_val = e.n.imag === 0 && 1 / e.n.imag === -Infinity ? \"-0\" : e.n.imag;\n                return this.makeConstant(\n                    \"new Sk.builtin.complex(\" + real_val + \", \" + imag_val + \")\"\n                );\n            }\n            Sk.asserts.fail(\"unhandled Num type\");\n        case Sk.astnodes.Bytes:\n            if (Sk.__future__.python3) {\n                const source = [];\n                const str = e.s.$jsstr();\n                for (let i = 0; i < str.length; i++) {\n                    source.push(str.charCodeAt(i));\n                }\n                return this.makeConstant(\"new Sk.builtin.bytes([\", source.join(\", \"), \"])\");\n            }\n        // else fall through and make a string instead\n        case Sk.astnodes.Str:\n            return this.makeConstant(\n                \"new Sk.builtin.str(\",\n                getJsLiteralForString(e.s.$jsstr()),\n                \")\"\n            );\n        case Sk.astnodes.Attribute:\n            if (e.ctx !== Sk.astnodes.AugLoad && e.ctx !== Sk.astnodes.AugStore) {\n                val = this.vexpr(e.value);\n            }\n            mangled = e.attr[\"$r\"]().v;\n            mangled = mangled.substring(1, mangled.length - 1);\n            mangled = mangleName(this.u.private_, new Sk.builtin.str(mangled)).v;\n            mname = this.makeConstant(\"new Sk.builtin.str('\" + mangled + \"')\");\n            switch (e.ctx) {\n                case Sk.astnodes.AugLoad:\n                    out(\"$ret = \", augvar, \".tp$getattr(\", mname, \", true);\");\n                    this._checkSuspension(e);\n                    out(\"\\nif ($ret === undefined) {\");\n                    out(\n                        \"\\nthrow new Sk.builtin.AttributeError(\",\n                        augvar,\n                        '.sk$attrError() + \" has no attribute \\'\" + ',\n                        mname,\n                        '.$jsstr() + \"\\'\");'\n                    );\n                    out(\"\\n};\");\n                    return this._gr(\"lattr\", \"$ret\");\n                case Sk.astnodes.Load:\n                    out(\"$ret = \", val, \".tp$getattr(\", mname, \", true);\");\n                    this._checkSuspension(e);\n                    out(\"\\nif ($ret === undefined) {\");\n                    out(\n                        \"\\nthrow new Sk.builtin.AttributeError(\",\n                        val,\n                        '.sk$attrError() + \" has no attribute \\'\" + ',\n                        mname,\n                        '.$jsstr() + \"\\'\");'\n                    );\n                    out(\"\\n};\");\n                    return this._gr(\"lattr\", \"$ret\");\n                case Sk.astnodes.AugStore:\n                    // To be more correct, we shouldn't sattr() again if the in-place update worked.\n                    // At the time of writing (26/Feb/2015), Sk.abstr.numberInplaceBinOp never returns undefined,\n                    // so this will never *not* execute. But it could, if Sk.abstr.numberInplaceBinOp were fixed.\n                    out(\"$ret = undefined;\");\n                    out(\"if(\", data, \"!==undefined){\");\n                    out(\"$ret = \", augvar, \".tp$setattr(\", mname, \",\", data, \", true);\");\n                    out(\"}\");\n                    this._checkSuspension(e);\n                    break;\n                case Sk.astnodes.Store:\n                    out(\"$ret = \", val, \".tp$setattr(\", mname, \",\", data, \", true);\");\n                    this._checkSuspension(e);\n                    break;\n                case Sk.astnodes.Del:\n                    out(\"$ret = \", val, \".tp$setattr(\", mname, \", undefined, true);\");\n                    this._checkSuspension(e);\n                    break;\n                case Sk.astnodes.Param:\n                default:\n                    Sk.asserts.fail(\"invalid attribute expression\");\n            }\n            break;\n        case Sk.astnodes.Subscript:\n            switch (e.ctx) {\n                case Sk.astnodes.AugLoad:\n                    out(\"$ret = Sk.abstr.objectGetItem(\", augvar, \",\", augsubs, \", true);\");\n                    this._checkSuspension(e);\n                    return this._gr(\"gitem\", \"$ret\");\n                case Sk.astnodes.Load:\n                case Sk.astnodes.Store:\n                case Sk.astnodes.Del:\n                    return this.vslice(e.slice, e.ctx, this.vexpr(e.value), data);\n                case Sk.astnodes.AugStore:\n                    // To be more correct, we shouldn't sattr() again if the in-place update worked.\n                    // At the time of writing (26/Feb/2015), Sk.abstr.numberInplaceBinOp never returns undefined,\n                    // so this will never *not* execute. But it could, if Sk.abstr.numberInplaceBinOp were fixed.\n\n                    out(\"$ret=undefined;\");\n                    out(\"if(\", data, \"!==undefined){\");\n                    out(\"$ret=Sk.abstr.objectSetItem(\", augvar, \",\", augsubs, \",\", data, \", true)\");\n                    out(\"}\");\n                    this._checkSuspension(e);\n                    break;\n                case Sk.astnodes.Param:\n                default:\n                    Sk.asserts.fail(\"invalid subscript expression\");\n            }\n            break;\n        case Sk.astnodes.Name:\n            return this.nameop(e.id, e.ctx, data);\n        case Sk.astnodes.NameConstant:\n            if (\n                e.ctx === Sk.astnodes.Store ||\n                e.ctx === Sk.astnodes.AugStore ||\n                e.ctx === Sk.astnodes.Del\n            ) {\n                throw new Sk.builtin.SyntaxError(\n                    \"can not assign to a constant name\",\n                    this.filename,\n                    e.lineno,\n                    ...get_context(e)\n                );\n            }\n\n            switch (e.value) {\n                case Sk.builtin.none.none$:\n                    return \"Sk.builtin.none.none$\";\n                case Sk.builtin.bool.true$:\n                    return \"Sk.builtin.bool.true$\";\n                case Sk.builtin.bool.false$:\n                    return \"Sk.builtin.bool.false$\";\n                default:\n                    Sk.asserts.fail(\"invalid named constant\");\n            }\n            break;\n        case Sk.astnodes.List:\n            return this.ctuplelistorset(e, data, \"list\");\n        case Sk.astnodes.Tuple:\n            return this.ctuplelistorset(e, data, \"tuple\");\n        case Sk.astnodes.Set:\n            return this.ctuplelistorset(e, data, \"set\");\n        case Sk.astnodes.Starred:\n            switch (e.ctx) {\n                case Sk.astnodes.Store:\n                    /* In all legitimate cases, the Starred node was already replaced\n                     * by compiler_list/compiler_tuple. XXX: is that okay? */\n                    throw new Sk.builtin.SyntaxError(\n                        \"starred assignment target must be in a list or tuple\",\n                        this.filename,\n                        e.lineno,\n                        ...get_context(e)\n                    );\n                default:\n                    throw new Sk.builtin.SyntaxError(\n                        \"can't use starred expression here\",\n                        this.filename,\n                        e.lineno,\n                        ...get_context(e)\n                    );\n            }\n        case Sk.astnodes.JoinedStr:\n            return this.cjoinedstr(e);\n        case Sk.astnodes.FormattedValue:\n            return this.cformattedvalue(e);\n        case Sk.astnodes.Ellipsis:\n            return this.makeConstant(\"Sk.builtin.Ellipsis\");\n        default:\n            Sk.asserts.fail(\"unhandled case \" + e.constructor.name + \" vexpr\");\n    }\n};\n\n/**\n * @param {Array.<Object>} exprs\n * @param {Array.<string>=} data\n */\nCompiler.prototype.vseqexpr = function (exprs, data) {\n    var i;\n    var ret;\n    Sk.asserts.assert(data === undefined || exprs.length === data.length);\n    ret = [];\n\n    // if (exprs.length === 1 && exprs[0].constructor === Sk.astnodes.Starred) {\n    //     exprs = exprs[0].value;\n    // }\n\n    for (i = 0; i < exprs.length; ++i) {\n        ret.push(this.vexpr(exprs[i], data === undefined ? undefined : data[i]));\n    }\n    return ret;\n};\n\nCompiler.prototype.cannassign = function (s) {\n    const target = s.target;\n    let val = s.value;\n    // perform the actual assignment first\n    if (val) {\n        val = this.vexpr(s.value);\n        this.vexpr(target, val);\n    }\n    switch (target.constructor) {\n        case Sk.astnodes.Name:\n            if (\n                s.simple &&\n                (this.u.ste.blockType === Sk.SYMTAB_CONSTS.ClassBlock ||\n                    this.u.ste.blockType == Sk.SYMTAB_CONSTS.ModuleBlock)\n            ) {\n                this.u.hasAnnotations = true;\n                const val = this.vexpr(s.annotation);\n                let mangled = mangleName(this.u.private_, target.id).v;\n                const key = this.makeConstant(\"new Sk.builtin.str('\" + mangled + \"')\");\n                this.chandlesubscr(Sk.astnodes.Store, \"$loc.__annotations__\", key, val);\n            }\n    }\n};\n\nCompiler.prototype.caugassign = function (s) {\n    var to;\n    var augsub;\n    var res;\n    var val;\n    var aug;\n    var auge;\n    var e;\n    Sk.asserts.assert(s instanceof Sk.astnodes.AugAssign);\n    e = s.target;\n    switch (e.constructor) {\n        case Sk.astnodes.Attribute:\n            to = this.vexpr(e.value);\n            auge = new Sk.astnodes.Attribute(\n                e.value,\n                e.attr,\n                Sk.astnodes.AugLoad,\n                e.lineno,\n                e.col_offset,\n                e.end_lineno,\n                e.end_col_offset\n            );\n            aug = this.vexpr(auge, undefined, to);\n            val = this.vexpr(s.value);\n            res = this._gr(\n                \"inplbinopattr\",\n                \"Sk.abstr.numberInplaceBinOp(\",\n                aug,\n                \",\",\n                val,\n                \",'\",\n                s.op.prototype._astname,\n                \"')\"\n            );\n            auge.ctx = Sk.astnodes.AugStore;\n            return this.vexpr(auge, res, to);\n        case Sk.astnodes.Subscript:\n            // Only compile the subscript value once\n            to = this.vexpr(e.value);\n            augsub = this.vslicesub(e.slice);\n            auge = new Sk.astnodes.Subscript(\n                e.value,\n                augsub,\n                Sk.astnodes.AugLoad,\n                e.lineno,\n                e.col_offset,\n                e.end_lineno,\n                e.end_col_offset\n            );\n            aug = this.vexpr(auge, undefined, to, augsub);\n            val = this.vexpr(s.value);\n            res = this._gr(\n                \"inplbinopsubscr\",\n                \"Sk.abstr.numberInplaceBinOp(\",\n                aug,\n                \",\",\n                val,\n                \",'\",\n                s.op.prototype._astname,\n                \"')\"\n            );\n            auge.ctx = Sk.astnodes.AugStore;\n            return this.vexpr(auge, res, to, augsub);\n        case Sk.astnodes.Name:\n            to = this.nameop(e.id, Sk.astnodes.Load);\n            val = this.vexpr(s.value);\n            res = this._gr(\n                \"inplbinop\",\n                \"Sk.abstr.numberInplaceBinOp(\",\n                to,\n                \",\",\n                val,\n                \",'\",\n                s.op.prototype._astname,\n                \"')\"\n            );\n            return this.nameop(e.id, Sk.astnodes.Store, res);\n        default:\n            Sk.asserts.fail(\"unhandled case in augassign\");\n    }\n};\n\n/**\n * optimize some constant exprs. returns 0 if always false, 1 if always true or -1 otherwise.\n */\nCompiler.prototype.exprConstant = function (e) {\n    switch (e.constructor) {\n        case Sk.astnodes.Num:\n            return Sk.misceval.isTrue(e.n) ? 1 : 0;\n        case Sk.astnodes.Str:\n            return Sk.misceval.isTrue(e.s) ? 1 : 0;\n        case Sk.astnodes.Name:\n        // todo; do __debug__ test here if opt\n        default:\n            return -1;\n    }\n};\n\nCompiler.prototype.newBlock = function (name) {\n    var ret = this.u.blocknum++;\n    this.u.blocks[ret] = [];\n    this.u.blocks[ret]._name = name || \"<unnamed>\";\n    this.u.blocks[ret]._next = null;\n    return ret;\n};\nCompiler.prototype.setBlock = function (n) {\n    Sk.asserts.assert(n >= 0 && n < this.u.blocknum);\n    this.u.curblock = n;\n};\n\nCompiler.prototype.pushBreakBlock = function (n) {\n    Sk.asserts.assert(n >= 0 && n < this.u.blocknum);\n    this.u.breakBlocks.push(n);\n};\nCompiler.prototype.popBreakBlock = function () {\n    this.u.breakBlocks.pop();\n};\n\nCompiler.prototype.pushContinueBlock = function (n) {\n    Sk.asserts.assert(n >= 0 && n < this.u.blocknum);\n    this.u.continueBlocks.push(n);\n};\nCompiler.prototype.popContinueBlock = function () {\n    this.u.continueBlocks.pop();\n};\n\nCompiler.prototype.pushExceptBlock = function (n) {\n    Sk.asserts.assert(n >= 0 && n < this.u.blocknum);\n    this.u.exceptBlocks.push(n);\n};\nCompiler.prototype.popExceptBlock = function () {\n    this.u.exceptBlocks.pop();\n};\n\nCompiler.prototype.pushFinallyBlock = function (n) {\n    Sk.asserts.assert(n >= 0 && n < this.u.blocknum);\n    Sk.asserts.assert(this.u.breakBlocks.length === this.u.continueBlocks.length);\n    this.u.finallyBlocks.push({ blk: n, breakDepth: this.u.breakBlocks.length });\n};\nCompiler.prototype.popFinallyBlock = function () {\n    this.u.finallyBlocks.pop();\n};\nCompiler.prototype.peekFinallyBlock = function () {\n    return this.u.finallyBlocks.length > 0\n        ? this.u.finallyBlocks[this.u.finallyBlocks.length - 1]\n        : undefined;\n};\n\nCompiler.prototype.setupExcept = function (eb) {\n    out(\"$exc.push(\", eb, \");\");\n    //this.pushExceptBlock(eb);\n};\n\nCompiler.prototype.endExcept = function () {\n    out(\"$exc.pop();\");\n};\n\nCompiler.prototype.getLocals = function (unit) {\n    var name;\n    var output;\n    var i;\n    var have = {};\n    //print(\"args\", unit.name.v, JSON.stringify(unit.argnames));\n    for (i = 0; unit.argnames && i < unit.argnames.length; ++i) {\n        have[unit.argnames[i]] = true;\n    }\n    //unit.localnames.sort();\n    output = [];\n    //console.log(unit.localnames, unit.argnames);\n    for (i = 0; i < unit.localnames.length; ++i) {\n        name = unit.localnames[i];\n        if (have[name] === undefined) {\n            output.push(name);\n            have[name] = true;\n        }\n    }\n    return output;\n};\n\nCompiler.prototype.outputLocals = function (unit, localNames) {\n    const varnames = localNames.join(\",\");\n    if (localNames.length > 0) {\n        return \"var \" + varnames + \"; /* locals */\";\n    }\n    return \"\";\n};\n\nCompiler.prototype.outputSuspensionHelpers = function (unit) {\n    var i, t;\n    var localSaveCode = [];\n    var localsToSave = unit.localnames.concat(unit.tempsToSave);\n    var seenTemps = {};\n\n    var localsToSaveWithoutDuplicates = [];\n    for (i = 0; i < localsToSave.length; i++) {\n        t = localsToSave[i];\n        if (seenTemps[t] === undefined) {\n            localsToSaveWithoutDuplicates.push(t);\n            seenTemps[t] = true;\n        }\n    }\n    localsToSave = localsToSaveWithoutDuplicates;\n\n    var hasCell = unit.ste.blockType === Sk.SYMTAB_CONSTS.FunctionBlock && unit.ste.childHasFree;\n    var output = localsToSave.length > 0 ? \"var \" + localsToSave.join(\",\") + \";\" : \"\";\n    output +=\n        \"var $wakeFromSuspension = function() {\" +\n        \"var susp = \" +\n        unit.scopename +\n        \".$wakingSuspension; \" +\n        unit.scopename +\n        \".$wakingSuspension = undefined;\" +\n        \"$blk=susp.$blk; $loc=susp.$loc; $gbl=susp.$gbl; $exc=susp.$exc; $err=susp.$err; $postfinally=susp.$postfinally;\" +\n        \"$currLineNo=susp.$lineno;$currColNo=susp.$colno;$currSource=susp.$source;Sk.lastYield=Date.now();\" +\n        //\"console.log('WAKEY', $fname, $loc, $gbl, $exc, $exc.length, $currColNo, $currLineNo, $err, $currSource,$blk);\" +\n        (hasCell ? \"$cell=susp.$cell;\" : \"\");\n\n    for (i = 0; i < localsToSave.length; i++) {\n        t = localsToSave[i];\n        output += t + \"=susp.$tmps.\" + t + \";\";\n    }\n\n    output +=\n        \"try {\" +\n        \"$ret=susp.child.resume();\" +\n        this.handleTraceback(false, unit.scopename) +\n        // Close out function\n        \";\";\n\n    for (i = 0; i < localsToSave.length; i++) {\n        t = localsToSave[i];\n        localSaveCode.push('\"' + t + '\":' + t);\n    }\n\n    output += \"var $mys = function(){return {data: {type: 'Sk.yield'}, resume: function(){} } };\";\n    output +=\n        \"var $saveSuspension = function($child, $filename, $lineno, $colno, $source) {\" +\n        //\"var susp = new Sk.misceval.Suspension(); susp.child=$child;\" +\n        \"var susp = Sk.misceval.injectSusp($child,$blk,$loc,$gbl,$exc,$err,$postfinally,$filename,$lineno,$colno,$source,{\" +\n        localSaveCode.join(\",\") +\n        \"});\" +\n        \"susp.resume=function(){\" +\n        unit.scopename +\n        \".$wakingSuspension=susp; return \" +\n        unit.scopename +\n        \"(\" +\n        (unit.ste.generator ? \"$gen\" : \"\") +\n        \"); };\" +\n        /*\"susp.data=susp.child.data;susp.$blk=$blk;susp.$loc=$loc;susp.$gbl=$gbl;susp.$exc=$exc;susp.$err=$err;susp.$postfinally=$postfinally;\" +\n        \"susp.$filename=$filename;susp.$lineno=$lineno;susp.$colno=$colno;susp.source=$source;\" +\n        \"susp.optional=susp.child.optional;\" +*/\n        (hasCell ? \"susp.$cell=$cell;\" : \"\") +\n        //\"susp.$tmps={\" + localSaveCode.join(\",\") + \"};\" +\n        \"return susp;\" +\n        \"};\";\n\n    return output;\n};\n\nCompiler.prototype.getLocalGetter = function (unit, localNames) {\n    return `var $getLocals=()=>({$cell,${localNames.join(\",\")}});`;\n};\n\nCompiler.prototype.outputAllUnits = function () {\n    var i;\n    var blocks;\n    var unit;\n    var j;\n    var ret = \"\";\n    var block;\n    var generatedBlocks;\n    for (j = 0; j < this.allUnits.length; ++j) {\n        unit = this.allUnits[j];\n        ret += unit.prefixCode;\n        var localNames = this.getLocals(unit);\n        ret += this.outputLocals(unit, localNames);\n        if (unit.doesSuspend) {\n            ret += this.outputSuspensionHelpers(unit);\n        }\n        ret += this.getLocalGetter(unit, unit.localnames);\n        ret += unit.varDeclsCode;\n        ret += unit.switchCode;\n        blocks = unit.blocks;\n        generatedBlocks = Object.create(null);\n        for (i = 0; i < blocks.length; ++i) {\n            block = i;\n            if (block in generatedBlocks) {\n                continue;\n            }\n            while (true) {\n                generatedBlocks[block] = true;\n\n                ret += \"case \" + block + \": /* --- \" + blocks[block]._name + \" --- */\";\n                ret += blocks[block].join(\"\");\n\n                if (blocks[block]._next !== null) {\n                    if (!(blocks[block]._next in generatedBlocks)) {\n                        ret += \"/* allowing case fallthrough */\";\n                        block = blocks[block]._next;\n                    } else {\n                        ret += \"/* jump */ continue;\";\n                        break;\n                    }\n                } else {\n                    // Shouldn't really be possible to hit this\n                    //ret += \"throw new Sk.builtin.SystemError('internal error: unterminated block');\";\n                    break;\n                }\n            }\n        }\n        ret += unit.suffixCode;\n    }\n    return ret;\n};\n\nCompiler.prototype.cif = function (s) {\n    var test;\n    var next;\n    var end;\n    var constant;\n    Sk.asserts.assert(s instanceof Sk.astnodes.If);\n    constant = this.exprConstant(s.test);\n    if (constant === 0) {\n        if (s.orelse && s.orelse.length > 0) {\n            this.vseqstmt(s.orelse);\n        }\n    } else if (constant === 1) {\n        this.vseqstmt(s.body);\n    } else {\n        end = this.newBlock(\"end of if\");\n        if (s.orelse && s.orelse.length > 0) {\n            next = this.newBlock(\"next branch of if\");\n        }\n\n        test = this.vexpr(s.test);\n\n        if (s.orelse && s.orelse.length > 0) {\n            this._jumpfalse(test, next);\n            this.vseqstmt(s.body);\n            this._jump(end);\n\n            this.setBlock(next);\n            this.vseqstmt(s.orelse);\n        } else {\n            this._jumpfalse(test, end);\n            this.vseqstmt(s.body);\n        }\n        this._jump(end);\n        this.setBlock(end);\n    }\n};\n\nCompiler.prototype.cwhile = function (s) {\n    var body;\n    var orelse;\n    var next;\n    var top;\n    var constant = this.exprConstant(s.test);\n    if (constant === 0) {\n        if (s.orelse) {\n            this.vseqstmt(s.orelse);\n        }\n    } else {\n        top = this.newBlock(\"while test\");\n        this._jump(top);\n        this.setBlock(top);\n\n        next = this.newBlock(\"after while\");\n        orelse = s.orelse.length > 0 ? this.newBlock(\"while orelse\") : null;\n        body = this.newBlock(\"while body\");\n\n        this.annotateSource(s, true);\n        this._jumpfalse(this.vexpr(s.test), orelse ? orelse : next);\n        this._jump(body);\n\n        this.pushBreakBlock(next);\n        this.pushContinueBlock(top);\n\n        this.setBlock(body);\n\n        if ((Sk.debugging || Sk.killableWhile) && this.u.canSuspend) {\n            var suspType = \"Sk.delay\";\n            var debugBlock = this.newBlock(\"debug breakpoint for line \" + s.lineno);\n            out(\n                \"if (Sk.breakpoints('\" +\n                    this.filename +\n                    \"',\" +\n                    s.lineno +\n                    \",\" +\n                    s.col_offset +\n                    \")) {\",\n                \"var $susp = $saveSuspension({data: {type: '\" +\n                    suspType +\n                    \"'}, resume: function() {}}, '\" +\n                    this.filename +\n                    \"',\" +\n                    s.lineno +\n                    \",\" +\n                    s.col_offset +\n                    \",\" +\n                    s.source +\n                    \");\",\n                \"$susp.$blk = \" + debugBlock + \";\",\n                \"$susp.optional = true;\",\n                \"return $susp;\",\n                \"}\"\n            );\n            this._jump(debugBlock);\n            this.setBlock(debugBlock);\n            this.u.doesSuspend = true;\n        }\n\n        this.vseqstmt(s.body);\n\n        this._jump(top);\n\n        this.popContinueBlock();\n        this.popBreakBlock();\n\n        if (s.orelse.length > 0) {\n            this.setBlock(orelse);\n            this.vseqstmt(s.orelse);\n            this._jump(next);\n        }\n\n        this.setBlock(next);\n    }\n};\n\nCompiler.prototype.cfor = function (s) {\n    var target;\n    var nexti;\n    var iter;\n    var toiter;\n    var start = this.newBlock(\"for start\");\n    var cleanup = this.newBlock(\"for cleanup\");\n    var end = this.newBlock(\"for end\");\n\n    this.pushBreakBlock(end);\n    this.pushContinueBlock(start);\n\n    // get the iterator\n    toiter = this.vexpr(s.iter);\n    if (this.u.ste.generator) {\n        // if we're in a generator, we have to store the iterator to a local\n        // so it's preserved (as we cross blocks here and assume it survives)\n        iter = \"$loc.\" + this.gensym(\"iter\");\n        out(iter, \"=Sk.abstr.iter(\", toiter, \");\");\n    } else {\n        iter = this._gr(\"iter\", \"Sk.abstr.iter(\", toiter, \")\");\n        this.u.tempsToSave.push(iter); // Save it across suspensions\n    }\n\n    this._jump(start);\n\n    this.setBlock(start);\n\n    // load targets\n    out(\"$ret = Sk.abstr.iternext(\", iter, this.u.canSuspend ? \", true\" : \", false\", \");\");\n\n    this._checkSuspension(s);\n\n    nexti = this._gr(\"next\", \"$ret\");\n    this._jumpundef(nexti, cleanup); // todo; this should be handled by StopIteration\n    target = this.vexpr(s.target, nexti);\n\n    if ((Sk.debugging || Sk.killableFor) && this.u.canSuspend) {\n        var suspType = \"Sk.delay\";\n        var debugBlock = this.newBlock(\"debug breakpoint for line \" + s.lineno);\n        out(\n            \"if (Sk.breakpoints('\" + this.filename + \"',\" + s.lineno + \",\" + s.col_offset + \")) {\",\n            \"var $susp = $saveSuspension({data: {type: '\" +\n                suspType +\n                \"'}, resume: function() {}}, '\" +\n                this.filename +\n                \"',\" +\n                s.lineno +\n                \",\" +\n                s.col_offset +\n                \",\" +\n                s.source +\n                \");\",\n            \"$susp.$blk = \" + debugBlock + \";\",\n            \"$susp.optional = true;\",\n            \"return $susp;\",\n            \"}\"\n        );\n        this._jump(debugBlock);\n        this.setBlock(debugBlock);\n        this.u.doesSuspend = true;\n    }\n\n    // execute body\n    this.vseqstmt(s.body);\n\n    // jump to top of loop\n    this._jump(start);\n\n    this.setBlock(cleanup);\n    this.popContinueBlock();\n    this.popBreakBlock();\n\n    this.vseqstmt(s.orelse);\n    this._jump(end);\n\n    this.setBlock(end);\n};\n\nCompiler.prototype.craise = function (s) {\n    if (s.exc) {\n        var exc = this._gr(\"exc\", this.vexpr(s.exc));\n        // This is tricky - we're supporting both the weird-ass semantics\n        // of the Python 2 \"raise (exc), (inst), (tback)\" version,\n        // plus the sensible Python \"raise (exc) from (cause)\".\n        // ast.js takes care of ensuring that you can only use the right one\n        // for the Python version you're using.\n\n        var instantiatedException = this.newBlock(\"exception now instantiated\");\n        var isClass = this._gr(\"isclass\", exc + \".prototype instanceof Sk.builtin.BaseException\");\n        this._jumpfalse(isClass, instantiatedException);\n        //this._jumpfalse(instantiatedException, isClass);\n\n        // Instantiate exc with inst\n        if (s.inst) {\n            var inst = this._gr(\"inst\", this.vexpr(s.inst));\n            out(\n                \"if(!(\",\n                inst,\n                \" instanceof Sk.builtin.tuple)) {\",\n                inst,\n                \"= new Sk.builtin.tuple([\",\n                inst,\n                \"]);\",\n                \"}\"\n            );\n            out(\"$ret = Sk.misceval.callsimOrSuspendArray(\", exc, \",\", inst, \".v);\");\n        } else {\n            out(\"$ret = Sk.misceval.callsimOrSuspend(\", exc, \");\");\n        }\n        this._checkSuspension(s);\n        out(exc, \"=$ret;\");\n\n        this._jump(instantiatedException);\n\n        this.setBlock(instantiatedException);\n\n        // TODO TODO TODO set cause appropriately\n        // (and perhaps traceback for py2 if we care before it gets fully deprecated)\n        //out(\"Sk.execStack.pop();\");\n        out(\n            \"if (\",\n            exc,\n            \" instanceof Sk.builtin.BaseException) {throw \",\n            exc,\n            \";} else {throw new Sk.builtin.TypeError('exceptions must derive from BaseException');};\"\n        );\n    } else {\n        // re-raise\n        //out(\"Sk.execStack.pop();\");\n        out(\"throw $err;\");\n    }\n};\n\nCompiler.prototype.outputFinallyCascade = function (thisFinally) {\n    var nextFinally;\n\n    // What do we do when we're done executing a 'finally' block?\n    // Normally you just fall off the end. If we're 'return'ing,\n    // 'continue'ing or 'break'ing, $postfinally tells us what to do.\n    //\n    // But we might be in a nested pair of 'finally' blocks. If so, we need\n    // to work out whether to jump to the outer finally block.\n    //\n    // (NB we do NOT deal with re-raising exceptions here. That's handled\n    // elsewhere, because 'with' does special things with exceptions.)\n\n    if (this.u.finallyBlocks.length == 0) {\n        // No nested 'finally' block. Easy.\n        out(\n            \"if($postfinally!==undefined) { if ($postfinally.returning) { return $postfinally.returning; } else { $blk=$postfinally.gotoBlock; $postfinally=undefined; continue; } }\"\n        );\n    } else {\n        // OK, we're nested. Do we jump straight to the outer 'finally' block?\n        // Depends on how we got here here.\n\n        // Normal execution ($postfinally===undefined)? No, we're done here.\n\n        // Returning ($postfinally.returning)? Yes, we want to execute all the\n        // 'finally' blocks on the way out.\n\n        // Breaking ($postfinally.isBreak)? It depends. Is the outer 'finally'\n        // block inside or outside the loop we're breaking out of? We compare\n        // its breakDepth to ours to find out. If we're at the same breakDepth,\n        // we're both inside the innermost loop, so we both need to execute.\n        // ('continue' is the same thing as 'break' for us)\n\n        nextFinally = this.peekFinallyBlock();\n\n        out(\n            \"if($postfinally!==undefined) {\",\n            \"if ($postfinally.returning\",\n            nextFinally.breakDepth == thisFinally.breakDepth ? \"|| $postfinally.isBreak\" : \"\",\n            \") {\",\n\n            \"$blk=\",\n            nextFinally.blk,\n            \";continue;\",\n            \"} else {\",\n            \"$blk=$postfinally.gotoBlock;$postfinally=undefined;continue;\",\n            \"}\",\n            \"}\"\n        );\n    }\n};\n\nCompiler.prototype.ctry = function (s) {\n    var check;\n    var next;\n    var handlertype;\n    var handler;\n    var end;\n    var orelse;\n    var unhandled;\n    var i;\n    var n = s.handlers.length;\n\n    var finalBody, finalExceptionHandler, finalExceptionToReRaise;\n    var thisFinally;\n\n    if (s.finalbody) {\n        finalBody = this.newBlock(\"finalbody\");\n        finalExceptionHandler = this.newBlock(\"finalexh\");\n        finalExceptionToReRaise = this._gr(\"finally_reraise\", \"undefined\");\n\n        this.u.tempsToSave.push(finalExceptionToReRaise);\n        this.pushFinallyBlock(finalBody);\n        thisFinally = this.peekFinallyBlock();\n        this.setupExcept(finalExceptionHandler);\n    }\n\n    // Create a block for each except clause\n    var handlers = [];\n    for (i = 0; i < n; ++i) {\n        handlers.push(this.newBlock(\"except_\" + i + \"_\"));\n    }\n\n    unhandled = this.newBlock(\"unhandled\");\n    orelse = this.newBlock(\"orelse\");\n    end = this.newBlock(\"end\");\n\n    if (handlers.length != 0) {\n        this.setupExcept(handlers[0]);\n    }\n    this.vseqstmt(s.body);\n    if (handlers.length != 0) {\n        this.endExcept();\n    }\n    this._jump(orelse);\n\n    for (i = 0; i < n; ++i) {\n        this.setBlock(handlers[i]);\n        handler = s.handlers[i];\n        if (!handler.type && i < n - 1) {\n            throw new Sk.builtin.SyntaxError(\n                \"default 'except:' must be last\",\n                this.filename,\n                handler.lineno,\n                ...get_context(handler)\n            );\n        }\n\n        if (handler.type) {\n            // should jump to next handler if err not isinstance of handler.type\n            handlertype = this.vexpr(handler.type);\n            next = i == n - 1 ? unhandled : handlers[i + 1];\n\n            // var isinstance = this.nameop(new Sk.builtin.str(\"isinstance\"), Load));\n            // var check = this._gr('call', \"Sk.misceval.callsimArray(\", isinstance, \", [$err, \", handlertype, \"])\");\n\n            check = this._gr(\n                \"instance\",\n                \"Sk.misceval.isTrue(Sk.builtin.isinstance($err, \",\n                handlertype,\n                \"))\"\n            );\n            this._jumpfalse(check, next);\n        }\n\n        if (handler.name) {\n            this.vexpr(handler.name, \"$err\");\n        }\n\n        this.vseqstmt(handler.body);\n\n        this._jump(end);\n    }\n\n    // If no except clause catches exception, throw it again\n    this.setBlock(unhandled);\n    out(\"throw $err;\");\n\n    this.setBlock(orelse);\n    this.vseqstmt(s.orelse);\n    this._jump(end);\n\n    this.setBlock(end);\n    // End of the try/catch/else segment\n    if (s.finalbody) {\n        this.endExcept();\n\n        this._jump(finalBody);\n\n        this.setBlock(finalExceptionHandler);\n        // Exception handling also goes to the finally body,\n        // stashing the original exception to re-raise\n        out(finalExceptionToReRaise, \"=$err;\");\n        this._jump(finalBody);\n\n        this.setBlock(finalBody);\n        this.popFinallyBlock();\n        this.vseqstmt(s.finalbody);\n        // If finalbody executes normally, AND we have an exception\n        // to re-raise, we raise it.\n        out(\n            \"if(\",\n            finalExceptionToReRaise,\n            \"!==undefined) { throw \",\n            finalExceptionToReRaise,\n            \";}\"\n        );\n\n        this.outputFinallyCascade(thisFinally);\n        // Else, we continue from here.\n    }\n};\n\nCompiler.prototype.cwith = function (s, itemIdx) {\n    var mgr, exit, value, exception;\n    var exceptionHandler = this.newBlock(\"withexh\"),\n        tidyUp = this.newBlock(\"withtidyup\");\n    var carryOn = this.newBlock(\"withcarryon\");\n    var thisFinallyBlock;\n\n    // NB this does not *quite* match the semantics in PEP 343, which\n    // specifies \"exit = type(mgr).__exit__\" rather than getattr()ing,\n    // presumably for performance reasons.\n\n    mgr = this._gr(\"mgr\", this.vexpr(s.items[itemIdx].context_expr));\n\n    // exit = mgr.__exit__\n    out(\"$ret = Sk.abstr.lookupSpecial(\", mgr, \",Sk.builtin.str.$exit);\");\n    this._checkSuspension(s);\n    exit = this._gr(\"exit\", \"$ret\");\n    this.u.tempsToSave.push(exit);\n\n    // value = mgr.__enter__()\n    out(\"$ret = Sk.abstr.lookupSpecial(\", mgr, \",Sk.builtin.str.$enter);\");\n    this._checkSuspension(s);\n    out(\"$ret = $ret != null && Sk.misceval.callsimOrSuspendArray($ret);\");\n    this._checkSuspension(s);\n    value = this._gr(\"value\", \"$ret\");\n\n    // try:\n    this.pushFinallyBlock(tidyUp);\n    thisFinallyBlock = this.u.finallyBlocks[this.u.finallyBlocks.length - 1];\n    this.setupExcept(exceptionHandler);\n\n    //    VAR = value\n    if (s.items[itemIdx].optional_vars) {\n        this.nameop(s.items[itemIdx].optional_vars.id, Sk.astnodes.Store, value);\n    }\n\n    //    (try body)\n\n    if (itemIdx + 1 < s.items.length) {\n        // \"with\" statements with multiple items (context managers) are\n        // treated as nested \"with\" statements\n        this.cwith(s, itemIdx + 1);\n    } else {\n        this.vseqstmt(s.body);\n    }\n\n    this.endExcept();\n    this._jump(tidyUp);\n\n    // except:\n    this.setBlock(exceptionHandler);\n\n    //   if not exit(*sys.exc_info()):\n    //     raise\n    out(\n        \"$ret = \",\n        exit,\n        \"!=null && Sk.misceval.applyOrSuspend(\",\n        exit,\n        \",undefined,Sk.builtin.getExcInfo($err),undefined,[]);\"\n    );\n    this._checkSuspension(s);\n    this._jumptrue(\"$ret\", carryOn);\n    out(\"throw $err;\");\n\n    // finally: (kinda. NB that this is a \"finally\" that doesn't run in the\n    //           exception case!)\n    this.setBlock(tidyUp);\n    this.popFinallyBlock();\n\n    //   exit(None, None, None)\n    out(\n        \"$ret = \",\n        exit,\n        \"!=null && Sk.misceval.callsimOrSuspendArray(\",\n        exit,\n        \",[Sk.builtin.none.none$,Sk.builtin.none.none$,Sk.builtin.none.none$]);\"\n    );\n    this._checkSuspension(s);\n    // Ignore $ret.\n\n    this.outputFinallyCascade(thisFinallyBlock);\n\n    this._jump(carryOn);\n\n    this.setBlock(carryOn);\n};\n\nCompiler.prototype.cassert = function (s) {\n    /* todo; warnings method\n     if (s.test instanceof Tuple && s.test.elts.length > 0)\n     Sk.warn(\"assertion is always true, perhaps remove parentheses?\");\n     */\n\n    var test = this.vexpr(s.test);\n    var end = this.newBlock(\"end\");\n    this._jumptrue(test, end);\n    // todo; exception handling\n    // maybe replace with Sk.asserts.fail?? or just an alert?\n    out(\"throw new Sk.builtin.AssertionError(\", s.msg ? this.vexpr(s.msg) : \"\", \");\");\n    this.setBlock(end);\n};\n\nCompiler.prototype.cimportas = function (name, asname, mod) {\n    var attr;\n    var src = name.v;\n    var dotLoc = src.indexOf(\".\");\n    //print(\"src\", src);\n    //print(\"dotLoc\", dotLoc);\n    var cur = mod;\n    if (dotLoc !== -1) {\n        // if there's dots in the module name, __import__ will have returned\n        // the top-level module. so, we need to extract the actual module by\n        // getattr'ing up through the names, and then storing the leaf under\n        // the name it was to be imported as.\n        src = src.substr(dotLoc + 1);\n        //print(\"src now\", src);\n        while (dotLoc !== -1) {\n            dotLoc = src.indexOf(\".\");\n            attr = dotLoc !== -1 ? src.substr(0, dotLoc) : src;\n            cur = this._gr(\"lattr\", \"Sk.abstr.gattr(\", cur, \", new Sk.builtin.str('\", attr, \"'))\");\n            src = src.substr(dotLoc + 1);\n        }\n    }\n    return this.nameop(asname, Sk.astnodes.Store, cur);\n};\n\nCompiler.prototype.cimport = function (s) {\n    var lastDot;\n    var tmp;\n    var mod;\n    var alias;\n    var i;\n    var n = s.names.length;\n    for (i = 0; i < n; ++i) {\n        alias = s.names[i];\n        out(\n            \"$ret = Sk.builtin.__import__(\",\n            alias.name[\"$r\"]().v,\n            \",$gbl,$loc,[],\",\n            Sk.__future__.absolute_import ? 0 : -1,\n            \",true);\"\n        );\n\n        this._checkSuspension(s);\n\n        mod = this._gr(\"module\", \"$ret\");\n\n        if (alias.asname) {\n            this.cimportas(alias.name, alias.asname, mod);\n        } else {\n            tmp = alias.name;\n            lastDot = tmp.v.indexOf(\".\");\n            if (lastDot !== -1) {\n                tmp = new Sk.builtin.str(tmp.v.substr(0, lastDot));\n            }\n            this.nameop(tmp, Sk.astnodes.Store, mod);\n        }\n    }\n};\n\nCompiler.prototype.cfromimport = function (s) {\n    var storeName;\n    var got;\n    var alias;\n    var aliasOut;\n    var mod;\n    var i;\n    var n = s.names.length;\n    var names = [];\n    var level = s.level;\n    if (level == 0 && !Sk.__future__.absolute_import) {\n        level = -1;\n    }\n    for (i = 0; i < n; ++i) {\n        names[i] = \"'\" + fixReserved(s.names[i].name.v) + \"'\";\n    }\n    out(\n        \"$ret = Sk.builtin.__import__(\",\n        s.module[\"$r\"]().v,\n        \",$gbl,$loc,[\",\n        names,\n        \"],\",\n        level,\n        \",true);\"\n    );\n\n    this._checkSuspension(s);\n\n    //out(\"print('__import__ returned ' + $ret);\");\n    //out(\"for (var x in $ret) { print(x); }\");\n    mod = this._gr(\"module\", \"$ret\");\n    for (i = 0; i < n; ++i) {\n        alias = s.names[i];\n        aliasOut = \"'\" + alias.name.v + \"'\";\n        if (i === 0 && alias.name.v === \"*\") {\n            Sk.asserts.assert(n === 1);\n            out(\"Sk.importStar(\", mod, \",$loc, $gbl);\");\n            return;\n        }\n\n        //out(\"print(\\\"getting Sk.abstr.gattr(\", mod, \",\", alias.name[\"$r\"]().v, \")\\\");\");\n        got = this._gr(\n            \"item\",\n            \"Sk.abstr.gattr(\",\n            mod,\n            \", new Sk.builtin.str(\",\n            aliasOut,\n            \"), undefined)\"\n        );\n        //out(\"print('got');\");\n        storeName = alias.name;\n        if (alias.asname) {\n            storeName = alias.asname;\n        }\n        this.nameop(storeName, Sk.astnodes.Store, got);\n    }\n};\n\n/**\n * builds a code object (js function) for various constructs. used by def,\n * lambda, generator expressions. it isn't used for class because it seemed\n * different enough.\n *\n * handles:\n * - setting up a new scope\n * - decorators (if any)\n * - defaults setup\n * - setup for cell and free vars\n * - setup and modification for generators\n *\n * @param {Object} n ast node to build for\n * @param {Sk.builtin.str} coname name of code object to build\n * @param {Array} decorator_list ast of decorators if any\n * @param {Sk.astnodes.arguments_} args arguments to function, if any\n * @param {Function} callback called after setup to do actual work of function\n * @param {Sk.builtin.str=} class_for_super\n *\n * @returns the name of the newly created function or generator object.\n *\n */\nCompiler.prototype.buildcodeobj = function (\n    n,\n    coname,\n    decorator_list,\n    args,\n    callback,\n    class_for_super\n) {\n    var containingHasFree;\n    var frees;\n    var argnamesarr = [];\n    var start;\n    var kw;\n    var maxargs;\n    var minargs;\n    var id;\n    var argname;\n    var offset;\n    var cells;\n    var locals;\n    var i;\n    var funcArgs;\n    var entryBlock;\n    var hasCell;\n    var hasFree;\n    var isGenerator;\n    var scopename;\n    var decos = [];\n    var defaults = [];\n    var kw_defaults = [];\n    var vararg = null;\n    var kwarg = null;\n\n    // decorators and defaults have to be evaluated out here before we enter\n    // the new scope. we output the defaults and attach them to this code\n    // object, but only once we know the name of it (so we do it after we've\n    // exited the scope near the end of this function).\n    if (decorator_list) {\n        decos = this.vseqexpr(decorator_list);\n    }\n    if (args && args.defaults) {\n        defaults = this.vseqexpr(args.defaults);\n    }\n\n    const func_annotations = this.cannotations(args, n.returns);\n\n    if (args && args.kw_defaults) {\n        kw_defaults = args.kw_defaults.map((e) => (e ? this.vexpr(e) : \"undefined\"));\n    }\n    if (args && args.vararg) {\n        vararg = args.vararg;\n    }\n    if (args && args.kwarg) {\n        kwarg = args.kwarg;\n    }\n    if (!Sk.__future__.python3 && args && args.kwonlyargs && args.kwonlyargs.length != 0) {\n        throw new Sk.builtin.SyntaxError(\"Keyword-only arguments are not supported in Python 2\");\n    }\n\n    //\n    // enter the new scope, and create the first block\n    //\n    scopename = this.enterScope(coname, n, n.lineno, this.canSuspend, coname.v);\n\n    isGenerator = this.u.ste.generator;\n    hasFree = this.u.ste.hasFree;\n    hasCell = this.u.ste.childHasFree;\n\n    entryBlock = this.newBlock(\"codeobj entry\");\n\n    //\n    // the header of the function, and arguments\n    //\n    this.u.prefixCode = \"var \" + scopename + \"=(function \" + this.niceName(coname.v) + \"$(\";\n\n    funcArgs = [];\n    if (isGenerator) {\n        // TODO make generators deal with arguments properly\n        if (kwarg) {\n            throw new Sk.builtin.SyntaxError(\n                coname.v + \"(): keyword arguments in generators not supported\",\n                this.filename,\n                n.lineno,\n                ...get_context(n)\n            );\n        }\n        if (vararg) {\n            throw new Sk.builtin.SyntaxError(\n                coname.v + \"(): variable number of arguments in generators not supported\",\n                this.filename,\n                n.lineno,\n                ...get_context(n)\n            );\n        }\n        funcArgs.push(\"$gen\");\n    } else {\n        if (kwarg) {\n            funcArgs.push(\"$kwa\");\n            this.u.tempsToSave.push(\"$kwa\");\n        }\n        for (i = 0; args && i < args.args.length; ++i) {\n            funcArgs.push(this.nameop(args.args[i].arg, Sk.astnodes.Param));\n        }\n        for (i = 0; args && args.kwonlyargs && i < args.kwonlyargs.length; ++i) {\n            funcArgs.push(this.nameop(args.kwonlyargs[i].arg, Sk.astnodes.Param));\n        }\n        if (vararg) {\n            funcArgs.push(this.nameop(args.vararg.arg, Sk.astnodes.Param));\n        }\n    }\n    // Are we using the new fast-call mechanism, where the\n    // function we define implements the tp$call interface?\n    // (Right now we haven't migrated generators because they're\n    // a mess, but if this works we can move everything over)\n    let fastCall = !isGenerator;\n\n    if (hasFree) {\n        if (!fastCall) {\n            funcArgs.push(\"$free\");\n        }\n        this.u.tempsToSave.push(\"$free\");\n    }\n\n    let argString;\n    if (fastCall) {\n        argString = \"$posargs,$kwargs\";\n    } else {\n        argString = funcArgs.join(\",\");\n    }\n    this.u.prefixCode += argString;\n\n    this.u.prefixCode += \"){\";\n\n    if (isGenerator) {\n        this.u.prefixCode += \"\\n// generator\\n\";\n    }\n    if (hasFree) {\n        this.u.prefixCode += \"\\n// has free\\n\";\n    }\n    if (hasCell) {\n        this.u.prefixCode += \"\\n// has cell\\n\";\n    }\n\n    if (fastCall) {\n        this.u.prefixCode += \"\\n// fast call\\n\";\n    }\n\n    //\n    // set up standard dicts/variables\n    //\n    locals = \"{}\";\n    if (isGenerator) {\n        entryBlock = \"$gen.gi$resumeat\";\n        locals = \"$gen.gi$locals\";\n    }\n    cells = \",$cell={}\";\n    if (hasCell) {\n        if (isGenerator) {\n            cells = \",$cell=$gen.gi$cells\";\n        }\n    }\n\n    // note special usage of 'this' to avoid having to slice globals into\n    // all function invocations in call\n    // (fastcall doesn't need to do this, as 'this' is the func object)\n    this.u.varDeclsCode +=\n        \"var $blk=\" +\n        entryBlock +\n        \",$exc=[],$loc=\" +\n        locals +\n        cells +\n        \",$gbl=\" +\n        (fastCall ? \"this.func_globals\" : \"this\") +\n        (fastCall && hasFree ? \",$free=this.func_closure\" : \"\") +\n        \",$err=undefined,$ret=undefined,$postfinally=undefined,$currLineNo=undefined,$currColNo=undefined,$currSource=undefined;\";\n    if (Sk.execLimit !== null) {\n        this.u.varDeclsCode += \"Sk.misceval.startTimer();\";\n    }\n    if (Sk.yieldLimit !== null && this.u.canSuspend) {\n        this.u.varDeclsCode += \"Sk.misceval.resetYield();\";\n    }\n\n    //\n    // If there is a suspension, resume from it. Otherwise, initialise\n    // parameters appropriately.\n    //\n    this.u.varDeclsCode +=\n        \"var $waking=false; if (\" +\n        scopename +\n        \".$wakingSuspension!==undefined) { $wakeFromSuspension(); $waking=true; } else {\";\n\n    if (fastCall) {\n        // Resolve our arguments from $posargs+$kwargs.\n        // If we're posargs-only, we can handle the fast path\n        // without even calling out\n        if (!kwarg && !vararg && (!args || !args.kwonlyargs || args.kwonlyargs.length === 0)) {\n            this.u.varDeclsCode +=\n                \"var $args = ((!$kwargs || $kwargs.length===0) && $posargs.length===\" +\n                funcArgs.length +\n                \") ? $posargs : this.$resolveArgs($posargs,$kwargs)\";\n        } else {\n            this.u.varDeclsCode += \"\\nvar $args = this.$resolveArgs($posargs,$kwargs)\\n\";\n        }\n        for (let i = 0; i < funcArgs.length; i++) {\n            this.u.varDeclsCode += \",\" + funcArgs[i] + \"=$args[\" + i + \"]\";\n        }\n        this.u.varDeclsCode += \";\\n\";\n    }\n\n    // TODO update generators to do their arg checks in outside generated code,\n    // like functions do\n    //\n    // this could potentially get removed if generators would learn to deal with args, kw, kwargs, varargs\n    // initialize default arguments. we store the values of the defaults to\n    // this code object as .$defaults just below after we exit this scope.\n    //\n    if (isGenerator && defaults.length > 0) {\n        // defaults have to be \"right justified\" so if there's less defaults\n        // than args we offset to make them match up (we don't need another\n        // correlation in the ast)\n        offset = args.args.length - defaults.length;\n        for (i = 0; i < defaults.length; ++i) {\n            argname = this.nameop(args.args[i + offset].arg, Sk.astnodes.Param);\n            this.u.varDeclsCode +=\n                \"if(\" +\n                argname +\n                \"===undefined)\" +\n                argname +\n                \"=\" +\n                scopename +\n                \".$defaults[\" +\n                i +\n                \"];\";\n        }\n    }\n\n    //\n    // copy all parameters that are also cells into the cells dict. this is so\n    // they can be accessed correctly by nested scopes.\n    //\n    for (i = 0; args && i < args.args.length; ++i) {\n        id = args.args[i].arg;\n        if (this.isCell(id)) {\n            let mangled = fixReserved(mangleName(this.u.private_, id).v);\n            this.u.varDeclsCode += \"$cell.\" + mangled + \"=\" + mangled + \";\";\n        }\n    }\n    for (i = 0; args && args.kwonlyargs && i < args.kwonlyargs.length; ++i) {\n        id = args.kwonlyargs[i].arg;\n        if (this.isCell(id)) {\n            let mangled = fixReserved(mangleName(this.u.private_, id).v);\n            this.u.varDeclsCode += \"$cell.\" + mangled + \"=\" + mangled + \";\";\n        }\n    }\n    if (vararg && this.isCell(vararg.arg)) {\n        let mangled = fixReserved(mangleName(this.u.private_, vararg.arg).v);\n        this.u.varDeclsCode += \"$cell.\" + mangled + \"=\" + mangled + \";\";\n    }\n\n    //\n    // initialize kwarg, if any\n    //\n    if (kwarg) {\n        this.u.localnames.push(kwarg.arg.v);\n        this.u.varDeclsCode += kwarg.arg.v + \"=new Sk.builtins['dict']($kwa);\";\n        if (this.isCell(kwarg.arg)) {\n            let mangled = fixReserved(mangleName(this.u.private_, kwarg.arg).v);\n            this.u.varDeclsCode += \"$cell.\" + mangled + \"=\" + mangled + \";\";\n        }\n    }\n\n    //\n    // close the else{} block from the wakingSuspension check\n    //\n    this.u.varDeclsCode += \"}\";\n\n    // inject __class__ cell when running python3\n    if (Sk.__future__.python3 && class_for_super) {\n        this.u.varDeclsCode += \"let __class__=$gbl.\" + class_for_super.v + \";\";\n    }\n\n    // Begin stack entry\n    //this.u.prefixCode += `Sk.execStack.push([\"${coname.v}\", {${this.u.localnames.join(\",\")}}]);`;\n\n    // finally, set up the block switch that the jump code expects\n    //\n    // Old switch code\n    // this.u.switchCode += \"while(true){switch($blk){\";\n    // this.u.suffixCode = \"}break;}});\";\n\n    // New switch code to catch exceptions\n    this.u.switchCode = \"while(true){try{\";\n    this.u.switchCode += this.outputInterruptTest();\n    this.u.switchCode += \"switch($blk){\";\n    this.u.suffixCode = \"}\" + this.handleTraceback(true, coname.v);\n    this.u.suffixCode += \"});\";\n\n    // Track that we are about to call the function\n    if (this.filename && !this.filename.startsWith(\"src/lib/\")) {\n        out(\"Sk.beforeCall && Sk.beforeCall('\" + coname.$jsstr() + \"',\" + argString + \");\");\n    }\n\n    //\n    // jump back to the handler so it can do the main actual work of the\n    // function\n    //\n    callback.call(this, scopename);\n\n    //\n    // get a list of all the argument names (used to attach to the code\n    // object, and also to allow us to declare only locals that aren't also\n    // parameters).\n    if (args) {\n        for (let arg of args.args) {\n            argnamesarr.push(arg.arg.v);\n        }\n        for (let arg of args.kwonlyargs || []) {\n            argnamesarr.push(arg.arg.v);\n        }\n\n        // store to unit so we know what local variables not to declare\n        this.u.argnames = argnamesarr;\n    }\n\n    //\n    // and exit the code object scope\n    //\n    this.exitScope();\n\n    //\n    // attach the default values we evaluated at the beginning to the code\n    // object so that it can get at them to set any arguments that are left\n    // unset.\n    //\n    if (defaults.length > 0) {\n        out(scopename, \".$defaults=[\", defaults.join(\",\"), \"];\");\n    }\n    if (args && args.kwonlyargs && args.kwonlyargs.length > 0) {\n        out(scopename, \".co_argcount=\", args.args.length, \";\");\n        out(scopename, \".co_kwonlyargcount=\", args.kwonlyargs.length, \";\");\n        out(scopename, \".$kwdefs=[\", kw_defaults.join(\",\"), \"];\");\n    }\n\n    if (decos.length > 0) {\n        out(scopename, \".$decorators=[\", decos.join(\",\"), \"];\");\n    }\n\n    //\n    // attach co_varnames (only the argument names) for keyword argument\n    // binding.\n    //\n    if (argnamesarr.length > 0) {\n        out(scopename, \".co_varnames=['\", argnamesarr.join(\"','\"), \"'];\");\n    } else {\n        out(scopename, \".co_varnames=[];\");\n    }\n\n    //\n    // Skulpt doesn't have \"co_consts\", so record the docstring (or\n    // None) in the \"co_docstring\" property of the code object, ready\n    // for use by the Sk.builtin.func constructor.\n    //\n    out(scopename, \".co_docstring=\", this.cDocstringOfCode(n), \";\");\n\n    //\n    // attach flags\n    //\n    if (kwarg) {\n        out(scopename, \".co_kwargs=1;\");\n    }\n    if (vararg) {\n        out(scopename, \".co_varargs=1;\");\n    }\n    if (!isGenerator) {\n        out(scopename, \".co_fastcall=1;\");\n    }\n\n    //\n    // build either a 'function' or 'generator'. the function is just a simple\n    // constructor call. the generator is more complicated. it needs to make a\n    // new generator every time it's called, so the thing that's returned is\n    // actually a function that makes the generator (and passes arguments to\n    // the function onwards to the generator). this should probably actually\n    // be a function object, rather than a js function like it is now. we also\n    // have to build the argument names to pass to the generator because it\n    // needs to store all locals into itself so that they're maintained across\n    // yields.\n    //\n    // todo; possibly this should be outside?\n    //\n    frees = \"\";\n    if (hasFree) {\n        frees = \",$cell\";\n        // if the scope we're in where we're defining this one has free\n        // vars, they may also be cell vars, so we pass those to the\n        // closure too.\n        containingHasFree = this.u.ste.hasFree;\n        if (containingHasFree) {\n            frees += \",$free\";\n        }\n    }\n    if (isGenerator) {\n        // Keyword and variable arguments are not currently supported in generators.\n        // The call to pyCheckArgs assumes they can't be true.\n        if (args && args.args.length > 0) {\n            return this._gr(\n                \"gener\",\n                \"new Sk.builtins['function']((function(){var $origargs=Array.prototype.slice.call(arguments);Sk.builtin.pyCheckArgsLen(\\\"\",\n                coname.v,\n                '\",arguments.length,',\n                args.args.length - defaults.length,\n                \",\",\n                args.args.length,\n                \");return new Sk.builtins['generator'](\",\n                scopename,\n                \",$gbl,$origargs\",\n                frees,\n                \");}))\"\n            );\n        } else {\n            return this._gr(\n                \"gener\",\n                \"new Sk.builtins['function']((function(){Sk.builtin.pyCheckArgsLen(\\\"\",\n                coname.v,\n                \"\\\",arguments.length,0,0);return new Sk.builtins['generator'](\",\n                scopename,\n                \",$gbl,[]\",\n                frees,\n                \");}))\"\n            );\n        }\n    } else {\n        let funcobj;\n        if (decos.length > 0) {\n            out(\"$ret = new Sk.builtins['function'](\", scopename, \",$gbl\", frees, \");\");\n            for (let decorator of decos.reverse()) {\n                out(\"$ret = Sk.misceval.callsimOrSuspendArray(\", decorator, \",[$ret]);\");\n                this._checkSuspension();\n            }\n            funcobj = this._gr(\"funcobj\", \"$ret\");\n        } else {\n            funcobj = this._gr(\n                \"funcobj\",\n                \"new Sk.builtins['function'](\",\n                scopename,\n                \",$gbl\",\n                frees,\n                \")\"\n            );\n        }\n        if (func_annotations) {\n            out(funcobj, \".func_annotations=\", func_annotations, \";\");\n        }\n\n        return funcobj;\n    }\n};\n\nCompiler.prototype.cargannotation = function (id, annotation, ann_dict) {\n    if (annotation) {\n        const mangled = mangleName(this.u.private_, id).v;\n        // var scope = this.u.ste.getScope(mangled);\n        ann_dict.push(`'${mangled}'`);\n        ann_dict.push(this.vexpr(annotation));\n    }\n};\n\nCompiler.prototype.cargannotations = function (args, ann_dict) {\n    if (!args) {\n        return;\n    }\n    for (let i = 0; i < args.length; i++) {\n        const arg = args[i];\n        this.cargannotation(arg.arg, arg.annotation, ann_dict);\n    }\n};\n\nconst return_str = new Sk.builtin.str(\"return\");\n\nCompiler.prototype.cannotations = function (args, returns) {\n    const ann_dict = [];\n    if (args) {\n        this.cargannotations(args.posonlyargs, ann_dict);\n        this.cargannotations(args.args, ann_dict);\n        if (args.vararg && args.vararg.annotation) {\n            this.cargannotation(args.vararg.arg, args.vararg.annotation, ann_dict);\n        }\n        this.cargannotations(args.kwonlyargs, ann_dict);\n        if (args.kwarg && args.kwarg.annotation) {\n            this.cargannotation(args.kwarg.arg, args.kwarg.annotation, ann_dict);\n        }\n    }\n    if (returns) {\n        this.cargannotation(return_str, returns, ann_dict);\n    }\n    if (ann_dict.length === 0) {\n        return;\n    }\n    // return as kw dict like list.\n    // This will get turned into a dict when requested in python code\n    // see func.js;\n    return \"[\" + ann_dict.join(\",\") + \"]\";\n};\n\n/** JavaScript for the docstring of the given body, or null if the\n * body has no docstring.\n */\nCompiler.prototype.maybeCDocstringOfBody = function (body) {\n    if (body.length === 0) {\n        return null;\n    }\n\n    const stmt_0 = body[0];\n    if (stmt_0.constructor !== Sk.astnodes.Expr) {\n        return null;\n    }\n\n    const expr = stmt_0.value;\n    if (expr.constructor !== Sk.astnodes.Str) {\n        return null;\n    }\n\n    return this.vexpr(expr);\n};\n\n/** JavaScript for the docstring of the given node.  Only called from\n * buildcodeobj(), and expects a FunctionDef, Lambda, or GeneratorExp\n * node.  We give a \"None\" docstring to a GeneratorExp node, although\n * it is not carried over to the final generator; this is harmless.\n */\nCompiler.prototype.cDocstringOfCode = function (node) {\n    switch (node.constructor) {\n        case Sk.astnodes.AsyncFunctionDef: // For when it's supported\n        case Sk.astnodes.FunctionDef:\n            return this.maybeCDocstringOfBody(node.body) || \"Sk.builtin.none.none$\";\n\n        case Sk.astnodes.Lambda:\n        case Sk.astnodes.GeneratorExp:\n            return \"Sk.builtin.none.none$\";\n\n        default:\n            Sk.asserts.fail(`unexpected node kind ${node.constructor.name}`);\n    }\n};\n\nCompiler.prototype.cfunction = function (s, class_for_super) {\n    var funcorgen;\n    //let filename = this.filename;\n    Sk.asserts.assert(s instanceof Sk.astnodes.FunctionDef);\n    funcorgen = this.buildcodeobj(\n        s,\n        s.name,\n        s.decorator_list,\n        s.args,\n        function (scopename) {\n            this.vseqstmt(s.body);\n            out(\"return Sk.builtin.none.none$;\"); // if we fall off the bottom, we want the ret to be None\n        },\n        class_for_super\n    );\n    this.nameop(s.name, Sk.astnodes.Store, funcorgen);\n};\n\nCompiler.prototype.clambda = function (e) {\n    var func;\n    Sk.asserts.assert(e instanceof Sk.astnodes.Lambda);\n    func = this.buildcodeobj(e, new Sk.builtin.str(\"<lambda>\"), null, e.args, function (scopename) {\n        var val = this.vexpr(e.body);\n        out(\"return \", val, \";\");\n    });\n    return func;\n};\n\nCompiler.prototype.cifexp = function (e) {\n    var next = this.newBlock(\"next of ifexp\");\n    var end = this.newBlock(\"end of ifexp\");\n    var ret = this._gr(\"res\", \"null\");\n\n    var test = this.vexpr(e.test);\n    this._jumpfalse(test, next);\n\n    out(ret, \"=\", this.vexpr(e.body), \";\");\n    this._jump(end);\n\n    this.setBlock(next);\n    out(ret, \"=\", this.vexpr(e.orelse), \";\");\n    this._jump(end);\n\n    this.setBlock(end);\n    return ret;\n};\n\nCompiler.prototype.cgenexpgen = function (generators, genIndex, elt) {\n    var velt;\n    var ifres;\n    var i;\n    var n;\n    var target;\n    var nexti;\n    var toiter;\n    var start = this.newBlock(\"start for \" + genIndex);\n    var skip = this.newBlock(\"skip for \" + genIndex);\n    var ifCleanup = this.newBlock(\"if cleanup for \" + genIndex);\n    var end = this.newBlock(\"end for \" + genIndex);\n\n    var ge = generators[genIndex];\n\n    var iter;\n    if (genIndex === 0) {\n        // the outer most iterator is evaluated in the scope outside so we\n        // have to evaluate it outside and store it into the generator as a\n        // local, which we retrieve here.\n        iter = \"$loc.$iter0\";\n    } else {\n        toiter = this.vexpr(ge.iter);\n        iter = \"$loc.\" + this.gensym(\"iter\");\n        out(iter, \"=\", \"Sk.abstr.iter(\", toiter, \");\");\n    }\n    this._jump(start);\n    this.setBlock(start);\n\n    this.annotateSource(elt, true);\n\n    // load targets\n    out(\"$ret = Sk.abstr.iternext(\", iter, this.u.canSuspend ? \", true\" : \", false\", \");\");\n\n    this._checkSuspension(elt);\n\n    nexti = this._gr(\"next\", \"$ret\");\n    this._jumpundef(nexti, end); // todo; this should be handled by StopIteration\n    target = this.vexpr(ge.target, nexti);\n\n    n = ge.ifs ? ge.ifs.length : 0;\n    for (i = 0; i < n; ++i) {\n        this.annotateSource(ge.ifs[i], true);\n\n        ifres = this.vexpr(ge.ifs[i]);\n        this._jumpfalse(ifres, start);\n    }\n\n    if (++genIndex < generators.length) {\n        this.cgenexpgen(generators, genIndex, elt);\n    }\n\n    if (genIndex >= generators.length) {\n        this.annotateSource(elt, true);\n\n        velt = this.vexpr(elt);\n        out(\"return [\", skip, \"/*resume*/,\", velt, \"/*ret*/];\");\n        this.setBlock(skip);\n    }\n\n    this._jump(start);\n\n    this.setBlock(end);\n\n    if (genIndex === 1) {\n        out(\"return Sk.builtin.none.none$;\");\n    }\n};\n\nCompiler.prototype.cgenexp = function (e) {\n    var gen = this.buildcodeobj(\n        e,\n        new Sk.builtin.str(\"<genexpr>\"),\n        null,\n        null,\n        function (scopename) {\n            this.cgenexpgen(e.generators, 0, e.elt);\n        }\n    );\n\n    // call the generator maker to get the generator. this is kind of dumb,\n    // but the code builder builds a wrapper that makes generators for normal\n    // function generators, so we just do it outside (even just new'ing it\n    // inline would be fine).\n    var gener = this._gr(\"gener\", \"Sk.misceval.callsimArray(\", gen, \");\");\n    // stuff the outermost iterator into the generator after evaluating it\n    // outside of the function. it's retrieved by the fixed name above.\n    out(gener, \".gi$locals.$iter0=Sk.abstr.iter(\", this.vexpr(e.generators[0].iter), \");\");\n    return gener;\n};\n\nCompiler.prototype.cclass = function (s) {\n    var wrapped;\n    var entryBlock;\n    var scopename;\n    var bases;\n    var decos;\n    Sk.asserts.assert(s instanceof Sk.astnodes.ClassDef);\n\n    decos = this.vseqexpr(s.decorator_list);\n\n    bases = this.vseqexpr(s.bases);\n\n    scopename = this.enterScope(s.name, s, s.lineno, s.name.v);\n    entryBlock = this.newBlock(\"class entry\");\n\n    this.u.prefixCode =\n        \"var \" +\n        scopename +\n        \"=(function $\" +\n        s.name.v +\n        \"$class_outer($globals,$locals,$cell){var $gbl=$globals,$loc=$locals,$free=$globals;\";\n    this.u.switchCode += \"(function $\" + s.name.v + \"$_closure($cell){\";\n    this.u.switchCode +=\n        \"var $blk=\" +\n        entryBlock +\n        \",$exc=[],$ret=undefined,$postfinally=undefined,$currLineNo=undefined,$currColNo=undefined;$currSource=undefined;\";\n\n    if (Sk.execLimit !== null) {\n        this.u.switchCode += \"Sk.misceval.startTimer();\";\n    }\n    if (Sk.yieldLimit !== null && this.u.canSuspend) {\n        this.u.switchCode += \"Sk.misceval.resetYield();\";\n    }\n\n    this.u.switchCode += \"while(true){try{\";\n    this.u.switchCode += this.outputInterruptTest();\n    this.u.switchCode += \"switch($blk){\";\n    this.u.suffixCode = \"}\" + this.handleTraceback(true, s.name.v);\n    /*this.u.suffixCode = (\"}}catch(err){ if (err instanceof Sk.builtin.TimeoutError) {\"+\n        \"Sk.execStart = Date.now();Sk.execPaused=0\"+\n        \"} if (!(err instanceof Sk.builtin.BaseException)) {\"+\n        \" err = new Sk.builtin.ExternalError(err);\"+\n        \"} err.traceback.push({lineno: $currLineNo, colno: $currColNo, filename: '\" + this.filename + \"'});\"+\n        \"if ($exc.length>0) { $err = err; $blk=$exc.pop(); continue; } else { throw err; }}}\");*/\n    this.u.suffixCode += \"}).call(null, $cell);});\";\n\n    this.u.private_ = s.name;\n\n    this.cbody(s.body, s.name);\n    out(\"return;\");\n\n    // build class\n\n    // apply decorators\n\n    this.exitScope();\n\n    // todo; metaclass\n    out(\n        \"$ret = Sk.misceval.buildClass($gbl,\",\n        scopename,\n        \",\",\n        s.name[\"$r\"]().v,\n        \",[\",\n        bases,\n        \"], $cell);\"\n    );\n\n    // apply decorators\n\n    for (let decorator of decos) {\n        out(\"$ret = Sk.misceval.callsimOrSuspendArray(\", decorator, \", [$ret]);\");\n        this._checkSuspension();\n    }\n\n    // store our new class under the right name\n    this.nameop(s.name, Sk.astnodes.Store, \"$ret\");\n};\n\nCompiler.prototype.ccontinue = function (s) {\n    var nextFinally = this.peekFinallyBlock(),\n        gotoBlock;\n    if (this.u.continueBlocks.length == 0) {\n        throw new Sk.builtin.SyntaxError(\n            \"'continue' outside loop\",\n            this.filename,\n            s.lineno,\n            ...get_context(s)\n        );\n    }\n    // todo; continue out of exception blocks\n    gotoBlock = this.u.continueBlocks[this.u.continueBlocks.length - 1];\n    Sk.asserts.assert(this.u.breakBlocks.length === this.u.continueBlocks.length);\n    if (nextFinally && nextFinally.breakDepth == this.u.continueBlocks.length) {\n        out(\"$postfinally={isBreak:true,gotoBlock:\", gotoBlock, \"};\");\n    } else {\n        this._jump(gotoBlock);\n    }\n};\n\nCompiler.prototype.cbreak = function (s) {\n    var nextFinally = this.peekFinallyBlock(),\n        gotoBlock;\n\n    if (this.u.breakBlocks.length === 0) {\n        throw new Sk.builtin.SyntaxError(\n            \"'break' outside loop\",\n            this.filename,\n            s.lineno,\n            ...get_context(s)\n        );\n    }\n    gotoBlock = this.u.breakBlocks[this.u.breakBlocks.length - 1];\n    if (nextFinally && nextFinally.breakDepth == this.u.breakBlocks.length) {\n        out(\"$postfinally={isBreak:true,gotoBlock:\", gotoBlock, \"};\");\n    } else {\n        this._jump(gotoBlock);\n    }\n};\n\n/**\n * compiles a statement\n * @param {Object} s\n * @param {Sk.builtin.str=} class_for_super\n */\nCompiler.prototype.vstmt = function (s, class_for_super) {\n    var i;\n    var val;\n    var n;\n    var debugBlock;\n    this.u.lineno = s.lineno;\n    this.u.linenoSet = false;\n    this.u.localtemps = [];\n\n    if (Sk.debugging && this.u.canSuspend) {\n        debugBlock = this.newBlock(\"debug breakpoint for line \" + s.lineno);\n        out(\n            \"if (Sk.breakpoints('\" + this.filename + \"',\" + s.lineno + \",\" + s.col_offset + \")) {\",\n            \"var $susp = $saveSuspension({data: {type: 'Sk.debug'}, resume: function() {}}, '\" +\n                this.filename +\n                \"',\" +\n                s.lineno +\n                \",\" +\n                s.col_offset +\n                \",\" +\n                s.source +\n                \");\",\n            \"$susp.$blk = \" + debugBlock + \";\",\n            \"$susp.optional = true;\",\n            \"return $susp;\",\n            \"}\"\n        );\n        this._jump(debugBlock);\n        this.setBlock(debugBlock);\n        this.u.doesSuspend = true;\n    }\n\n    this.annotateSource(s, true);\n\n    switch (s.constructor) {\n        case Sk.astnodes.FunctionDef:\n            this.cfunction(s, class_for_super);\n            break;\n        case Sk.astnodes.ClassDef:\n            this.cclass(s);\n            break;\n        case Sk.astnodes.Return:\n            if (this.u.ste.blockType !== Sk.SYMTAB_CONSTS.FunctionBlock) {\n                throw new Sk.builtin.SyntaxError(\n                    \"'return' outside function\",\n                    this.filename,\n                    s.lineno,\n                    ...get_context(s)\n                );\n            }\n            val = s.value ? this.vexpr(s.value) : \"Sk.builtin.none.none$\";\n            // Track that we are about to call the function\n            if (this.filename && !this.filename.startsWith(\"src/lib/\")) {\n                out(\"Sk.beforeReturn && Sk.beforeReturn(\" + val + \");\");\n            }\n            //out(\"Sk.execStack.pop();\");\n            if (this.u.finallyBlocks.length == 0) {\n                out(\"return \", val, \";\");\n            } else {\n                out(\"$postfinally={returning:\", val, \"};\");\n                this._jump(this.peekFinallyBlock().blk);\n            }\n            break;\n        case Sk.astnodes.Delete:\n            this.vseqexpr(s.targets);\n            break;\n        case Sk.astnodes.Assign:\n            n = s.targets.length;\n            val = this.vexpr(s.value);\n            for (i = 0; i < n; ++i) {\n                this.vexpr(s.targets[i], val);\n            }\n            break;\n        case Sk.astnodes.AnnAssign:\n            return this.cannassign(s);\n        case Sk.astnodes.AugAssign:\n            return this.caugassign(s);\n        case Sk.astnodes.Print:\n            this.cprint(s);\n            break;\n        case Sk.astnodes.For:\n            return this.cfor(s);\n        case Sk.astnodes.While:\n            return this.cwhile(s);\n        case Sk.astnodes.If:\n            return this.cif(s);\n        case Sk.astnodes.Raise:\n            return this.craise(s);\n        case Sk.astnodes.Try:\n            return this.ctry(s);\n        case Sk.astnodes.With:\n            return this.cwith(s, 0);\n        case Sk.astnodes.Assert:\n            return this.cassert(s);\n        case Sk.astnodes.Import:\n            return this.cimport(s);\n        case Sk.astnodes.ImportFrom:\n            return this.cfromimport(s);\n        case Sk.astnodes.Global:\n            break;\n        case Sk.astnodes.Expr:\n            // TODO: Check if str, then decide if we retain string literal comments\n            if (this.retainComments || s.value.constructor !== Sk.astnodes.Str) {\n                this.vexpr(s.value);\n            }\n            break;\n        case Sk.astnodes.Pass:\n            break;\n        case Sk.astnodes.Break:\n            this.cbreak(s);\n            break;\n        case Sk.astnodes.Continue:\n            this.ccontinue(s);\n            break;\n        case Sk.astnodes.Debugger:\n            out(\"debugger;\");\n            break;\n        default:\n            Sk.asserts.fail(\"unhandled case in vstmt: \" + JSON.stringify(s));\n    }\n};\n\nCompiler.prototype.vseqstmt = function (stmts) {\n    var i;\n    for (i = 0; i < stmts.length; ++i) {\n        this.vstmt(stmts[i]);\n    }\n};\n\nvar OP_FAST = 0;\nvar OP_GLOBAL = 1;\nvar OP_DEREF = 2;\nvar OP_NAME = 3;\nvar D_NAMES = 0;\nvar D_FREEVARS = 1;\nvar D_CELLVARS = 2;\n\nCompiler.prototype.isCell = function (name) {\n    var mangled = fixReserved(mangleName(this.u.private_, name).v);\n    var scope = this.u.ste.getScope(mangled);\n    var dict = null;\n    return scope === Sk.SYMTAB_CONSTS.CELL;\n};\n\n/**\n * @param {Sk.builtin.str} name\n * @param {Object} ctx\n * @param {string=} dataToStore\n */\nCompiler.prototype.nameop = function (name, ctx, dataToStore) {\n    var v;\n    var mangledNoPre;\n    var dict;\n    var scope;\n    var optype;\n    var op;\n    var mangled;\n    if (\n        (ctx === Sk.astnodes.Store || ctx === Sk.astnodes.AugStore || ctx === Sk.astnodes.Del) &&\n        name.v === \"__debug__\"\n    ) {\n        // TODO: add in context\n        throw new Sk.builtin.SyntaxError(\n            \"can not assign to __debug__\",\n            this.filename,\n            this.u.lineno,\n            ...get_context(this.u)\n        );\n    }\n    Sk.asserts.assert(name.v !== \"None\");\n\n    if (name.v === \"NotImplemented\") {\n        return \"Sk.builtin.NotImplemented.NotImplemented$\";\n    }\n\n    mangled = mangleName(this.u.private_, name).v;\n    // Have to do this before looking it up in the scope\n    mangled = fixReserved(mangled);\n    op = 0;\n    optype = OP_NAME;\n    scope = this.u.ste.getScope(mangled);\n    dict = null;\n    switch (scope) {\n        case Sk.SYMTAB_CONSTS.FREE:\n            dict = \"$free\";\n            optype = OP_DEREF;\n            break;\n        case Sk.SYMTAB_CONSTS.CELL:\n            dict = \"$cell\";\n            optype = OP_DEREF;\n            break;\n        case Sk.SYMTAB_CONSTS.LOCAL:\n            // can't do FAST in generators or at module/class scope\n            if (this.u.ste.blockType === Sk.SYMTAB_CONSTS.FunctionBlock && !this.u.ste.generator) {\n                optype = OP_FAST;\n            }\n            break;\n        case Sk.SYMTAB_CONSTS.GLOBAL_IMPLICIT:\n            if (this.u.ste.blockType === Sk.SYMTAB_CONSTS.FunctionBlock) {\n                optype = OP_GLOBAL;\n            }\n            break;\n        case Sk.SYMTAB_CONSTS.GLOBAL_EXPLICIT:\n            optype = OP_GLOBAL;\n        default:\n            break;\n    }\n\n    //print(\"mangled\", mangled);\n    // TODO TODO TODO todo; import * at global scope failing here\n    Sk.asserts.assert(scope || name.v.charAt(1) === \"_\");\n\n    // in generator or at module scope, we need to store to $loc, rather that\n    // to actual JS stack variables.\n    mangledNoPre = mangled;\n    if (this.u.ste.generator || this.u.ste.blockType !== Sk.SYMTAB_CONSTS.FunctionBlock) {\n        mangled = \"$loc.\" + mangled;\n    } else if (optype === OP_FAST || optype === OP_NAME) {\n        this.u.localnames.push(mangled);\n    }\n\n    switch (optype) {\n        case OP_FAST:\n            switch (ctx) {\n                case Sk.astnodes.Load:\n                case Sk.astnodes.Param:\n                    // Need to check that it is bound!\n                    // out(\"Sk.misceval.checkUnbound(\"+mangled+\", '\"+mangled+\"');\");\n                    //out(\"if (\", mangled, \" === undefined) { throw new Sk.builtin.UnboundLocalError('local variable \\\\\\'\", mangled, \"\\\\\\' referenced before assignment'); }\\n\");\n                    out(\"if (\", mangled, \" === undefined) { $ule('\", mangled, \"') }\\n\");\n                    return mangled;\n                case Sk.astnodes.Store:\n                    out(mangled, \"=\", dataToStore, \";\");\n                    break;\n                case Sk.astnodes.Del:\n                    out(\"delete \", mangled, \";\");\n                    break;\n                default:\n                    Sk.asserts.fail(\"unhandled\");\n            }\n            break;\n        case OP_NAME:\n            switch (ctx) {\n                case Sk.astnodes.Load:\n                    // can't be || for loc.x = 0 or null\n                    return this._gr(\n                        \"loadname\",\n                        mangled,\n                        \"!==undefined?\",\n                        mangled,\n                        \":Sk.misceval.loadname('\",\n                        mangledNoPre,\n                        \"',$gbl);\"\n                    );\n                case Sk.astnodes.Store:\n                    out(mangled, \"=\", dataToStore, \";\");\n                    break;\n                case Sk.astnodes.Del:\n                    out(\"delete \", mangled, \";\");\n                    break;\n                case Sk.astnodes.Param:\n                    return mangled;\n                default:\n                    Sk.asserts.fail(\"unhandled\");\n            }\n            break;\n        case OP_GLOBAL:\n            switch (ctx) {\n                case Sk.astnodes.Load:\n                    return this._gr(\"loadgbl\", \"Sk.misceval.loadname('\", mangledNoPre, \"',$gbl)\");\n                case Sk.astnodes.Store:\n                    out(\"$gbl.\", mangledNoPre, \"=\", dataToStore, \";\");\n                    break;\n                case Sk.astnodes.Del:\n                    out(\"delete $gbl.\", mangledNoPre);\n                    break;\n                default:\n                    Sk.asserts.fail(\"unhandled case in name op_global\");\n            }\n            break;\n        case OP_DEREF:\n            switch (ctx) {\n                case Sk.astnodes.Load:\n                    return dict + \".\" + mangledNoPre;\n                case Sk.astnodes.Store:\n                    out(dict, \".\", mangledNoPre, \"=\", dataToStore, \";\");\n                    break;\n                case Sk.astnodes.Param:\n                    return mangledNoPre;\n                default:\n                    Sk.asserts.fail(\"unhandled case in name op_deref\");\n            }\n            break;\n        default:\n            Sk.asserts.fail(\"unhandled case\");\n    }\n};\n\n/**\n * @param {Sk.builtin.str} name\n * @param {Object} key\n * @param {number} lineno\n * @param {boolean=} canSuspend\n * @param {String=} hint\n */\nCompiler.prototype.enterScope = function (name, key, lineno, canSuspend, hint) {\n    var scopeName;\n    var u = new CompilerUnit();\n    u.ste = this.st.getStsForAst(key);\n    u.name = name;\n    u.firstlineno = lineno;\n    u.canSuspend = canSuspend || false;\n\n    if (this.u && this.u.private_) {\n        u.private_ = this.u.private_;\n    }\n\n    this.stack.push(this.u);\n    this.allUnits.push(u);\n    hint = hint || \"\";\n    hint = hint.replace(/[\\<\\>\\/\\.]/g, \"_\");\n    scopeName = this.gensym(\"scope\" + hint);\n    u.scopename = scopeName;\n\n    this.u = u;\n    this.u.activateScope();\n\n    this.nestlevel++;\n\n    return scopeName;\n};\n\nCompiler.prototype.exitScope = function () {\n    var mangled;\n    var prev = this.u;\n    this.nestlevel--;\n    if (this.stack.length - 1 >= 0) {\n        this.u = this.stack.pop();\n    } else {\n        this.u = null;\n    }\n    if (this.u) {\n        this.u.activateScope();\n    }\n\n    if (prev.name.v !== \"<module>\") {\n        // todo; hacky\n        mangled = prev.name[\"$r\"]().v;\n        mangled = mangled.substring(1, mangled.length - 1);\n        // mangled = fixReserved(mangled);\n        let mname = this.makeConstant(\"new Sk.builtin.str('\" + mangled + \"')\");\n        out(prev.scopename, \".co_name=\" + mname + \";\");\n        if (this.stack.length && this.u.ste.blockType == \"class\") {\n            const classname = this.u.name.v;\n            out(\n                prev.scopename,\n                \".co_qualname=new Sk.builtins.str('\" + classname + \".\" + mangled + \"');\"\n            );\n        }\n    }\n    for (var constant in prev.consts) {\n        if (prev.consts.hasOwnProperty(constant)) {\n            prev.suffixCode += constant + \" = \" + prev.consts[constant] + \";\";\n        }\n    }\n};\n\n/**\n * @param {Array} stmts\n * @param {Sk.builtin.str=} class_for_super\n */\nCompiler.prototype.cbody = function (stmts, class_for_super) {\n    var i = 0;\n\n    // If we have a docstring, then assign it to __doc__, and skip over\n    // the expression when properly compiling the rest of the body.  This\n    // happens for class and module bodies.\n    //\n    const maybeDocstring = this.maybeCDocstringOfBody(stmts);\n    if (maybeDocstring !== null) {\n        out(\"$loc.__doc__ = \", maybeDocstring, \";\");\n        i = 1;\n    }\n\n    for (; i < stmts.length; ++i) {\n        this.vstmt(stmts[i], class_for_super);\n    }\n    /* Every annotated class and module should have __annotations__. */\n    if (this.u.hasAnnotations) {\n        this.u.varDeclsCode +=\n            \"$loc.__annotations__ || ($loc.__annotations__ = new Sk.builtin.dict());\";\n    }\n};\n\nCompiler.prototype.cprint = function (s) {\n    var i;\n    var n;\n    var dest;\n    Sk.asserts.assert(s instanceof Sk.astnodes.Print);\n    dest = \"null\";\n    if (s.dest) {\n        dest = this.vexpr(s.dest);\n    }\n\n    n = s.values.length;\n    // todo; dest disabled\n    for (i = 0; i < n; ++i) {\n        out(\n            \"$ret = Sk.misceval.print_(\",\n            /*dest, ',',*/ \"new Sk.builtins['str'](\",\n            this.vexpr(s.values[i]),\n            \").v);\"\n        );\n        this._checkSuspension(s);\n    }\n    if (s.nl) {\n        out(\"$ret = Sk.misceval.print_(\", /*dest, ',*/ '\"\\\\n\");');\n        this._checkSuspension(s);\n    }\n};\n\nCompiler.prototype.cmod = function (mod) {\n    //print(\"-----\");\n    //print(Sk.astDump(mod));\n    var modf = this.enterScope(\n        new Sk.builtin.str(\"<module>\"),\n        mod,\n        0,\n        this.canSuspend,\n        this.filename\n    );\n\n    var entryBlock = this.newBlock(\"module entry\");\n    this.u.prefixCode = \"var \" + modf + \"=(function($forcegbl, $forceloc){\";\n    this.u.varDeclsCode =\n        \"var $gbl = $forcegbl || {}, $blk=\" +\n        entryBlock +\n        \",$exc=[],$loc=$forceloc || $gbl,$cell={},$err=undefined;\" +\n        \"$loc.__file__=new Sk.builtins.str($fname);\" +\n        \"var $ret=undefined,$postfinally=undefined,$currLineNo=undefined,$currColNo=undefined;$currSource=undefined;\";\n\n    if (Sk.execLimit !== null) {\n        this.u.varDeclsCode += \"Sk.misceval.startTimer();\";\n    }\n\n    if (Sk.yieldLimit !== null && this.u.canSuspend) {\n        this.u.varDeclsCode += \"Sk.misceval.resetYield();\";\n    }\n\n    this.u.varDeclsCode +=\n        \"var $waking=false; if (\" +\n        modf +\n        \".$wakingSuspension!==undefined) { $wakeFromSuspension(); $waking=true; }\" +\n        \"if (Sk.retainGlobals) {\" +\n        //\"    if (Sk.globals) { $gbl = Sk.globals; Sk.globals = $gbl; $loc = $gbl; }\" +\n        \"    if (Sk.globals) { $gbl = Sk.globals; Sk.globals = $gbl; $loc = $gbl; $loc.__file__=new Sk.builtins.str($fname);}\" +\n        \"    else { Sk.globals = $gbl; }\" +\n        \"} else { Sk.globals = $gbl; }\";\n\n    // Add the try block that pops the try/except stack if one exists\n    // Github Issue #38\n    // Google Code Issue: 109 / 114\n\n    // Old code:\n    //this.u.switchCode = \"while(true){switch($blk){\";\n    //this.u.suffixCode = \"}}});\";\n\n    // New Code:\n    this.u.switchCode = \"while(true){try{\";\n    this.u.switchCode += this.outputInterruptTest();\n    this.u.switchCode += \"switch($blk){\";\n    this.u.suffixCode = \"}\" + this.handleTraceback(true, \"<module>\");\n    this.u.suffixCode += \"});\";\n    //this.u.suffixCode += \"}catch(err){ if (err instanceof Sk.builtin.TimeoutError) { Sk.execStart = Date.now();Sk.execPaused=0} if (!(err instanceof Sk.builtin.BaseException)) { err = new Sk.builtin.ExternalError(err); } err.traceback.push({lineno: $currLineNo, colno: $currColNo, filename: '\"+this.filename+\"'}); if ($exc.length>0) { $err = err; $blk=$exc.pop(); continue; } else { throw err; }} } });\";\n\n    // Note - this change may need to be adjusted for all the other instances of\n    // switchCode and suffixCode in this file.  Not knowing how to test those\n    // other cases I left them alone.   At least the changes to\n    // setupExcept and endExcept will insure that the generated JavaScript\n    // will be syntactically correct.  The worst that will happen is that when\n    // code in a try block blows up, we will not know to run the except block.\n    // The other problem is that we might catch something that is really an internal\n    // error - it might be nice to add code in the above catch block that looked at\n    // the kind of exception and only popped the stack for exceptions that are\n    // from the original code rather than artifacts of some code generation or\n    // exeution environment error.  We at least err on the side of exceptions\n    // being revealed to the user.  drchuck - Wed Jan 23 19:20:18 EST 2013\n\n    switch (mod.constructor) {\n        case Sk.astnodes.Module:\n            this.cbody(mod.body);\n            out(\"return $loc;\");\n            break;\n        default:\n            Sk.asserts.fail(\"todo; unhandled case in compilerMod\");\n    }\n    this.exitScope();\n\n    this.result.push(this.outputAllUnits());\n    return modf;\n};\n\nCompiler.prototype.handleTraceback = function (doContinue, scopeName) {\n    doContinue = doContinue ? \"continue\" : \"\";\n    return (\n        \"}catch(err){\" +\n        \"err=Sk.misceval.handleTraceback(err,$currLineNo,$currColNo,$currSource,$fname,'\" +\n        scopeName +\n        \"');\" +\n        \"if($exc.length>0){$err=err;$blk=$exc.pop();\" +\n        doContinue +\n        \"}else{throw err;}}}\"\n    );\n};\n\n/**\n * @param {string} source the code\n * @param {string} filename where it came from\n * @param {string} mode one of 'exec', 'eval', or 'single'\n * @param {boolean=} canSuspend if the generated code supports suspension\n * @param {boolean=} annotate Whether or not to annotate the source code\n */\nSk.compile = function (source, filename, mode, canSuspend, annotate) {\n    //print(\"FILE:\", filename);\n    // __future__ flags can be set from code\n    // (with \"from __future__ import ...\" statements),\n    // so make a temporary object that can be edited.\n    var savedFlags = Sk.__future__;\n    Sk.__future__ = Object.create(Sk.__future__);\n\n    var parse = Sk.parse(filename, source);\n    var ast = Sk.astFromParse(parse.cst, filename, parse.flags);\n    // console.log(JSON.stringify(ast, undefined, 2));\n\n    // compilers flags, later we can add other ones too\n    var flags = {};\n    flags.cf_flags = parse.flags;\n\n    var st = Sk.symboltable(ast, filename);\n    var c = new Compiler(filename, st, flags.cf_flags, canSuspend, annotate ? source : false); // todo; CO_xxx\n    var funcname = c.cmod(ast);\n\n    // Restore the global __future__ flags\n    Sk.__future__ = savedFlags;\n\n    var shortCutConstants =\n        \"const $fname='\" + filename + \"',$moduleConstants={},$ule=Sk.misceval.errorUL;\";\n    var constantDefinitions = [];\n    for (var constant in c.consts) {\n        if (c.consts.hasOwnProperty(constant)) {\n            constantDefinitions.push(constant + \" = \" + c.consts[constant] + \";\");\n        }\n    }\n\n    var ret =\n        \"$compiledmod = function() {\" +\n        shortCutConstants +\n        c.result.join(\"\") +\n        constantDefinitions.join(\"\") +\n        \"\\nreturn \" +\n        funcname +\n        \";}();\";\n    return {\n        funcname: \"$compiledmod\",\n        code: ret,\n        filename: filename,\n    };\n};\n\nSk.exportSymbol(\"Sk.compile\", Sk.compile);\n\nSk.resetCompiler = function () {\n    Sk.gensymcount = 0;\n};\n\nSk.exportSymbol(\"Sk.resetCompiler\", Sk.resetCompiler);\n\nSk.fixReserved = fixReserved;\nSk.exportSymbol(\"Sk.fixReserved\", Sk.fixReserved);\n\nSk.unfixReserved = unfixReserved;\nSk.exportSymbol(\"Sk.unfixReserved\", Sk.unfixReserved);\n\nSk.mangleName = mangleName;\nSk.exportSymbol(\"Sk.mangleName\", Sk.mangleName);\n\nSk.reservedWords_ = reservedWords_;\nSk.exportSymbol(\"Sk.reservedWords_\", Sk.reservedWords_);\n", "/**\n * @namespace Sk\n *\n */\n\n// this is stored into sys specially, rather than created by sys\nSk.sysmodules = new Sk.builtin.dict([]);\nSk.realsyspath = undefined;\n\n/**\n * Retrieves sysmodules, going through any artificial sys modules that we may have.\n * @returns {Object}\n */\nSk.getSysModulesPolitely = function () {\n    let sysmodules = Sk.sysmodules;\n    try {\n        let sys = sysmodules.mp$subscript(new Sk.builtin.str(\"sys\"));\n        if (sys != undefined) {\n            sysmodules = sys.tp$getattr(new Sk.builtin.str(\"modules\"));\n        }\n    } catch (x) {}\n    return sysmodules;\n};\n\n/**\n * @param {string} name to look for\n * @param {string} ext extension to use (.py or .js)\n * @param {Object=} searchPath an iterable set of path strings\n */\nSk.importSearchPathForName = function (name, ext, searchPath) {\n    var fn;\n    var j;\n    var fns = [];\n    var nameAsPath = name.replace(/\\./g, \"/\");\n    var it, i;\n\n    var tryPathAndBreakOnSuccess = function (filename, packagePath) {\n        return Sk.misceval.chain(\n            Sk.misceval.tryCatch(\n                function () {\n                    return Sk.read(filename);\n                },\n                function (e) {\n                    /* Exceptions signal \"not found\" */\n                }\n            ),\n            function (code) {\n                if (code !== undefined) {\n                    // This will cause the iterFor() to return the specified value\n                    return new Sk.misceval.Break({\n                        filename: filename,\n                        code: code,\n                        packagePath: packagePath,\n                    });\n                }\n            }\n        );\n    };\n\n    if (searchPath === undefined) {\n        searchPath = Sk.realsyspath;\n    }\n\n    return Sk.misceval.iterFor(searchPath.tp$iter(), function (pathStr) {\n        // For each element of path, try loading the module, and if that\n        // doesn't work, try the corresponding package.\n        return Sk.misceval.chain(\n            tryPathAndBreakOnSuccess(pathStr.v + \"/\" + nameAsPath + ext, false), // module\n            function (r) {\n                return r\n                    ? r\n                    : tryPathAndBreakOnSuccess(\n                          pathStr.v + \"/\" + nameAsPath + \"/__init__\" + ext,\n                          pathStr.v + \"/\" + nameAsPath\n                      ); // package\n            }\n        );\n    });\n};\n\n/**\n * Complete any initialization of Python classes which relies on internal\n * dependencies.\n *\n * type, object, super, nonetype, notimplemented\n * getset_descr, method_descr, wrapper_descr, method_wrapper\n *\n * __doc__ for the above + classmethod, property, staticmethod\n *\n */\nSk.doOneTimeInitialization = function (canSuspend) {\n    function setUpClass(klass) {\n        const proto = klass.prototype;\n        if (!proto.hasOwnProperty(\"sk$slots\")) {\n            // sk$slots was set to null during setUpSlots\n            // if this flag is not set then we setUpSlots using the klass prototype\n            Sk.abstr.setUpSlots(klass);\n        }\n        if (!proto.hasOwnProperty(\"tp$mro\")) {\n            Sk.abstr.setUpBuiltinMro(klass);\n        }\n        if (proto.hasOwnProperty(\"tp$getsets\") && proto.tp$getsets != null) {\n            Sk.abstr.setUpGetSets(klass);\n        }\n        if (proto.hasOwnProperty(\"tp$methods\") && proto.tp$methods != null) {\n            Sk.abstr.setUpMethods(klass);\n        }\n        if (!proto.hasOwnProperty(\"__doc__\") && proto.hasOwnProperty(\"tp$doc\")) {\n            // a few klasses had slots setup before str was initialized so we add them here\n            proto.__doc__ = new Sk.builtin.str(proto.tp$doc);\n        }\n    }\n    for (let x in Sk.builtins) {\n        const obj = Sk.builtins[x];\n        if (obj instanceof Sk.builtin.type) {\n            setUpClass(obj);\n        }\n    }\n};\n\n/**\n * currently only pull once from Sk.syspath. User might want to change\n * from js or from py.\n */\nSk.importSetUpPath = function (canSuspend) {\n    var i;\n    var paths;\n    if (!Sk.realsyspath) {\n        paths = [\n            new Sk.builtin.str(\"src/builtin\"),\n            new Sk.builtin.str(\"src/lib\"),\n            new Sk.builtin.str(\".\"),\n        ];\n        for (i = 0; i < Sk.syspath.length; ++i) {\n            paths.push(new Sk.builtin.str(Sk.syspath[i]));\n        }\n        Sk.realsyspath = new Sk.builtin.list(paths);\n\n        Sk.doOneTimeInitialization(canSuspend);\n    }\n};\n\n/**\n * @param {string} name name of module to import\n * @param {boolean=} dumpJS whether to output the generated js code\n * @param {string=} modname what to call the module after it's imported if\n * it's to be renamed (i.e. __main__)\n * @param {string=} suppliedPyBody use as the body of the text for the module\n * rather than Sk.read'ing it.\n * @param {Object=} relativeToPackage perform import relative to this package\n * @param {boolean=} returnUndefinedOnTopLevelNotFound return 'undefined' rather than throwing ImportError if the *first* load failed\n * @param {boolean=} canSuspend whether we may return a Suspension object\n */\nSk.importModuleInternal_ = function (\n    name,\n    dumpJS,\n    modname,\n    suppliedPyBody,\n    relativeToPackage,\n    returnUndefinedOnTopLevelNotFound,\n    canSuspend\n) {\n    if (name === \"pedal.sandbox.timeout\") {\n        suppliedPyBody =\n            \"def timeout(delay, func, *args, **kwargs):\\n    return func(*args, **kwargs)\";\n    }\n\n    //dumpJS = true;\n    var filename;\n    var prev;\n    var parentModName;\n    var parentModule;\n    var modNameSplit;\n    var ret;\n    var module;\n    var topLevelModuleToReturn = null;\n    var relativePackageName =\n        relativeToPackage !== undefined\n            ? relativeToPackage.tp$getattr(Sk.builtin.str.$name)\n            : undefined;\n    var absolutePackagePrefix =\n        relativePackageName !== undefined ? relativePackageName.v + \".\" : \"\";\n    var searchPath =\n        relativeToPackage !== undefined\n            ? relativeToPackage.tp$getattr(Sk.builtin.str.$path)\n            : undefined;\n    Sk.importSetUpPath(canSuspend);\n\n    if (relativeToPackage && !relativePackageName) {\n        if (returnUndefinedOnTopLevelNotFound) {\n            return undefined;\n        } else {\n            throw new Sk.builtin.ValueError(\n                \"Attempted to import relative to invalid package (no name)\"\n            );\n        }\n    }\n\n    // if no module name override, supplied, use default name\n    if (modname === undefined) {\n        modname = absolutePackagePrefix + name;\n    }\n\n    modNameSplit = name.split(\".\");\n\n    if (modNameSplit.length > 1) {\n        // if we're a module inside a package (i.e. a.b.c), then we'll need to return the\n        // top-level package ('a'). recurse upwards on our parent, importing\n        // all parent packages. so, here we're importing 'a.b', which will in\n        // turn import 'a', and then return 'a' eventually.\n        parentModName = modNameSplit.slice(0, modNameSplit.length - 1).join(\".\");\n        topLevelModuleToReturn = Sk.importModuleInternal_(\n            parentModName,\n            dumpJS,\n            undefined,\n            undefined,\n            relativeToPackage,\n            returnUndefinedOnTopLevelNotFound,\n            canSuspend\n        );\n    }\n\n    let sysmodules = Sk.getSysModulesPolitely();\n\n    ret = Sk.misceval.chain(topLevelModuleToReturn, function (topLevelModuleToReturn_) {\n        topLevelModuleToReturn = topLevelModuleToReturn_;\n\n        // if leaf is already in sys.modules, early out\n        try {\n            prev = sysmodules.quick$lookup(new Sk.builtin.str(modname));\n            //prev = sysmodules.mp$subscript(new Sk.builtin.str(modname));\n            // if we're a dotted module, return the top level, otherwise ourselves\n            if (prev !== undefined) {\n                return topLevelModuleToReturn || prev;\n            }\n        } catch (x) {\n            console.error(\"WAIT\", x);\n            // not in sys.modules, continue\n        }\n\n        return Sk.misceval.chain(\n            undefined,\n            function () {\n                var codeAndPath, co, googClosure;\n                var searchFileName = name;\n                var result;\n\n                // If we're inside a package, look search using its __path__\n                if (modNameSplit.length > 1) {\n                    if (!topLevelModuleToReturn) {\n                        return undefined;\n                    }\n                    parentModule = sysmodules.mp$subscript(\n                        new Sk.builtin.str(absolutePackagePrefix + parentModName)\n                    );\n                    searchFileName = modNameSplit[modNameSplit.length - 1];\n                    searchPath = parentModule.tp$getattr(Sk.builtin.str.$path);\n                }\n\n                // otherwise:\n                // - create module object\n                // - add module object to sys.modules\n                // - compile source to (function(){...});\n                // - run module and set the module locals returned to the module __dict__\n                module = new Sk.builtin.module();\n\n                if (typeof suppliedPyBody === \"string\") {\n                    filename = name + \".py\";\n                    co = Sk.compile(suppliedPyBody, filename, \"exec\", canSuspend, true);\n                } else {\n                    co = Sk.misceval.chain(\n                        undefined,\n                        function () {\n                            // If an onBeforeImport method is supplied, call it and if\n                            // the result is false or a string, prevent the import.\n                            // This allows for a user to conditionally prevent the usage\n                            // of certain libraries.\n                            if (Sk.onBeforeImport && typeof Sk.onBeforeImport === \"function\") {\n                                return Sk.onBeforeImport(name);\n                            }\n\n                            return;\n                        },\n                        function (result) {\n                            if (result === false) {\n                                throw new Sk.builtin.ImportError(\n                                    \"Importing \" + name + \" is not allowed\"\n                                );\n                            } else if (typeof result === \"string\") {\n                                throw new Sk.builtin.ImportError(result);\n                            }\n\n                            // Try loading as a builtin (i.e. already in JS) module, then try .py files\n                            return Sk.importSearchPathForName(searchFileName, \".js\", searchPath);\n                        },\n                        function (codeAndPath) {\n                            if (codeAndPath) {\n                                return {\n                                    funcname: \"$builtinmodule\",\n                                    code: codeAndPath.code,\n                                    filename: codeAndPath.filename,\n                                    packagePath: codeAndPath.packagePath,\n                                };\n                            } else {\n                                return Sk.misceval.chain(\n                                    Sk.importSearchPathForName(searchFileName, \".py\", searchPath),\n                                    function (codeAndPath_) {\n                                        codeAndPath = codeAndPath_; // We'll want it in a moment\n                                        if (codeAndPath) {\n                                            return Sk.compile(\n                                                codeAndPath.code,\n                                                codeAndPath.filename,\n                                                \"exec\",\n                                                canSuspend,\n                                                true\n                                            );\n                                        }\n                                    },\n                                    function (co) {\n                                        if (co) {\n                                            co.packagePath = codeAndPath.packagePath;\n                                            return co;\n                                        }\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n                return co;\n            },\n            function (co) {\n                var finalcode;\n                var withLineNumbers;\n                var modscope;\n\n                if (!co) {\n                    return undefined;\n                }\n\n                // Now we know this module exists, we can add it to the cache\n                sysmodules.mp$ass_subscript(new Sk.builtin.str(modname), module);\n\n                module.$js = co.code; // todo; only in DEBUG?\n                finalcode = co.code;\n\n                if (filename == null) {\n                    filename = co.filename;\n                }\n\n                if (Sk.dateSet == null || !Sk.dateSet) {\n                    finalcode = \"Sk.execStart = Sk.lastYield = new Date();\\n\" + co.code;\n                    Sk.dateSet = true;\n                }\n\n                // if (!COMPILED)\n                // {\n                if (dumpJS) {\n                    withLineNumbers = function (code) {\n                        var j;\n                        var pad;\n                        var width;\n                        var i;\n                        var beaut = Sk.js_beautify(code);\n                        var lines = beaut.split(\"\\n\");\n                        for (i = 1; i <= lines.length; ++i) {\n                            width = (\"\" + i).length;\n                            pad = \"\";\n                            for (j = width; j < 5; ++j) {\n                                pad += \" \";\n                            }\n                            lines[i - 1] = \"/* \" + pad + i + \" */ \" + lines[i - 1];\n                        }\n                        return lines.join(\"\\n\");\n                    };\n                    finalcode = withLineNumbers(finalcode);\n                    Sk.debugout(finalcode);\n                }\n                // }\n\n                finalcode += \"\\n\" + co.funcname + \";\";\n\n                modscope = Sk.global[\"eval\"](finalcode);\n\n                module[\"$d\"] = {\n                    __name__: new Sk.builtin.str(modname),\n                    __doc__: Sk.builtin.none.none$,\n                    __package__: co.packagePath\n                        ? new Sk.builtin.str(modname)\n                        : parentModName\n                          ? new Sk.builtin.str(absolutePackagePrefix + parentModName)\n                          : relativePackageName\n                            ? relativePackageName\n                            : Sk.builtin.none.none$,\n                };\n                if (co.packagePath) {\n                    module[\"$d\"][\"__path__\"] = new Sk.builtin.tuple([\n                        new Sk.builtin.str(co.packagePath),\n                    ]);\n                }\n\n                let r = modscope(module[\"$d\"]);\n                return r;\n            },\n            function (modlocs) {\n                var i;\n\n                if (modlocs === undefined) {\n                    if (returnUndefinedOnTopLevelNotFound && !topLevelModuleToReturn) {\n                        return undefined;\n                    } else {\n                        throw new Sk.builtin.ImportError(\"No module named \" + name);\n                    }\n                }\n\n                // Some builtin modules replace their globals entirely.\n                // For their benefit, we copy over any of the standard\n                // dunder-values they didn't supply.\n                if (modlocs !== module[\"$d\"]) {\n                    for (i in module[\"$d\"]) {\n                        if (!modlocs[i]) {\n                            modlocs[i] = module[\"$d\"][i];\n                        }\n                    }\n                    module[\"$d\"] = modlocs;\n                }\n\n                // If an onAfterImport method is defined on the global Sk\n                // then call it now after a library has been successfully imported\n                // and compiled.\n                if (Sk.onAfterImport && typeof Sk.onAfterImport === \"function\") {\n                    try {\n                        Sk.onAfterImport(name);\n                    } catch (e) {}\n                }\n\n                if (topLevelModuleToReturn) {\n                    // if we were a dotted name, then we want to return the top-most\n                    // package. we store ourselves into our parent as an attribute\n                    parentModule.tp$setattr(\n                        new Sk.builtin.str(modNameSplit[modNameSplit.length - 1]),\n                        module\n                    );\n                    //print(\"import returning parent module, modname\", modname, \"__name__\", toReturn.tp$getattr(\"__name__\").v);\n                    return topLevelModuleToReturn;\n                }\n\n                if (relativeToPackage) {\n                    relativeToPackage.tp$setattr(new Sk.builtin.str(name), module);\n                }\n\n                //print(\"name\", name, \"modname\", modname, \"returning leaf\");\n                // otherwise we return the actual module that we just imported\n                return module;\n            }\n        );\n    });\n\n    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);\n};\n\n/**\n * @param {string} name the module name\n * @param {boolean=} dumpJS print out the js code after compilation for debugging\n * @param {boolean=} canSuspend can this function suspend and return a Suspension object?\n */\nSk.importModule = function (name, dumpJS, canSuspend) {\n    return Sk.importModuleInternal_(\n        name,\n        dumpJS,\n        undefined,\n        undefined,\n        undefined,\n        false,\n        canSuspend\n    );\n};\n\nSk.importMain = function (name, dumpJS, canSuspend) {\n    Sk.dateSet = false;\n    Sk.filesLoaded = false;\n    // Added to reset imports\n    Sk.sysmodules = new Sk.builtin.dict([]);\n    Sk.realsyspath = undefined;\n    Sk.execStack = [];\n\n    Sk.resetCompiler();\n\n    return Sk.importModuleInternal_(\n        name,\n        dumpJS,\n        \"__main__\",\n        undefined,\n        undefined,\n        false,\n        canSuspend\n    );\n};\n\n/**\n * **Run Python Code in Skulpt**\n *\n * When you want to hand Skulpt a string corresponding to a Python program this is the function.\n *\n * @param name {string}  File name to use for messages related to this run\n * @param dumpJS {boolean} print out the compiled javascript\n * @param body {string} Python Code\n * @param canSuspend {boolean}  Use Suspensions for async execution\n * @param sysmodules {object} An existing sysmodules to reuse.\n *\n */\nSk.importMainWithBody = function (name, dumpJS, body, canSuspend, sysmodules) {\n    Sk.dateSet = false;\n    Sk.filesLoaded = false;\n    // Added to reset imports\n    if (sysmodules === undefined) {\n        Sk.sysmodules = new Sk.builtin.dict([]);\n    } else {\n        Sk.sysmodules = sysmodules;\n    }\n    Sk.realsyspath = undefined;\n    Sk.execPausedAmount = 0;\n    Sk.execPaused = 0;\n    Sk.execStack = [];\n\n    Sk.resetCompiler();\n\n    return Sk.importModuleInternal_(name, dumpJS, \"__main__\", body, undefined, false, canSuspend);\n};\n\n/**\n * Imports internal python files into the `__builtin__` module. Used during startup\n * to compile and import all *.py files from the src/ directory.\n *\n * @param name {string}  File name to use for messages related to this run\n * @param dumpJS {boolean} print out the compiled javascript\n * @param body {string} Python Code\n * @param canSuspend {boolean}  Use Suspensions for async execution\n *\n */\nSk.importBuiltinWithBody = function (name, dumpJS, body, canSuspend) {\n    return Sk.importModuleInternal_(\n        name,\n        dumpJS,\n        \"__builtin__.\" + name,\n        body,\n        undefined,\n        false,\n        canSuspend\n    );\n};\n\nSk.builtin.__import__ = function (name, globals, locals, fromlist, level, askeyword = false) {\n    //print(\"Importing: \", JSON.stringify(name), JSON.stringify(fromlist), level);\n    //if (name == \"\") { debugger; }\n    var builtinModuleVersion;\n\n    // TODO: Need to check if there is a builtins with the name __import__\n    if (askeyword && Sk.globals[\"__builtins__\"] !== undefined) {\n        builtinModuleVersion = Sk.globals[\"__builtins__\"].mp$lookup(Sk.builtin.str.$import);\n        if (builtinModuleVersion !== undefined) {\n            if (\n                globals &&\n                !Sk.builtin.checkNone(globals) &&\n                !(globals instanceof Sk.builtin.dict)\n            ) {\n                globals = new Sk.builtin.dict(\n                    Object.entries(globals).flatMap(([key, value]) => [\n                        Sk.ffi.remapToPy(key),\n                        value,\n                    ])\n                );\n            }\n            return Sk.misceval.callsimOrSuspend(\n                builtinModuleVersion,\n                new Sk.builtin.str(name),\n                globals,\n                locals,\n                Sk.ffi.remapToPy(fromlist),\n                Sk.ffi.remapToPy(level)\n            );\n        }\n    }\n\n    // Save the Sk.globals variable importModuleInternal_ may replace it when it compiles\n    // a Python language module.\n    var saveSk = Sk.globals;\n\n    // If passed in a PyString, then turn it into a JS string.\n    if (Sk.builtin.checkString(name)) {\n        name = name.v;\n    }\n\n    // If we don't have the globals, then fetch them forth.\n    if (globals === undefined) {\n        globals = Sk.globals;\n    }\n\n    // This might be a relative import, so first we get hold of the module object\n    // representing this module's package (so we can search its __path__).\n    // module.__package__ contains its name, so we use that to look it up in sys.modules.\n\n    var relativeToPackage;\n    var relativeToPackageName;\n    var relativeToPackageNames;\n\n    if (level === undefined) {\n        level = Sk.__future__.absolute_import ? 0 : -1;\n    }\n\n    if (level !== 0 && globals[\"__package__\"] && globals[\"__package__\"] !== Sk.builtin.none.none$) {\n        relativeToPackageName = globals[\"__package__\"].v;\n        if (relativeToPackageName && level > 0) {\n            // Trim <level> packages off the end\n            relativeToPackageNames = relativeToPackageName.split(\".\");\n            if (level - 1 >= relativeToPackageNames.length) {\n                throw new Sk.builtin.ValueError(\n                    \"Attempted relative import beyond toplevel package\"\n                );\n            }\n            relativeToPackageNames.length -= level - 1;\n            relativeToPackageName = relativeToPackageNames.join(\".\");\n        }\n        try {\n            relativeToPackage = Sk.sysmodules.mp$subscript(\n                new Sk.builtin.str(relativeToPackageName)\n            );\n        } catch (e) {\n            relativeToPackageName = undefined;\n        }\n    }\n\n    if (level > 0 && relativeToPackage === undefined) {\n        throw new Sk.builtin.ValueError(\"Attempted relative import in non-package\");\n    }\n\n    //console.log(\"&*(\", name);\n    var dottedName = name.split(\".\");\n    var firstDottedName = dottedName[0];\n\n    return Sk.misceval.chain(\n        undefined,\n        function () {\n            // Attempt local load first (and just fall through to global\n            // case if level == -1 and we fail to load the top-level package)\n            if (level !== 0 && relativeToPackage !== undefined) {\n                if (name === \"\") {\n                    // \"from .. import ...\"\n                    return relativeToPackage;\n                } else {\n                    return Sk.importModuleInternal_(\n                        name,\n                        undefined,\n                        relativeToPackageName + \".\" + name,\n                        undefined,\n                        relativeToPackage,\n                        level == -1,\n                        true\n                    );\n                }\n            }\n        },\n        function (ret) {\n            if (ret === undefined) {\n                // Either it was always a global import, or it was an\n                // either-way import that just fell through.\n                relativeToPackage = undefined;\n                relativeToPackageName = undefined;\n                return Sk.importModuleInternal_(\n                    name,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    false,\n                    true\n                );\n            } else {\n                return ret;\n            }\n        },\n        function (ret) {\n            // We might also have to load modules named by the fromlist.\n            // If there is no fromlist, we have reached the end of the lookup, return\n            if (!fromlist || fromlist.length === 0) {\n                return ret;\n            } else {\n                // try to load from-names as modules from the file system\n                // if they are not present on the module itself\n                var i;\n                var fromName;\n                var leafModule, rootModule;\n                var importChain;\n\n                let sysmodules = Sk.getSysModulesPolitely();\n\n                leafModule = sysmodules.mp$subscript(\n                    new Sk.builtin.str(\n                        (relativeToPackageName || \"\") +\n                            (relativeToPackageName && name ? \".\" : \"\") +\n                            name\n                    )\n                );\n                rootModule = sysmodules.mp$subscript(new Sk.builtin.str(firstDottedName));\n\n                for (i = 0; i < fromlist.length; i++) {\n                    fromName = fromlist[i];\n\n                    // \"ret\" is the module we're importing from\n                    // Only import from file system if we have not found the fromName in the current module\n                    if (\n                        fromName != \"*\" &&\n                        leafModule.tp$getattr(new Sk.builtin.str(fromName)) === undefined\n                    ) {\n                        importChain = Sk.misceval.chain(\n                            importChain,\n                            Sk.importModuleInternal_.bind(\n                                null,\n                                fromName,\n                                undefined,\n                                undefined,\n                                undefined,\n                                leafModule,\n                                true,\n                                true\n                            )\n                        );\n                    }\n                }\n\n                return Sk.misceval.chain(importChain, function () {\n                    // if there's a fromlist we want to return the leaf module\n                    // (ret), not the toplevel namespace\n                    Sk.asserts.assert(leafModule);\n                    //console.log(\"LEAF MODULE:\", leafModule, sysmodules, relativeToPackageName, name, firstDottedName, rootModule, fromlist);\n                    //return leafModule;\n                    return leafModule;\n                });\n            }\n        },\n        function (ret) {\n            if (saveSk !== Sk.globals) {\n                Sk.globals = saveSk;\n            }\n            return ret;\n        }\n    );\n};\n\nSk.importStar = function (module, loc, global) {\n    var __all__ = module.tp$getattr(new Sk.builtin.str(\"__all__\"));\n\n    if (__all__) {\n        // TODO this does not support naming *modules* in __all__,\n        // only variables\n        for (\n            let it = Sk.abstr.iter(__all__), i = it.tp$iternext();\n            i !== undefined;\n            i = it.tp$iternext()\n        ) {\n            loc[i.v] = Sk.abstr.gattr(module, i);\n        }\n    } else {\n        let props = Object[\"getOwnPropertyNames\"](module[\"$d\"]);\n        for (let i in props) {\n            if (props[i].charAt(0) != \"_\") {\n                loc[props[i]] = module[\"$d\"][props[i]];\n            }\n        }\n    }\n};\n\nSk.exportSymbol(\"Sk.importMain\", Sk.importMain);\nSk.exportSymbol(\"Sk.importMainWithBody\", Sk.importMainWithBody);\nSk.exportSymbol(\"Sk.importBuiltinWithBody\", Sk.importBuiltinWithBody);\nSk.exportSymbol(\"Sk.builtin.__import__\", Sk.builtin.__import__);\nSk.exportSymbol(\"Sk.importStar\", Sk.importStar);\n", "/**\n * @constructor\n * @param {Sk.builtin.list=} list\n * @param {number=} length optional\n * @extends Sk.builtin.object\n */\nSk.builtin.timSort = function (list, length) {\n    this.list = new Sk.builtin.list(list.v);\n    // When we get into galloping mode, we stay there until both runs win less\n    // often than MIN_GALLOP consecutive times.  See listsort.txt for more info.\n    this.MIN_GALLOP = 7;\n    if (length) {\n        this.listlength = length;\n    } else {\n        this.listlength = list.sq$length();\n    }\n};\n\nSk.builtin.timSort.prototype.lt = function (a, b) {\n    return Sk.misceval.richCompareBool(a, b, \"Lt\");\n};\n\nSk.builtin.timSort.prototype.le = function (a, b) {\n    return !this.lt(b, a);\n};\n\nSk.builtin.timSort.prototype.setitem = function (item, value) {\n    this.list.v[item] = value;\n};\n\n/*\n # binarysort is the best method for sorting small arrays: it does\n # few compares, but can do data movement quadratic in the number of\n # elements.\n # \"a\" is a contiguous slice of a list, and is sorted via binary insertion.\n # This sort is stable.\n # On entry, the first \"sorted\" elements are already sorted.\n # Even in case of error, the output slice will be some permutation of\n # the input (nothing is lost or duplicated)\n */\nSk.builtin.timSort.prototype.binary_sort = function (a, sorted) {\n    var pivot;\n    var p;\n    var r;\n    var l;\n    var start;\n    for (start = a.base + sorted; start < a.base + a.len; start++) {\n        l = a.base;\n        r = start;\n        pivot = a.getitem(r);\n        // Invariants:\n        // pivot >= all in [base, l).\n        // pivot  < all in [r, start).\n        // The second is vacuously true at the start.\n        while (l < r) {\n            p = l + ((r - l) >> 1);\n            if (this.lt(pivot, a.getitem(p))) {\n                r = p;\n            } else {\n                l = p + 1;\n            }\n        }\n        Sk.asserts.assert(l === r);\n        // The invariants still hold, so pivot >= all in [base, l) and\n        // pivot < all in [l, start), so pivot belongs at l.  Note\n        // that if there are elements equal to pivot, l points to the\n        // first slot after them -- that's why this sort is stable.\n        // Slide over to make room.\n        for (p = start; p > l; p--) {\n            a.setitem(p, a.getitem(p - 1));\n        }\n        a.setitem(l, pivot);\n    }\n};\n\nSk.builtin.timSort.prototype.count_run = function (a) {\n    /*\n     # Compute the length of the run in the slice \"a\".\n     # \"A run\" is the longest ascending sequence, with\n     #\n     #     a[0] <= a[1] <= a[2] <= ...\n     #\n     # or the longest descending sequence, with\n     #\n     #     a[0] > a[1] > a[2] > ...\n     #\n     # Return (run, descending) where descending is False in the former case,\n     # or True in the latter.\n     # For its intended use in a stable mergesort, the strictness of the defn of\n     # \"descending\" is needed so that the caller can safely reverse a descending\n     # sequence without violating stability (strict > ensures there are no equal\n     # elements to get out of order).\n     */\n    var n;\n    var p;\n    var descending;\n    if (a.len <= 1) {\n        n = a.len;\n        descending = false;\n    } else {\n        n = 2;\n        if (this.lt(a.getitem(a.base + 1), a.getitem(a.base))) {\n            descending = true;\n            for (p = a.base + 2; p < a.base + a.len; p++) {\n                if (this.lt(a.getitem(p), a.getitem(p - 1))) {\n                    n++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            descending = false;\n            for (p = a.base + 2; p < a.base + a.len; p++) {\n                if (this.lt(a.getitem(p), a.getitem(p - 1))) {\n                    break;\n                } else {\n                    n++;\n                }\n            }\n        }\n    }\n    return { run: new Sk.builtin.listSlice(a.list, a.base, n), descending: descending };\n};\n\nSk.builtin.timSort.prototype.sort = function () {\n    /*\n     # ____________________________________________________________\n     # Entry point.\n     */\n\n    var minrun;\n    var cr;\n    var sorted;\n    var remaining = new Sk.builtin.listSlice(this.list, 0, this.listlength);\n    if (remaining.len < 2) {\n        return;\n    }\n\n    // March over the array once, left to right, finding natural runs,\n    // and extending short natural runs to minrun elements.\n    this.merge_init();\n    minrun = this.merge_compute_minrun(remaining.len);\n    while (remaining.len > 0) {\n        // Identify next run.\n        cr = this.count_run(remaining);\n        if (cr.descending) {\n            cr.run.reverse();\n        }\n        // If short, extend to min(minrun, nremaining).\n        if (cr.run.len < minrun) {\n            sorted = cr.run.len;\n            if (minrun < remaining.len) {\n                cr.run.len = minrun;\n            } else {\n                cr.run.len = remaining.len;\n            }\n            this.binary_sort(cr.run, sorted);\n        }\n        // Advance remaining past this run.\n        remaining.advance(cr.run.len);\n        // Push run onto pending-runs stack, and maybe merge.\n        this.pending.push(cr.run);\n        this.merge_collapse();\n    }\n    Sk.asserts.assert(remaining.base == this.listlength);\n\n    this.merge_force_collapse();\n    Sk.asserts.assert(this.pending.length == 1);\n    Sk.asserts.assert(this.pending[0].base === 0);\n    Sk.asserts.assert(this.pending[0].len == this.listlength);\n};\n\n/*\n # Locate the proper position of key in a sorted vector; if the vector\n # contains an element equal to key, return the position immediately to the\n # left of the leftmost equal element -- or to the right of the rightmost\n # equal element if the flag \"rightmost\" is set.\n #\n # \"hint\" is an index at which to begin the search, 0 <= hint < a.len.\n # The closer hint is to the final result, the faster this runs.\n #\n # The return value is the index 0 <= k <= a.len such that\n #\n #     a[k-1] < key <= a[k]      (if rightmost is False)\n #     a[k-1] <= key < a[k]      (if rightmost is True)\n #\n # as long as the indices are in bound.  IOW, key belongs at index k;\n # or, IOW, the first k elements of a should precede key, and the last\n # n-k should follow key.\n */\nSk.builtin.timSort.prototype.gallop = function (key, a, hint, rightmost) {\n    var lower;\n    var self;\n    var p;\n    var lastofs;\n    var ofs;\n    var maxofs;\n    var hintminofs;\n    var hintminlastofs;\n    var m;\n    Sk.asserts.assert(0 <= hint && hint < a.len);\n    self = this;\n    if (rightmost) {\n        lower = function (a, b) {\n            return self.le(a, b);\n        }; // search for the largest k for which a[k] <= key\n    } else {\n        lower = function (a, b) {\n            return self.lt(a, b);\n        }; // search for the largest k for which a[k] < key\n    }\n    p = a.base + hint;\n    lastofs = 0;\n    ofs = 1;\n    if (lower(a.getitem(p), key)) {\n        // a[hint] < key -- gallop right, until\n        // a[hint + lastofs] < key <= a[hint + ofs]\n\n        maxofs = a.len - hint; // a[a.len-1] is highest\n        while (ofs < maxofs) {\n            if (lower(a.getitem(p + ofs), key)) {\n                lastofs = ofs;\n                try {\n                    ofs = (ofs << 1) + 1;\n                } catch (err) {\n                    ofs = maxofs;\n                }\n            } else {\n                // key <= a[hint + ofs]\n                break;\n            }\n        }\n        if (ofs > maxofs) {\n            ofs = maxofs;\n        }\n        // Translate back to offsets relative to a.\n        lastofs += hint;\n        ofs += hint;\n    } else {\n        // key <= a[hint] -- gallop left, until\n        // a[hint - ofs] < key <= a[hint - lastofs]\n        maxofs = hint + 1; // a[0] is lowest\n        while (ofs < maxofs) {\n            if (lower(a.getitem(p - ofs), key)) {\n                break;\n            } else {\n                // key <= a[hint - ofs]\n                lastofs = ofs;\n                try {\n                    ofs = (ofs << 1) + 1;\n                } catch (err) {\n                    ofs = maxofs;\n                }\n            }\n        }\n        if (ofs > maxofs) {\n            ofs = maxofs;\n        }\n        // Translate back to positive offsets relative to a.\n        hintminofs = hint - ofs;\n        hintminlastofs = hint - lastofs;\n        lastofs = hintminofs;\n        ofs = hintminlastofs;\n    }\n    Sk.asserts.assert(-1 <= lastofs < ofs <= a.len);\n\n    // Now a[lastofs] < key <= a[ofs], so key belongs somewhere to the\n    // right of lastofs but no farther right than ofs.  Do a binary\n    // search, with invariant a[lastofs-1] < key <= a[ofs].\n\n    lastofs += 1;\n    while (lastofs < ofs) {\n        m = lastofs + ((ofs - lastofs) >> 1);\n        if (lower(a.getitem(a.base + m), key)) {\n            lastofs = m + 1; // a[m] < key\n        } else {\n            ofs = m; // key <= a[m]\n        }\n    }\n    Sk.asserts.assert(lastofs == ofs); // so a[ofs-1] < key <= a[ofs]\n    return ofs;\n};\n\n// ____________________________________________________________\n\nSk.builtin.timSort.prototype.merge_init = function () {\n    // This controls when we get *into* galloping mode.  It's initialized\n    // to MIN_GALLOP.  merge_lo and merge_hi tend to nudge it higher for\n    // random data, and lower for highly structured data.\n    this.min_gallop = this.MIN_GALLOP;\n\n    // A stack of n pending runs yet to be merged.  Run #i starts at\n    // address pending[i].base and extends for pending[i].len elements.\n    // It's always true (so long as the indices are in bounds) that\n    //\n    //     pending[i].base + pending[i].len == pending[i+1].base\n    //\n    // so we could cut the storage for this, but it's a minor amount,\n    // and keeping all the info explicit simplifies the code.\n    this.pending = [];\n};\n\n// Merge the slice \"a\" with the slice \"b\" in a stable way, in-place.\n// a.len <= b.len.  See listsort.txt for more info.\n// a.len and b.len must be > 0, and a.base + a.len == b.base.\n// Must also have that b.list[b.base] < a.list[a.base], that\n// a.list[a.base+a.len-1] belongs at the end of the merge, and should have\n\nSk.builtin.timSort.prototype.merge_lo = function (a, b) {\n    var min_gallop;\n    var dest;\n    var acount, bcount;\n    var p;\n    Sk.asserts.assert(a.len > 0 && b.len > 0 && a.base + a.len == b.base);\n    min_gallop = this.min_gallop;\n    dest = a.base;\n    a = a.copyitems();\n\n    // Invariant: elements in \"a\" are waiting to be reinserted into the list\n    // at \"dest\".  They should be merged with the elements of \"b\".\n    // b.base == dest + a.len.\n    // We use a finally block to ensure that the elements remaining in\n    // the copy \"a\" are reinserted back into this.list in all cases.\n    try {\n        this.setitem(dest, b.popleft());\n\n        dest++;\n        if (a.len == 1 || b.len === 0) {\n            return;\n        }\n\n        while (true) {\n            acount = 0; // number of times A won in a row\n            bcount = 0; // number of times B won in a row\n\n            // Do the straightforward thing until (if ever) one run\n            // appears to win consistently.\n            while (true) {\n                if (this.lt(b.getitem(b.base), a.getitem(a.base))) {\n                    this.setitem(dest, b.popleft());\n                    dest++;\n                    if (b.len === 0) {\n                        return;\n                    }\n                    bcount++;\n                    acount = 0;\n                    if (bcount >= min_gallop) {\n                        break;\n                    }\n                } else {\n                    this.setitem(dest, a.popleft());\n                    dest++;\n                    if (a.len == 1) {\n                        return;\n                    }\n                    acount++;\n                    bcount = 0;\n                    if (acount >= min_gallop) {\n                        break;\n                    }\n                }\n            }\n\n            // One run is winning so consistently that galloping may\n            // be a huge win.  So try that, and continue galloping until\n            // (if ever) neither run appears to be winning consistently\n            // anymore.\n            min_gallop += 1;\n\n            while (true) {\n                min_gallop -= min_gallop > 1;\n                this.min_gallop = min_gallop;\n                acount = this.gallop(b.getitem(b.base), a, 0, true);\n                for (p = a.base; p < a.base + acount; p++) {\n                    this.setitem(dest, a.getitem(p));\n                    dest++;\n                }\n\n                a.advance(acount);\n\n                if (a.len <= 1) {\n                    return;\n                }\n\n                this.setitem(dest, b.popleft());\n                dest++;\n\n                // a.len==0 is impossible now if the comparison\n                // function is consistent, but we can't assume\n                // that it is.\n                if (b.len === 0) {\n                    return;\n                }\n\n                bcount = this.gallop(a.getitem(a.base), b, 0, false);\n\n                for (p = b.base; p < b.base + bcount; p++) {\n                    this.setitem(dest, b.getitem(p));\n                    dest++;\n                }\n\n                b.advance(bcount);\n                if (b.len === 0) {\n                    return;\n                }\n                this.setitem(dest, a.popleft());\n                dest++;\n\n                if (a.len == 1) {\n                    return;\n                }\n\n                if (acount < this.MIN_GALLOP && bcount < this.MIN_GALLOP) {\n                    break;\n                }\n\n                min_gallop++; // penalize it for leaving galloping mode\n                this.min_gallop = min_gallop;\n            }\n        }\n    } finally {\n        // The last element of a belongs at the end of the merge, so we copy\n        // the remaining elements of b before the remaining elements of a.\n        Sk.asserts.assert(a.len >= 0 && b.len >= 0);\n        for (p = b.base; p < b.base + b.len; p++) {\n            this.setitem(dest, b.getitem(p));\n            dest++;\n        }\n        for (p = a.base; p < a.base + a.len; p++) {\n            this.setitem(dest, a.getitem(p));\n            dest++;\n        }\n    }\n};\n\nSk.builtin.timSort.prototype.merge_hi = function (a, b) {\n    var min_gallop;\n    var dest;\n    var acount, bcount, nexta, nextb;\n    var k;\n    var p;\n    Sk.asserts.assert(a.len > 0 && b.len > 0 && a.base + a.len == b.base);\n    min_gallop = this.min_gallop;\n    dest = b.base + b.len;\n    b = b.copyitems();\n\n    // Invariant: elements in \"a\" are waiting to be reinserted into the list\n    // at \"dest\".  They should be merged with the elements of \"b\".\n    // b.base == dest + a.len.\n    // We use a finally block to ensure that the elements remaining in\n    // the copy \"a\" are reinserted back into this.list in all cases.\n    try {\n        dest--;\n        this.setitem(dest, a.popright());\n\n        if (a.len === 0 || b.len == 1) {\n            return;\n        }\n\n        while (true) {\n            acount = 0; // number of times A won in a row\n            bcount = 0; // number of times B won in a row\n\n            // Do the straightforward thing until (if ever) one run\n            // appears to win consistently.\n            while (true) {\n                nexta = a.getitem(a.base + a.len - 1);\n                nextb = b.getitem(b.base + b.len - 1);\n                if (this.lt(nextb, nexta)) {\n                    dest--;\n                    this.setitem(dest, nexta);\n                    a.len--;\n                    if (a.len === 0) {\n                        return;\n                    }\n                    acount++;\n                    bcount = 0;\n                    if (acount >= min_gallop) {\n                        break;\n                    }\n                } else {\n                    dest--;\n                    this.setitem(dest, nextb);\n                    b.len--;\n                    if (b.len == 1) {\n                        return;\n                    }\n                    bcount++;\n                    acount = 0;\n                    if (bcount >= min_gallop) {\n                        break;\n                    }\n                }\n            }\n\n            // One run is winning so consistently that galloping may\n            // be a huge win.  So try that, and continue galloping until\n            // (if ever) neither run appears to be winning consistently\n            // anymore.\n            min_gallop += 1;\n\n            while (true) {\n                min_gallop -= min_gallop > 1;\n                this.min_gallop = min_gallop;\n                nextb = b.getitem(b.base + b.len - 1);\n                k = this.gallop(nextb, a, a.len - 1, true);\n                acount = a.len - k;\n                for (p = a.base + a.len - 1; p > a.base + k - 1; p--) {\n                    dest--;\n                    this.setitem(dest, a.getitem(p));\n                }\n                a.len -= acount;\n                if (a.len === 0) {\n                    return;\n                }\n\n                dest--;\n                this.setitem(dest, b.popright());\n                if (b.len == 1) {\n                    return;\n                }\n\n                nexta = a.getitem(a.base + a.len - 1);\n                k = this.gallop(nexta, b, b.len - 1, false);\n                bcount = b.len - k;\n                for (p = b.base + b.len - 1; p > b.base + k - 1; p--) {\n                    dest--;\n                    this.setitem(dest, b.getitem(p));\n                }\n\n                b.len -= bcount;\n\n                // b.len==0 is impossible now if the comparison\n                // function is consistent, but we can't assume\n                // that it is.\n                if (b.len <= 1) {\n                    return;\n                }\n                dest--;\n                this.setitem(dest, a.popright());\n                if (a.len === 0) {\n                    return;\n                }\n\n                if (acount < this.MIN_GALLOP && bcount < this.MIN_GALLOP) {\n                    break;\n                }\n\n                min_gallop++; // penalize it for leaving galloping mode\n                this.min_gallop = min_gallop;\n            }\n        }\n    } finally {\n        // The last element of a belongs at the end of the merge, so we copy\n        // the remaining elements of b before the remaining elements of a.\n        Sk.asserts.assert(a.len >= 0 && b.len >= 0);\n        for (p = a.base + a.len - 1; p > a.base - 1; p--) {\n            dest--;\n            this.setitem(dest, a.getitem(p));\n        }\n        for (p = b.base + b.len - 1; p > b.base - 1; p--) {\n            dest--;\n            this.setitem(dest, b.getitem(p));\n        }\n    }\n};\n\n// Merge the two runs at stack indices i and i+1.\n\nSk.builtin.timSort.prototype.merge_at = function (i) {\n    var a;\n    var b;\n    var k;\n    if (i < 0) {\n        i = this.pending.length + i;\n    }\n\n    a = this.pending[i];\n    b = this.pending[i + 1];\n    Sk.asserts.assert(a.len > 0 && b.len > 0);\n    Sk.asserts.assert(a.base + a.len == b.base);\n\n    // Record the length of the combined runs and remove the run b\n    this.pending[i] = new Sk.builtin.listSlice(this.list, a.base, a.len + b.len);\n    this.pending.splice(i + 1, 1);\n\n    // Where does b start in a?  Elements in a before that can be\n    // ignored (already in place).\n    k = this.gallop(b.getitem(b.base), a, 0, true);\n    a.advance(k);\n    if (a.len === 0) {\n        return;\n    }\n\n    // Where does a end in b?  Elements in b after that can be\n    // ignored (already in place).\n    b.len = this.gallop(a.getitem(a.base + a.len - 1), b, b.len - 1, false);\n    if (b.len === 0) {\n        return;\n    }\n\n    // Merge what remains of the runs.  The direction is chosen to\n    // minimize the temporary storage needed.\n    if (a.len <= b.len) {\n        this.merge_lo(a, b);\n    } else {\n        this.merge_hi(a, b);\n    }\n};\n\n// Examine the stack of runs waiting to be merged, merging adjacent runs\n// until the stack invariants are re-established:\n//\n// 1. len[-3] > len[-2] + len[-1]\n// 2. len[-2] > len[-1]\n//\n// See listsort.txt for more info.\nSk.builtin.timSort.prototype.merge_collapse = function () {\n    var p = this.pending;\n    while (p.length > 1) {\n        if (p.length >= 3 && p[p.length - 3].len <= p[p.length - 2].len + p[p.length - 1].len) {\n            if (p[p.length - 3].len < p[p.length - 1].len) {\n                this.merge_at(-3);\n            } else {\n                this.merge_at(-2);\n            }\n        } else if (p[p.length - 2].len <= p[p.length - 1].len) {\n            this.merge_at(-2);\n        } else {\n            break;\n        }\n    }\n};\n\n// Regardless of invariants, merge all runs on the stack until only one\n// remains.  This is used at the end of the mergesort.\n\nSk.builtin.timSort.prototype.merge_force_collapse = function () {\n    var p = this.pending;\n    while (p.length > 1) {\n        if (p.length >= 3 && p[p.length - 3].len < p[p.length - 1].len) {\n            this.merge_at(-3);\n        } else {\n            this.merge_at(-2);\n        }\n    }\n};\n// Compute a good value for the minimum run length; natural runs shorter\n// than this are boosted artificially via binary insertion.\n//\n// If n < 64, return n (it's too small to bother with fancy stuff).\n// Else if n is an exact power of 2, return 32.\n// Else return an int k, 32 <= k <= 64, such that n/k is close to, but\n// strictly less than, an exact power of 2.\n//\n// See listsort.txt for more info.\n\nSk.builtin.timSort.prototype.merge_compute_minrun = function (n) {\n    var r = 0; // becomes 1 if any 1 bits are shifted off\n    while (n >= 64) {\n        r = r | (n & 1);\n        n >>= 1;\n    }\n    return n + r;\n};\n\n//ListSlice\n/**\n * @constructor\n * @param {Sk.builtin.list=} list\n * @param {number=} base\n * @param {number=} len\n * @extends Sk.builtin.object\n */\nSk.builtin.listSlice = function (list, base, len) {\n    this.list = list;\n    this.base = base;\n    this.len = len;\n};\n\nSk.builtin.listSlice.prototype.copyitems = function () {\n    //Make a copy of the slice of the original list\n    var start = this.base;\n    var stop = this.base + this.len;\n    Sk.asserts.assert(0 <= start <= stop);\n    return new Sk.builtin.listSlice(\n        new Sk.builtin.list(this.list.v.slice(start, stop)),\n        0,\n        this.len\n    );\n};\n\nSk.builtin.listSlice.prototype.advance = function (n) {\n    this.base += n;\n    this.len -= n;\n    Sk.asserts.assert(this.base <= this.list.sq$length());\n};\n\nSk.builtin.listSlice.prototype.getitem = function (item) {\n    return this.list.v[item];\n};\n\nSk.builtin.listSlice.prototype.setitem = function (item, value) {\n    this.list.v[item] = value;\n};\n\nSk.builtin.listSlice.prototype.popleft = function () {\n    var result = this.list.v[this.base];\n    this.base++;\n    this.len--;\n    return result;\n};\n\nSk.builtin.listSlice.prototype.popright = function () {\n    this.len--;\n    return this.list.v[this.base + this.len];\n};\n\nSk.builtin.listSlice.prototype.reverse = function () {\n    // Reverse the slice in-place.\n    var list_hi;\n    var list_lo;\n    var list = this.list;\n    var lo = this.base;\n    var hi = lo + this.len - 1;\n    while (lo < hi) {\n        list_hi = list.v[hi];\n        list_lo = list.v[lo];\n        list.v[lo] = list_hi;\n        list.v[hi] = list_lo;\n        lo++;\n        hi--;\n    }\n};\n\nSk.exportSymbol(\"Sk.builtin.listSlice\", Sk.builtin.listSlice);\nSk.exportSymbol(\"Sk.builtin.timSort\", Sk.builtin.timSort);\n", "/**\n * @constructor\n * Sk.builtin.super_\n */\nSk.builtin.super_ = Sk.abstr.buildNativeClass(\"super\", {\n    constructor: function super_(a_type, other_self) {\n        // internally we never use this method\n        Sk.asserts.assert(this instanceof Sk.builtin.super_, \"bad call to super, use 'new'\");\n        // internal calls can use this method but it\n        this.type = a_type;\n        this.obj = other_self;\n        if (a_type !== undefined) {\n            if (!Sk.builtin.checkClass(a_type)) {\n                throw new Sk.builtin.TypeError(\"must be type, not \" + Sk.abstr.typeName(a_type));\n            }\n        }\n        if (this.obj !== undefined) {\n            this.obj_type = this.$supercheck(a_type, this.obj);\n        } else {\n            this.obj_type = null;\n        }\n    },\n    slots: {\n        tp$doc:\n            \"super() -> same as super(__class__, <first argument>)\\n\" +\n            \"super(type) -> unbound super object\\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\\n\" +\n            \"super(type, type2) -> bound super object; requires issubclass(type2, type)\\n\" +\n            \"Typical use to call a cooperative superclass method:\\n\" +\n            \"class C(B):\\n    def meth(self, arg):\\n        super().meth(arg)\\nThis works for class methods too:\\nclass C(B):\\n    @classmethod\\n    def cmeth(cls, arg):\\n        super().cmeth(arg)\\n\",\n        tp$new: Sk.generic.new,\n        tp$init(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"super\", kwargs);\n            Sk.abstr.checkArgsLen(\"super\", args, 1, 2);\n            const a_type = args[0];\n            const other_self = args[1];\n            if (!Sk.builtin.checkClass(a_type)) {\n                throw new Sk.builtin.TypeError(\"must be type, not \" + Sk.abstr.typeName(a_type));\n            }\n            this.obj = other_self;\n            this.type = a_type;\n            if (this.obj != null) {\n                this.obj_type = this.$supercheck(a_type, this.obj);\n            }\n            return Sk.builtin.none.none$;\n        },\n        $r() {\n            if (this.obj) {\n                return new Sk.builtin.str(\n                    \"<super: <class '\" +\n                        this.type.prototype.tp$name +\n                        \"'>, <\" +\n                        Sk.abstr.typeName(this.obj) +\n                        \" object>>\"\n                );\n            }\n            return new Sk.builtin.str(\n                \"<super: <class '\" + this.type.prototype.tp$name + \"'>, NULL>\"\n            );\n        },\n        tp$getattr(pyName, canSuspend) {\n            let starttype = this.obj_type;\n            if (starttype == null) {\n                return Sk.generic.getAttr.call(this, pyName, canSuspend);\n            }\n            const mro = starttype.prototype.tp$mro;\n            const n = mro.length;\n            /* We want __class__ to return the class of the super object\n            (i.e. super, or a subclass), not the class of su->obj. */\n            if (pyName === Sk.builtin.str.$class) {\n                return Sk.generic.getAttr.call(this, pyName, canSuspend);\n            }\n            /* No need to check the last one: it's gonna be skipped anyway.  */\n            let i;\n            for (i = 0; i + 1 < n; i++) {\n                if (this.type === mro[i]) {\n                    break;\n                }\n            }\n            i++;\n            if (i >= n) {\n                return Sk.generic.getAttr.call(this, pyName, canSuspend);\n            }\n            const jsName = pyName.$mangled;\n\n            let tmp, res;\n            while (i < n) {\n                tmp = mro[i].prototype;\n                if (tmp.hasOwnProperty(jsName)) {\n                    res = tmp[jsName];\n                }\n\n                if (res !== undefined) {\n                    const f = res.tp$descr_get;\n                    if (f !== undefined) {\n                        /* Only pass 'obj' param if this is instance-mode super\n                               (See SF ID #743627)  */\n                        res = f.call(res, this.obj === starttype ? null : this.obj, starttype);\n                    }\n                    return res;\n                }\n                i++;\n            }\n        },\n        tp$descr_get(obj, obtype) {\n            if (obj === null || this.obj != null) {\n                return this;\n            }\n            if (this.ob$type !== Sk.builtin.super_) {\n                /* If su is an instance of a (strict) subclass of super,\n                call its type */\n                return Sk.misceval.callsimOrSuspendArray(this.ob$type, [this.type, obj]);\n            } else {\n                /* Inline the common case */\n                const obj_type = this.$supercheck(this.type, obj);\n                const newobj = new Sk.builtin.super_();\n                newobj.type = this.type;\n                newobj.obj = obj;\n                newobj.obj_type = obj_type;\n                return newobj;\n            }\n        },\n    },\n    getsets: {\n        __thisclass__: {\n            $get() {\n                return this.type;\n            },\n            $doc: \"the class invoking super()\",\n        },\n        __self__: {\n            $get() {\n                return this.obj || Sk.builtin.none.none$;\n            },\n            $doc: \"the instance invoking super(); may be None\",\n        },\n        __self_class__: {\n            $get() {\n                return this.obj_type || Sk.builtin.none.none$;\n            },\n            $doc: \"the type of the instance invoking super(); may be None\",\n        },\n    },\n    proto: {\n        $supercheck(type, obj) {\n            /* Check that a super() call makes sense.  Return a type object.\n\n            obj can be a class, or an instance of one:\n\n            - If it is a class, it must be a subclass of 'type'.      This case is\n                used for class methods; the return value is obj.\n\n            - If it is an instance, it must be an instance of 'type'.  This is\n                the normal case; the return value is obj.__class__.\n\n            /* Check for first bullet above (special case) */\n            if (Sk.builtin.checkClass(obj) && obj.$isSubType(type)) {\n                return obj;\n            }\n            /* Normal case */\n            if (obj.ob$type.$isSubType(type)) {\n                return obj.ob$type;\n            } else {\n                /* Try the slow way */\n                const class_attr = obj.tp$getattr(Sk.builtin.str.$class);\n                if (\n                    class_attr !== undefined &&\n                    class_attr !== obj.ob$type &&\n                    Sk.builtin.checkClass(class_attr)\n                ) {\n                    if (class_attr.$isSubType(type)) {\n                        return class_attr;\n                    }\n                }\n            }\n            throw new Sk.builtin.TypeError(\n                \"super(type, obj): obj must be an instance or subtype of type\"\n            );\n        },\n    },\n});\n", "Sk.builtin.GenericAlias = Sk.abstr.buildNativeClass(\"types.GenericAlias\", {\n    constructor: function GenericAlias(origin, args) {\n        this.$origin = origin;\n        if (!(args instanceof Sk.builtin.tuple)) {\n            args = new Sk.builtin.tuple([args]);\n        }\n        this.$args = args;\n        this.$params = null;\n    },\n    slots: {\n        tp$new(args, kwargs) {\n            Sk.abstr.checkNoKwargs(\"GenericAlias\", kwargs);\n            Sk.abstr.checkArgsLen(\"GenericAlias\", args, 2, 2);\n            return new Sk.builtin.GenericAlias(args[0], args[1]);\n        },\n        tp$getattr(pyName, canSuspend) {\n            if (Sk.builtin.checkString(pyName)) {\n                if (!this.attr$exc.includes(pyName)) {\n                    return this.$origin.tp$getattr(pyName, canSuspend);\n                }\n            }\n            return Sk.generic.getAttr.call(this, pyName, canSuspend);\n        },\n        $r() {\n            const origin_repr = this.ga$repr(this.$origin);\n            let arg_repr = \"\";\n            this.$args.v.forEach((arg, i) => {\n                arg_repr += i > 0 ? \", \" : \"\";\n                arg_repr += this.ga$repr(arg);\n            });\n            if (!arg_repr) {\n                arg_repr = \"()\";\n            }\n            return new Sk.builtin.str(origin_repr + \"[\" + arg_repr + \"]\");\n        },\n        tp$doc: \"Represent a PEP 585 generic type\\n\\nE.g. for t = list[int], t.origin is list and t.args is (int,).\",\n        tp$hash() {\n            const h0 = Sk.abstr.objectHash(this.$origin);\n            if (h0 == -1) {\n                return -1;\n            }\n            const h1 = Sk.abstr.objectHash(this.$args);\n            if (h1 == -1) {\n                return -1;\n            }\n            return h0 ^ h1;\n        },\n        tp$call(args, kwargs) {\n            const obj = Sk.misceval.callsimArray(this.$origin, args, kwargs);\n            try {\n                obj.tp$setattr(new Sk.builtin.str(\"__orig_class__\"), this);\n            } catch (e) {\n                if (\n                    !(e instanceof Sk.builtin.AttributeError) &&\n                    !(e instanceof Sk.builtin.TypeError)\n                ) {\n                    throw e;\n                }\n            }\n            return obj;\n        },\n        tp$richcompare(other, op) {\n            if (!(other instanceof Sk.builtin.GenericAlias) || (op !== \"Eq\" && op !== \"NotEq\")) {\n                return Sk.builtin.NotImplemented.NotImplemented$;\n            }\n            const eq = Sk.misceval.richCompareBool(this.$origin, other.$origin, \"Eq\");\n            if (!eq) {\n                return op === \"Eq\" ? eq : !eq;\n            }\n            const res = Sk.misceval.richCompareBool(this.$args, other.$args, \"Eq\");\n            return op === \"Eq\" ? res : !res;\n        },\n        tp$as_sequence_or_mapping: true,\n        mp$subscript(item) {\n            if (this.$params === null) {\n                this.mk$params();\n            }\n            const nparams = this.$params.sq$length();\n            if (nparams === 0) {\n                throw new Sk.builtin.TypeError(\n                    \"There are no type variables left in \" + Sk.misceval.objectRepr(this)\n                );\n            }\n\n            /**@todo the following only makes sense when we do typing*/\n\n            // const is_tuple = item instanceof Sk.builtin.tuple;\n            // if (is_tuple) {\n            //     const nitems = item.sq$length();\n            //     if (nitems !== nparams) {\n            //         throw new Sk.builtin.TypeError(\"Too \" + (nitems > nparams ? \"many\" : \"few\") + \" arguments for \" + Sk.misceval.objectRepr(this));\n            //     }\n            // }\n            // const args = this.$args.v;\n            // const new_args = [];\n            // args.forEach((arg) => {\n            //     if (this.is$typevar(arg)) {\n            //         const iparam = this.tuple$index(this.$params.v, arg);\n            //         if (is_tuple) {\n            //             arg = item.v[iparam];\n            //         } else {\n            //             arg = item;\n            //         }\n            //     }\n            //     new_args.push(arg);\n            // });\n            // const res = new Sk.builtin.GenericAlias(this.$origin, new Sk.builtin.tuple(new_args));\n            // return res;\n        },\n    },\n    methods: {\n        __mro_entries__: {\n            $meth() {\n                return new Sk.builtin.tuple([this.$origin]);\n            },\n            $flags: { NoArgs: true },\n        },\n        __instancecheck__: {\n            $meth(_) {\n                throw new Sk.builtin.TypeError(\n                    \"isinstance() argument 2 cannot be a parameterized generic\"\n                );\n            },\n            $flags: { OneArg: true },\n        },\n        __subclasscheck__: {\n            $meth(_) {\n                throw new Sk.builtin.TypeError(\n                    \"issubclass() argument 2 cannot be a parameterized generic\"\n                );\n            },\n            $flags: { OneArg: true },\n        },\n    },\n    getsets: {\n        __parameters__: {\n            $get() {\n                if (this.$params === null) {\n                    this.mk$params();\n                }\n                return this.$params;\n            },\n            $doc: \"Type variables in the GenericAlias.\",\n        },\n        __origin__: {\n            $get() {\n                return this.$origin;\n            },\n        },\n        __args__: {\n            $get() {\n                return this.$args;\n            },\n        },\n    },\n    proto: {\n        // functions here match similar functions in Objects/genericaliasobject.c\n        mk$params() {\n            const arg_arr = this.$args.v;\n            const params = [];\n            arg_arr.forEach((t) => {\n                if (this.is$typevar(t)) {\n                    if (this.tuple$index(params, t) < 0) {\n                        params.push(t);\n                    }\n                }\n            });\n            this.$params = new Sk.builtin.tuple(params);\n        },\n        tuple$index(tup_arr, item) {\n            return tup_arr.indexOf(item);\n        },\n        is$typevar(type) {\n            if (type.tp$name !== \"TypeVar\") {\n                return false;\n            }\n            const module = Sk.abstr.lookupSpecial(type, Sk.builtin.str.$module);\n            if (module === undefined) {\n                // throw some sort of error but all objects have __module_ so we shouldn't be here.\n                throw Sk.builtin.RuntimeError(\"found object withought a __module__\");\n            }\n            return module.toString() === \"typing\";\n        },\n        ga$repr(item) {\n            if (item === Sk.builtin.Ellipsis) {\n                return \"...\";\n            }\n            if (Sk.abstr.lookupSpecial(item, this.str$orig)) {\n                if (Sk.abstr.lookupSpecial(item, this.str$args)) {\n                    return Sk.misceval.objectRepr(item);\n                }\n            }\n            const qualname = Sk.abstr.lookupSpecial(item, Sk.builtin.str.$qualname);\n            if (qualname === undefined) {\n                return Sk.misceval.objectRepr(item);\n            }\n            const mod = Sk.abstr.lookupSpecial(item, Sk.builtin.str.$module);\n            if (mod === undefined || Sk.builtin.checkNone(mod)) {\n                return Sk.misceval.objectRepr(item);\n            } else if (mod.toString() === \"builtins\") {\n                return qualname.toString();\n            }\n            return mod.toString() + \".\" + qualname.toString();\n        },\n        str$orig: new Sk.builtin.str(\"__origin__\"),\n        str$args: new Sk.builtin.str(\"__args__\"),\n        attr$exc: [\n            \"__origin__\",\n            \"__args__\",\n            \"__parameters__\",\n            \"__mro_entries__\",\n            \"__reduce_ex__\", // needed so we don't look up object.__reduce_ex__\n            \"__reduce__\",\n        ].map((x) => new Sk.builtin.str(x)),\n    },\n});\n", "// Note: the hacky names on int, long, float have to correspond with the\n// uniquization that the compiler does for words that are reserved in\n// Javascript. This is a bit hokey.\n\nSk.builtins = {\n    round: null,\n    len: null,\n    min: null,\n    max: null,\n    sum: null,\n    abs: null,\n    fabs: null,\n    ord: null,\n    chr: null,\n    hex: null,\n    oct: null,\n    bin: null,\n    dir: null,\n    repr: null,\n    open: null,\n    isinstance: null,\n    hash: null,\n    getattr: null,\n    hasattr: null,\n    id: null,\n\n    //\"reduce\": new Sk.builtin.func(Sk.builtin.reduce),\n    sorted: null,\n    any: null,\n    all: null,\n\n    // iterator objects if py2 mode we replace these with sk_methods\n    enumerate: Sk.builtin.enumerate,\n    filter: Sk.builtin.filter_,\n    map: Sk.builtin.map_,\n    range: Sk.builtin.range_,\n    reversed: Sk.builtin.reversed,\n    zip: Sk.builtin.zip_,\n\n    BaseException: Sk.builtin.BaseException,\n    AttributeError: Sk.builtin.AttributeError,\n    ValueError: Sk.builtin.ValueError,\n    Exception: Sk.builtin.Exception,\n    ZeroDivisionError: Sk.builtin.ZeroDivisionError,\n    AssertionError: Sk.builtin.AssertionError,\n    ImportError: Sk.builtin.ImportError,\n    IndentationError: Sk.builtin.IndentationError,\n    IndexError: Sk.builtin.IndexError,\n    LookupError: Sk.builtin.LookupError,\n    KeyError: Sk.builtin.KeyError,\n    TypeError: Sk.builtin.TypeError,\n    UnicodeDecodeError: Sk.builtin.UnicodeDecodeError,\n    UnicodeEncodeError: Sk.builtin.UnicodeEncodeError,\n    NameError: Sk.builtin.NameError,\n    UnboundLocalError: Sk.builtin.UnboundLocalError,\n    OSError: Sk.builtin.OSError,\n    TimeoutError: Sk.builtin.TimeoutError,\n    IOError: Sk.builtin.IOError,\n    NotImplementedError: Sk.builtin.NotImplementedError,\n    SystemExit: Sk.builtin.SystemExit,\n    OverflowError: Sk.builtin.OverflowError,\n    OperationError: Sk.builtin.OperationError,\n    NegativePowerError: Sk.builtin.NegativePowerError,\n    RuntimeError: Sk.builtin.RuntimeError,\n    RecursionError: Sk.builtin.RecursionError,\n    StopIteration: Sk.builtin.StopIteration,\n    SyntaxError: Sk.builtin.SyntaxError,\n    SystemError: Sk.builtin.SystemError,\n    KeyboardInterrupt: Sk.builtin.KeyboardInterrupt,\n    EOFError: Sk.builtin.EOFError,\n    MemoryError: Sk.builtin.MemoryError,\n    ReferenceError: Sk.builtin.ReferenceError,\n\n    float_$rw$: Sk.builtin.float_,\n    int_$rw$: Sk.builtin.int_,\n    bool: Sk.builtin.bool,\n    complex: Sk.builtin.complex,\n    dict: Sk.builtin.dict,\n    file: Sk.builtin.file,\n    frozenset: Sk.builtin.frozenset,\n    function: Sk.builtin.func,\n    generator: Sk.builtin.generator,\n    list: Sk.builtin.list,\n    long_$rw$: Sk.builtin.lng,\n    method: Sk.builtin.method,\n    object: Sk.builtin.object,\n    slice: Sk.builtin.slice,\n    str: Sk.builtin.str,\n    set: Sk.builtin.set,\n    tuple: Sk.builtin.tuple,\n    type: Sk.builtin.type,\n\n    input: null,\n    raw_input: new Sk.builtin.func(Sk.builtin.raw_input),\n    setattr: null,\n    /*'read': Sk.builtin.read,*/\n    jseval: Sk.builtin.jseval,\n    jsmillis: Sk.builtin.jsmillis,\n    quit: new Sk.builtin.func(Sk.builtin.quit),\n    exit: new Sk.builtin.func(Sk.builtin.quit),\n    print: null,\n    divmod: null,\n    format: null,\n    globals: null,\n    issubclass: null,\n    iter: null,\n\n    // Functions below are not implemented\n    bytearray: Sk.builtin.bytearray,\n    // \"callable\"  : Sk.builtin.callable,\n    // \"delattr\"   : Sk.builtin.delattr,\n    // \"eval_$rw$\" : Sk.builtin.eval_,\n    execfile: Sk.builtin.execfile,\n    exec: Sk.builtin.exec,\n    compile: Sk.builtin.compile,\n\n    help: Sk.builtin.help,\n    // \"locals\"    : Sk.builtin.locals,\n    memoryview: Sk.builtin.memoryview,\n    // \"next\"      : Sk.builtin.next_,\n    // \"pow\"       : Sk.builtin.pow,\n    reload: Sk.builtin.reload,\n    super_$rw$: Sk.builtin.super_,\n    unichr: new Sk.builtin.func(Sk.builtin.unichr),\n    vars: Sk.builtin.vars,\n    apply_$rw$: Sk.builtin.apply_,\n    buffer: Sk.builtin.buffer,\n    coerce: Sk.builtin.coerce,\n    intern: Sk.builtin.intern,\n\n    property: Sk.builtin.property,\n    classmethod: Sk.builtin.classmethod,\n    staticmethod: Sk.builtin.staticmethod,\n\n    Ellipsis: Sk.builtin.Ellipsis,\n};\n\nconst pyNone = Sk.builtin.none.none$;\nconst emptyTuple = new Sk.builtin.tuple();\nconst pyZero = new Sk.builtin.int_(0);\n\nSk.abstr.setUpModuleMethods(\"builtins\", Sk.builtins, {\n    // __build_class__: {\n    //     $meth: Sk.builtin.__build_class__,\n    //     $flags: {},\n    //     $textsig: null,\n    //     $doc: \"__build_class__(func, name, *bases, metaclass=None, **kwds) -> class\\n\\nInternal helper function used by the class statement.\"\n    // },\n\n    __import__: {\n        $meth(name, globals, _locals, formlist, level) {\n            if (!Sk.builtin.checkString(name)) {\n                throw new Sk.builtin.TypeError(\n                    \"__import__() argument 1 must be str, not \" + name.tp$name\n                );\n            } else if (name === Sk.builtin.str.$empty && level.v === 0) {\n                throw new Sk.builtin.ValueError(\"Empty module name\");\n            }\n            // check globals - locals is just ignored __import__\n            globals = globLocToJs(globals, \"globals\") || {};\n            formlist = Sk.ffi.remapToJs(formlist);\n            level = Sk.ffi.remapToJs(level);\n\n            return Sk.builtin.__import__(name, globals, undefined, formlist, level);\n        },\n        $flags: {\n            NamedArgs: [\"name\", \"globals\", \"locals\", \"fromlist\", \"level\"],\n            Defaults: [pyNone, pyNone, emptyTuple, pyZero],\n        },\n        $textsig: null,\n        $doc: \"__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\\n\\nImport a module. Because this function is meant for use by the Python\\ninterpreter and not for general use, it is better to use\\nimportlib.import_module() to programmatically import a module.\\n\\nThe globals argument is only used to determine the context;\\nthey are not modified.  The locals argument is unused.  The fromlist\\nshould be a list of names to emulate ``from name import ...'', or an\\nempty list to emulate ``import name''.\\nWhen importing a module from a package, note that __import__('A.B', ...)\\nreturns package A when fromlist is empty, but its submodule B when\\nfromlist is not empty.  The level argument is used to determine whether to\\nperform absolute or relative imports: 0 is absolute, while a positive number\\nis the number of parent directories to search relative to the current module.\",\n    },\n\n    abs: {\n        $meth: Sk.builtin.abs,\n        $flags: { OneArg: true },\n        $textsig: \"($module, x, /)\",\n        $doc: \"Return the absolute value of the argument.\",\n    },\n\n    all: {\n        $meth: Sk.builtin.all,\n        $flags: { OneArg: true },\n        $textsig: \"($module, iterable, /)\",\n        $doc: \"Return True if bool(x) is True for all values x in the iterable.\\n\\nIf the iterable is empty, return True.\",\n    },\n\n    any: {\n        $meth: Sk.builtin.any,\n        $flags: { OneArg: true },\n        $textsig: \"($module, iterable, /)\",\n        $doc: \"Return True if bool(x) is True for any x in the iterable.\\n\\nIf the iterable is empty, return False.\",\n    },\n\n    ascii: {\n        $meth: Sk.builtin.ascii,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return an ASCII-only representation of an object.\\n\\nAs repr(), return a string containing a printable representation of an\\nobject, but escape the non-ASCII characters in the string returned by\\nrepr() using \\\\\\\\x, \\\\\\\\u or \\\\\\\\U escapes. This generates a string similar\\nto that returned by repr() in Python 2.\",\n    },\n\n    bin: {\n        $meth: Sk.builtin.bin,\n        $flags: { OneArg: true },\n        $textsig: \"($module, number, /)\",\n        $doc: \"Return the binary representation of an integer.\\n\\n   >>> bin(2796202)\\n   '0b1010101010101010101010'\",\n    },\n\n    // breakpoint: {\n    //     $meth: Sk.builtin.breakpoint,\n    //     $flags: {},\n    //     $textsig: null,\n    //     $doc: \"breakpoint(*args, **kws)\\n\\nCall sys.breakpointhook(*args, **kws).  sys.breakpointhook() must accept\\nwhatever arguments are passed.\\n\\nBy default, this drops you into the pdb debugger.\"\n    // },\n\n    callable: {\n        $meth: Sk.builtin.callable,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return whether the object is callable (i.e., some kind of function).\\n\\nNote that classes are callable, as are instances of classes with a\\n__call__() method.\",\n    },\n\n    chr: {\n        $meth: Sk.builtin.chr,\n        $flags: { OneArg: true },\n        $textsig: \"($module, i, /)\",\n        $doc: \"Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.\",\n    },\n\n    compile: {\n        $meth: Sk.builtin.compile,\n        $flags: { MinArgs: 3, MaxArgs: 6 },\n        $textsig:\n            \"($module, /, source, filename, mode, flags=0,\\n        dont_inherit=False, optimize=-1)\",\n        $doc: \"Compile source into a code object that can be executed by exec() or eval().\\n\\nThe source code may represent a Python module, statement or expression.\\nThe filename will be used for run-time error messages.\\nThe mode must be 'exec' to compile a module, 'single' to compile a\\nsingle (interactive) statement, or 'eval' to compile an expression.\\nThe flags argument, if present, controls which future statements influence\\nthe compilation of the code.\\nThe dont_inherit argument, if true, stops the compilation inheriting\\nthe effects of any future statements in effect in the code calling\\ncompile; if absent or false these statements do influence the compilation,\\nin addition to any features explicitly specified.\",\n    },\n\n    delattr: {\n        $meth: Sk.builtin.delattr,\n        $flags: { MinArgs: 2, MaxArgs: 2 },\n        $textsig: \"($module, obj, name, /)\",\n        $doc: \"Deletes the named attribute from the given object.\\n\\ndelattr(x, 'y') is equivalent to ``del x.y''\",\n    },\n\n    dir: {\n        $meth: Sk.builtin.dir,\n        $flags: { MinArgs: 0, MaxArgs: 1 },\n        $textsig: null,\n        $doc: \"dir([object]) -> list of strings\\n\\nIf called without an argument, return the names in the current scope.\\nElse, return an alphabetized list of names comprising (some of) the attributes\\nof the given object, and of attributes reachable from it.\\nIf the object supplies a method named __dir__, it will be used; otherwise\\nthe default dir() logic is used and returns:\\n  for a module object: the module's attributes.\\n  for a class object:  its attributes, and recursively the attributes\\n    of its bases.\\n  for any other object: its attributes, its class's attributes, and\\n    recursively the attributes of its class's base classes.\",\n    },\n\n    divmod: {\n        $meth: Sk.builtin.divmod,\n        $flags: { MinArgs: 2, MaxArgs: 2 },\n        $textsig: \"($module, x, y, /)\",\n        $doc: \"Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.\",\n    },\n\n    eval_$rw$: {\n        $name: \"eval\",\n        $meth: function (source, globals, locals) {\n            // check globals\n            const tmp_globals = globLocToJs(globals, \"globals\");\n            // check locals\n            const tmp_locals = globLocToJs(locals, \"locals\");\n            return Sk.misceval.chain(Sk.builtin.eval(source, tmp_globals, tmp_locals), (res) => {\n                reassignGlobLoc(globals, tmp_globals);\n                reassignGlobLoc(locals, tmp_locals);\n                return res;\n            });\n        },\n        $flags: { MinArgs: 1, MaxArgs: 3 },\n        $textsig: \"($module, source, globals=None, locals=None, /)\",\n        $doc: \"Evaluate the given source in the context of globals and locals.\\n\\nThe source may be a string representing a Python expression\\nor a code object as returned by compile().\\nThe globals must be a dictionary and locals can be any mapping,\\ndefaulting to the current globals and locals.\\nIf only globals is given, locals defaults to it.\",\n    },\n\n    exec: {\n        $meth: function (source, globals, locals) {\n            // check globals\n            const tmp_globals = globLocToJs(globals, \"globals\");\n            // check locals\n            const tmp_locals = globLocToJs(locals, \"locals\");\n            return Sk.misceval.chain(\n                Sk.builtin.exec(source, tmp_globals, tmp_locals),\n                (new_locals) => {\n                    reassignGlobLoc(globals, tmp_globals);\n                    reassignGlobLoc(locals, tmp_locals);\n                    return Sk.builtin.none.none$;\n                }\n            );\n        },\n        $flags: { MinArgs: 1, MaxArgs: 3 },\n        $textsig: \"($module, source, globals=None, locals=None, /)\",\n        $doc: \"Execute the given source in the context of globals and locals.\\n\\nThe source may be a string representing one or more Python statements\\nor a code object as returned by compile().\\nThe globals must be a dictionary and locals can be any mapping,\\ndefaulting to the current globals and locals.\\nIf only globals is given, locals defaults to it.\",\n    },\n\n    format: {\n        $meth: Sk.builtin.format,\n        $flags: { MinArgs: 1, MaxArgs: 2 },\n        $textsig: \"($module, value, format_spec='', /)\",\n        $doc: \"Return value.__format__(format_spec)\\n\\nformat_spec defaults to the empty string.\\nSee the Format Specification Mini-Language section of help('FORMATTING') for\\ndetails.\",\n    },\n\n    getattr: {\n        $meth: Sk.builtin.getattr,\n        $flags: { MinArgs: 2, MaxArgs: 3 },\n        $textsig: null,\n        $doc: \"getattr(object, name[, default]) -> value\\n\\nGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\\nWhen a default argument is given, it is returned when the attribute doesn't\\nexist; without it, an exception is raised in that case.\",\n    },\n\n    globals: {\n        $meth: Sk.builtin.globals,\n        $flags: { NoArgs: true },\n        $textsig: \"($module, /)\",\n        $doc: \"Return the dictionary containing the current scope's global variables.\\n\\nNOTE: Updates to this dictionary *will* affect name lookups in the current\\nglobal scope and vice-versa.\",\n    },\n\n    hasattr: {\n        $meth: Sk.builtin.hasattr,\n        $flags: { MinArgs: 2, MaxArgs: 2 },\n        $textsig: \"($module, obj, name, /)\",\n        $doc: \"Return whether the object has an attribute with the given name.\\n\\nThis is done by calling getattr(obj, name) and catching AttributeError.\",\n    },\n\n    hash: {\n        $meth: Sk.builtin.hash,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return the hash value for the given object.\\n\\nTwo objects that compare equal must also have the same hash value, but the\\nreverse is not necessarily true.\",\n    },\n\n    hex: {\n        $meth: Sk.builtin.hex,\n        $flags: { OneArg: true },\n        $textsig: \"($module, number, /)\",\n        $doc: \"Return the hexadecimal representation of an integer.\\n\\n   >>> hex(12648430)\\n   '0xc0ffee'\",\n    },\n\n    id: {\n        $meth: Sk.builtin.id,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return the identity of an object.\\n\\nThis is guaranteed to be unique among simultaneously existing objects.\\n(CPython uses the object's memory address.)\",\n    },\n\n    input: {\n        $meth: Sk.builtin.input,\n        $flags: { MinArgs: 0, MaxArgs: 1 },\n        $textsig: \"($module, prompt=None, /)\",\n        $doc: \"Read a string from standard input.  The trailing newline is stripped.\\n\\nThe prompt string, if given, is printed to standard output without a\\ntrailing newline before reading input.\\n\\nIf the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.\\nOn *nix systems, readline is used if available.\",\n    },\n\n    isinstance: {\n        $meth: Sk.builtin.isinstance,\n        $flags: { MinArgs: 2, MaxArgs: 2 },\n        $textsig: \"($module, obj, class_or_tuple, /)\",\n        $doc: \"Return whether an object is an instance of a class or of a subclass thereof.\\n\\nA tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\\ncheck against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\\nor ...`` etc.\",\n    },\n\n    issubclass: {\n        $meth: Sk.builtin.issubclass,\n        $flags: { MinArgs: 2, MaxArgs: 2 },\n        $textsig: \"($module, cls, class_or_tuple, /)\",\n        $doc: \"Return whether 'cls' is a derived from another class or is the same class.\\n\\nA tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to\\ncheck against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)\\nor ...`` etc.\",\n    },\n\n    iter: {\n        $meth: Sk.builtin.iter,\n        $flags: { MinArgs: 1, MaxArgs: 2 },\n        $textsig: \"($module, iterable /)\",\n        $doc: \"iter(iterable) -> iterator\\niter(callable, sentinel) -> iterator\\n\\nGet an iterator from an object.  In the first form, the argument must\\nsupply its own iterator, or be a sequence.\\nIn the second form, the callable is called until it returns the sentinel.\",\n    },\n\n    len: {\n        $meth: Sk.builtin.len,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return the number of items in a container.\",\n    },\n\n    locals: {\n        $meth: Sk.builtin.locals,\n        $flags: { NoArgs: true },\n        $textsig: \"($module, /)\",\n        $doc: \"Return a dictionary containing the current scope's local variables.\\n\\nNOTE: Whether or not updates to this dictionary will affect name lookups in\\nthe local scope and vice-versa is *implementation dependent* and not\\ncovered by any backwards compatibility guarantees.\",\n    },\n\n    max: {\n        $meth: Sk.builtin.max,\n        $flags: { FastCall: true },\n        $textsig: null,\n        $doc: \"max(iterable, *[, default=obj, key=func]) -> value\\nmax(arg1, arg2, *args, *[, key=func]) -> value\\n\\nWith a single iterable argument, return its biggest item. The\\ndefault keyword-only argument specifies an object to return if\\nthe provided iterable is empty.\\nWith two or more arguments, return the largest argument.\",\n    },\n\n    min: {\n        $meth: Sk.builtin.min,\n        $flags: { FastCall: true },\n        $textsig: null,\n        $doc: \"min(iterable, *[, default=obj, key=func]) -> value\\nmin(arg1, arg2, *args, *[, key=func]) -> value\\n\\nWith a single iterable argument, return its smallest item. The\\ndefault keyword-only argument specifies an object to return if\\nthe provided iterable is empty.\\nWith two or more arguments, return the smallest argument.\",\n    },\n\n    next: {\n        $name: \"next\",\n        $meth: Sk.builtin.next_,\n        $flags: { MinArgs: 1, MaxArgs: 2 },\n        $textsig: null,\n        $doc: \"next(iterator[, default])\\n\\nReturn the next item from the iterator. If default is given and the iterator\\nis exhausted, it is returned instead of raising StopIteration.\",\n    },\n\n    oct: {\n        $meth: Sk.builtin.oct,\n        $flags: { OneArg: true },\n        $textsig: \"($module, number, /)\",\n        $doc: \"Return the octal representation of an integer.\\n\\n   >>> oct(342391)\\n   '0o1234567'\",\n    },\n\n    open: {\n        $meth: Sk.builtin.open,\n        $flags: {\n            MinArgs: 1,\n            MaxArgs: 8,\n            NamedArgs: [\n                \"file\",\n                \"mode\",\n                \"buffering\",\n                \"encoding\",\n                \"errors\",\n                \"newline\",\n                \"closefd\",\n                \"opener\",\n            ],\n            Defaults: [\n                new Sk.builtin.str(\"r\"),\n                new Sk.builtin.int_(-1),\n                pyNone,\n                pyNone,\n                pyNone,\n                Sk.builtin.bool.true$,\n                pyNone,\n            ],\n        },\n        // $textsig: null,\n        $textsig:\n            \"($module, /, file, mode='r', buffering=-1, encoding=None,\\n     errors=None, newline=None, closefd=True, opener=None)\",\n        // this is the python 2 documentation since we don't support the py3 version\n        $doc: \"open(name[, mode[, buffering]]) -> file object\\n\\nOpen a file using the file() type, returns a file object.  This is the\\npreferred way to open a file.  See file.__doc__ for further information.\",\n    },\n\n    ord: {\n        $meth: Sk.builtin.ord,\n        $flags: { OneArg: true },\n        $textsig: \"($module, c, /)\",\n        $doc: \"Return the Unicode code point for a one-character string.\",\n    },\n\n    pow: {\n        $meth: Sk.builtin.pow,\n        $flags: { MinArgs: 2, MaxArgs: 3 },\n        $textsig: \"($module, x, y, z=None, /)\",\n        $doc: \"Equivalent to x**y (with two arguments) or x**y % z (with three arguments)\\n\\nSome types, such as ints, are able to use a more efficient algorithm when\\ninvoked using the three argument form.\",\n    },\n\n    print: {\n        $meth: Sk.builtin.print,\n        $flags: { FastCall: true },\n        $textsig: null,\n        $doc: \"print(value, ..., sep=' ', end='\\\\n', file=sys.stdout, flush=False)\\n\\nPrints the values to a stream, or to sys.stdout by default.\\nOptional keyword arguments:\\nfile:  a file-like object (stream); defaults to the current sys.stdout.\\nsep:   string inserted between values, default a space.\\nend:   string appended after the last value, default a newline.\\nflush: whether to forcibly flush the stream.\",\n    },\n\n    repr: {\n        $meth: Sk.builtin.repr,\n        $flags: { OneArg: true },\n        $textsig: \"($module, obj, /)\",\n        $doc: \"Return the canonical string representation of the object.\\n\\nFor many object types, including most builtins, eval(repr(obj)) == obj.\",\n    },\n\n    round: {\n        $meth: Sk.builtin.round,\n        $flags: {\n            NamedArgs: [\"number\", \"ndigits\"],\n        },\n        $textsig: \"($module, /, number, ndigits=None)\",\n        $doc: \"Round a number to a given precision in decimal digits.\\n\\nThe return value is an integer if ndigits is omitted or None.  Otherwise\\nthe return value has the same type as the number.  ndigits may be negative.\",\n    },\n\n    setattr: {\n        $meth: Sk.builtin.setattr,\n        $flags: { MinArgs: 3, MaxArgs: 3 },\n        $textsig: \"($module, obj, name, value, /)\",\n        $doc: \"Sets the named attribute on the given object to the specified value.\\n\\nsetattr(x, 'y', v) is equivalent to ``x.y = v''\",\n    },\n\n    sorted: {\n        $meth: Sk.builtin.sorted,\n        $flags: {\n            NamedArgs: [null, \"cmp\", \"key\", \"reverse\"],\n            Defaults: [pyNone, pyNone, Sk.builtin.bool.false$],\n        }, // should be fast call leave for now\n        $textsig: \"($module, iterable, /, *, key=None, reverse=False)\",\n        $doc: \"Return a new list containing all items from the iterable in ascending order.\\n\\nA custom key function can be supplied to customize the sort order, and the\\nreverse flag can be set to request the result in descending order.\",\n    },\n\n    sum: {\n        $meth: Sk.builtin.sum,\n        $flags: {\n            NamedArgs: [null, \"start\"],\n            Defaults: [new Sk.builtin.int_(0)],\n        },\n        $textsig: \"($module, iterable, /, start=0)\", //changed in python 3.8 start\n        $doc: \"Return the sum of a 'start' value (default: 0) plus an iterable of numbers\\n\\nWhen the iterable is empty, return the start value.\\nThis function is intended specifically for use with numeric values and may\\nreject non-numeric types.\",\n    },\n\n    vars: {\n        $meth: Sk.builtin.vars,\n        $flags: { MinArgs: 0, MaxArgs: 1 },\n        $textsig: null,\n        $doc: \"vars([object]) -> dictionary\\n\\nWithout arguments, equivalent to locals().\\nWith an argument, equivalent to object.__dict__.\",\n    },\n});\n\n// function used for exec and eval\nfunction globLocToJs(glob_loc, name) {\n    let tmp = undefined;\n    if (glob_loc === undefined || Sk.builtin.checkNone(glob_loc)) {\n        glob_loc = undefined;\n    } else if (!(glob_loc instanceof Sk.builtin.dict)) {\n        throw new Sk.builtin.TypeError(\n            name + \" must be a dict or None, not \" + Sk.abstr.typeName(glob_loc)\n        );\n    } else {\n        tmp = {};\n        // we only support dicts here since actually we need to convert this to a hashmap for skulpts version of\n        // compiled code. Any old mapping won't do, it must be iterable!\n        glob_loc.$items().forEach(([key, val]) => {\n            if (Sk.builtin.checkString(key)) {\n                tmp[key.$mangled] = val;\n            }\n        });\n    }\n    return tmp;\n}\n\nfunction reassignGlobLoc(dict, obj) {\n    if (dict === undefined || Sk.builtin.checkNone(dict)) {\n        return;\n    }\n    for (let key in obj) {\n        // this isn't technically correct - if they use delete in the exec this breaks\n        dict.mp$ass_subscript(new Sk.builtin.str(Sk.unfixReserved(key)), obj[key]);\n    }\n}\n\nSk.setupObjects = function (py3) {\n    if (py3) {\n        Sk.builtins[\"filter\"] = Sk.builtin.filter_;\n        Sk.builtins[\"map\"] = Sk.builtin.map_;\n        Sk.builtins[\"zip\"] = Sk.builtin.zip_;\n        Sk.builtins[\"range\"] = Sk.builtin.range_;\n        delete Sk.builtins[\"reduce\"];\n        delete Sk.builtins[\"xrange\"];\n        delete Sk.builtins[\"StandardError\"];\n        delete Sk.builtins[\"unicode\"];\n        delete Sk.builtins[\"basestring\"];\n        delete Sk.builtins[\"long_$rw$\"];\n        Sk.builtin.int_.prototype.$r = function () {\n            return new Sk.builtin.str(this.v.toString());\n        };\n        delete Sk.builtin.int_.prototype.tp$str;\n        delete Sk.builtin.bool.prototype.tp$str;\n        delete Sk.builtins[\"raw_input\"];\n        delete Sk.builtins[\"unichr\"];\n        delete Sk.builtin.str.prototype.decode;\n        Sk.builtins[\"bytes\"] = Sk.builtin.bytes;\n        Sk.builtins[\"ascii\"] = new Sk.builtin.sk_method(\n            {\n                $meth: Sk.builtin.ascii,\n                $flags: { OneArg: true },\n                $textsig: \"($module, obj, /)\",\n                $doc: \"Return an ASCII-only representation of an object.\\n\\nAs repr(), return a string containing a printable representation of an\\nobject, but escape the non-ASCII characters in the string returned by\\nrepr() using \\\\\\\\x, \\\\\\\\u or \\\\\\\\U escapes. This generates a string similar\\nto that returned by repr() in Python 2.\",\n            },\n            null,\n            \"builtins\"\n        );\n    } else {\n        Sk.builtins[\"range\"] = new Sk.builtin.sk_method(\n            {\n                $meth: Sk.builtin.range,\n                $name: \"range\",\n                $flags: { MinArgs: 1, MaxArgs: 3 },\n            },\n            undefined,\n            \"builtins\"\n        );\n        Sk.builtins[\"xrange\"] = new Sk.builtin.sk_method(\n            {\n                $meth: Sk.builtin.xrange,\n                $name: \"xrange\",\n                $flags: { MinArgs: 1, MaxArgs: 3 },\n            },\n            null,\n            \"builtins\"\n        );\n        Sk.builtins[\"reduce\"] = new Sk.builtin.sk_method(\n            {\n                $meth: Sk.builtin.reduce,\n                $name: \"reduce\",\n                $flags: { MinArgs: 2, MaxArgs: 3 },\n            },\n            null,\n            \"builtins\"\n        );\n        Sk.builtins[\"filter\"] = new Sk.builtin.func(Sk.builtin.filter);\n        Sk.builtins[\"map\"] = new Sk.builtin.func(Sk.builtin.map);\n        Sk.builtins[\"zip\"] = new Sk.builtin.func(Sk.builtin.zip);\n\n        Sk.builtins[\"StandardError\"] = Sk.builtin.Exception;\n        Sk.builtins[\"unicode\"] = Sk.builtin.str;\n        Sk.builtins[\"basestring\"] = Sk.builtin.str;\n        Sk.builtins[\"long_$rw$\"] = Sk.builtin.lng;\n        Sk.builtin.int_.prototype.$r = function () {\n            const v = this.v;\n            if (typeof v === \"number\") {\n                return new Sk.builtin.str(v.toString());\n            } else {\n                return new Sk.builtin.str(v.toString() + \"L\");\n            }\n        };\n        Sk.builtin.int_.prototype.tp$str = function () {\n            return new Sk.builtin.str(this.v.toString());\n        };\n        Sk.builtin.bool.prototype.tp$str = function () {\n            return this.$r();\n        };\n        Sk.builtins[\"raw_input\"] = new Sk.builtin.func(Sk.builtin.raw_input);\n        Sk.builtins[\"unichr\"] = new Sk.builtin.func(Sk.builtin.unichr);\n        Sk.builtin.str.prototype.decode = Sk.builtin.str.$py2decode;\n        delete Sk.builtins[\"bytes\"];\n        delete Sk.builtins[\"ascii\"];\n    }\n};\n\nSk.exportSymbol(\"Sk.setupObjects\", Sk.setupObjects);\nSk.exportSymbol(\"Sk.builtins\", Sk.builtins);\n", "/* Constants used for kwargs */\n\n// String constants\nSk.builtin.str.$empty = new Sk.builtin.str(\"\");\nSk.builtin.str.$emptystr = Sk.builtin.str.$empty;\n\nSk.builtin.str.$utf8 = new Sk.builtin.str(\"utf-8\");\nSk.builtin.str.$ascii = new Sk.builtin.str(\"ascii\");\n\nSk.builtin.str.$default_factory = new Sk.builtin.str(\"default_factory\");\nSk.builtin.str.$imag = new Sk.builtin.str(\"imag\");\nSk.builtin.str.$real = new Sk.builtin.str(\"real\");\n\nSk.builtin.str.$abs = new Sk.builtin.str(\"__abs__\");\nSk.builtin.str.$bytes = new Sk.builtin.str(\"__bytes__\");\nSk.builtin.str.$call = new Sk.builtin.str(\"__call__\");\nSk.builtin.str.$class = new Sk.builtin.str(\"__class__\");\nSk.builtin.str.$class_getitem = new Sk.builtin.str(\"__class_getitem__\");\nSk.builtin.str.$cmp = new Sk.builtin.str(\"__cmp__\");\nSk.builtin.str.$complex = new Sk.builtin.str(\"__complex__\");\nSk.builtin.str.$contains = new Sk.builtin.str(\"__contains__\");\nSk.builtin.str.$copy = new Sk.builtin.str(\"__copy__\");\nSk.builtin.str.$dict = new Sk.builtin.str(\"__dict__\");\nSk.builtin.str.$dir = new Sk.builtin.str(\"__dir__\");\nSk.builtin.str.$doc = new Sk.builtin.str(\"__doc__\");\nSk.builtin.str.$enter = new Sk.builtin.str(\"__enter__\");\nSk.builtin.str.$eq = new Sk.builtin.str(\"__eq__\");\nSk.builtin.str.$exit = new Sk.builtin.str(\"__exit__\");\nSk.builtin.str.$import = new Sk.builtin.str(\"__import__\");\nSk.builtin.str.$index = new Sk.builtin.str(\"__index__\");\nSk.builtin.str.$init = new Sk.builtin.str(\"__init__\");\nSk.builtin.str.$int_ = new Sk.builtin.str(\"__int__\");\nSk.builtin.str.$iter = new Sk.builtin.str(\"__iter__\");\nSk.builtin.str.$file = new Sk.builtin.str(\"__file__\");\nSk.builtin.str.$float_ = new Sk.builtin.str(\"__float__\");\nSk.builtin.str.$format = new Sk.builtin.str(\"__format__\");\nSk.builtin.str.$ge = new Sk.builtin.str(\"__ge__\");\nSk.builtin.str.$getattr = new Sk.builtin.str(\"__getattr__\");\nSk.builtin.str.$getattribute = new Sk.builtin.str(\"__getattribute__\");\nSk.builtin.str.$getitem = new Sk.builtin.str(\"__getitem__\");\nSk.builtin.str.$gt = new Sk.builtin.str(\"__gt__\");\nSk.builtin.str.$keys = new Sk.builtin.str(\"keys\");\nSk.builtin.str.$le = new Sk.builtin.str(\"__le__\");\nSk.builtin.str.$len = new Sk.builtin.str(\"__len__\");\nSk.builtin.str.$length_hint = new Sk.builtin.str(\"__length_hint__\");\nSk.builtin.str.$loader = new Sk.builtin.str(\"__loader__\");\nSk.builtin.str.$lt = new Sk.builtin.str(\"__lt__\");\nSk.builtin.str.$module = new Sk.builtin.str(\"__module__\");\nSk.builtin.str.$missing = new Sk.builtin.str(\"__missing__\");\nSk.builtin.str.$name = new Sk.builtin.str(\"__name__\");\nSk.builtin.str.$ne = new Sk.builtin.str(\"__ne__\");\nSk.builtin.str.$new = new Sk.builtin.str(\"__new__\");\nSk.builtin.str.$next = new Sk.builtin.str(\"__next__\");\nSk.builtin.str.$path = new Sk.builtin.str(\"__path__\");\nSk.builtin.str.$package = new Sk.builtin.str(\"__package__\");\nSk.builtin.str.$qualname = new Sk.builtin.str(\"__qualname__\");\nSk.builtin.str.$repr = new Sk.builtin.str(\"__repr__\");\nSk.builtin.str.$reversed = new Sk.builtin.str(\"__reversed__\");\nSk.builtin.str.$round = new Sk.builtin.str(\"__round__\");\nSk.builtin.str.$setattr = new Sk.builtin.str(\"__setattr__\");\nSk.builtin.str.$setitem = new Sk.builtin.str(\"__setitem__\");\nSk.builtin.str.$str = new Sk.builtin.str(\"__str__\");\nSk.builtin.str.$trunc = new Sk.builtin.str(\"__trunc__\");\nSk.builtin.str.$write = new Sk.builtin.str(\"write\");\nSk.builtin.str.$sys = new Sk.builtin.str(\"sys\");\n\nSk.misceval.op2method_ = {\n    Eq: Sk.builtin.str.$eq,\n    NotEq: Sk.builtin.str.$ne,\n    Gt: Sk.builtin.str.$gt,\n    GtE: Sk.builtin.str.$ge,\n    Lt: Sk.builtin.str.$lt,\n    LtE: Sk.builtin.str.$le,\n};\n", "Sk.internalPy={\"files\":{\"src/classmethod.py\":\"class classmethod(object):\\n    \\\"Emulate PyClassMethod_Type() in Objects/funcobject.c\\\"\\n\\n    def __init__(self, f):\\n        self.f = f\\n\\n    def __get__(self, obj, klass=None):\\n        if klass is None:\\n            klass = type(obj)\\n\\n        def newfunc(*args):\\n            return self.f(klass, *args)\\n\\n        return newfunc\\n\",\"src/property.py\":\"class property(object):\\n    \\\"Emulate PyProperty_Type() in Objects/descrobject.c\\\"\\n\\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\\n        self.fget = fget\\n        self.fset = fset\\n        self.fdel = fdel\\n        if doc is None and fget is not None:\\n            if hasattr(fget, '__doc__'):\\n                doc = fget.__doc__\\n            else:\\n                doc = None\\n        self.__doc__ = doc\\n\\n    def __get__(self, obj, objtype=None):\\n        if obj is None:\\n            return self\\n        if self.fget is None:\\n            raise AttributeError(\\\"unreadable attribute\\\")\\n        return self.fget(obj)\\n\\n    def __set__(self, obj, value):\\n        if self.fset is None:\\n            raise AttributeError(\\\"can't set attribute\\\")\\n        self.fset(obj, value)\\n\\n    def __delete__(self, obj):\\n        if self.fdel is None:\\n            raise AttributeError(\\\"can't delete attribute\\\")\\n        self.fdel(obj)\\n\\n    def getter(self, fget):\\n        return type(self)(fget, self.fset, self.fdel, self.__doc__)\\n\\n    def setter(self, fset):\\n        return type(self)(self.fget, fset, self.fdel, self.__doc__)\\n\\n    def deleter(self, fdel):\\n        return type(self)(self.fget, self.fset, fdel, self.__doc__)\\n\",\"src/staticmethod.py\":\"class staticmethod(object):\\n    \\\"Emulate PyStaticMethod_Type() in Objects/funcobject.c\\\"\\n\\n    def __init__(self, f):\\n        self.f = f\\n\\n    def __get__(self, obj, objtype=None):\\n        return self.f\\n\"}}", "/* jshint ignore:start */\n\n// This file list is only used for testing.\n// It should be kept in sync with ../skulpt.py.\n// Order is important!\n\nrequire(\"./util.js\");\n\n// Global support functions\nSk.global[\"strftime\"] = require(\"strftime\");\nrequire(\"../support/polyfills/JSBI\");\nrequire(\"../support/polyfills/es6\");\nrequire(\"setimmediate\");\n\n// Skulpt\nrequire(\"assert\");\nrequire(\"./env.js\");\nrequire(\"./type.js\");\nrequire(\"./generic.js\");\nrequire(\"./check.js\");\nrequire(\"./abstract.js\");\nrequire(\"./object.js\");\nrequire(\"./slotdefs.js\");\nrequire(\"./descr.js\");\n// can only setUpMethods / setUpGetsets / setUpSlots from now.\nrequire(\"./sk_method.js\");\n// can only do setUpSlots with tp$new from now since __new__ is a sk_method\n[Sk.builtin.object, Sk.builtin.type].forEach((cls) => {\n    Sk.abstr.setUpSlots(cls);\n    Sk.abstr.setUpMethods(cls);\n    Sk.abstr.setUpGetSets(cls);\n});\nrequire(\"./nonetype\");\nrequire(\"./formatting.js\");\nrequire(\"./str.js\");\n\n[Sk.builtin.str, Sk.builtin.none, Sk.builtin.NotImplemented, Sk.builtin.object].forEach((cls) => {\n    const cls_proto = cls.prototype;\n    cls_proto.__doc__ = cls_proto.hasOwnProperty(\"tp$doc\")\n        ? new Sk.builtin.str(cls_proto.tp$doc)\n        : Sk.builtin.none.none$;\n});\n\nrequire(\"./function.js\");\nrequire(\"./builtin.js\");\nrequire(\"./errors.js\");\nrequire(\"./method.js\");\nrequire(\"./misceval.js\");\nrequire(\"./simple_iterators.js\");\nrequire(\"./list.js\");\nrequire(\"./str.js\");\nrequire(\"./formatting.js\");\nrequire(\"./bytes.js\");\nrequire(\"./tuple.js\");\nrequire(\"./dict.js\");\nrequire(\"./dictviews.js\");\nrequire(\"./mappingproxy.js\");\nrequire(\"./property_class_static.js\");\nrequire(\"./int.js\");\nrequire(\"./bool.js\");\nrequire(\"./float.js\");\nrequire(\"./complex.js\");\nrequire(\"./slice.js\");\nrequire(\"./set.js\");\nrequire(\"./print.js\");\nrequire(\"./module.js\");\nrequire(\"./structseq.js\");\nrequire(\"./generator.js\");\nrequire(\"./file.js\");\nrequire(\"./ffi.js\");\nrequire(\"./range.js\");\nrequire(\"./enumerate.js\");\nrequire(\"./filter.js\");\nrequire(\"./map.js\");\nrequire(\"./reversed.js\");\nrequire(\"./zip.js\");\nrequire(\"./token.js\");\nrequire(\"./tokenize.js\");\nrequire(\"../gen/parse_tables.js\");\nrequire(\"./parser.js\");\nrequire(\"../gen/astnodes.js\");\nrequire(\"./ast.js\");\nrequire(\"./symtable.js\");\nrequire(\"./compile.js\");\nrequire(\"./import.js\");\nrequire(\"./timsort.js\");\nrequire(\"./super.js\");\nrequire(\"./generic_alias.js\");\nrequire(\"./builtindict.js\");\nrequire(\"./constants.js\");\nrequire(\"./internalpython.js\");\n\n/* jshint ignore:end */\n"],
  "mappings": "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I,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,GAAG,KAAK;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,GAAG,IAAI;AAAA,UACR,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,GAAG,IAAI;AAAA,UACR,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,KAAK,IAAI;AAAA,UACV,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,IAAI,IAAI;AAAA,UACT,CAAC,GAAG,IAAI;AAAA,UACR,CAAC,IAA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",
  "names": ["Sk", "locale", "customTimezoneOffset", "t", "e", "_", "n", "i", "g", "l", "a", "s", "u", "o", "r", "d", "h", "b", "m", "c", "v", "f", "JSBI", "global", "undefined", "nargs", "module", "self", "self", "res", "pyObject", "slots", "self", "self", "module", "interned", "tabsize", "isidentifier", "self", "base", "r", "str_iter_", "i", "any", "sumType", "dir", "iter", "item", "BaseException", "pyExc", "ReferenceError", "SyntaxError", "IndentationError", "TypeError", "self", "r", "list_iter_", "reverselist_iter_", "source", "tabsize", "bytes_iter_", "tuple_iter_", "self", "self", "set_iter_", "ret", "module", "self", "ret", "self", "range_iter_", "i", "tokens", "input", "Lt", "module", "Set", "Name", "c", "n", "nfors", "nifs", "s", "quote", "node", "global", "self", "val", "i", "module", "result", "codeAndPath", "co", "global", "self", "a", "module"]
}
